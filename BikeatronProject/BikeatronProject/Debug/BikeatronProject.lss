
BikeatronProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800200  0000254a  000025fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000254a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a4  00800258  00800258  00002656  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  00002656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000265a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000268c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000350  00000000  00000000  000026d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000049d4  00000000  00000000  00002a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001e00  00000000  00000000  000073f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000200c  00000000  00000000  000091f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000690  00000000  00000000  0000b200  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000012ab  00000000  00000000  0000b890  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000178b  00000000  00000000  0000cb3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000268  00000000  00000000  0000e2c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	db c2       	rjmp	.+1462   	; 0x5b8 <__ctors_end>
       2:	00 00       	nop
       4:	f9 c2       	rjmp	.+1522   	; 0x5f8 <__bad_interrupt>
       6:	00 00       	nop
       8:	f7 c2       	rjmp	.+1518   	; 0x5f8 <__bad_interrupt>
       a:	00 00       	nop
       c:	f5 c2       	rjmp	.+1514   	; 0x5f8 <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__vector_4>
      14:	f1 c2       	rjmp	.+1506   	; 0x5f8 <__bad_interrupt>
      16:	00 00       	nop
      18:	ef c2       	rjmp	.+1502   	; 0x5f8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ed c2       	rjmp	.+1498   	; 0x5f8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	eb c2       	rjmp	.+1494   	; 0x5f8 <__bad_interrupt>
      22:	00 00       	nop
      24:	e9 c2       	rjmp	.+1490   	; 0x5f8 <__bad_interrupt>
      26:	00 00       	nop
      28:	e7 c2       	rjmp	.+1486   	; 0x5f8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e5 c2       	rjmp	.+1482   	; 0x5f8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e3 c2       	rjmp	.+1478   	; 0x5f8 <__bad_interrupt>
      32:	00 00       	nop
      34:	e1 c2       	rjmp	.+1474   	; 0x5f8 <__bad_interrupt>
      36:	00 00       	nop
      38:	df c2       	rjmp	.+1470   	; 0x5f8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__vector_15>
      40:	db c2       	rjmp	.+1462   	; 0x5f8 <__bad_interrupt>
      42:	00 00       	nop
      44:	d9 c2       	rjmp	.+1458   	; 0x5f8 <__bad_interrupt>
      46:	00 00       	nop
      48:	d7 c2       	rjmp	.+1454   	; 0x5f8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d5 c2       	rjmp	.+1450   	; 0x5f8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d3 c2       	rjmp	.+1446   	; 0x5f8 <__bad_interrupt>
      52:	00 00       	nop
      54:	d1 c2       	rjmp	.+1442   	; 0x5f8 <__bad_interrupt>
      56:	00 00       	nop
      58:	cf c2       	rjmp	.+1438   	; 0x5f8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	cd c2       	rjmp	.+1434   	; 0x5f8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	cb c2       	rjmp	.+1430   	; 0x5f8 <__bad_interrupt>
      62:	00 00       	nop
      64:	c9 c2       	rjmp	.+1426   	; 0x5f8 <__bad_interrupt>
      66:	00 00       	nop
      68:	c7 c2       	rjmp	.+1422   	; 0x5f8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c5 c2       	rjmp	.+1418   	; 0x5f8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c3 c2       	rjmp	.+1414   	; 0x5f8 <__bad_interrupt>
      72:	00 00       	nop
      74:	c1 c2       	rjmp	.+1410   	; 0x5f8 <__bad_interrupt>
      76:	00 00       	nop
      78:	bf c2       	rjmp	.+1406   	; 0x5f8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	bd c2       	rjmp	.+1402   	; 0x5f8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	bb c2       	rjmp	.+1398   	; 0x5f8 <__bad_interrupt>
      82:	00 00       	nop
      84:	b9 c2       	rjmp	.+1394   	; 0x5f8 <__bad_interrupt>
      86:	00 00       	nop
      88:	b7 c2       	rjmp	.+1390   	; 0x5f8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b5 c2       	rjmp	.+1386   	; 0x5f8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b3 c2       	rjmp	.+1382   	; 0x5f8 <__bad_interrupt>
      92:	00 00       	nop
      94:	b1 c2       	rjmp	.+1378   	; 0x5f8 <__bad_interrupt>
      96:	00 00       	nop
      98:	af c2       	rjmp	.+1374   	; 0x5f8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ad c2       	rjmp	.+1370   	; 0x5f8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ab c2       	rjmp	.+1366   	; 0x5f8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	a9 c2       	rjmp	.+1362   	; 0x5f8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	a7 c2       	rjmp	.+1358   	; 0x5f8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	a5 c2       	rjmp	.+1354   	; 0x5f8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	a3 c2       	rjmp	.+1350   	; 0x5f8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	a1 c2       	rjmp	.+1346   	; 0x5f8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	9f c2       	rjmp	.+1342   	; 0x5f8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	9d c2       	rjmp	.+1338   	; 0x5f8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	9b c2       	rjmp	.+1334   	; 0x5f8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	99 c2       	rjmp	.+1330   	; 0x5f8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	97 c2       	rjmp	.+1326   	; 0x5f8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	95 c2       	rjmp	.+1322   	; 0x5f8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	93 c2       	rjmp	.+1318   	; 0x5f8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	91 c2       	rjmp	.+1314   	; 0x5f8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	8f c2       	rjmp	.+1310   	; 0x5f8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	8d c2       	rjmp	.+1306   	; 0x5f8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	8b c2       	rjmp	.+1302   	; 0x5f8 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
	...
      f0:	00 00       	nop
      f2:	00 18       	sub	r0, r0
      f4:	18 00       	.word	0x0018	; ????
      f6:	00 18       	sub	r0, r0
      f8:	18 18       	sub	r1, r8
      fa:	18 18       	sub	r1, r8
      fc:	18 18       	sub	r1, r8
	...
     106:	00 36       	cpi	r16, 0x60	; 96
     108:	36 36       	cpi	r19, 0x66	; 102
     10a:	36 00       	.word	0x0036	; ????
     10c:	00 00       	nop
     10e:	66 66       	ori	r22, 0x66	; 102
     110:	ff 66       	ori	r31, 0x6F	; 111
     112:	66 ff       	sbrs	r22, 6
     114:	66 66       	ori	r22, 0x66	; 102
     116:	00 00       	nop
     118:	00 00       	nop
     11a:	18 7e       	andi	r17, 0xE8	; 232
     11c:	ff 1b       	sub	r31, r31
     11e:	1f 7e       	andi	r17, 0xEF	; 239
     120:	f8 d8       	rcall	.-3600   	; 0xfffff312 <__eeprom_end+0xff7ef30e>
     122:	ff 7e       	andi	r31, 0xEF	; 239
     124:	18 00       	.word	0x0018	; ????
     126:	00 0e       	add	r0, r16
     128:	1b db       	rcall	.-2506   	; 0xfffff760 <__eeprom_end+0xff7ef75c>
     12a:	6e 30       	cpi	r22, 0x0E	; 14
     12c:	18 0c       	add	r1, r8
     12e:	76 db       	rcall	.-2324   	; 0xfffff81c <__eeprom_end+0xff7ef818>
     130:	d8 70       	andi	r29, 0x08	; 8
     132:	00 00       	nop
     134:	7f c6       	rjmp	.+3326   	; 0xe34 <setColumnAddress+0x26>
     136:	cf d8       	rcall	.-3682   	; 0xfffff2d6 <__eeprom_end+0xff7ef2d2>
     138:	70 70       	andi	r23, 0x00	; 0
     13a:	d8 cc       	rjmp	.-1616   	; 0xfffffaec <__eeprom_end+0xff7efae8>
     13c:	cc 6c       	ori	r28, 0xCC	; 204
     13e:	38 00       	.word	0x0038	; ????
	...
     148:	18 1c       	adc	r1, r8
     14a:	0c 0e       	add	r0, r28
     14c:	00 00       	nop
     14e:	0c 18       	sub	r0, r12
     150:	30 30       	cpi	r19, 0x00	; 0
     152:	30 30       	cpi	r19, 0x00	; 0
     154:	30 30       	cpi	r19, 0x00	; 0
     156:	30 18       	sub	r3, r0
     158:	0c 00       	.word	0x000c	; ????
     15a:	00 30       	cpi	r16, 0x00	; 0
     15c:	18 0c       	add	r1, r8
     15e:	0c 0c       	add	r0, r12
     160:	0c 0c       	add	r0, r12
     162:	0c 0c       	add	r0, r12
     164:	18 30       	cpi	r17, 0x08	; 8
     166:	00 00       	nop
     168:	00 00       	nop
     16a:	99 5a       	subi	r25, 0xA9	; 169
     16c:	3c ff       	.word	0xff3c	; ????
     16e:	3c 5a       	subi	r19, 0xAC	; 172
     170:	99 00       	.word	0x0099	; ????
     172:	00 00       	nop
     174:	00 00       	nop
     176:	18 18       	sub	r1, r8
     178:	18 ff       	.word	0xff18	; ????
     17a:	ff 18       	sub	r15, r15
     17c:	18 18       	sub	r1, r8
     17e:	00 00       	nop
     180:	00 00       	nop
     182:	30 18       	sub	r3, r0
     184:	1c 1c       	adc	r1, r12
	...
     192:	00 ff       	sbrs	r16, 0
     194:	ff 00       	.word	0x00ff	; ????
     196:	00 00       	nop
     198:	00 00       	nop
     19a:	00 00       	nop
     19c:	00 38       	cpi	r16, 0x80	; 128
     19e:	38 00       	.word	0x0038	; ????
	...
     1a8:	60 60       	ori	r22, 0x00	; 0
     1aa:	30 30       	cpi	r19, 0x00	; 0
     1ac:	18 18       	sub	r1, r8
     1ae:	0c 0c       	add	r0, r12
     1b0:	06 06       	cpc	r0, r22
     1b2:	03 03       	mulsu	r16, r19
     1b4:	00 00       	nop
     1b6:	3c 66       	ori	r19, 0x6C	; 108
     1b8:	c3 e3       	ldi	r28, 0x33	; 51
     1ba:	f3 db       	rcall	.-2074   	; 0xfffff9a2 <__eeprom_end+0xff7ef99e>
     1bc:	cf c7       	rjmp	.+3998   	; 0x115c <lcdDriver_getDriver+0x1a>
     1be:	c3 66       	ori	r28, 0x63	; 99
     1c0:	3c 00       	.word	0x003c	; ????
     1c2:	00 7e       	andi	r16, 0xE0	; 224
     1c4:	18 18       	sub	r1, r8
     1c6:	18 18       	sub	r1, r8
     1c8:	18 18       	sub	r1, r8
     1ca:	18 78       	andi	r17, 0x88	; 136
     1cc:	38 18       	sub	r3, r8
     1ce:	00 00       	nop
     1d0:	ff c0       	rjmp	.+510    	; 0x3d0 <__trampolines_end+0x2ec>
     1d2:	c0 60       	ori	r28, 0x00	; 0
     1d4:	30 18       	sub	r3, r0
     1d6:	0c 06       	cpc	r0, r28
     1d8:	03 e7       	ldi	r16, 0x73	; 115
     1da:	7e 00       	.word	0x007e	; ????
     1dc:	00 7e       	andi	r16, 0xE0	; 224
     1de:	e7 03       	fmuls	r22, r23
     1e0:	03 07       	cpc	r16, r19
     1e2:	7e 07       	cpc	r23, r30
     1e4:	03 03       	mulsu	r16, r19
     1e6:	e7 7e       	andi	r30, 0xE7	; 231
     1e8:	00 00       	nop
     1ea:	0c 0c       	add	r0, r12
     1ec:	0c 0c       	add	r0, r12
     1ee:	0c ff       	.word	0xff0c	; ????
     1f0:	cc 6c       	ori	r28, 0xCC	; 204
     1f2:	3c 1c       	adc	r3, r12
     1f4:	0c 00       	.word	0x000c	; ????
     1f6:	00 7e       	andi	r16, 0xE0	; 224
     1f8:	e7 03       	fmuls	r22, r23
     1fa:	03 07       	cpc	r16, r19
     1fc:	fe c0       	rjmp	.+508    	; 0x3fa <__trampolines_end+0x316>
     1fe:	c0 c0       	rjmp	.+384    	; 0x380 <__trampolines_end+0x29c>
     200:	c0 ff       	sbrs	r28, 0
     202:	00 00       	nop
     204:	7e e7       	ldi	r23, 0x7E	; 126
     206:	c3 c3       	rjmp	.+1926   	; 0x98e <setFrontlight+0xc>
     208:	c7 fe       	sbrs	r12, 7
     20a:	c0 c0       	rjmp	.+384    	; 0x38c <__trampolines_end+0x2a8>
     20c:	c0 e7       	ldi	r28, 0x70	; 112
     20e:	7e 00       	.word	0x007e	; ????
     210:	00 30       	cpi	r16, 0x00	; 0
     212:	30 30       	cpi	r19, 0x00	; 0
     214:	30 18       	sub	r3, r0
     216:	0c 06       	cpc	r0, r28
     218:	03 03       	mulsu	r16, r19
     21a:	03 ff       	sbrs	r16, 3
     21c:	00 00       	nop
     21e:	7e e7       	ldi	r23, 0x7E	; 126
     220:	c3 c3       	rjmp	.+1926   	; 0x9a8 <setBacklight+0x4>
     222:	e7 7e       	andi	r30, 0xE7	; 231
     224:	e7 c3       	rjmp	.+1998   	; 0x9f4 <s_getLightStatus>
     226:	c3 e7       	ldi	r28, 0x73	; 115
     228:	7e 00       	.word	0x007e	; ????
     22a:	00 7e       	andi	r16, 0xE0	; 224
     22c:	e7 03       	fmuls	r22, r23
     22e:	03 03       	mulsu	r16, r19
     230:	7f e7       	ldi	r23, 0x7F	; 127
     232:	c3 c3       	rjmp	.+1926   	; 0x9ba <setBacklight+0x16>
     234:	e7 7e       	andi	r30, 0xE7	; 231
     236:	00 00       	nop
     238:	00 38       	cpi	r16, 0x80	; 128
     23a:	38 00       	.word	0x0038	; ????
     23c:	00 38       	cpi	r16, 0x80	; 128
     23e:	38 00       	.word	0x0038	; ????
     240:	00 00       	nop
     242:	00 00       	nop
     244:	00 30       	cpi	r16, 0x00	; 0
     246:	18 1c       	adc	r1, r8
     248:	1c 00       	.word	0x001c	; ????
     24a:	00 1c       	adc	r0, r0
     24c:	1c 00       	.word	0x001c	; ????
     24e:	00 00       	nop
     250:	00 00       	nop
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 c0       	rjmp	.+192    	; 0x318 <__trampolines_end+0x234>
     258:	60 30       	cpi	r22, 0x00	; 0
     25a:	18 0c       	add	r1, r8
     25c:	06 00       	.word	0x0006	; ????
     25e:	00 00       	nop
     260:	00 ff       	sbrs	r16, 0
     262:	ff 00       	.word	0x00ff	; ????
     264:	ff ff       	.word	0xffff	; ????
     266:	00 00       	nop
     268:	00 00       	nop
     26a:	00 00       	nop
     26c:	60 30       	cpi	r22, 0x00	; 0
     26e:	18 0c       	add	r1, r8
     270:	06 03       	mulsu	r16, r22
     272:	06 0c       	add	r0, r6
     274:	18 30       	cpi	r17, 0x08	; 8
     276:	60 00       	.word	0x0060	; ????
     278:	00 18       	sub	r0, r0
     27a:	00 00       	nop
     27c:	18 18       	sub	r1, r8
     27e:	0c 06       	cpc	r0, r28
     280:	03 c3       	rjmp	.+1542   	; 0x888 <s_selectMode+0x24>
     282:	c3 7e       	andi	r28, 0xE3	; 227
     284:	00 00       	nop
     286:	3f 60       	ori	r19, 0x0F	; 15
     288:	cf db       	rcall	.-2146   	; 0xfffffa28 <__eeprom_end+0xff7efa24>
     28a:	d3 dd       	rcall	.-1114   	; 0xfffffe32 <__eeprom_end+0xff7efe2e>
     28c:	c3 7e       	andi	r28, 0xE3	; 227
     28e:	00 00       	nop
     290:	00 00       	nop
     292:	00 c3       	rjmp	.+1536   	; 0x894 <s_selectMode+0x30>
     294:	c3 c3       	rjmp	.+1926   	; 0xa1c <s_getLightStatus+0x28>
     296:	c3 ff       	sbrs	r28, 3
     298:	c3 c3       	rjmp	.+1926   	; 0xa20 <get_lightSensor_interface+0x2>
     29a:	c3 66       	ori	r28, 0x63	; 99
     29c:	3c 18       	sub	r3, r12
     29e:	00 00       	nop
     2a0:	fe c7       	rjmp	.+4092   	; 0x129e <updateMilestoneCount+0x16>
     2a2:	c3 c3       	rjmp	.+1926   	; 0xa2a <get_lightSensor_interface+0xc>
     2a4:	c7 fe       	sbrs	r12, 7
     2a6:	c7 c3       	rjmp	.+1934   	; 0xa36 <get_lightSensor_interface+0x18>
     2a8:	c3 c7       	rjmp	.+3974   	; 0x1230 <rgb3byteToInt+0x18>
     2aa:	fe 00       	.word	0x00fe	; ????
     2ac:	00 7e       	andi	r16, 0xE0	; 224
     2ae:	e7 c0       	rjmp	.+462    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     2b0:	c0 c0       	rjmp	.+384    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     2b2:	c0 c0       	rjmp	.+384    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     2b4:	c0 c0       	rjmp	.+384    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     2b6:	e7 7e       	andi	r30, 0xE7	; 231
     2b8:	00 00       	nop
     2ba:	fc ce       	rjmp	.-520    	; 0xb4 <__SREG__+0x75>
     2bc:	c7 c3       	rjmp	.+1934   	; 0xa4c <get_lightSensor_interface+0x2e>
     2be:	c3 c3       	rjmp	.+1926   	; 0xa46 <get_lightSensor_interface+0x28>
     2c0:	c3 c3       	rjmp	.+1926   	; 0xa48 <get_lightSensor_interface+0x2a>
     2c2:	c7 ce       	rjmp	.-626    	; 0x52 <__SREG__+0x13>
     2c4:	fc 00       	.word	0x00fc	; ????
     2c6:	00 ff       	sbrs	r16, 0
     2c8:	c0 c0       	rjmp	.+384    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     2ca:	c0 c0       	rjmp	.+384    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     2cc:	fc c0       	rjmp	.+504    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     2ce:	c0 c0       	rjmp	.+384    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     2d0:	c0 ff       	sbrs	r28, 0
     2d2:	00 00       	nop
     2d4:	c0 c0       	rjmp	.+384    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     2d6:	c0 c0       	rjmp	.+384    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     2d8:	c0 c0       	rjmp	.+384    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     2da:	fc c0       	rjmp	.+504    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     2dc:	c0 c0       	rjmp	.+384    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     2de:	ff 00       	.word	0x00ff	; ????
     2e0:	00 7e       	andi	r16, 0xE0	; 224
     2e2:	e7 c3       	rjmp	.+1998   	; 0xab2 <ds1307_getDateAndTime+0x62>
     2e4:	c3 cf       	rjmp	.-122    	; 0x26c <__trampolines_end+0x188>
     2e6:	c0 c0       	rjmp	.+384    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     2e8:	c0 c0       	rjmp	.+384    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     2ea:	e7 7e       	andi	r30, 0xE7	; 231
     2ec:	00 00       	nop
     2ee:	c3 c3       	rjmp	.+1926   	; 0xa76 <ds1307_getDateAndTime+0x26>
     2f0:	c3 c3       	rjmp	.+1926   	; 0xa78 <ds1307_getDateAndTime+0x28>
     2f2:	c3 ff       	sbrs	r28, 3
     2f4:	c3 c3       	rjmp	.+1926   	; 0xa7c <ds1307_getDateAndTime+0x2c>
     2f6:	c3 c3       	rjmp	.+1926   	; 0xa7e <ds1307_getDateAndTime+0x2e>
     2f8:	c3 00       	.word	0x00c3	; ????
     2fa:	00 7e       	andi	r16, 0xE0	; 224
     2fc:	18 18       	sub	r1, r8
     2fe:	18 18       	sub	r1, r8
     300:	18 18       	sub	r1, r8
     302:	18 18       	sub	r1, r8
     304:	18 7e       	andi	r17, 0xE8	; 232
     306:	00 00       	nop
     308:	7c ee       	ldi	r23, 0xEC	; 236
     30a:	c6 06       	cpc	r12, r22
     30c:	06 06       	cpc	r0, r22
     30e:	06 06       	cpc	r0, r22
     310:	06 06       	cpc	r0, r22
     312:	06 00       	.word	0x0006	; ????
     314:	00 c3       	rjmp	.+1536   	; 0x916 <get_i2c_interface+0x1a>
     316:	c6 cc       	rjmp	.-1652   	; 0xfffffca4 <__eeprom_end+0xff7efca0>
     318:	d8 f0       	brcs	.+54     	; 0x350 <__trampolines_end+0x26c>
     31a:	e0 f0       	brcs	.+56     	; 0x354 <__trampolines_end+0x270>
     31c:	d8 cc       	rjmp	.-1616   	; 0xfffffcce <__eeprom_end+0xff7efcca>
     31e:	c6 c3       	rjmp	.+1932   	; 0xaac <ds1307_getDateAndTime+0x5c>
     320:	00 00       	nop
     322:	ff c0       	rjmp	.+510    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     324:	c0 c0       	rjmp	.+384    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     326:	c0 c0       	rjmp	.+384    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     328:	c0 c0       	rjmp	.+384    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     32a:	c0 c0       	rjmp	.+384    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     32c:	c0 00       	.word	0x00c0	; ????
     32e:	00 c3       	rjmp	.+1536   	; 0x930 <get_i2c_interface+0x34>
     330:	c3 c3       	rjmp	.+1926   	; 0xab8 <ds1307_getDateAndTime+0x68>
     332:	c3 c3       	rjmp	.+1926   	; 0xaba <ds1307_getDateAndTime+0x6a>
     334:	c3 db       	rcall	.-2170   	; 0xfffffabc <__eeprom_end+0xff7efab8>
     336:	ff ff       	.word	0xffff	; ????
     338:	e7 c3       	rjmp	.+1998   	; 0xb08 <ds1307_getDateAndTime+0xb8>
     33a:	00 00       	nop
     33c:	c7 c7       	rjmp	.+3982   	; 0x12cc <updateRevolutionCount+0x1c>
     33e:	cf cf       	rjmp	.-98     	; 0x2de <__trampolines_end+0x1fa>
     340:	df db       	rcall	.-2114   	; 0xfffffb00 <__eeprom_end+0xff7efafc>
     342:	fb f3       	brvs	.-2      	; 0x342 <__trampolines_end+0x25e>
     344:	f3 e3       	ldi	r31, 0x33	; 51
     346:	e3 00       	.word	0x00e3	; ????
     348:	00 7e       	andi	r16, 0xE0	; 224
     34a:	e7 c3       	rjmp	.+1998   	; 0xb1a <ds1307_getDateAndTime+0xca>
     34c:	c3 c3       	rjmp	.+1926   	; 0xad4 <ds1307_getDateAndTime+0x84>
     34e:	c3 c3       	rjmp	.+1926   	; 0xad6 <ds1307_getDateAndTime+0x86>
     350:	c3 c3       	rjmp	.+1926   	; 0xad8 <ds1307_getDateAndTime+0x88>
     352:	e7 7e       	andi	r30, 0xE7	; 231
     354:	00 00       	nop
     356:	c0 c0       	rjmp	.+384    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     358:	c0 c0       	rjmp	.+384    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     35a:	c0 fe       	sbrs	r12, 0
     35c:	c7 c3       	rjmp	.+1934   	; 0xaec <ds1307_getDateAndTime+0x9c>
     35e:	c3 c7       	rjmp	.+3974   	; 0x12e6 <getSpeedKMH+0xe>
     360:	fe 00       	.word	0x00fe	; ????
     362:	00 3f       	cpi	r16, 0xF0	; 240
     364:	6e df       	rcall	.-292    	; 0x242 <__trampolines_end+0x15e>
     366:	db c3       	rjmp	.+1974   	; 0xb1e <ds1307_getDateAndTime+0xce>
     368:	c3 c3       	rjmp	.+1926   	; 0xaf0 <ds1307_getDateAndTime+0xa0>
     36a:	c3 c3       	rjmp	.+1926   	; 0xaf2 <ds1307_getDateAndTime+0xa2>
     36c:	66 3c       	cpi	r22, 0xC6	; 198
     36e:	00 00       	nop
     370:	c3 c6       	rjmp	.+3462   	; 0x10f8 <printFloat+0x3a>
     372:	cc d8       	rcall	.-3688   	; 0xfffff50c <__eeprom_end+0xff7ef508>
     374:	f0 fe       	sbrs	r15, 0
     376:	c7 c3       	rjmp	.+1934   	; 0xb06 <ds1307_getDateAndTime+0xb6>
     378:	c3 c7       	rjmp	.+3974   	; 0x1300 <getSpeedKMH+0x28>
     37a:	fe 00       	.word	0x00fe	; ????
     37c:	00 7e       	andi	r16, 0xE0	; 224
     37e:	e7 03       	fmuls	r22, r23
     380:	03 07       	cpc	r16, r19
     382:	7e e0       	ldi	r23, 0x0E	; 14
     384:	c0 c0       	rjmp	.+384    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
     386:	e7 7e       	andi	r30, 0xE7	; 231
     388:	00 00       	nop
     38a:	18 18       	sub	r1, r8
     38c:	18 18       	sub	r1, r8
     38e:	18 18       	sub	r1, r8
     390:	18 18       	sub	r1, r8
     392:	18 18       	sub	r1, r8
     394:	ff 00       	.word	0x00ff	; ????
     396:	00 7e       	andi	r16, 0xE0	; 224
     398:	e7 c3       	rjmp	.+1998   	; 0xb68 <ds1307_getDateAndTime+0x118>
     39a:	c3 c3       	rjmp	.+1926   	; 0xb22 <ds1307_getDateAndTime+0xd2>
     39c:	c3 c3       	rjmp	.+1926   	; 0xb24 <ds1307_getDateAndTime+0xd4>
     39e:	c3 c3       	rjmp	.+1926   	; 0xb26 <ds1307_getDateAndTime+0xd6>
     3a0:	c3 c3       	rjmp	.+1926   	; 0xb28 <ds1307_getDateAndTime+0xd8>
     3a2:	00 00       	nop
     3a4:	18 3c       	cpi	r17, 0xC8	; 200
     3a6:	3c 66       	ori	r19, 0x6C	; 108
     3a8:	66 c3       	rjmp	.+1740   	; 0xa76 <ds1307_getDateAndTime+0x26>
     3aa:	c3 c3       	rjmp	.+1926   	; 0xb32 <ds1307_getDateAndTime+0xe2>
     3ac:	c3 c3       	rjmp	.+1926   	; 0xb34 <ds1307_getDateAndTime+0xe4>
     3ae:	c3 00       	.word	0x00c3	; ????
     3b0:	00 c3       	rjmp	.+1536   	; 0x9b2 <setBacklight+0xe>
     3b2:	e7 ff       	sbrs	r30, 7
     3b4:	ff db       	rcall	.-2050   	; 0xfffffbb4 <__eeprom_end+0xff7efbb0>
     3b6:	db c3       	rjmp	.+1974   	; 0xb6e <ds1307_getDateAndTime+0x11e>
     3b8:	c3 c3       	rjmp	.+1926   	; 0xb40 <ds1307_getDateAndTime+0xf0>
     3ba:	c3 c3       	rjmp	.+1926   	; 0xb42 <ds1307_getDateAndTime+0xf2>
     3bc:	00 00       	nop
     3be:	c3 66       	ori	r28, 0x63	; 99
     3c0:	66 3c       	cpi	r22, 0xC6	; 198
     3c2:	3c 18       	sub	r3, r12
     3c4:	3c 3c       	cpi	r19, 0xCC	; 204
     3c6:	66 66       	ori	r22, 0x66	; 102
     3c8:	c3 00       	.word	0x00c3	; ????
     3ca:	00 18       	sub	r0, r0
     3cc:	18 18       	sub	r1, r8
     3ce:	18 18       	sub	r1, r8
     3d0:	18 3c       	cpi	r17, 0xC8	; 200
     3d2:	3c 66       	ori	r19, 0x6C	; 108
     3d4:	66 c3       	rjmp	.+1740   	; 0xaa2 <ds1307_getDateAndTime+0x52>
     3d6:	00 00       	nop
     3d8:	ff c0       	rjmp	.+510    	; 0x5d8 <__do_copy_data+0x10>
     3da:	c0 60       	ori	r28, 0x00	; 0
     3dc:	30 7e       	andi	r19, 0xE0	; 224
     3de:	0c 06       	cpc	r0, r28
     3e0:	03 03       	mulsu	r16, r19
     3e2:	ff 00       	.word	0x00ff	; ????
     3e4:	00 3c       	cpi	r16, 0xC0	; 192
     3e6:	30 30       	cpi	r19, 0x00	; 0
     3e8:	30 30       	cpi	r19, 0x00	; 0
     3ea:	30 30       	cpi	r19, 0x00	; 0
     3ec:	30 30       	cpi	r19, 0x00	; 0
     3ee:	30 3c       	cpi	r19, 0xC0	; 192
     3f0:	00 03       	mulsu	r16, r16
     3f2:	03 06       	cpc	r0, r19
     3f4:	06 0c       	add	r0, r6
     3f6:	0c 18       	sub	r0, r12
     3f8:	18 30       	cpi	r17, 0x08	; 8
     3fa:	30 60       	ori	r19, 0x00	; 0
     3fc:	60 00       	.word	0x0060	; ????
     3fe:	00 3c       	cpi	r16, 0xC0	; 192
     400:	0c 0c       	add	r0, r12
     402:	0c 0c       	add	r0, r12
     404:	0c 0c       	add	r0, r12
     406:	0c 0c       	add	r0, r12
     408:	0c 3c       	cpi	r16, 0xCC	; 204
	...
     412:	00 c3       	rjmp	.+1536   	; 0xa14 <s_getLightStatus+0x20>
     414:	66 3c       	cpi	r22, 0xC6	; 198
     416:	18 ff       	.word	0xff18	; ????
     418:	ff 00       	.word	0x00ff	; ????
	...
     42a:	00 00       	nop
     42c:	00 18       	sub	r0, r0
     42e:	38 30       	cpi	r19, 0x08	; 8
     430:	70 00       	.word	0x0070	; ????
     432:	00 7f       	andi	r16, 0xF0	; 240
     434:	c3 c3       	rjmp	.+1926   	; 0xbbc <ds1307_getDateAndTime+0x16c>
     436:	7f 03       	fmul	r23, r23
     438:	c3 7e       	andi	r28, 0xE3	; 227
     43a:	00 00       	nop
     43c:	00 00       	nop
     43e:	00 00       	nop
     440:	fe c3       	rjmp	.+2044   	; 0xc3e <ds1307_setDateAndTime+0x44>
     442:	c3 c3       	rjmp	.+1926   	; 0xbca <ds1307_getDateAndTime+0x17a>
     444:	c3 fe       	sbrs	r12, 3
     446:	c0 c0       	rjmp	.+384    	; 0x5c8 <__do_copy_data>
     448:	c0 c0       	rjmp	.+384    	; 0x5ca <__do_copy_data+0x2>
     44a:	c0 00       	.word	0x00c0	; ????
     44c:	00 7e       	andi	r16, 0xE0	; 224
     44e:	c3 c0       	rjmp	.+390    	; 0x5d6 <__do_copy_data+0xe>
     450:	c0 c0       	rjmp	.+384    	; 0x5d2 <__do_copy_data+0xa>
     452:	c3 7e       	andi	r28, 0xE3	; 227
     454:	00 00       	nop
     456:	00 00       	nop
     458:	00 00       	nop
     45a:	7f c3       	rjmp	.+1790   	; 0xb5a <ds1307_getDateAndTime+0x10a>
     45c:	c3 c3       	rjmp	.+1926   	; 0xbe4 <ds1307_getDateAndTime+0x194>
     45e:	c3 7f       	andi	r28, 0xF3	; 243
     460:	03 03       	mulsu	r16, r19
     462:	03 03       	mulsu	r16, r19
     464:	03 00       	.word	0x0003	; ????
     466:	00 7f       	andi	r16, 0xF0	; 240
     468:	c0 c0       	rjmp	.+384    	; 0x5ea <.do_clear_bss_loop>
     46a:	fe c3       	rjmp	.+2044   	; 0xc68 <ds1307_setDateAndTime+0x6e>
     46c:	c3 7e       	andi	r28, 0xE3	; 227
     46e:	00 00       	nop
     470:	00 00       	nop
     472:	00 00       	nop
     474:	30 30       	cpi	r19, 0x00	; 0
     476:	30 30       	cpi	r19, 0x00	; 0
     478:	30 fc       	sbrc	r3, 0
     47a:	30 30       	cpi	r19, 0x00	; 0
     47c:	30 33       	cpi	r19, 0x30	; 48
     47e:	1e 7e       	andi	r17, 0xEE	; 238
     480:	c3 03       	fmuls	r20, r19
     482:	03 7f       	andi	r16, 0xF3	; 243
     484:	c3 c3       	rjmp	.+1926   	; 0xc0c <ds1307_setDateAndTime+0x12>
     486:	c3 7e       	andi	r28, 0xE3	; 227
     488:	00 00       	nop
     48a:	00 00       	nop
     48c:	00 00       	nop
     48e:	c3 c3       	rjmp	.+1926   	; 0xc16 <ds1307_setDateAndTime+0x1c>
     490:	c3 c3       	rjmp	.+1926   	; 0xc18 <ds1307_setDateAndTime+0x1e>
     492:	c3 c3       	rjmp	.+1926   	; 0xc1a <ds1307_setDateAndTime+0x20>
     494:	fe c0       	rjmp	.+508    	; 0x692 <s_getFullADC+0x14>
     496:	c0 c0       	rjmp	.+384    	; 0x618 <s_initADC+0x1e>
     498:	c0 00       	.word	0x00c0	; ????
     49a:	00 18       	sub	r0, r0
     49c:	18 18       	sub	r1, r8
     49e:	18 18       	sub	r1, r8
     4a0:	18 18       	sub	r1, r8
     4a2:	00 00       	nop
     4a4:	18 00       	.word	0x0018	; ????
     4a6:	38 6c       	ori	r19, 0xC8	; 200
     4a8:	0c 0c       	add	r0, r12
     4aa:	0c 0c       	add	r0, r12
     4ac:	0c 0c       	add	r0, r12
     4ae:	0c 00       	.word	0x000c	; ????
     4b0:	00 0c       	add	r0, r0
     4b2:	00 00       	nop
     4b4:	00 c6       	rjmp	.+3072   	; 0x10b6 <printInteger+0x30>
     4b6:	cc f8       	.word	0xf8cc	; ????
     4b8:	f0 d8       	rcall	.-3616   	; 0xfffff69a <__eeprom_end+0xff7ef696>
     4ba:	cc c6       	rjmp	.+3480   	; 0x1254 <getTripDistance+0x10>
     4bc:	c0 c0       	rjmp	.+384    	; 0x63e <s_initADC+0x44>
     4be:	c0 c0       	rjmp	.+384    	; 0x640 <s_initADC+0x46>
     4c0:	00 00       	nop
     4c2:	7e 18       	sub	r7, r14
     4c4:	18 18       	sub	r1, r8
     4c6:	18 18       	sub	r1, r8
     4c8:	18 18       	sub	r1, r8
     4ca:	18 18       	sub	r1, r8
     4cc:	78 00       	.word	0x0078	; ????
     4ce:	00 db       	rcall	.-2560   	; 0xfffffad0 <__eeprom_end+0xff7efacc>
     4d0:	db db       	rcall	.-2122   	; 0xfffffc88 <__eeprom_end+0xff7efc84>
     4d2:	db db       	rcall	.-2122   	; 0xfffffc8a <__eeprom_end+0xff7efc86>
     4d4:	db fe       	.word	0xfedb	; ????
     4d6:	00 00       	nop
     4d8:	00 00       	nop
     4da:	00 00       	nop
     4dc:	c6 c6       	rjmp	.+3468   	; 0x126a <getTripDistance+0x26>
     4de:	c6 c6       	rjmp	.+3468   	; 0x126c <getTripDistance+0x28>
     4e0:	c6 c6       	rjmp	.+3468   	; 0x126e <getTripDistance+0x2a>
     4e2:	fc 00       	.word	0x00fc	; ????
     4e4:	00 00       	nop
     4e6:	00 00       	nop
     4e8:	00 7c       	andi	r16, 0xC0	; 192
     4ea:	c6 c6       	rjmp	.+3468   	; 0x1278 <getTripDistance+0x34>
     4ec:	c6 c6       	rjmp	.+3468   	; 0x127a <getTripDistance+0x36>
     4ee:	c6 7c       	andi	r28, 0xC6	; 198
     4f0:	00 00       	nop
     4f2:	00 00       	nop
     4f4:	c0 c0       	rjmp	.+384    	; 0x676 <s_initADC+0x7c>
     4f6:	c0 fe       	sbrs	r12, 0
     4f8:	c3 c3       	rjmp	.+1926   	; 0xc80 <ds1307_setDateAndTime+0x86>
     4fa:	c3 c3       	rjmp	.+1926   	; 0xc82 <ds1307_setDateAndTime+0x88>
     4fc:	fe 00       	.word	0x00fe	; ????
     4fe:	00 00       	nop
     500:	00 03       	mulsu	r16, r16
     502:	03 03       	mulsu	r16, r19
     504:	7f c3       	rjmp	.+1790   	; 0xc04 <ds1307_setDateAndTime+0xa>
     506:	c3 c3       	rjmp	.+1926   	; 0xc8e <ds1307_setDateAndTime+0x94>
     508:	c3 7f       	andi	r28, 0xF3	; 243
     50a:	00 00       	nop
     50c:	00 00       	nop
     50e:	00 00       	nop
     510:	c0 c0       	rjmp	.+384    	; 0x692 <s_getFullADC+0x14>
     512:	c0 c0       	rjmp	.+384    	; 0x694 <s_getFullADC+0x16>
     514:	c0 e0       	ldi	r28, 0x00	; 0
     516:	fe 00       	.word	0x00fe	; ????
     518:	00 00       	nop
     51a:	00 00       	nop
     51c:	00 fe       	sbrs	r0, 0
     51e:	03 03       	mulsu	r16, r19
     520:	7e c0       	rjmp	.+252    	; 0x61e <s_initADC+0x24>
     522:	c0 7f       	andi	r28, 0xF0	; 240
     524:	00 00       	nop
     526:	00 00       	nop
     528:	00 00       	nop
     52a:	1c 36       	cpi	r17, 0x6C	; 108
     52c:	30 30       	cpi	r19, 0x00	; 0
     52e:	30 30       	cpi	r19, 0x00	; 0
     530:	fc 30       	cpi	r31, 0x0C	; 12
     532:	30 30       	cpi	r19, 0x00	; 0
     534:	00 00       	nop
     536:	00 7e       	andi	r16, 0xE0	; 224
     538:	c6 c6       	rjmp	.+3468   	; 0x12c6 <updateRevolutionCount+0x16>
     53a:	c6 c6       	rjmp	.+3468   	; 0x12c8 <updateRevolutionCount+0x18>
     53c:	c6 c6       	rjmp	.+3468   	; 0x12ca <updateRevolutionCount+0x1a>
     53e:	00 00       	nop
     540:	00 00       	nop
     542:	00 00       	nop
     544:	18 3c       	cpi	r17, 0xC8	; 200
     546:	3c 66       	ori	r19, 0x6C	; 108
     548:	66 c3       	rjmp	.+1740   	; 0xc16 <ds1307_setDateAndTime+0x1c>
     54a:	c3 00       	.word	0x00c3	; ????
     54c:	00 00       	nop
     54e:	00 00       	nop
     550:	00 c3       	rjmp	.+1536   	; 0xb52 <ds1307_getDateAndTime+0x102>
     552:	e7 ff       	sbrs	r30, 7
     554:	db c3       	rjmp	.+1974   	; 0xd0c <ds1307_setDateAndTime+0x112>
     556:	c3 c3       	rjmp	.+1926   	; 0xcde <ds1307_setDateAndTime+0xe4>
     558:	00 00       	nop
     55a:	00 00       	nop
     55c:	00 00       	nop
     55e:	c3 66       	ori	r28, 0x63	; 99
     560:	3c 18       	sub	r3, r12
     562:	3c 66       	ori	r19, 0x6C	; 108
     564:	c3 00       	.word	0x00c3	; ????
     566:	00 00       	nop
     568:	00 c0       	rjmp	.+0      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     56a:	60 60       	ori	r22, 0x00	; 0
     56c:	30 18       	sub	r3, r0
     56e:	3c 66       	ori	r19, 0x6C	; 108
     570:	66 c3       	rjmp	.+1740   	; 0xc3e <ds1307_setDateAndTime+0x44>
     572:	00 00       	nop
     574:	00 00       	nop
     576:	00 00       	nop
     578:	ff 60       	ori	r31, 0x0F	; 15
     57a:	30 18       	sub	r3, r0
     57c:	0c 06       	cpc	r0, r28
     57e:	ff 00       	.word	0x00ff	; ????
     580:	00 00       	nop
     582:	00 00       	nop
     584:	00 0f       	add	r16, r16
     586:	18 18       	sub	r1, r8
     588:	18 38       	cpi	r17, 0x88	; 136
     58a:	f0 38       	cpi	r31, 0x80	; 128
     58c:	18 18       	sub	r1, r8
     58e:	18 0f       	add	r17, r24
     590:	18 18       	sub	r1, r8
     592:	18 18       	sub	r1, r8
     594:	18 18       	sub	r1, r8
     596:	18 18       	sub	r1, r8
     598:	18 18       	sub	r1, r8
     59a:	18 18       	sub	r1, r8
     59c:	18 00       	.word	0x0018	; ????
     59e:	00 f0       	brcs	.+0      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     5a0:	18 18       	sub	r1, r8
     5a2:	18 1c       	adc	r1, r8
     5a4:	0f 1c       	adc	r0, r15
     5a6:	18 18       	sub	r1, r8
     5a8:	18 f0       	brcs	.+6      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     5aa:	00 00       	nop
     5ac:	00 00       	nop
     5ae:	00 00       	nop
     5b0:	06 8f       	std	Z+30, r16	; 0x1e
     5b2:	f1 60       	ori	r31, 0x01	; 1
     5b4:	00 00       	nop
	...

000005b8 <__ctors_end>:
     5b8:	11 24       	eor	r1, r1
     5ba:	1f be       	out	0x3f, r1	; 63
     5bc:	cf ef       	ldi	r28, 0xFF	; 255
     5be:	d1 e2       	ldi	r29, 0x21	; 33
     5c0:	de bf       	out	0x3e, r29	; 62
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	00 e0       	ldi	r16, 0x00	; 0
     5c6:	0c bf       	out	0x3c, r16	; 60

000005c8 <__do_copy_data>:
     5c8:	12 e0       	ldi	r17, 0x02	; 2
     5ca:	a0 e0       	ldi	r26, 0x00	; 0
     5cc:	b2 e0       	ldi	r27, 0x02	; 2
     5ce:	ea e4       	ldi	r30, 0x4A	; 74
     5d0:	f5 e2       	ldi	r31, 0x25	; 37
     5d2:	00 e0       	ldi	r16, 0x00	; 0
     5d4:	0b bf       	out	0x3b, r16	; 59
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <__do_copy_data+0x14>
     5d8:	07 90       	elpm	r0, Z+
     5da:	0d 92       	st	X+, r0
     5dc:	a8 35       	cpi	r26, 0x58	; 88
     5de:	b1 07       	cpc	r27, r17
     5e0:	d9 f7       	brne	.-10     	; 0x5d8 <__do_copy_data+0x10>

000005e2 <__do_clear_bss>:
     5e2:	22 e0       	ldi	r18, 0x02	; 2
     5e4:	a8 e5       	ldi	r26, 0x58	; 88
     5e6:	b2 e0       	ldi	r27, 0x02	; 2
     5e8:	01 c0       	rjmp	.+2      	; 0x5ec <.do_clear_bss_start>

000005ea <.do_clear_bss_loop>:
     5ea:	1d 92       	st	X+, r1

000005ec <.do_clear_bss_start>:
     5ec:	ac 3f       	cpi	r26, 0xFC	; 252
     5ee:	b2 07       	cpc	r27, r18
     5f0:	e1 f7       	brne	.-8      	; 0x5ea <.do_clear_bss_loop>
     5f2:	e7 d7       	rcall	.+4046   	; 0x15c2 <main>
     5f4:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <_exit>

000005f8 <__bad_interrupt>:
     5f8:	03 cd       	rjmp	.-1530   	; 0x0 <__vectors>

000005fa <s_initADC>:
	return &s_ADC_interface;
}

static void s_initADC(ADC_REF p_reff_vol, float p_aRef)
{
	PRR0=PRR0 & ~(1<<PRADC);//enable ADC
     5fa:	e4 e6       	ldi	r30, 0x64	; 100
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	90 81       	ld	r25, Z
     600:	9e 7f       	andi	r25, 0xFE	; 254
     602:	90 83       	st	Z, r25
	
	ADMUX=0b00000000; //reset ADC registers
     604:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA=0b00000000;
     608:	ea e7       	ldi	r30, 0x7A	; 122
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	10 82       	st	Z, r1
	ADCSRB=0b00000000;
     60e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	//ADMUX|=1<<ADLAR; // set to left adjust
	ADCSRA|=0b00000111; //set prescaler 128	
     612:	90 81       	ld	r25, Z
     614:	97 60       	ori	r25, 0x07	; 7
     616:	90 83       	st	Z, r25
	ADCSRA|=1<<ADEN;
     618:	90 81       	ld	r25, Z
     61a:	90 68       	ori	r25, 0x80	; 128
     61c:	90 83       	st	Z, r25
	
	//ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
	//selecting ref
	s_ref_type=p_reff_vol;
     61e:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <s_ref_type>
	switch (s_ref_type) {
     622:	81 30       	cpi	r24, 0x01	; 1
     624:	a1 f0       	breq	.+40     	; 0x64e <s_initADC+0x54>
     626:	28 f0       	brcs	.+10     	; 0x632 <s_initADC+0x38>
     628:	82 30       	cpi	r24, 0x02	; 2
     62a:	d1 f0       	breq	.+52     	; 0x660 <s_initADC+0x66>
     62c:	83 30       	cpi	r24, 0x03	; 3
     62e:	09 f1       	breq	.+66     	; 0x672 <s_initADC+0x78>
     630:	08 95       	ret
		case AREF:
		ADMUX&=0b00111111;
     632:	ec e7       	ldi	r30, 0x7C	; 124
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	80 81       	ld	r24, Z
     638:	8f 73       	andi	r24, 0x3F	; 63
     63a:	80 83       	st	Z, r24
		s_Ref_V=p_aRef;
     63c:	40 93 58 02 	sts	0x0258, r20	; 0x800258 <__data_end>
     640:	50 93 59 02 	sts	0x0259, r21	; 0x800259 <__data_end+0x1>
     644:	60 93 5a 02 	sts	0x025A, r22	; 0x80025a <__data_end+0x2>
     648:	70 93 5b 02 	sts	0x025B, r23	; 0x80025b <__data_end+0x3>
		break;
     64c:	08 95       	ret

		case AVCC:
		ADMUX&=0b01111111;
     64e:	ec e7       	ldi	r30, 0x7C	; 124
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	80 81       	ld	r24, Z
     654:	8f 77       	andi	r24, 0x7F	; 127
     656:	80 83       	st	Z, r24
		ADMUX|=0b01000000;
     658:	80 81       	ld	r24, Z
     65a:	80 64       	ori	r24, 0x40	; 64
     65c:	80 83       	st	Z, r24
		break;
     65e:	08 95       	ret

		case INTERNAL_1V1:
		ADMUX&=0b10111111;
     660:	ec e7       	ldi	r30, 0x7C	; 124
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	80 81       	ld	r24, Z
     666:	8f 7b       	andi	r24, 0xBF	; 191
     668:	80 83       	st	Z, r24
		ADMUX|=0b10000000;
     66a:	80 81       	ld	r24, Z
     66c:	80 68       	ori	r24, 0x80	; 128
     66e:	80 83       	st	Z, r24
		break;
     670:	08 95       	ret

		case INTERNAL_2V56:
		ADMUX|=0b11000000;
     672:	ec e7       	ldi	r30, 0x7C	; 124
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	80 81       	ld	r24, Z
     678:	80 6c       	ori	r24, 0xC0	; 192
     67a:	80 83       	st	Z, r24
     67c:	08 95       	ret

0000067e <s_getFullADC>:


static void s_setADCPin(uint8_t p_pin_no)
{
// inputchannel ADC 0-15 single ended;
if(p_pin_no<8)
     67e:	88 30       	cpi	r24, 0x08	; 8
     680:	30 f4       	brcc	.+12     	; 0x68e <s_getFullADC+0x10>
{
	ADMUX|=p_pin_no;		//set mux0-4
     682:	ec e7       	ldi	r30, 0x7C	; 124
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	90 81       	ld	r25, Z
     688:	89 2b       	or	r24, r25
     68a:	80 83       	st	Z, r24
     68c:	0d c0       	rjmp	.+26     	; 0x6a8 <s_getFullADC+0x2a>
}
else if ((p_pin_no>7) && (p_pin_no<16))
     68e:	88 50       	subi	r24, 0x08	; 8
     690:	88 30       	cpi	r24, 0x08	; 8
     692:	50 f4       	brcc	.+20     	; 0x6a8 <s_getFullADC+0x2a>
{
	ADCSRB|=1<<MUX5;		//set mux5
     694:	eb e7       	ldi	r30, 0x7B	; 123
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	90 81       	ld	r25, Z
     69a:	98 60       	ori	r25, 0x08	; 8
     69c:	90 83       	st	Z, r25
	ADMUX|=(p_pin_no-8);	//set mux0-4
     69e:	ec e7       	ldi	r30, 0x7C	; 124
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	90 81       	ld	r25, Z
     6a4:	89 2b       	or	r24, r25
     6a6:	80 83       	st	Z, r24
}

static void s_startADC(void)
{
	//start	
	ADCSRA|=1<<ADSC;
     6a8:	ea e7       	ldi	r30, 0x7A	; 122
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	80 81       	ld	r24, Z
     6ae:	80 64       	ori	r24, 0x40	; 64
     6b0:	80 83       	st	Z, r24
static uint16_t s_getFullADC(uint8_t p_pin_no)
{
	s_setADCPin(p_pin_no);
	s_startADC();
	
	while ((ADCSRA & (1<<ADSC) )!=0)
     6b2:	80 81       	ld	r24, Z
     6b4:	86 fd       	sbrc	r24, 6
     6b6:	fd cf       	rjmp	.-6      	; 0x6b2 <s_getFullADC+0x34>
}


static uint8_t s_get_ADCL(void)
{
	return (uint8_t) ADCL;
     6b8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
}

static uint8_t s_get_ADCH(void)
{
	return (uint8_t) ADCH;
     6bc:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		//de nada
	}
	uint16_t	LSB =  s_get_ADCL();
	uint16_t	MSB =  s_get_ADCH()& 0b00000011;
	uint16_t retVal	  = (MSB<<8|LSB);
	return retVal;
     6c0:	23 70       	andi	r18, 0x03	; 3
     6c2:	90 e0       	ldi	r25, 0x00	; 0
}
     6c4:	92 2b       	or	r25, r18
     6c6:	08 95       	ret

000006c8 <s_getADC_mV>:

static int16_t s_getADC_mV(uint8_t p_pin_no)
 {
	 uint16_t temp,out_f;
	 temp= (uint16_t)((s_getFullADC(p_pin_no)/1024.0)*1000);  // 10 BIT res and scale to mV
     6c8:	da df       	rcall	.-76     	; 0x67e <s_getFullADC>
     6ca:	bc 01       	movw	r22, r24
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__floatunsisf>
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	40 e8       	ldi	r20, 0x80	; 128
     6da:	5a e3       	ldi	r21, 0x3A	; 58
     6dc:	0e 94 84 11 	call	0x2308	; 0x2308 <__mulsf3>
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	4a e7       	ldi	r20, 0x7A	; 122
     6e6:	54 e4       	ldi	r21, 0x44	; 68
     6e8:	0e 94 84 11 	call	0x2308	; 0x2308 <__mulsf3>
     6ec:	0e 94 c6 10 	call	0x218c	; 0x218c <__fixunssfsi>
	 
	 switch (s_ref_type) {
     6f0:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <s_ref_type>
     6f4:	21 30       	cpi	r18, 0x01	; 1
     6f6:	c1 f0       	breq	.+48     	; 0x728 <s_getADC_mV+0x60>
     6f8:	28 f0       	brcs	.+10     	; 0x704 <s_getADC_mV+0x3c>
     6fa:	22 30       	cpi	r18, 0x02	; 2
     6fc:	19 f1       	breq	.+70     	; 0x744 <s_getADC_mV+0x7c>
     6fe:	23 30       	cpi	r18, 0x03	; 3
     700:	79 f1       	breq	.+94     	; 0x760 <s_getADC_mV+0x98>
     702:	3c c0       	rjmp	.+120    	; 0x77c <s_getADC_mV+0xb4>
		 case AREF:
		 out_f= temp*s_Ref_V;
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__floatunsisf>
     70c:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <__data_end>
     710:	30 91 59 02 	lds	r19, 0x0259	; 0x800259 <__data_end+0x1>
     714:	40 91 5a 02 	lds	r20, 0x025A	; 0x80025a <__data_end+0x2>
     718:	50 91 5b 02 	lds	r21, 0x025B	; 0x80025b <__data_end+0x3>
     71c:	0e 94 84 11 	call	0x2308	; 0x2308 <__mulsf3>
     720:	0e 94 c6 10 	call	0x218c	; 0x218c <__fixunssfsi>
     724:	cb 01       	movw	r24, r22
		 break;
     726:	08 95       	ret

		 case AVCC:
		 out_f= temp*5.0;
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__floatunsisf>
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	40 ea       	ldi	r20, 0xA0	; 160
     736:	50 e4       	ldi	r21, 0x40	; 64
     738:	0e 94 84 11 	call	0x2308	; 0x2308 <__mulsf3>
     73c:	0e 94 c6 10 	call	0x218c	; 0x218c <__fixunssfsi>
     740:	cb 01       	movw	r24, r22
		 break;
     742:	08 95       	ret

		 case INTERNAL_1V1:
		 out_f= temp*1.1;
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__floatunsisf>
     74c:	2d ec       	ldi	r18, 0xCD	; 205
     74e:	3c ec       	ldi	r19, 0xCC	; 204
     750:	4c e8       	ldi	r20, 0x8C	; 140
     752:	5f e3       	ldi	r21, 0x3F	; 63
     754:	0e 94 84 11 	call	0x2308	; 0x2308 <__mulsf3>
     758:	0e 94 c6 10 	call	0x218c	; 0x218c <__fixunssfsi>
     75c:	cb 01       	movw	r24, r22
		 break;
     75e:	08 95       	ret

		 case INTERNAL_2V56:
		 out_f= temp*2.56;
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__floatunsisf>
     768:	2a e0       	ldi	r18, 0x0A	; 10
     76a:	37 ed       	ldi	r19, 0xD7	; 215
     76c:	43 e2       	ldi	r20, 0x23	; 35
     76e:	50 e4       	ldi	r21, 0x40	; 64
     770:	0e 94 84 11 	call	0x2308	; 0x2308 <__mulsf3>
     774:	0e 94 c6 10 	call	0x218c	; 0x218c <__fixunssfsi>
     778:	cb 01       	movw	r24, r22
		 break;
     77a:	08 95       	ret

		 default:
		 out_f=0;
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
		 break;
	 }
	return (int16_t)out_f;
     780:	08 95       	ret

00000782 <get_ADC_interface>:
static void s_setADCPin(uint8_t p_pin_no);


ADC_t* get_ADC_interface()
{
	if (!s_initialized)
     782:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <s_initialized>
     786:	81 11       	cpse	r24, r1
     788:	11 c0       	rjmp	.+34     	; 0x7ac <get_ADC_interface+0x2a>
	{
		s_ADC_interface.initADC				=	s_initADC;
     78a:	ee e5       	ldi	r30, 0x5E	; 94
     78c:	f2 e0       	ldi	r31, 0x02	; 2
     78e:	8d ef       	ldi	r24, 0xFD	; 253
     790:	92 e0       	ldi	r25, 0x02	; 2
     792:	91 83       	std	Z+1, r25	; 0x01
     794:	80 83       	st	Z, r24
		s_ADC_interface.getFullADC			=	s_getFullADC;
     796:	8f e3       	ldi	r24, 0x3F	; 63
     798:	93 e0       	ldi	r25, 0x03	; 3
     79a:	93 83       	std	Z+3, r25	; 0x03
     79c:	82 83       	std	Z+2, r24	; 0x02
		s_ADC_interface.getADC_mV				=	s_getADC_mV;
     79e:	84 e6       	ldi	r24, 0x64	; 100
     7a0:	93 e0       	ldi	r25, 0x03	; 3
     7a2:	95 83       	std	Z+5, r25	; 0x05
     7a4:	84 83       	std	Z+4, r24	; 0x04
		s_initialized							=	true;	
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <s_initialized>
	}
	return &s_ADC_interface;
}
     7ac:	8e e5       	ldi	r24, 0x5E	; 94
     7ae:	92 e0       	ldi	r25, 0x02	; 2
     7b0:	08 95       	ret

000007b2 <s_init>:
**/
static uint16_t s_init(uint32_t p_SCL_f ,bool p_enable_interrupt) //freq is given in Hz
{
	
	//no internal pull up implemented so far
if (p_SCL_f <= 400000)
     7b2:	61 38       	cpi	r22, 0x81	; 129
     7b4:	2a e1       	ldi	r18, 0x1A	; 26
     7b6:	72 07       	cpc	r23, r18
     7b8:	26 e0       	ldi	r18, 0x06	; 6
     7ba:	82 07       	cpc	r24, r18
     7bc:	91 05       	cpc	r25, r1
     7be:	c8 f5       	brcc	.+114    	; 0x832 <s_init+0x80>
	{
		//enable TWI clock module 
	PRR0&=~(1<<PRTWI);
     7c0:	e4 e6       	ldi	r30, 0x64	; 100
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	20 81       	ld	r18, Z
     7c6:	2f 77       	andi	r18, 0x7F	; 127
     7c8:	20 83       	st	Z, r18
	
	//enable TWI
	TWCR|=(1<<TWEN);	
     7ca:	ec eb       	ldi	r30, 0xBC	; 188
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	20 81       	ld	r18, Z
     7d0:	24 60       	ori	r18, 0x04	; 4
     7d2:	20 83       	st	Z, r18
	
	//enable interrupt
	s_int_is_enabled=p_enable_interrupt;
     7d4:	40 93 66 02 	sts	0x0266, r20	; 0x800266 <s_int_is_enabled>
	if (s_int_is_enabled)
     7d8:	44 23       	and	r20, r20
     7da:	19 f0       	breq	.+6      	; 0x7e2 <s_init+0x30>
	{
		TWCR|=(1<<TWIE);
     7dc:	20 81       	ld	r18, Z
     7de:	21 60       	ori	r18, 0x01	; 1
     7e0:	20 83       	st	Z, r18
	}
	
	//constants pre calculated from mathcad 
			
		uint8_t TWBR_1= (uint8_t)((F_CPU/(8.0*p_SCL_f))-2.0);
     7e2:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__floatunsisf>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	51 e4       	ldi	r21, 0x41	; 65
     7ee:	0e 94 84 11 	call	0x2308	; 0x2308 <__mulsf3>
     7f2:	9b 01       	movw	r18, r22
     7f4:	ac 01       	movw	r20, r24
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	74 e2       	ldi	r23, 0x24	; 36
     7fa:	84 e7       	ldi	r24, 0x74	; 116
     7fc:	9b e4       	ldi	r25, 0x4B	; 75
     7fe:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__divsf3>
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	40 e0       	ldi	r20, 0x00	; 0
     808:	50 e4       	ldi	r21, 0x40	; 64
     80a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__subsf3>
     80e:	0e 94 c6 10 	call	0x218c	; 0x218c <__fixunssfsi>


		uint8_t validation = 0xFF;

		if(TWBR_1>0 && TWBR_1<=validation )
     812:	66 23       	and	r22, r22
     814:	89 f0       	breq	.+34     	; 0x838 <s_init+0x86>
		{
			//set prescaler

			TWSR&=~(1<<TWPS0);
     816:	e9 eb       	ldi	r30, 0xB9	; 185
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	80 81       	ld	r24, Z
     81c:	8e 7f       	andi	r24, 0xFE	; 254
     81e:	80 83       	st	Z, r24
			TWSR&=~(1<<TWPS1);
     820:	80 81       	ld	r24, Z
     822:	8d 7f       	andi	r24, 0xFD	; 253
     824:	80 83       	st	Z, r24
			//typecast to proper format and insert
			TWBR = TWBR_1;
     826:	e8 eb       	ldi	r30, 0xB8	; 184
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	60 83       	st	Z, r22
			return TWBR;
     82c:	80 81       	ld	r24, Z
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	08 95       	ret
		}
	
	}
else
	{
	return 99;
     832:	83 e6       	ldi	r24, 0x63	; 99
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	08 95       	ret
			return TWBR;
		}

		else
		{
			return 0; //return 0 error
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
	}
else
	{
	return 99;
	}
}
     83c:	08 95       	ret

0000083e <s_disable>:
----------------description-----------------------------------------------------------------
Disables any i2c activity, activity, 'init_s()' does not need to be followed before starting new transfer
-------------function description end-------------------------------------------------------
**/
static void s_disable(void)
{
     83e:	08 95       	ret

00000840 <s_start>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static void s_start(void)
{
	TWCR=0;
     840:	ec eb       	ldi	r30, 0xBC	; 188
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	10 82       	st	Z, r1
	TWCR |= (1<<TWSTA)|(1<<TWEN)|(1<<TWINT); //TWSTA sends start bit 
     846:	80 81       	ld	r24, Z
     848:	84 6a       	ori	r24, 0xA4	; 164
     84a:	80 83       	st	Z, r24

	if (!s_int_is_enabled)
     84c:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <s_int_is_enabled>
     850:	81 11       	cpse	r24, r1
     852:	03 c0       	rjmp	.+6      	; 0x85a <s_start+0x1a>
	{
		while ((TWCR & (1<<TWINT)) == 0)
     854:	80 81       	ld	r24, Z
     856:	88 23       	and	r24, r24
     858:	ec f7       	brge	.-6      	; 0x854 <s_start+0x14>
     85a:	08 95       	ret

0000085c <s_stop>:
stops i2c, no polling needed
-------------function description end-------------------------------------------------------
**/
static void s_stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     85c:	84 e9       	ldi	r24, 0x94	; 148
     85e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     862:	08 95       	ret

00000864 <s_selectMode>:
-------------function description end-------------------------------------------------------
**/
static void s_selectMode(uint8_t p_SLA_addr,uint8_t p_mode) //SLA_x is SLA+R/W
{
	//must send address now
	if(p_mode==I2C_WRITE_MODE)
     864:	61 11       	cpse	r22, r1
     866:	04 c0       	rjmp	.+8      	; 0x870 <s_selectMode+0xc>
	{
		TWDR=((p_SLA_addr<<1)&(~0b1));
     868:	88 0f       	add	r24, r24
     86a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     86e:	06 c0       	rjmp	.+12     	; 0x87c <s_selectMode+0x18>
	}
	else if(p_mode==I2C_READ_MODE)
     870:	61 30       	cpi	r22, 0x01	; 1
     872:	21 f4       	brne	.+8      	; 0x87c <s_selectMode+0x18>
	{
		TWDR=((p_SLA_addr<<1)|(0b1));
     874:	88 0f       	add	r24, r24
     876:	81 60       	ori	r24, 0x01	; 1
     878:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	}
	TWCR |= (1<<TWINT);
     87c:	ec eb       	ldi	r30, 0xBC	; 188
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	80 81       	ld	r24, Z
     882:	80 68       	ori	r24, 0x80	; 128
     884:	80 83       	st	Z, r24
	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     886:	80 81       	ld	r24, Z
     888:	84 6a       	ori	r24, 0xA4	; 164
     88a:	80 83       	st	Z, r24
	if (!s_int_is_enabled)
     88c:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <s_int_is_enabled>
     890:	81 11       	cpse	r24, r1
     892:	03 c0       	rjmp	.+6      	; 0x89a <s_selectMode+0x36>
	{
	  while ((TWCR & (1<<TWINT)) == 0) //poll
     894:	80 81       	ld	r24, Z
     896:	88 23       	and	r24, r24
     898:	ec f7       	brge	.-6      	; 0x894 <s_selectMode+0x30>
     89a:	08 95       	ret

0000089c <s_write>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static void s_write(uint8_t p_data)
{
	TWDR = p_data;
     89c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT)|(1<<TWEN);
     8a0:	84 e8       	ldi	r24, 0x84	; 132
     8a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	if (!s_int_is_enabled)
     8a6:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <s_int_is_enabled>
     8aa:	81 11       	cpse	r24, r1
     8ac:	05 c0       	rjmp	.+10     	; 0x8b8 <s_write+0x1c>
	{
		while ((TWCR & (1<<TWINT)) == 0)
     8ae:	ec eb       	ldi	r30, 0xBC	; 188
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	88 23       	and	r24, r24
     8b6:	ec f7       	brge	.-6      	; 0x8b2 <s_write+0x16>
     8b8:	08 95       	ret

000008ba <s_read>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static uint8_t s_read (bool p_isLast)
{
	if (!p_isLast ) //If we want to read more than 1 byte
     8ba:	81 11       	cpse	r24, r1
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <s_read+0xc>
	{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     8be:	84 ec       	ldi	r24, 0xC4	; 196
     8c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     8c4:	03 c0       	rjmp	.+6      	; 0x8cc <s_read+0x12>
	}

	else             //If we want to read only one byte
	{
		TWCR = (1<<TWINT) | (1<<TWEN);
     8c6:	84 e8       	ldi	r24, 0x84	; 132
     8c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	}
	
	if (!s_int_is_enabled)
     8cc:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <s_int_is_enabled>
     8d0:	81 11       	cpse	r24, r1
     8d2:	08 c0       	rjmp	.+16     	; 0x8e4 <s_read+0x2a>
	{
	  while ((TWCR & (1<<TWINT)) == 0)
     8d4:	ec eb       	ldi	r30, 0xBC	; 188
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	80 81       	ld	r24, Z
     8da:	88 23       	and	r24, r24
     8dc:	ec f7       	brge	.-6      	; 0x8d8 <s_read+0x1e>
	  {}
	{}
	return TWDR;
     8de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     8e2:	08 95       	ret
	}

	return 0;
     8e4:	80 e0       	ldi	r24, 0x00	; 0
}
     8e6:	08 95       	ret

000008e8 <s_setBusy>:
may be used as a primitive mutex when using several i2c devices in isr
-------------function description end-------------------------------------------------------
**/
static bool s_setBusy(bool p_status)
{	
	s_busy_flag		=	p_status;
     8e8:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <s_busy_flag>
	return  s_busy_flag;
}
     8ec:	08 95       	ret

000008ee <s_getBusy>:
-------------function description end-------------------------------------------------------
**/
static bool s_getBusy(void)
{
	return s_busy_flag;
}
     8ee:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <s_busy_flag>
     8f2:	08 95       	ret

000008f4 <s_getStatus>:
retiurns TWSR status code, is used for debugging purposes or ISR state machhines
-------------function description end-------------------------------------------------------
**/
static uint8_t s_getStatus(void)
{
	return (TWSR)&(0b11111000);
     8f4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     8f8:	88 7f       	andi	r24, 0xF8	; 248
     8fa:	08 95       	ret

000008fc <get_i2c_interface>:
-------------function description end-------------------------------------------------------
**/
i2c_t* get_i2c_interface(void)
{
	
 if (!s_initialized)
     8fc:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <s_initialized>
     900:	81 11       	cpse	r24, r1
     902:	2d c0       	rjmp	.+90     	; 0x95e <get_i2c_interface+0x62>
 {
	s_i2c_interface.init				=	s_init;
     904:	e7 e6       	ldi	r30, 0x67	; 103
     906:	f2 e0       	ldi	r31, 0x02	; 2
     908:	89 ed       	ldi	r24, 0xD9	; 217
     90a:	93 e0       	ldi	r25, 0x03	; 3
     90c:	91 83       	std	Z+1, r25	; 0x01
     90e:	80 83       	st	Z, r24
	s_i2c_interface.disable				=	s_disable;
     910:	8f e1       	ldi	r24, 0x1F	; 31
     912:	94 e0       	ldi	r25, 0x04	; 4
     914:	93 83       	std	Z+3, r25	; 0x03
     916:	82 83       	std	Z+2, r24	; 0x02
	s_i2c_interface.start				=	s_start;
     918:	80 e2       	ldi	r24, 0x20	; 32
     91a:	94 e0       	ldi	r25, 0x04	; 4
     91c:	95 83       	std	Z+5, r25	; 0x05
     91e:	84 83       	std	Z+4, r24	; 0x04
	s_i2c_interface.stop				=	s_stop;
     920:	8e e2       	ldi	r24, 0x2E	; 46
     922:	94 e0       	ldi	r25, 0x04	; 4
     924:	97 83       	std	Z+7, r25	; 0x07
     926:	86 83       	std	Z+6, r24	; 0x06
	s_i2c_interface.selectmode			=	s_selectMode;
     928:	82 e3       	ldi	r24, 0x32	; 50
     92a:	94 e0       	ldi	r25, 0x04	; 4
     92c:	91 87       	std	Z+9, r25	; 0x09
     92e:	80 87       	std	Z+8, r24	; 0x08
	s_i2c_interface.write				=	s_write;
     930:	8e e4       	ldi	r24, 0x4E	; 78
     932:	94 e0       	ldi	r25, 0x04	; 4
     934:	93 87       	std	Z+11, r25	; 0x0b
     936:	82 87       	std	Z+10, r24	; 0x0a
	s_i2c_interface.read				=	s_read;
     938:	8d e5       	ldi	r24, 0x5D	; 93
     93a:	94 e0       	ldi	r25, 0x04	; 4
     93c:	95 87       	std	Z+13, r25	; 0x0d
     93e:	84 87       	std	Z+12, r24	; 0x0c
	s_i2c_interface.setBusy				=	s_setBusy;
     940:	84 e7       	ldi	r24, 0x74	; 116
     942:	94 e0       	ldi	r25, 0x04	; 4
     944:	97 87       	std	Z+15, r25	; 0x0f
     946:	86 87       	std	Z+14, r24	; 0x0e
	s_i2c_interface.getBusy				=	s_getBusy;
     948:	87 e7       	ldi	r24, 0x77	; 119
     94a:	94 e0       	ldi	r25, 0x04	; 4
     94c:	91 8b       	std	Z+17, r25	; 0x11
     94e:	80 8b       	std	Z+16, r24	; 0x10
	s_i2c_interface.getStatus			=	s_getStatus;
     950:	8a e7       	ldi	r24, 0x7A	; 122
     952:	94 e0       	ldi	r25, 0x04	; 4
     954:	93 8b       	std	Z+19, r25	; 0x13
     956:	82 8b       	std	Z+18, r24	; 0x12
	s_initialized=true;
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <s_initialized>
	
 }
	return &s_i2c_interface;
}
     95e:	87 e6       	ldi	r24, 0x67	; 103
     960:	92 e0       	ldi	r25, 0x02	; 2
     962:	08 95       	ret

00000964 <initLightDriver>:
	 return &lD_interface;
 }

static void initLightDriver(void)
{
		DDRH |= (1<<PH4);	//Sets portH4 as output.
     964:	e1 e0       	ldi	r30, 0x01	; 1
     966:	f1 e0       	ldi	r31, 0x01	; 1
     968:	80 81       	ld	r24, Z
     96a:	80 61       	ori	r24, 0x10	; 16
     96c:	80 83       	st	Z, r24
		DDRH |= (1<<PH5);	//Sets portH5 as output.
     96e:	80 81       	ld	r24, Z
     970:	80 62       	ori	r24, 0x20	; 32
     972:	80 83       	st	Z, r24
		TCCR4B=0b00000001;	//Sets timer 4 to no prescaling
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
		TCCR4A = 0b00101001;	//Compare match channel B 5:4, Compare match channel C 3:2, PWM, phase correct 8-bit. 
     97a:	89 e2       	ldi	r24, 0x29	; 41
     97c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     980:	08 95       	ret

00000982 <setFrontlight>:
	else
	percentA=percent;
	
	uint16_t frontLight=((255*percentA)/100);	//percentage of full OCR4B TOP value.
	
	OCR4B=(uint8_t)frontLight;	//setting output compare.
     982:	85 36       	cpi	r24, 0x65	; 101
     984:	08 f0       	brcs	.+2      	; 0x988 <setFrontlight+0x6>
     986:	84 e6       	ldi	r24, 0x64	; 100
     988:	2f ef       	ldi	r18, 0xFF	; 255
     98a:	82 9f       	mul	r24, r18
     98c:	c0 01       	movw	r24, r0
     98e:	11 24       	eor	r1, r1
     990:	64 e6       	ldi	r22, 0x64	; 100
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	0e 94 0b 12 	call	0x2416	; 0x2416 <__divmodhi4>
     998:	77 27       	eor	r23, r23
     99a:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     99e:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
     9a2:	08 95       	ret

000009a4 <setBacklight>:
	else
	percentB=percent;
	
	uint16_t BackLight=((255*percentB)/100);	//percentage of full OCR4C TOP value.
	
	OCR4C=(uint8_t)BackLight;	//setting output compare.	
     9a4:	85 36       	cpi	r24, 0x65	; 101
     9a6:	08 f0       	brcs	.+2      	; 0x9aa <setBacklight+0x6>
     9a8:	84 e6       	ldi	r24, 0x64	; 100
     9aa:	2f ef       	ldi	r18, 0xFF	; 255
     9ac:	82 9f       	mul	r24, r18
     9ae:	c0 01       	movw	r24, r0
     9b0:	11 24       	eor	r1, r1
     9b2:	64 e6       	ldi	r22, 0x64	; 100
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	0e 94 0b 12 	call	0x2416	; 0x2416 <__divmodhi4>
     9ba:	77 27       	eor	r23, r23
     9bc:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     9c0:	60 93 ac 00 	sts	0x00AC, r22	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
     9c4:	08 95       	ret

000009c6 <get_lightDriverInterface>:
 
 lightDriver_t* get_lightDriverInterface(void)
 {
	 if (!init)
	 {
		 lD_interface.init=initLightDriver;
     9c6:	eb e7       	ldi	r30, 0x7B	; 123
     9c8:	f2 e0       	ldi	r31, 0x02	; 2
     9ca:	82 eb       	ldi	r24, 0xB2	; 178
     9cc:	94 e0       	ldi	r25, 0x04	; 4
     9ce:	91 83       	std	Z+1, r25	; 0x01
     9d0:	80 83       	st	Z, r24
		 lD_interface.setFront=setFrontlight;
     9d2:	81 ec       	ldi	r24, 0xC1	; 193
     9d4:	94 e0       	ldi	r25, 0x04	; 4
     9d6:	93 83       	std	Z+3, r25	; 0x03
     9d8:	82 83       	std	Z+2, r24	; 0x02
		 lD_interface.setBack=setBacklight;
     9da:	82 ed       	ldi	r24, 0xD2	; 210
     9dc:	94 e0       	ldi	r25, 0x04	; 4
     9de:	95 83       	std	Z+5, r25	; 0x05
     9e0:	84 83       	std	Z+4, r24	; 0x04
	 }
	 return &lD_interface;
 }
     9e2:	cf 01       	movw	r24, r30
     9e4:	08 95       	ret

000009e6 <s_init>:
	return &s_LightSensorInterface;	 
 }
 
 static void s_init(uint8_t p_pin_no, uint16_t p_threshold)
 {
	s_light_threshold	=	p_threshold;
     9e6:	70 93 82 02 	sts	0x0282, r23	; 0x800282 <s_light_threshold+0x1>
     9ea:	60 93 81 02 	sts	0x0281, r22	; 0x800281 <s_light_threshold>
	s_pin_no			=	p_pin_no;
     9ee:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <s_pin_no>
     9f2:	08 95       	ret

000009f4 <s_getLightStatus>:
 
 }
 
 static bool s_getLightStatus(void)
 {
	if(s_ADC_interface->getADC_mV(s_pin_no)>=s_light_threshold)
     9f4:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <s_ADC_interface>
     9f8:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <s_ADC_interface+0x1>
     9fc:	04 80       	ldd	r0, Z+4	; 0x04
     9fe:	f5 81       	ldd	r31, Z+5	; 0x05
     a00:	e0 2d       	mov	r30, r0
     a02:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <s_pin_no>
     a06:	19 95       	eicall
     a08:	21 e0       	ldi	r18, 0x01	; 1
     a0a:	40 91 81 02 	lds	r20, 0x0281	; 0x800281 <s_light_threshold>
     a0e:	50 91 82 02 	lds	r21, 0x0282	; 0x800282 <s_light_threshold+0x1>
     a12:	84 17       	cp	r24, r20
     a14:	95 07       	cpc	r25, r21
     a16:	08 f0       	brcs	.+2      	; 0xa1a <s_getLightStatus+0x26>
     a18:	20 e0       	ldi	r18, 0x00	; 0
	}
	else
	{
	return true;
	}
     a1a:	82 2f       	mov	r24, r18
     a1c:	08 95       	ret

00000a1e <get_lightSensor_interface>:

static void s_init(uint8_t p_pin_no, uint16_t p_threshold);
static bool s_getLightStatus(void);
 
 LightSensor_t *get_lightSensor_interface(ADC_t * p_ADC_Interface)
 {
     a1e:	9c 01       	movw	r18, r24
	if (!s_initialized)
     a20:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <s_initialized>
     a24:	91 11       	cpse	r25, r1
     a26:	11 c0       	rjmp	.+34     	; 0xa4a <get_lightSensor_interface+0x2c>
	{	s_ADC_interface									=	p_ADC_Interface;
     a28:	30 93 86 02 	sts	0x0286, r19	; 0x800286 <s_ADC_interface+0x1>
     a2c:	20 93 85 02 	sts	0x0285, r18	; 0x800285 <s_ADC_interface>
		
		s_LightSensorInterface.init						=	s_init;
     a30:	e7 e8       	ldi	r30, 0x87	; 135
     a32:	f2 e0       	ldi	r31, 0x02	; 2
     a34:	83 ef       	ldi	r24, 0xF3	; 243
     a36:	94 e0       	ldi	r25, 0x04	; 4
     a38:	91 83       	std	Z+1, r25	; 0x01
     a3a:	80 83       	st	Z, r24
		s_LightSensorInterface.getLightStatus			=	s_getLightStatus;
     a3c:	8a ef       	ldi	r24, 0xFA	; 250
     a3e:	94 e0       	ldi	r25, 0x04	; 4
     a40:	93 83       	std	Z+3, r25	; 0x03
     a42:	82 83       	std	Z+2, r24	; 0x02
		
		s_initialized									=	true;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <s_initialized>
	}
	return &s_LightSensorInterface;	 
 }
     a4a:	87 e8       	ldi	r24, 0x87	; 135
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	08 95       	ret

00000a50 <ds1307_getDateAndTime>:
To get the latest time and date form the DS1307 RTC in its timekeeper registers, 
done via the i2c driver. Weekday "day" is not used in the function.  
-------------function description end-------------------------------------------------------
**/
static void ds1307_getDateAndTime(uint8_t *year, uint8_t *month, uint8_t *day, uint8_t *hour, uint8_t *minute, uint8_t *second)
{
     a50:	8f 92       	push	r8
     a52:	9f 92       	push	r9
     a54:	af 92       	push	r10
     a56:	bf 92       	push	r11
     a58:	cf 92       	push	r12
     a5a:	df 92       	push	r13
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	ec 01       	movw	r28, r24
     a6a:	6b 01       	movw	r12, r22
     a6c:	5a 01       	movw	r10, r20
     a6e:	49 01       	movw	r8, r18
	i2c->start();
     a70:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     a74:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     a78:	04 80       	ldd	r0, Z+4	; 0x04
     a7a:	f5 81       	ldd	r31, Z+5	; 0x05
     a7c:	e0 2d       	mov	r30, r0
     a7e:	19 95       	eicall
	i2c->selectmode((DS1307_ADDR),I2C_WRITE_MODE); //Write select
     a80:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     a84:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     a88:	00 84       	ldd	r0, Z+8	; 0x08
     a8a:	f1 85       	ldd	r31, Z+9	; 0x09
     a8c:	e0 2d       	mov	r30, r0
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	88 e6       	ldi	r24, 0x68	; 104
     a92:	19 95       	eicall
	i2c->write(0x00); //stop oscillator
     a94:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     a98:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     a9c:	02 84       	ldd	r0, Z+10	; 0x0a
     a9e:	f3 85       	ldd	r31, Z+11	; 0x0b
     aa0:	e0 2d       	mov	r30, r0
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	19 95       	eicall
	i2c->stop();
     aa6:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     aaa:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     aae:	06 80       	ldd	r0, Z+6	; 0x06
     ab0:	f7 81       	ldd	r31, Z+7	; 0x07
     ab2:	e0 2d       	mov	r30, r0
     ab4:	19 95       	eicall

	i2c->start(); //start again before reading 
     ab6:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     aba:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     abe:	04 80       	ldd	r0, Z+4	; 0x04
     ac0:	f5 81       	ldd	r31, Z+5	; 0x05
     ac2:	e0 2d       	mov	r30, r0
     ac4:	19 95       	eicall
	i2c->selectmode((DS1307_ADDR),I2C_READ_MODE); //I2C read
     ac6:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     aca:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     ace:	00 84       	ldd	r0, Z+8	; 0x08
     ad0:	f1 85       	ldd	r31, Z+9	; 0x09
     ad2:	e0 2d       	mov	r30, r0
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	88 e6       	ldi	r24, 0x68	; 104
     ad8:	19 95       	eicall
	*second = ds1307_bcd2dec(i2c->read(false) & 0x7F);
     ada:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     ade:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     ae2:	04 84       	ldd	r0, Z+12	; 0x0c
     ae4:	f5 85       	ldd	r31, Z+13	; 0x0d
     ae6:	e0 2d       	mov	r30, r0
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	19 95       	eicall
     aec:	8f 77       	andi	r24, 0x7F	; 127
     aee:	98 2f       	mov	r25, r24
     af0:	92 95       	swap	r25
     af2:	9f 70       	andi	r25, 0x0F	; 15
     af4:	29 2f       	mov	r18, r25
     af6:	22 0f       	add	r18, r18
     af8:	92 0f       	add	r25, r18
     afa:	99 0f       	add	r25, r25
     afc:	89 1b       	sub	r24, r25
     afe:	f7 01       	movw	r30, r14
     b00:	80 83       	st	Z, r24
	*minute = ds1307_bcd2dec(i2c->read(false));
     b02:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     b06:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     b0a:	04 84       	ldd	r0, Z+12	; 0x0c
     b0c:	f5 85       	ldd	r31, Z+13	; 0x0d
     b0e:	e0 2d       	mov	r30, r0
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	19 95       	eicall
     b14:	98 2f       	mov	r25, r24
     b16:	92 95       	swap	r25
     b18:	9f 70       	andi	r25, 0x0F	; 15
     b1a:	29 2f       	mov	r18, r25
     b1c:	22 0f       	add	r18, r18
     b1e:	92 0f       	add	r25, r18
     b20:	99 0f       	add	r25, r25
     b22:	89 1b       	sub	r24, r25
     b24:	f8 01       	movw	r30, r16
     b26:	80 83       	st	Z, r24
	*hour = ds1307_bcd2dec(i2c->read(false));
     b28:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     b2c:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     b30:	04 84       	ldd	r0, Z+12	; 0x0c
     b32:	f5 85       	ldd	r31, Z+13	; 0x0d
     b34:	e0 2d       	mov	r30, r0
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	19 95       	eicall
     b3a:	98 2f       	mov	r25, r24
     b3c:	92 95       	swap	r25
     b3e:	9f 70       	andi	r25, 0x0F	; 15
     b40:	29 2f       	mov	r18, r25
     b42:	22 0f       	add	r18, r18
     b44:	92 0f       	add	r25, r18
     b46:	99 0f       	add	r25, r25
     b48:	89 1b       	sub	r24, r25
     b4a:	f4 01       	movw	r30, r8
     b4c:	80 83       	st	Z, r24
	i2c->read(false); //We dont need to read the weekday
     b4e:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     b52:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     b56:	04 84       	ldd	r0, Z+12	; 0x0c
     b58:	f5 85       	ldd	r31, Z+13	; 0x0d
     b5a:	e0 2d       	mov	r30, r0
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	19 95       	eicall
	*day = ds1307_bcd2dec(i2c->read(false));
     b60:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     b64:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     b68:	04 84       	ldd	r0, Z+12	; 0x0c
     b6a:	f5 85       	ldd	r31, Z+13	; 0x0d
     b6c:	e0 2d       	mov	r30, r0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	19 95       	eicall
     b72:	98 2f       	mov	r25, r24
     b74:	92 95       	swap	r25
     b76:	9f 70       	andi	r25, 0x0F	; 15
     b78:	29 2f       	mov	r18, r25
     b7a:	22 0f       	add	r18, r18
     b7c:	92 0f       	add	r25, r18
     b7e:	99 0f       	add	r25, r25
     b80:	89 1b       	sub	r24, r25
     b82:	f5 01       	movw	r30, r10
     b84:	80 83       	st	Z, r24
	*month = ds1307_bcd2dec(i2c->read(false));
     b86:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     b8a:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     b8e:	04 84       	ldd	r0, Z+12	; 0x0c
     b90:	f5 85       	ldd	r31, Z+13	; 0x0d
     b92:	e0 2d       	mov	r30, r0
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	19 95       	eicall
     b98:	98 2f       	mov	r25, r24
     b9a:	92 95       	swap	r25
     b9c:	9f 70       	andi	r25, 0x0F	; 15
     b9e:	29 2f       	mov	r18, r25
     ba0:	22 0f       	add	r18, r18
     ba2:	92 0f       	add	r25, r18
     ba4:	99 0f       	add	r25, r25
     ba6:	89 1b       	sub	r24, r25
     ba8:	f6 01       	movw	r30, r12
     baa:	80 83       	st	Z, r24
	*year = ds1307_bcd2dec(i2c->read(true));
     bac:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     bb0:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     bb4:	04 84       	ldd	r0, Z+12	; 0x0c
     bb6:	f5 85       	ldd	r31, Z+13	; 0x0d
     bb8:	e0 2d       	mov	r30, r0
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	19 95       	eicall
     bbe:	98 2f       	mov	r25, r24
     bc0:	92 95       	swap	r25
     bc2:	9f 70       	andi	r25, 0x0F	; 15
     bc4:	29 2f       	mov	r18, r25
     bc6:	22 0f       	add	r18, r18
     bc8:	92 0f       	add	r25, r18
     bca:	99 0f       	add	r25, r25
     bcc:	89 1b       	sub	r24, r25
     bce:	88 83       	st	Y, r24
	i2c->stop();
     bd0:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     bd4:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     bd8:	06 80       	ldd	r0, Z+6	; 0x06
     bda:	f7 81       	ldd	r31, Z+7	; 0x07
     bdc:	e0 2d       	mov	r30, r0
     bde:	19 95       	eicall
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	cf 90       	pop	r12
     bf0:	bf 90       	pop	r11
     bf2:	af 90       	pop	r10
     bf4:	9f 90       	pop	r9
     bf6:	8f 90       	pop	r8
     bf8:	08 95       	ret

00000bfa <ds1307_setDateAndTime>:
To set the time and date for the DS1307 RTC in its timekeeper registers, 
done via the i2c driver. 
-------------function description end-------------------------------------------------------
**/
static void ds1307_setDateAndTime(uint8_t year, uint8_t month, uint8_t day, uint8_t weekDay, uint8_t hour, uint8_t minute, uint8_t second)
{
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
	//First check if any input is over limit
	if (second < 0 || second > 59 ||
     c0a:	9b e3       	ldi	r25, 0x3B	; 59
     c0c:	9c 15       	cp	r25, r12
     c0e:	08 f4       	brcc	.+2      	; 0xc12 <ds1307_setDateAndTime+0x18>
     c10:	d2 c0       	rjmp	.+420    	; 0xdb6 <ds1307_setDateAndTime+0x1bc>
	minute < 0 || minute > 59 ||
     c12:	9e 15       	cp	r25, r14
     c14:	08 f4       	brcc	.+2      	; 0xc18 <ds1307_setDateAndTime+0x1e>
     c16:	cf c0       	rjmp	.+414    	; 0xdb6 <ds1307_setDateAndTime+0x1bc>
	hour < 0 || hour > 23 ||
     c18:	08 31       	cpi	r16, 0x18	; 24
     c1a:	08 f0       	brcs	.+2      	; 0xc1e <ds1307_setDateAndTime+0x24>
     c1c:	cc c0       	rjmp	.+408    	; 0xdb6 <ds1307_setDateAndTime+0x1bc>
     c1e:	9f ef       	ldi	r25, 0xFF	; 255
     c20:	94 0f       	add	r25, r20
     c22:	9f 31       	cpi	r25, 0x1F	; 31
     c24:	08 f0       	brcs	.+2      	; 0xc28 <ds1307_setDateAndTime+0x2e>
     c26:	c7 c0       	rjmp	.+398    	; 0xdb6 <ds1307_setDateAndTime+0x1bc>
	day < 1 || day > 31 ||
     c28:	9f ef       	ldi	r25, 0xFF	; 255
     c2a:	92 0f       	add	r25, r18
     c2c:	97 30       	cpi	r25, 0x07	; 7
     c2e:	08 f0       	brcs	.+2      	; 0xc32 <ds1307_setDateAndTime+0x38>
     c30:	c2 c0       	rjmp	.+388    	; 0xdb6 <ds1307_setDateAndTime+0x1bc>
	weekDay < 1 || weekDay > 7 ||
     c32:	9f ef       	ldi	r25, 0xFF	; 255
     c34:	96 0f       	add	r25, r22
     c36:	9c 30       	cpi	r25, 0x0C	; 12
     c38:	08 f0       	brcs	.+2      	; 0xc3c <ds1307_setDateAndTime+0x42>
     c3a:	bd c0       	rjmp	.+378    	; 0xdb6 <ds1307_setDateAndTime+0x1bc>
	month < 1 || month > 12 ||
	year < 0 || year > 99)
     c3c:	84 36       	cpi	r24, 0x64	; 100
     c3e:	08 f0       	brcs	.+2      	; 0xc42 <ds1307_setDateAndTime+0x48>
     c40:	ba c0       	rjmp	.+372    	; 0xdb6 <ds1307_setDateAndTime+0x1bc>
     c42:	d2 2f       	mov	r29, r18
     c44:	c4 2f       	mov	r28, r20
     c46:	16 2f       	mov	r17, r22
     c48:	f8 2e       	mov	r15, r24
		second=0;
	}
	else
	{
		//Write date and time
		i2c->start();		
     c4a:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     c4e:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     c52:	04 80       	ldd	r0, Z+4	; 0x04
     c54:	f5 81       	ldd	r31, Z+5	; 0x05
     c56:	e0 2d       	mov	r30, r0
     c58:	19 95       	eicall
		i2c->selectmode((DS1307_ADDR),I2C_WRITE_MODE); //Write select
     c5a:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     c5e:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     c62:	00 84       	ldd	r0, Z+8	; 0x08
     c64:	f1 85       	ldd	r31, Z+9	; 0x09
     c66:	e0 2d       	mov	r30, r0
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	88 e6       	ldi	r24, 0x68	; 104
     c6c:	19 95       	eicall
		i2c->write(0x00); //stop oscillator		
     c6e:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     c72:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     c76:	02 84       	ldd	r0, Z+10	; 0x0a
     c78:	f3 85       	ldd	r31, Z+11	; 0x0b
     c7a:	e0 2d       	mov	r30, r0
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	19 95       	eicall
		i2c->write(ds1307_dec2bcd(second));	//Write the data
     c80:	0f 2e       	mov	r0, r31
     c82:	fd ec       	ldi	r31, 0xCD	; 205
     c84:	df 2e       	mov	r13, r31
     c86:	f0 2d       	mov	r31, r0
     c88:	cd 9c       	mul	r12, r13
     c8a:	81 2d       	mov	r24, r1
     c8c:	11 24       	eor	r1, r1
     c8e:	86 95       	lsr	r24
     c90:	86 95       	lsr	r24
     c92:	86 95       	lsr	r24
     c94:	98 2f       	mov	r25, r24
     c96:	99 0f       	add	r25, r25
     c98:	89 0f       	add	r24, r25
     c9a:	88 0f       	add	r24, r24
     c9c:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     ca0:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     ca4:	02 84       	ldd	r0, Z+10	; 0x0a
     ca6:	f3 85       	ldd	r31, Z+11	; 0x0b
     ca8:	e0 2d       	mov	r30, r0
     caa:	8c 0d       	add	r24, r12
     cac:	19 95       	eicall
		i2c->write(ds1307_dec2bcd(minute));
     cae:	ed 9c       	mul	r14, r13
     cb0:	81 2d       	mov	r24, r1
     cb2:	11 24       	eor	r1, r1
     cb4:	86 95       	lsr	r24
     cb6:	86 95       	lsr	r24
     cb8:	86 95       	lsr	r24
     cba:	98 2f       	mov	r25, r24
     cbc:	99 0f       	add	r25, r25
     cbe:	89 0f       	add	r24, r25
     cc0:	88 0f       	add	r24, r24
     cc2:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     cc6:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     cca:	02 84       	ldd	r0, Z+10	; 0x0a
     ccc:	f3 85       	ldd	r31, Z+11	; 0x0b
     cce:	e0 2d       	mov	r30, r0
     cd0:	8e 0d       	add	r24, r14
     cd2:	19 95       	eicall
		i2c->write(ds1307_dec2bcd(hour));
     cd4:	0d 9d       	mul	r16, r13
     cd6:	81 2d       	mov	r24, r1
     cd8:	11 24       	eor	r1, r1
     cda:	86 95       	lsr	r24
     cdc:	86 95       	lsr	r24
     cde:	86 95       	lsr	r24
     ce0:	98 2f       	mov	r25, r24
     ce2:	99 0f       	add	r25, r25
     ce4:	89 0f       	add	r24, r25
     ce6:	88 0f       	add	r24, r24
     ce8:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     cec:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     cf0:	02 84       	ldd	r0, Z+10	; 0x0a
     cf2:	f3 85       	ldd	r31, Z+11	; 0x0b
     cf4:	e0 2d       	mov	r30, r0
     cf6:	80 0f       	add	r24, r16
     cf8:	19 95       	eicall
		i2c->write(ds1307_dec2bcd(weekDay));
     cfa:	dd 9d       	mul	r29, r13
     cfc:	81 2d       	mov	r24, r1
     cfe:	11 24       	eor	r1, r1
     d00:	86 95       	lsr	r24
     d02:	86 95       	lsr	r24
     d04:	86 95       	lsr	r24
     d06:	98 2f       	mov	r25, r24
     d08:	99 0f       	add	r25, r25
     d0a:	89 0f       	add	r24, r25
     d0c:	88 0f       	add	r24, r24
     d0e:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     d12:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     d16:	02 84       	ldd	r0, Z+10	; 0x0a
     d18:	f3 85       	ldd	r31, Z+11	; 0x0b
     d1a:	e0 2d       	mov	r30, r0
     d1c:	8d 0f       	add	r24, r29
     d1e:	19 95       	eicall
		i2c->write(ds1307_dec2bcd(day));
     d20:	cd 9d       	mul	r28, r13
     d22:	81 2d       	mov	r24, r1
     d24:	11 24       	eor	r1, r1
     d26:	86 95       	lsr	r24
     d28:	86 95       	lsr	r24
     d2a:	86 95       	lsr	r24
     d2c:	98 2f       	mov	r25, r24
     d2e:	99 0f       	add	r25, r25
     d30:	89 0f       	add	r24, r25
     d32:	88 0f       	add	r24, r24
     d34:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     d38:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     d3c:	02 84       	ldd	r0, Z+10	; 0x0a
     d3e:	f3 85       	ldd	r31, Z+11	; 0x0b
     d40:	e0 2d       	mov	r30, r0
     d42:	8c 0f       	add	r24, r28
     d44:	19 95       	eicall
		i2c->write(ds1307_dec2bcd(month));
     d46:	1d 9d       	mul	r17, r13
     d48:	81 2d       	mov	r24, r1
     d4a:	11 24       	eor	r1, r1
     d4c:	86 95       	lsr	r24
     d4e:	86 95       	lsr	r24
     d50:	86 95       	lsr	r24
     d52:	98 2f       	mov	r25, r24
     d54:	99 0f       	add	r25, r25
     d56:	89 0f       	add	r24, r25
     d58:	88 0f       	add	r24, r24
     d5a:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     d5e:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     d62:	02 84       	ldd	r0, Z+10	; 0x0a
     d64:	f3 85       	ldd	r31, Z+11	; 0x0b
     d66:	e0 2d       	mov	r30, r0
     d68:	81 0f       	add	r24, r17
     d6a:	19 95       	eicall
		i2c->write(ds1307_dec2bcd(year));
     d6c:	fd 9c       	mul	r15, r13
     d6e:	d1 2c       	mov	r13, r1
     d70:	11 24       	eor	r1, r1
     d72:	d6 94       	lsr	r13
     d74:	d6 94       	lsr	r13
     d76:	d6 94       	lsr	r13
     d78:	8d 2d       	mov	r24, r13
     d7a:	88 0f       	add	r24, r24
     d7c:	d8 0e       	add	r13, r24
     d7e:	8d 2d       	mov	r24, r13
     d80:	88 0f       	add	r24, r24
     d82:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     d86:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     d8a:	02 84       	ldd	r0, Z+10	; 0x0a
     d8c:	f3 85       	ldd	r31, Z+11	; 0x0b
     d8e:	e0 2d       	mov	r30, r0
     d90:	8f 0d       	add	r24, r15
     d92:	19 95       	eicall
		i2c->write(0x00); //start oscillator
     d94:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     d98:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     d9c:	02 84       	ldd	r0, Z+10	; 0x0a
     d9e:	f3 85       	ldd	r31, Z+11	; 0x0b
     da0:	e0 2d       	mov	r30, r0
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	19 95       	eicall
		i2c->stop();
     da6:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <i2c>
     daa:	f0 91 90 02 	lds	r31, 0x0290	; 0x800290 <i2c+0x1>
     dae:	06 80       	ldd	r0, Z+6	; 0x06
     db0:	f7 81       	ldd	r31, Z+7	; 0x07
     db2:	e0 2d       	mov	r30, r0
     db4:	19 95       	eicall
	}
	
}
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	df 90       	pop	r13
     dc4:	cf 90       	pop	r12
     dc6:	08 95       	ret

00000dc8 <get_RTC_interface>:
//Constructor
RTC_t *get_RTC_interface(i2c_t* i2cInter)
{
	if (!init)
	{
		i2c=i2cInter;
     dc8:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <i2c+0x1>
     dcc:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <i2c>
		RTCinterface.setDateTime=ds1307_setDateAndTime;
     dd0:	eb e8       	ldi	r30, 0x8B	; 139
     dd2:	f2 e0       	ldi	r31, 0x02	; 2
     dd4:	8d ef       	ldi	r24, 0xFD	; 253
     dd6:	95 e0       	ldi	r25, 0x05	; 5
     dd8:	91 83       	std	Z+1, r25	; 0x01
     dda:	80 83       	st	Z, r24
		RTCinterface.getDateTime=ds1307_getDateAndTime;
     ddc:	88 e2       	ldi	r24, 0x28	; 40
     dde:	95 e0       	ldi	r25, 0x05	; 5
     de0:	93 83       	std	Z+3, r25	; 0x03
     de2:	82 83       	std	Z+2, r24	; 0x02
	}
	return &RTCinterface;
};
     de4:	cf 01       	movw	r24, r30
     de6:	08 95       	ret

00000de8 <writeCommand>:
// ILI 9341 data sheet, page 238
static void writeCommand(uint8_t command)
{
	uint8_t bit = 0b00000001;
	
	DATA_PORT_LOW =command;
     de8:	88 b9       	out	0x08, r24	; 8
	
	DC_PORT &= ~(bit<<DC_BIT); //Trigger falling edge, no waiting because other controller is faster than us.
     dea:	5f 98       	cbi	0x0b, 7	; 11
	CS_PORT &= ~(bit<<CS_BIT);
     dec:	a1 98       	cbi	0x14, 1	; 20
	
	//Write pulse
	WR_PORT &= ~(bit<<WR_BIT); //WRX low
     dee:	a2 98       	cbi	0x14, 2	; 20
	WR_PORT |= bit<<WR_BIT; //WRX high triggers read signal
     df0:	a2 9a       	sbi	0x14, 2	; 20
     df2:	08 95       	ret

00000df4 <writeData>:
static void writeData(uint16_t data)
{
	uint8_t bit = 0b00000001;
	
	//Set data
	DATA_PORT_HIGH = (uint8_t)(data>>8);
     df4:	92 b9       	out	0x02, r25	; 2
	DATA_PORT_LOW = (uint8_t)(data&(0x00FF));
     df6:	88 b9       	out	0x08, r24	; 8
	
	DC_PORT |= bit<<DC_BIT; //Trigger rising edge, no waiting because other controller is faster than us.
     df8:	5f 9a       	sbi	0x0b, 7	; 11
	CS_PORT &= ~(bit<<CS_BIT); // Chip select active low, trigger falling edge
     dfa:	a1 98       	cbi	0x14, 1	; 20
	
	//Write pulse
	WR_PORT &= ~(bit<<WR_BIT);
     dfc:	a2 98       	cbi	0x14, 2	; 20
	WR_PORT |= bit<<WR_BIT;
     dfe:	a2 9a       	sbi	0x14, 2	; 20
     e00:	08 95       	ret

00000e02 <displayOff>:
}

static void displayOff()
{
	uint16_t command = 0b00101000;
	writeCommand(command);
     e02:	88 e2       	ldi	r24, 0x28	; 40
     e04:	f1 cf       	rjmp	.-30     	; 0xde8 <writeCommand>
     e06:	08 95       	ret

00000e08 <displayOn>:
}

static void displayOn()
{
	uint16_t command = 0b00101001;
	writeCommand(command);
     e08:	89 e2       	ldi	r24, 0x29	; 41
     e0a:	ee cf       	rjmp	.-36     	; 0xde8 <writeCommand>
     e0c:	08 95       	ret

00000e0e <setColumnAddress>:
	uint16_t command = 0b00101100;
	writeCommand(command);
}

static void setColumnAddress(uint16_t Start, uint16_t End)
{
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	08 2f       	mov	r16, r24
     e18:	d9 2f       	mov	r29, r25
     e1a:	16 2f       	mov	r17, r22
     e1c:	c7 2f       	mov	r28, r23
	uint16_t command = 0b00101010;
	writeCommand(command);
     e1e:	8a e2       	ldi	r24, 0x2A	; 42
     e20:	e3 df       	rcall	.-58     	; 0xde8 <writeCommand>
	writeData((Start>>8));
     e22:	8d 2f       	mov	r24, r29
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	e6 df       	rcall	.-52     	; 0xdf4 <writeData>
	writeData((Start));
     e28:	80 2f       	mov	r24, r16
     e2a:	9d 2f       	mov	r25, r29
     e2c:	e3 df       	rcall	.-58     	; 0xdf4 <writeData>
	writeData((End>>8));
     e2e:	8c 2f       	mov	r24, r28
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	e0 df       	rcall	.-64     	; 0xdf4 <writeData>
	writeData((End));
     e34:	81 2f       	mov	r24, r17
     e36:	9c 2f       	mov	r25, r28
     e38:	dd df       	rcall	.-70     	; 0xdf4 <writeData>
     e3a:	df 91       	pop	r29
}
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	08 95       	ret

00000e44 <setPageAddress>:
     e44:	0f 93       	push	r16

// Set Page Address (0-319), Start > End
static void setPageAddress(uint16_t Start, uint16_t End)
{
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	08 2f       	mov	r16, r24
     e4e:	d9 2f       	mov	r29, r25
     e50:	16 2f       	mov	r17, r22
     e52:	c7 2f       	mov	r28, r23
	uint16_t command = 0b00101011;
	writeCommand(command);
     e54:	8b e2       	ldi	r24, 0x2B	; 43
     e56:	c8 df       	rcall	.-112    	; 0xde8 <writeCommand>
	writeData((Start>>8));
     e58:	8d 2f       	mov	r24, r29
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	cb df       	rcall	.-106    	; 0xdf4 <writeData>
	writeData((Start));
     e5e:	80 2f       	mov	r24, r16
     e60:	9d 2f       	mov	r25, r29
     e62:	c8 df       	rcall	.-112    	; 0xdf4 <writeData>
	writeData((End>>8));
     e64:	8c 2f       	mov	r24, r28
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	c5 df       	rcall	.-118    	; 0xdf4 <writeData>
	writeData((End));
     e6a:	81 2f       	mov	r24, r17
     e6c:	9c 2f       	mov	r25, r28
     e6e:	c2 df       	rcall	.-124    	; 0xdf4 <writeData>
     e70:	df 91       	pop	r29
}
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	08 95       	ret

00000e7a <setBackgroundColor>:
     e7a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>

static void setBackgroundColor(uint16_t color)
{
	backgroundColor = color;
     e7e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     e82:	08 95       	ret

00000e84 <setCursorColor>:
}

static void setCursorColor(uint16_t color)
{
	myCursor.color = color;
     e84:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <myCursor+0x1>
     e88:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <myCursor>
     e8c:	08 95       	ret

00000e8e <setCursor>:
}

static void setCursor(uint16_t x_pos, uint16_t y_pos)
{
	myCursor.x_position = x_pos;
     e8e:	e4 ea       	ldi	r30, 0xA4	; 164
     e90:	f2 e0       	ldi	r31, 0x02	; 2
     e92:	93 83       	std	Z+3, r25	; 0x03
     e94:	82 83       	std	Z+2, r24	; 0x02
	myCursor.y_position = y_pos;
     e96:	75 83       	std	Z+5, r23	; 0x05
     e98:	64 83       	std	Z+4, r22	; 0x04
     e9a:	08 95       	ret

00000e9c <drawRectangle>:
}

static void drawRectangle(uint16_t Width, uint16_t Height)
{
     e9c:	8f 92       	push	r8
     e9e:	9f 92       	push	r9
     ea0:	af 92       	push	r10
     ea2:	bf 92       	push	r11
     ea4:	cf 92       	push	r12
     ea6:	df 92       	push	r13
     ea8:	ef 92       	push	r14
     eaa:	ff 92       	push	r15
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	ac 01       	movw	r20, r24
     eb6:	eb 01       	movw	r28, r22
	uint32_t i = 0;
	uint32_t size = (uint32_t)Width*(uint32_t)Height;
     eb8:	9c 01       	movw	r18, r24
     eba:	db 01       	movw	r26, r22
     ebc:	0e 94 1e 12 	call	0x243c	; 0x243c <__umulhisi3>
     ec0:	4b 01       	movw	r8, r22
     ec2:	5c 01       	movw	r10, r24
	setPageAddress(myCursor.x_position,(myCursor.x_position+Width));
     ec4:	04 ea       	ldi	r16, 0xA4	; 164
     ec6:	12 e0       	ldi	r17, 0x02	; 2
     ec8:	f8 01       	movw	r30, r16
     eca:	82 81       	ldd	r24, Z+2	; 0x02
     ecc:	93 81       	ldd	r25, Z+3	; 0x03
     ece:	ba 01       	movw	r22, r20
     ed0:	68 0f       	add	r22, r24
     ed2:	79 1f       	adc	r23, r25
     ed4:	b7 df       	rcall	.-146    	; 0xe44 <setPageAddress>
	setColumnAddress(myCursor.y_position,(myCursor.y_position+Height-1));
     ed6:	f8 01       	movw	r30, r16
     ed8:	84 81       	ldd	r24, Z+4	; 0x04
     eda:	95 81       	ldd	r25, Z+5	; 0x05
     edc:	bc 01       	movw	r22, r24
     ede:	61 50       	subi	r22, 0x01	; 1
     ee0:	71 09       	sbc	r23, r1
     ee2:	6c 0f       	add	r22, r28
     ee4:	7d 1f       	adc	r23, r29
     ee6:	93 df       	rcall	.-218    	; 0xe0e <setColumnAddress>
}

static void memoryWrite()
{
	uint16_t command = 0b00101100;
	writeCommand(command);
     ee8:	8c e2       	ldi	r24, 0x2C	; 44
     eea:	7e df       	rcall	.-260    	; 0xde8 <writeCommand>
     eec:	81 14       	cp	r8, r1
	uint32_t size = (uint32_t)Width*(uint32_t)Height;
	setPageAddress(myCursor.x_position,(myCursor.x_position+Width));
	setColumnAddress(myCursor.y_position,(myCursor.y_position+Height-1));
	memoryWrite();
	
	for(i = 0; i<size; i++)
     eee:	91 04       	cpc	r9, r1
     ef0:	a1 04       	cpc	r10, r1
     ef2:	b1 04       	cpc	r11, r1
     ef4:	89 f0       	breq	.+34     	; 0xf18 <drawRectangle+0x7c>
     ef6:	c1 2c       	mov	r12, r1
     ef8:	d1 2c       	mov	r13, r1
     efa:	76 01       	movw	r14, r12
     efc:	e8 01       	movw	r28, r16
	{
		writeData(myCursor.color);
     efe:	88 81       	ld	r24, Y
     f00:	99 81       	ldd	r25, Y+1	; 0x01
     f02:	78 df       	rcall	.-272    	; 0xdf4 <writeData>
     f04:	ff ef       	ldi	r31, 0xFF	; 255
	uint32_t size = (uint32_t)Width*(uint32_t)Height;
	setPageAddress(myCursor.x_position,(myCursor.x_position+Width));
	setColumnAddress(myCursor.y_position,(myCursor.y_position+Height-1));
	memoryWrite();
	
	for(i = 0; i<size; i++)
     f06:	cf 1a       	sub	r12, r31
     f08:	df 0a       	sbc	r13, r31
     f0a:	ef 0a       	sbc	r14, r31
     f0c:	ff 0a       	sbc	r15, r31
     f0e:	8c 14       	cp	r8, r12
     f10:	9d 04       	cpc	r9, r13
     f12:	ae 04       	cpc	r10, r14
     f14:	bf 04       	cpc	r11, r15
     f16:	99 f7       	brne	.-26     	; 0xefe <drawRectangle+0x62>
	{
		writeData(myCursor.color);
	}
	writeCommand(0);
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	66 df       	rcall	.-308    	; 0xde8 <writeCommand>
     f1c:	df 91       	pop	r29
}
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	08 95       	ret

00000f36 <printString>:
     f36:	2f 92       	push	r2

static void printString(char str[])
{
     f38:	3f 92       	push	r3
     f3a:	4f 92       	push	r4
     f3c:	5f 92       	push	r5
     f3e:	6f 92       	push	r6
     f40:	7f 92       	push	r7
     f42:	8f 92       	push	r8
     f44:	9f 92       	push	r9
     f46:	af 92       	push	r10
     f48:	bf 92       	push	r11
     f4a:	cf 92       	push	r12
     f4c:	df 92       	push	r13
     f4e:	ef 92       	push	r14
     f50:	ff 92       	push	r15
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	3c 01       	movw	r6, r24
	uint8_t i = 0;
	for(i = 0; i<strlen(str); i++)
     f5c:	31 2c       	mov	r3, r1



static void printCharById(uint8_t char_id)
{
	setPageAddress(myCursor.x_position,(myCursor.x_position+8));
     f5e:	0f 2e       	mov	r0, r31
     f60:	f4 ea       	ldi	r31, 0xA4	; 164
     f62:	cf 2e       	mov	r12, r31
     f64:	f2 e0       	ldi	r31, 0x02	; 2
     f66:	df 2e       	mov	r13, r31
     f68:	f0 2d       	mov	r31, r0
     f6a:	0f 2e       	mov	r0, r31
     f6c:	fd e0       	ldi	r31, 0x0D	; 13
     f6e:	2f 2e       	mov	r2, r31
     f70:	f0 2d       	mov	r31, r0
	uint8_t j = 0;
	for(i = 0; i<8; i++)
	{
		for (j = 0; j<13; j++)
		{
			if(pgm_read_byte(&letters[char_id][12-j])&(bit>>i))
     f72:	68 94       	set
     f74:	88 24       	eor	r8, r8
     f76:	87 f8       	bld	r8, 7
     f78:	91 2c       	mov	r9, r1
}

static void printString(char str[])
{
	uint8_t i = 0;
	for(i = 0; i<strlen(str); i++)
     f7a:	65 c0       	rjmp	.+202    	; 0x1046 <printString+0x110>
	{
		printCharById(((uint8_t)str[i])-32);
     f7c:	f3 01       	movw	r30, r6
     f7e:	e8 0f       	add	r30, r24
     f80:	f9 1f       	adc	r31, r25
     f82:	80 81       	ld	r24, Z
     f84:	c0 ee       	ldi	r28, 0xE0	; 224
     f86:	c8 0f       	add	r28, r24



static void printCharById(uint8_t char_id)
{
	setPageAddress(myCursor.x_position,(myCursor.x_position+8));
     f88:	f6 01       	movw	r30, r12
     f8a:	82 81       	ldd	r24, Z+2	; 0x02
     f8c:	93 81       	ldd	r25, Z+3	; 0x03
     f8e:	bc 01       	movw	r22, r24
     f90:	68 5f       	subi	r22, 0xF8	; 248
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	57 df       	rcall	.-338    	; 0xe44 <setPageAddress>
	setColumnAddress(myCursor.y_position,(myCursor.y_position+12));
     f96:	f6 01       	movw	r30, r12
     f98:	84 81       	ldd	r24, Z+4	; 0x04
     f9a:	95 81       	ldd	r25, Z+5	; 0x05
     f9c:	bc 01       	movw	r22, r24
     f9e:	64 5f       	subi	r22, 0xF4	; 244
     fa0:	7f 4f       	sbci	r23, 0xFF	; 255
     fa2:	35 df       	rcall	.-406    	; 0xe0e <setColumnAddress>
}

static void memoryWrite()
{
	uint16_t command = 0b00101100;
	writeCommand(command);
     fa4:	8c e2       	ldi	r24, 0x2C	; 44
     fa6:	20 df       	rcall	.-448    	; 0xde8 <writeCommand>
     fa8:	2c 9e       	mul	r2, r28
     faa:	c0 01       	movw	r24, r0
     fac:	11 24       	eor	r1, r1
     fae:	9c 01       	movw	r18, r24
     fb0:	20 51       	subi	r18, 0x10	; 16
     fb2:	3f 4f       	sbci	r19, 0xFF	; 255
     fb4:	29 01       	movw	r4, r18
     fb6:	fc 01       	movw	r30, r24
     fb8:	ed 51       	subi	r30, 0x1D	; 29
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	7f 01       	movw	r14, r30
     fbe:	a1 2c       	mov	r10, r1
     fc0:	b1 2c       	mov	r11, r1
     fc2:	1c c0       	rjmp	.+56     	; 0xffc <printString+0xc6>
     fc4:	fe 01       	movw	r30, r28
	uint8_t j = 0;
	for(i = 0; i<8; i++)
	{
		for (j = 0; j<13; j++)
		{
			if(pgm_read_byte(&letters[char_id][12-j])&(bit>>i))
     fc6:	84 91       	lpm	r24, Z
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	80 23       	and	r24, r16
     fcc:	91 23       	and	r25, r17
     fce:	89 2b       	or	r24, r25
     fd0:	29 f0       	breq	.+10     	; 0xfdc <printString+0xa6>
     fd2:	f6 01       	movw	r30, r12
			{
				writeData(myCursor.color);
     fd4:	80 81       	ld	r24, Z
     fd6:	91 81       	ldd	r25, Z+1	; 0x01
     fd8:	0d df       	rcall	.-486    	; 0xdf4 <writeData>
     fda:	05 c0       	rjmp	.+10     	; 0xfe6 <printString+0xb0>
     fdc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
			}
			else
			{
				writeData(backgroundColor);
     fe0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     fe4:	07 df       	rcall	.-498    	; 0xdf4 <writeData>
     fe6:	21 97       	sbiw	r28, 0x01	; 1
     fe8:	ce 15       	cp	r28, r14
	uint8_t bit = 0b10000000;
	uint8_t i = 0;
	uint8_t j = 0;
	for(i = 0; i<8; i++)
	{
		for (j = 0; j<13; j++)
     fea:	df 05       	cpc	r29, r15
     fec:	59 f7       	brne	.-42     	; 0xfc4 <printString+0x8e>
     fee:	ff ef       	ldi	r31, 0xFF	; 255
     ff0:	af 1a       	sub	r10, r31
     ff2:	bf 0a       	sbc	r11, r31
     ff4:	28 e0       	ldi	r18, 0x08	; 8
	memoryWrite();

	uint8_t bit = 0b10000000;
	uint8_t i = 0;
	uint8_t j = 0;
	for(i = 0; i<8; i++)
     ff6:	a2 16       	cp	r10, r18
     ff8:	b1 04       	cpc	r11, r1
     ffa:	49 f0       	breq	.+18     	; 0x100e <printString+0xd8>
     ffc:	84 01       	movw	r16, r8
	{
		for (j = 0; j<13; j++)
		{
			if(pgm_read_byte(&letters[char_id][12-j])&(bit>>i))
     ffe:	0a 2c       	mov	r0, r10
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <printString+0xd0>
    1002:	15 95       	asr	r17
    1004:	07 95       	ror	r16
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <printString+0xcc>
    100a:	e2 01       	movw	r28, r4
    100c:	db cf       	rjmp	.-74     	; 0xfc4 <printString+0x8e>
				writeData(backgroundColor);
			}
		}
		j = 0;
	}
	writeCommand(0);
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	eb de       	rcall	.-554    	; 0xde8 <writeCommand>
    1012:	f6 01       	movw	r30, r12
{
	uint8_t i = 0;
	for(i = 0; i<strlen(str); i++)
	{
		printCharById(((uint8_t)str[i])-32);
		if(myCursor.x_position < 280)
    1014:	82 81       	ldd	r24, Z+2	; 0x02
    1016:	93 81       	ldd	r25, Z+3	; 0x03
    1018:	88 31       	cpi	r24, 0x18	; 24
    101a:	f1 e0       	ldi	r31, 0x01	; 1
    101c:	9f 07       	cpc	r25, r31
    101e:	28 f4       	brcc	.+10     	; 0x102a <printString+0xf4>
    1020:	0d 96       	adiw	r24, 0x0d	; 13
		{
			myCursor.x_position += 13;
    1022:	f6 01       	movw	r30, r12
    1024:	93 83       	std	Z+3, r25	; 0x03
    1026:	82 83       	std	Z+2, r24	; 0x02
    1028:	0d c0       	rjmp	.+26     	; 0x1044 <printString+0x10e>
    102a:	f6 01       	movw	r30, r12
		}
		else if (myCursor.y_position < 210)
    102c:	84 81       	ldd	r24, Z+4	; 0x04
    102e:	95 81       	ldd	r25, Z+5	; 0x05
    1030:	82 3d       	cpi	r24, 0xD2	; 210
    1032:	91 05       	cpc	r25, r1
    1034:	38 f4       	brcc	.+14     	; 0x1044 <printString+0x10e>
    1036:	0d 96       	adiw	r24, 0x0d	; 13
		{
			myCursor.y_position +=13;
    1038:	95 83       	std	Z+5, r25	; 0x05
    103a:	84 83       	std	Z+4, r24	; 0x04
    103c:	2a e0       	ldi	r18, 0x0A	; 10
			myCursor.x_position = 10;
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	33 83       	std	Z+3, r19	; 0x03
    1042:	22 83       	std	Z+2, r18	; 0x02
    1044:	33 94       	inc	r3
}

static void printString(char str[])
{
	uint8_t i = 0;
	for(i = 0; i<strlen(str); i++)
    1046:	83 2d       	mov	r24, r3
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	f3 01       	movw	r30, r6
    104c:	01 90       	ld	r0, Z+
    104e:	00 20       	and	r0, r0
    1050:	e9 f7       	brne	.-6      	; 0x104c <printString+0x116>
    1052:	31 97       	sbiw	r30, 0x01	; 1
    1054:	e6 19       	sub	r30, r6
    1056:	f7 09       	sbc	r31, r7
    1058:	8e 17       	cp	r24, r30
    105a:	9f 07       	cpc	r25, r31
    105c:	08 f4       	brcc	.+2      	; 0x1060 <printString+0x12a>
    105e:	8e cf       	rjmp	.-228    	; 0xf7c <printString+0x46>
    1060:	df 91       	pop	r29
		{
			myCursor.y_position +=13;
			myCursor.x_position = 10;
		}
	}
}
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	bf 90       	pop	r11
    1072:	af 90       	pop	r10
    1074:	9f 90       	pop	r9
    1076:	8f 90       	pop	r8
    1078:	7f 90       	pop	r7
    107a:	6f 90       	pop	r6
    107c:	5f 90       	pop	r5
    107e:	4f 90       	pop	r4
    1080:	3f 90       	pop	r3
    1082:	2f 90       	pop	r2
    1084:	08 95       	ret

00001086 <printInteger>:
    1086:	cf 93       	push	r28

static void printInteger(int16_t num)
{
    1088:	df 93       	push	r29
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	2a 97       	sbiw	r28, 0x0a	; 10
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    109a:	4a e0       	ldi	r20, 0x0A	; 10
    109c:	be 01       	movw	r22, r28
    109e:	6f 5f       	subi	r22, 0xFF	; 255
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255
    10a2:	0e 94 41 12 	call	0x2482	; 0x2482 <__itoa_ncheck>
	char buf[10];
	itoa(num,buf,10);
	printString(buf);
    10a6:	ce 01       	movw	r24, r28
    10a8:	01 96       	adiw	r24, 0x01	; 1
    10aa:	45 df       	rcall	.-374    	; 0xf36 <printString>
}
    10ac:	2a 96       	adiw	r28, 0x0a	; 10
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	08 95       	ret

000010be <printFloat>:

static void printFloat(float num)
{
    10be:	8f 92       	push	r8
    10c0:	9f 92       	push	r9
    10c2:	af 92       	push	r10
    10c4:	bf 92       	push	r11
    10c6:	cf 92       	push	r12
    10c8:	df 92       	push	r13
    10ca:	ef 92       	push	r14
    10cc:	ff 92       	push	r15
    10ce:	4b 01       	movw	r8, r22
    10d0:	5c 01       	movw	r10, r24
	uint16_t roundnum = num;
    10d2:	0e 94 c6 10 	call	0x218c	; 0x218c <__fixunssfsi>
    10d6:	6b 01       	movw	r12, r22
    10d8:	7c 01       	movw	r14, r24
	printInteger(roundnum);
    10da:	cb 01       	movw	r24, r22
    10dc:	d4 df       	rcall	.-88     	; 0x1086 <printInteger>
	printString(".");
    10de:	82 e1       	ldi	r24, 0x12	; 18
    10e0:	92 e0       	ldi	r25, 0x02	; 2
    10e2:	29 df       	rcall	.-430    	; 0xf36 <printString>
	uint16_t dec = (num*100)-(roundnum*100);
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	48 ec       	ldi	r20, 0xC8	; 200
    10ea:	52 e4       	ldi	r21, 0x42	; 66
    10ec:	c5 01       	movw	r24, r10
    10ee:	b4 01       	movw	r22, r8
    10f0:	0e 94 84 11 	call	0x2308	; 0x2308 <__mulsf3>
    10f4:	4b 01       	movw	r8, r22
    10f6:	5c 01       	movw	r10, r24
    10f8:	84 e6       	ldi	r24, 0x64	; 100
    10fa:	8c 9d       	mul	r24, r12
    10fc:	b0 01       	movw	r22, r0
    10fe:	8d 9d       	mul	r24, r13
    1100:	70 0d       	add	r23, r0
    1102:	11 24       	eor	r1, r1
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__floatunsisf>
    110c:	9b 01       	movw	r18, r22
    110e:	ac 01       	movw	r20, r24
    1110:	c5 01       	movw	r24, r10
    1112:	b4 01       	movw	r22, r8
    1114:	6e d7       	rcall	.+3804   	; 0x1ff2 <__subsf3>
    1116:	0e 94 c6 10 	call	0x218c	; 0x218c <__fixunssfsi>
    111a:	6b 01       	movw	r12, r22
    111c:	7c 01       	movw	r14, r24
	if (dec<10)
    111e:	8a e0       	ldi	r24, 0x0A	; 10
    1120:	c8 16       	cp	r12, r24
    1122:	d1 04       	cpc	r13, r1
	{
		printInteger(0);
    1124:	18 f4       	brcc	.+6      	; 0x112c <printFloat+0x6e>
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e0       	ldi	r25, 0x00	; 0
	}
	printInteger(dec);
    112a:	ad df       	rcall	.-166    	; 0x1086 <printInteger>
    112c:	c6 01       	movw	r24, r12
    112e:	ab df       	rcall	.-170    	; 0x1086 <printInteger>
}
    1130:	ff 90       	pop	r15
    1132:	ef 90       	pop	r14
    1134:	df 90       	pop	r13
    1136:	cf 90       	pop	r12
    1138:	bf 90       	pop	r11
    113a:	af 90       	pop	r10
    113c:	9f 90       	pop	r9
    113e:	8f 90       	pop	r8
    1140:	08 95       	ret

00001142 <lcdDriver_getDriver>:
static void printInteger(int16_t num);
static void printFloat(float num);

lcdDriverInterface_t* lcdDriver_getDriver()
{
	if(!initialized)
    1142:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <initialized>
    1146:	81 11       	cpse	r24, r1
    1148:	64 c0       	rjmp	.+200    	; 0x1212 <lcdDriver_getDriver+0xd0>
static void driverInit()
{
	uint8_t bit = 0b00000001;
	
	//Set control bits to output
	DDRG |= (bit<<CS_BIT)|(bit<<RST_BIT)|(bit<<WR_BIT);
    114a:	83 b3       	in	r24, 0x13	; 19
    114c:	87 60       	ori	r24, 0x07	; 7
    114e:	83 bb       	out	0x13, r24	; 19
	DDRD |= (bit<<DC_BIT);
    1150:	57 9a       	sbi	0x0a, 7	; 10
	
	//Set data ports to output
	DDRA |= 0xFF;
    1152:	81 b1       	in	r24, 0x01	; 1
    1154:	8f ef       	ldi	r24, 0xFF	; 255
    1156:	81 b9       	out	0x01, r24	; 1
	DDRC |= 0xFF;
    1158:	97 b1       	in	r25, 0x07	; 7
    115a:	87 b9       	out	0x07, r24	; 7
	
	// set control pins start position high
	DC_PORT |= bit<<DC_BIT;
    115c:	5f 9a       	sbi	0x0b, 7	; 11
	WR_PORT |= bit<<WR_BIT;
    115e:	a2 9a       	sbi	0x14, 2	; 20
	CS_PORT	|= bit<<CS_BIT;
    1160:	a1 9a       	sbi	0x14, 1	; 20
	RST_PORT|= bit<<RST_BIT;
    1162:	a0 9a       	sbi	0x14, 0	; 20
	
	//Reset grafik display
	RST_PORT &= ~(bit<<RST_BIT);
    1164:	a0 98       	cbi	0x14, 0	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1166:	2f ef       	ldi	r18, 0xFF	; 255
    1168:	89 e6       	ldi	r24, 0x69	; 105
    116a:	98 e1       	ldi	r25, 0x18	; 24
    116c:	21 50       	subi	r18, 0x01	; 1
    116e:	80 40       	sbci	r24, 0x00	; 0
    1170:	90 40       	sbci	r25, 0x00	; 0
    1172:	e1 f7       	brne	.-8      	; 0x116c <lcdDriver_getDriver+0x2a>
    1174:	00 c0       	rjmp	.+0      	; 0x1176 <lcdDriver_getDriver+0x34>
    1176:	00 00       	nop
	_delay_ms(500);
	RST_PORT|= bit<<RST_BIT;
    1178:	a0 9a       	sbi	0x14, 0	; 20
    117a:	af ef       	ldi	r26, 0xFF	; 255
    117c:	b8 e5       	ldi	r27, 0x58	; 88
    117e:	26 e0       	ldi	r18, 0x06	; 6
    1180:	a1 50       	subi	r26, 0x01	; 1
    1182:	b0 40       	sbci	r27, 0x00	; 0
    1184:	20 40       	sbci	r18, 0x00	; 0
    1186:	e1 f7       	brne	.-8      	; 0x1180 <lcdDriver_getDriver+0x3e>
    1188:	00 c0       	rjmp	.+0      	; 0x118a <lcdDriver_getDriver+0x48>
    118a:	00 00       	nop
}

static void sleepOut()
{
	uint16_t command = 0b00010001;
	writeCommand(command);
    118c:	81 e1       	ldi	r24, 0x11	; 17
    118e:	2c de       	rcall	.-936    	; 0xde8 <writeCommand>
	RST_PORT|= bit<<RST_BIT;
	_delay_ms(130);
	
	sleepOut();
	// Display on
	displayOn();
    1190:	3b de       	rcall	.-906    	; 0xe08 <displayOn>
}

static void memoryAccessControl(uint8_t parameter)
{
	uint16_t command = 0b00110110;
	writeCommand(command);
    1192:	86 e3       	ldi	r24, 0x36	; 54
    1194:	29 de       	rcall	.-942    	; 0xde8 <writeCommand>
	writeData((uint16_t)parameter);
    1196:	88 e0       	ldi	r24, 0x08	; 8
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	2c de       	rcall	.-936    	; 0xdf4 <writeData>
}

static void interfacePixelFormat(uint8_t parameter)
{
	uint16_t command = 0b00111010;
	writeCommand(command);
    119c:	8a e3       	ldi	r24, 0x3A	; 58
    119e:	24 de       	rcall	.-952    	; 0xde8 <writeCommand>
	writeData((uint16_t)parameter);
    11a0:	85 e0       	ldi	r24, 0x05	; 5
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	27 de       	rcall	.-946    	; 0xdf4 <writeData>
    11a6:	86 e0       	ldi	r24, 0x06	; 6
	// Set bit BGR (scanning direction)
	memoryAccessControl(0b00001000);
	// 16 bits (2 bytes) per pixel
	interfacePixelFormat(0b00000101);
	
	memset(&myCursor,0,sizeof(myCursor));
    11a8:	e4 ea       	ldi	r30, 0xA4	; 164
    11aa:	f2 e0       	ldi	r31, 0x02	; 2
    11ac:	df 01       	movw	r26, r30
    11ae:	1d 92       	st	X+, r1
    11b0:	8a 95       	dec	r24
    11b2:	e9 f7       	brne	.-6      	; 0x11ae <lcdDriver_getDriver+0x6c>
    11b4:	e2 e9       	ldi	r30, 0x92	; 146
lcdDriverInterface_t* lcdDriver_getDriver()
{
	if(!initialized)
	{
		driverInit();
		myInterface.displayON = displayOn;
    11b6:	f2 e0       	ldi	r31, 0x02	; 2
    11b8:	84 e0       	ldi	r24, 0x04	; 4
    11ba:	97 e0       	ldi	r25, 0x07	; 7
    11bc:	91 83       	std	Z+1, r25	; 0x01
    11be:	80 83       	st	Z, r24
    11c0:	81 e0       	ldi	r24, 0x01	; 1
		myInterface.displayOFF = displayOff;
    11c2:	97 e0       	ldi	r25, 0x07	; 7
    11c4:	93 83       	std	Z+3, r25	; 0x03
    11c6:	82 83       	std	Z+2, r24	; 0x02
    11c8:	8d e3       	ldi	r24, 0x3D	; 61
		myInterface.setBackgroundColor = setBackgroundColor;
    11ca:	97 e0       	ldi	r25, 0x07	; 7
    11cc:	95 83       	std	Z+5, r25	; 0x05
    11ce:	84 83       	std	Z+4, r24	; 0x04
    11d0:	82 e4       	ldi	r24, 0x42	; 66
		myInterface.setCursorColor = setCursorColor;
    11d2:	97 e0       	ldi	r25, 0x07	; 7
    11d4:	97 83       	std	Z+7, r25	; 0x07
    11d6:	86 83       	std	Z+6, r24	; 0x06
    11d8:	87 e4       	ldi	r24, 0x47	; 71
		myInterface.setCursor = setCursor;
    11da:	97 e0       	ldi	r25, 0x07	; 7
    11dc:	91 87       	std	Z+9, r25	; 0x09
    11de:	80 87       	std	Z+8, r24	; 0x08
    11e0:	8e e4       	ldi	r24, 0x4E	; 78
		myInterface.drawRectangle = drawRectangle;
    11e2:	97 e0       	ldi	r25, 0x07	; 7
    11e4:	93 87       	std	Z+11, r25	; 0x0b
    11e6:	82 87       	std	Z+10, r24	; 0x0a
    11e8:	8b e9       	ldi	r24, 0x9B	; 155
		myInterface.printString = printString;
    11ea:	97 e0       	ldi	r25, 0x07	; 7
    11ec:	95 87       	std	Z+13, r25	; 0x0d
    11ee:	84 87       	std	Z+12, r24	; 0x0c
    11f0:	83 e4       	ldi	r24, 0x43	; 67
		myInterface.printInteger = printInteger;
    11f2:	98 e0       	ldi	r25, 0x08	; 8
    11f4:	97 87       	std	Z+15, r25	; 0x0f
    11f6:	86 87       	std	Z+14, r24	; 0x0e
    11f8:	8f e5       	ldi	r24, 0x5F	; 95
		myInterface.printFloat = printFloat;
    11fa:	98 e0       	ldi	r25, 0x08	; 8
    11fc:	91 8b       	std	Z+17, r25	; 0x11
    11fe:	80 8b       	std	Z+16, r24	; 0x10
    1200:	8f ef       	ldi	r24, 0xFF	; 255
		
		backgroundColor = WHITE;
    1202:	9f ef       	ldi	r25, 0xFF	; 255
    1204:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1208:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    120c:	81 e0       	ldi	r24, 0x01	; 1
		initialized = true;
    120e:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <initialized>
    1212:	82 e9       	ldi	r24, 0x92	; 146
	}
	return &myInterface;
}
    1214:	92 e0       	ldi	r25, 0x02	; 2
    1216:	08 95       	ret

00001218 <rgb3byteToInt>:
	uint16_t colorInt = 0;
	colorInt |= ((uint16_t)(red>>3)) << 11;
	colorInt |= ((uint16_t)(green>>2)) << 5;
	colorInt |= ((uint16_t)(blue>>3));
	
	return colorInt;
    1218:	66 95       	lsr	r22
    121a:	66 95       	lsr	r22
    121c:	90 e2       	ldi	r25, 0x20	; 32
    121e:	69 9f       	mul	r22, r25
    1220:	b0 01       	movw	r22, r0
    1222:	11 24       	eor	r1, r1
    1224:	46 95       	lsr	r20
    1226:	46 95       	lsr	r20
    1228:	46 95       	lsr	r20
    122a:	64 2b       	or	r22, r20
    122c:	86 95       	lsr	r24
    122e:	86 95       	lsr	r24
    1230:	86 95       	lsr	r24
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	98 2f       	mov	r25, r24
    1236:	88 27       	eor	r24, r24
    1238:	99 0f       	add	r25, r25
    123a:	99 0f       	add	r25, r25
    123c:	99 0f       	add	r25, r25
    123e:	86 2b       	or	r24, r22
    1240:	97 2b       	or	r25, r23
    1242:	08 95       	ret

00001244 <getTripDistance>:

static float getTripDistance(void)  //WORKS TESTED 
{ 
	
	float KMD = ((revLength*milestoneCount)/1000)+kmCount; //Total KM distance driven
	return KMD;
    1244:	60 91 be 02 	lds	r22, 0x02BE	; 0x8002be <milestoneCount>
    1248:	70 91 bf 02 	lds	r23, 0x02BF	; 0x8002bf <milestoneCount+0x1>
    124c:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <milestoneCount+0x2>
    1250:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <milestoneCount+0x3>
    1254:	c7 d7       	rcall	.+3982   	; 0x21e4 <__floatunsisf>
    1256:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <revLength>
    125a:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <revLength+0x1>
    125e:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <revLength+0x2>
    1262:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <revLength+0x3>
    1266:	0e 94 84 11 	call	0x2308	; 0x2308 <__mulsf3>
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	4a e7       	ldi	r20, 0x7A	; 122
    1270:	54 e4       	ldi	r21, 0x44	; 68
    1272:	24 d7       	rcall	.+3656   	; 0x20bc <__divsf3>
    1274:	20 91 ba 02 	lds	r18, 0x02BA	; 0x8002ba <kmCount>
    1278:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <kmCount+0x1>
    127c:	40 91 bc 02 	lds	r20, 0x02BC	; 0x8002bc <kmCount+0x2>
    1280:	50 91 bd 02 	lds	r21, 0x02BD	; 0x8002bd <kmCount+0x3>
    1284:	b7 c6       	rjmp	.+3438   	; 0x1ff4 <__addsf3>
	
	//return (float) milestoneCount;
}
    1286:	08 95       	ret

00001288 <updateMilestoneCount>:

static void updateMilestoneCount()
{
	milestoneCount++;
    1288:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <milestoneCount>
    128c:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <milestoneCount+0x1>
    1290:	a0 91 c0 02 	lds	r26, 0x02C0	; 0x8002c0 <milestoneCount+0x2>
    1294:	b0 91 c1 02 	lds	r27, 0x02C1	; 0x8002c1 <milestoneCount+0x3>
    1298:	01 96       	adiw	r24, 0x01	; 1
    129a:	a1 1d       	adc	r26, r1
    129c:	b1 1d       	adc	r27, r1
    129e:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <milestoneCount>
    12a2:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <milestoneCount+0x1>
    12a6:	a0 93 c0 02 	sts	0x02C0, r26	; 0x8002c0 <milestoneCount+0x2>
    12aa:	b0 93 c1 02 	sts	0x02C1, r27	; 0x8002c1 <milestoneCount+0x3>
    12ae:	08 95       	ret

000012b0 <updateRevolutionCount>:
}

static void updateRevolutionCount(uint8_t revs)
{
	static uint8_t cnt = 0;
	revPerSec[cnt] = revs;
    12b0:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <cnt.1946>
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	f9 01       	movw	r30, r18
    12b8:	ee 53       	subi	r30, 0x3E	; 62
    12ba:	fd 4f       	sbci	r31, 0xFD	; 253
    12bc:	80 83       	st	Z, r24
	cnt = (cnt+1) % 4;
    12be:	c9 01       	movw	r24, r18
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	83 70       	andi	r24, 0x03	; 3
    12c4:	90 78       	andi	r25, 0x80	; 128
    12c6:	99 23       	and	r25, r25
    12c8:	24 f4       	brge	.+8      	; 0x12d2 <updateRevolutionCount+0x22>
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	8c 6f       	ori	r24, 0xFC	; 252
    12ce:	9f 6f       	ori	r25, 0xFF	; 255
    12d0:	01 96       	adiw	r24, 0x01	; 1
    12d2:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <cnt.1946>
    12d6:	08 95       	ret

000012d8 <getSpeedKMH>:
{
	uint16_t retVal = 0;
	uint8_t i = 0;
	for (i = 0; i<4; i++)
	{
		retVal += revPerSec[i];
    12d8:	e2 ec       	ldi	r30, 0xC2	; 194
    12da:	f2 e0       	ldi	r31, 0x02	; 2
    12dc:	80 81       	ld	r24, Z
    12de:	61 81       	ldd	r22, Z+1	; 0x01
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	68 0f       	add	r22, r24
    12e4:	71 1d       	adc	r23, r1
    12e6:	82 81       	ldd	r24, Z+2	; 0x02
    12e8:	68 0f       	add	r22, r24
    12ea:	71 1d       	adc	r23, r1
{
	//char buffer[10];
	
	float KMH = ((float)sumRevolutions()/4)*revLength*3.6; // Revolutions per second times revolution length = m/s. time 3.6 = km/h
	
	return KMH; 
    12ec:	83 81       	ldd	r24, Z+3	; 0x03
    12ee:	68 0f       	add	r22, r24
    12f0:	71 1d       	adc	r23, r1
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	76 d7       	rcall	.+3820   	; 0x21e4 <__floatunsisf>
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e8       	ldi	r20, 0x80	; 128
    12fe:	5e e3       	ldi	r21, 0x3E	; 62
    1300:	0e 94 84 11 	call	0x2308	; 0x2308 <__mulsf3>
    1304:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <revLength>
    1308:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <revLength+0x1>
    130c:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <revLength+0x2>
    1310:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <revLength+0x3>
    1314:	f9 d7       	rcall	.+4082   	; 0x2308 <__mulsf3>
    1316:	26 e6       	ldi	r18, 0x66	; 102
    1318:	36 e6       	ldi	r19, 0x66	; 102
    131a:	46 e6       	ldi	r20, 0x66	; 102
    131c:	50 e4       	ldi	r21, 0x40	; 64
    131e:	f4 c7       	rjmp	.+4072   	; 0x2308 <__mulsf3>
}
    1320:	08 95       	ret

00001322 <eepromSave>:
}


static void eepromSave(void)
{
	eeprom_update_float(&eepromKmCount,getTripDistance());
    1322:	90 df       	rcall	.-224    	; 0x1244 <getTripDistance>
    1324:	ab 01       	movw	r20, r22
    1326:	bc 01       	movw	r22, r24
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <eeprom_update_dword>
    1330:	08 95       	ret

00001332 <speedSensor_getDriver>:

static float getSpeedKMH(void);
static float getTripDistance(void);

speedSensorInterface_t* speedSensor_getDriver(float wheelDiameter)
{
    1332:	cf 92       	push	r12
    1334:	df 92       	push	r13
    1336:	ef 92       	push	r14
    1338:	ff 92       	push	r15
	if (!initialized)
    133a:	20 91 af 02 	lds	r18, 0x02AF	; 0x8002af <initialized>
    133e:	21 11       	cpse	r18, r1
    1340:	5e c0       	rjmp	.+188    	; 0x13fe <speedSensor_getDriver+0xcc>
}

static void initSpeedSensor(float wheelDiameter)
{
	float wheelD=(wheelDiameter/200); //Calculations to meters centered ( /100 & /2)
	revLength=(wheelD*3.1415); //One revolution gives meters
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	48 e4       	ldi	r20, 0x48	; 72
    1348:	53 e4       	ldi	r21, 0x43	; 67
    134a:	b8 d6       	rcall	.+3440   	; 0x20bc <__divsf3>
    134c:	26 e5       	ldi	r18, 0x56	; 86
    134e:	3e e0       	ldi	r19, 0x0E	; 14
    1350:	49 e4       	ldi	r20, 0x49	; 73
    1352:	50 e4       	ldi	r21, 0x40	; 64
    1354:	d9 d7       	rcall	.+4018   	; 0x2308 <__mulsf3>
    1356:	60 93 ab 02 	sts	0x02AB, r22	; 0x8002ab <revLength>
    135a:	70 93 ac 02 	sts	0x02AC, r23	; 0x8002ac <revLength+0x1>
    135e:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <revLength+0x2>
    1362:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <revLength+0x3>
	kmCount = eeprom_read_float(&eepromKmCount);
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 74 12 	call	0x24e8	; 0x24e8 <eeprom_read_dword>
    136e:	6b 01       	movw	r12, r22
    1370:	7c 01       	movw	r14, r24
	//eeprom_write_float(&eepromKmCount,0.0);
	if (kmCount > 10000)
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e4       	ldi	r19, 0x40	; 64
    1376:	4c e1       	ldi	r20, 0x1C	; 28
    1378:	56 e4       	ldi	r21, 0x46	; 70
    137a:	c2 d7       	rcall	.+3972   	; 0x2300 <__gesf2>
    137c:	18 16       	cp	r1, r24
    137e:	4c f0       	brlt	.+18     	; 0x1392 <speedSensor_getDriver+0x60>

static void initSpeedSensor(float wheelDiameter)
{
	float wheelD=(wheelDiameter/200); //Calculations to meters centered ( /100 & /2)
	revLength=(wheelD*3.1415); //One revolution gives meters
	kmCount = eeprom_read_float(&eepromKmCount);
    1380:	c0 92 ba 02 	sts	0x02BA, r12	; 0x8002ba <kmCount>
    1384:	d0 92 bb 02 	sts	0x02BB, r13	; 0x8002bb <kmCount+0x1>
    1388:	e0 92 bc 02 	sts	0x02BC, r14	; 0x8002bc <kmCount+0x2>
    138c:	f0 92 bd 02 	sts	0x02BD, r15	; 0x8002bd <kmCount+0x3>
    1390:	08 c0       	rjmp	.+16     	; 0x13a2 <speedSensor_getDriver+0x70>
	//eeprom_write_float(&eepromKmCount,0.0);
	if (kmCount > 10000)
	{
		kmCount = 0;
    1392:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <kmCount>
    1396:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <kmCount+0x1>
    139a:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <kmCount+0x2>
    139e:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <kmCount+0x3>
	}
	milestoneCount = 0;
    13a2:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <milestoneCount>
    13a6:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <milestoneCount+0x1>
    13aa:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <milestoneCount+0x2>
    13ae:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <milestoneCount+0x3>
	//Timer2 is used for keeping time of rpm measurement.
	// Timer2: Normal mode, No prescaling
	TCCR2A = 0b00000000;
    13b2:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	TCCR2B = 0b00000001;
    13b6:	91 e0       	ldi	r25, 0x01	; 1
    13b8:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
	// Timer2 overflow interrupt enable
	TIMSK2 |= 0b00000001;
    13bc:	e0 e7       	ldi	r30, 0x70	; 112
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	81 60       	ori	r24, 0x01	; 1
    13c4:	80 83       	st	Z, r24
	
	// INT3:Rising edge
	EICRA = 0b11000000;
    13c6:	80 ec       	ldi	r24, 0xC0	; 192
    13c8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	// Enable extern interrupts INT3 
	EIMSK |= 0b00001000;
    13cc:	eb 9a       	sbi	0x1d, 3	; 29
speedSensorInterface_t* speedSensor_getDriver(float wheelDiameter)
{
	if (!initialized)
	{
		initSpeedSensor(wheelDiameter);
		myInterface.getSpeedInKmh = getSpeedKMH;
    13ce:	e0 eb       	ldi	r30, 0xB0	; 176
    13d0:	f2 e0       	ldi	r31, 0x02	; 2
    13d2:	2c e6       	ldi	r18, 0x6C	; 108
    13d4:	39 e0       	ldi	r19, 0x09	; 9
    13d6:	37 83       	std	Z+7, r19	; 0x07
    13d8:	26 83       	std	Z+6, r18	; 0x06
		myInterface.getTripDistance = getTripDistance;
    13da:	22 e2       	ldi	r18, 0x22	; 34
    13dc:	39 e0       	ldi	r19, 0x09	; 9
    13de:	31 87       	std	Z+9, r19	; 0x09
    13e0:	20 87       	std	Z+8, r18	; 0x08
		myInterface.saveMilestoneCount = eepromSave;
    13e2:	21 e9       	ldi	r18, 0x91	; 145
    13e4:	39 e0       	ldi	r19, 0x09	; 9
    13e6:	35 83       	std	Z+5, r19	; 0x05
    13e8:	24 83       	std	Z+4, r18	; 0x04
		myInterface.updateMilestoneCount = updateMilestoneCount;
    13ea:	24 e4       	ldi	r18, 0x44	; 68
    13ec:	39 e0       	ldi	r19, 0x09	; 9
    13ee:	33 83       	std	Z+3, r19	; 0x03
    13f0:	22 83       	std	Z+2, r18	; 0x02
		myInterface.updateRevolutionCount = updateRevolutionCount;
    13f2:	28 e5       	ldi	r18, 0x58	; 88
    13f4:	39 e0       	ldi	r19, 0x09	; 9
    13f6:	31 83       	std	Z+1, r19	; 0x01
    13f8:	20 83       	st	Z, r18
		initialized = true;
    13fa:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <initialized>
	}
	return &myInterface;
}
    13fe:	80 eb       	ldi	r24, 0xB0	; 176
    1400:	92 e0       	ldi	r25, 0x02	; 2
    1402:	ff 90       	pop	r15
    1404:	ef 90       	pop	r14
    1406:	df 90       	pop	r13
    1408:	cf 90       	pop	r12
    140a:	08 95       	ret

0000140c <getDataDHT>:
Index 3 of array is decimal part of temperature
Index 4 of array is the check sum  
-------------function description end-------------------------------------------------------
**/
static void getDataDHT(uint8_t* temp, uint8_t* humid)
{
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	00 d0       	rcall	.+0      	; 0x1412 <getDataDHT+0x6>
    1412:	1f 92       	push	r1
    1414:	1f 92       	push	r1
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	dc 01       	movw	r26, r24
	uint8_t data[5]; //To store all received data
	uint8_t array[5]; //The save and checked data after CRC

	
	//Request data, the microcontroller sends start pulse
	DDRB |=(1<<DHT_PIN); //Output
    141c:	24 9a       	sbi	0x04, 4	; 4
	PORTB &=~(1<<DHT_PIN); //Pull low
    141e:	2c 98       	cbi	0x05, 4	; 5
    1420:	2f ef       	ldi	r18, 0xFF	; 255
    1422:	89 ef       	ldi	r24, 0xF9	; 249
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	21 50       	subi	r18, 0x01	; 1
    1428:	80 40       	sbci	r24, 0x00	; 0
    142a:	90 40       	sbci	r25, 0x00	; 0
    142c:	e1 f7       	brne	.-8      	; 0x1426 <getDataDHT+0x1a>
    142e:	00 c0       	rjmp	.+0      	; 0x1430 <getDataDHT+0x24>
    1430:	00 00       	nop
	_delay_ms(20); //wait as stated in datasheet 
	PORTB |=(1<<DHT_PIN); //Pull high
    1432:	2c 9a       	sbi	0x05, 4	; 5
	
	//Get response form the DHT11
	DDRB &=~(1<<DHT_PIN); //Input
    1434:	24 98       	cbi	0x04, 4	; 4
	while(PINB &(1<<DHT_PIN));
    1436:	1c 99       	sbic	0x03, 4	; 3
    1438:	fe cf       	rjmp	.-4      	; 0x1436 <getDataDHT+0x2a>
	while((PINB &(1<<DHT_PIN))==0);
    143a:	1c 9b       	sbis	0x03, 4	; 3
    143c:	fe cf       	rjmp	.-4      	; 0x143a <getDataDHT+0x2e>
	while(PINB &(1<<DHT_PIN));
    143e:	1c 99       	sbic	0x03, 4	; 3
    1440:	fe cf       	rjmp	.-4      	; 0x143e <getDataDHT+0x32>
    1442:	fe 01       	movw	r30, r28
    1444:	31 96       	adiw	r30, 0x01	; 1
    1446:	ae 01       	movw	r20, r28
    1448:	4a 5f       	subi	r20, 0xFA	; 250
    144a:	5f 4f       	sbci	r21, 0xFF	; 255
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	13 c0       	rjmp	.+38     	; 0x1476 <getDataDHT+0x6a>
	
		//Getting data for each 8 bit data received 
		for (i=0; i<8; i++)
		{
		
			while ((PINB & (1<<DHT_PIN))==0); //Wait and check received bit
    1450:	1c 9b       	sbis	0x03, 4	; 3
    1452:	fe cf       	rjmp	.-4      	; 0x1450 <getDataDHT+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1454:	80 ea       	ldi	r24, 0xA0	; 160
    1456:	8a 95       	dec	r24
    1458:	f1 f7       	brne	.-4      	; 0x1456 <getDataDHT+0x4a>
		
			_delay_us(30); //Wait 30 us as stated in datasheet 
			if (PINB & (1<<DHT_PIN)) //If the signal is longer than 30us then its HIGH else its logic low
    145a:	1c 9b       	sbis	0x03, 4	; 3
    145c:	03 c0       	rjmp	.+6      	; 0x1464 <getDataDHT+0x58>
			{
				dataRecived=(dataRecived<<1)|(0x01);
    145e:	99 0f       	add	r25, r25
    1460:	91 60       	ori	r25, 0x01	; 1
    1462:	01 c0       	rjmp	.+2      	; 0x1466 <getDataDHT+0x5a>
			}
			else
			{
				dataRecived=(dataRecived<<1);
    1464:	99 0f       	add	r25, r25
			}
		
			while(PINB &(1<<DHT_PIN));
    1466:	1c 99       	sbic	0x03, 4	; 3
    1468:	fe cf       	rjmp	.-4      	; 0x1466 <getDataDHT+0x5a>
    146a:	21 50       	subi	r18, 0x01	; 1
	
	for (j=0; j<5; j++)
	{
	
		//Getting data for each 8 bit data received 
		for (i=0; i<8; i++)
    146c:	89 f7       	brne	.-30     	; 0x1450 <getDataDHT+0x44>
		
			while(PINB &(1<<DHT_PIN));
		
		}
		
		data[j]=dataRecived; //getting the data and indexing it in array
    146e:	91 93       	st	Z+, r25
	while(PINB &(1<<DHT_PIN));
	while((PINB &(1<<DHT_PIN))==0);
	while(PINB &(1<<DHT_PIN));
	
	
	for (j=0; j<5; j++)
    1470:	e4 17       	cp	r30, r20
    1472:	f5 07       	cpc	r31, r21
    1474:	11 f0       	breq	.+4      	; 0x147a <getDataDHT+0x6e>
Index 3 of array is decimal part of temperature
Index 4 of array is the check sum  
-------------function description end-------------------------------------------------------
**/
static void getDataDHT(uint8_t* temp, uint8_t* humid)
{
    1476:	28 e0       	ldi	r18, 0x08	; 8
    1478:	eb cf       	rjmp	.-42     	; 0x1450 <getDataDHT+0x44>
		data[j]=dataRecived; //getting the data and indexing it in array
		
	}
	
	//CRC checkup 
	if ((data[0]+data[1]+data[2]+data[3]) !=data[4])
    147a:	49 81       	ldd	r20, Y+1	; 0x01
    147c:	5b 81       	ldd	r21, Y+3	; 0x03
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	24 2f       	mov	r18, r20
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	28 0f       	add	r18, r24
    1486:	31 1d       	adc	r19, r1
    1488:	25 0f       	add	r18, r21
    148a:	31 1d       	adc	r19, r1
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
    148e:	28 0f       	add	r18, r24
    1490:	31 1d       	adc	r19, r1
    1492:	8d 81       	ldd	r24, Y+5	; 0x05
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	28 17       	cp	r18, r24
    1498:	39 07       	cpc	r19, r25
    149a:	19 f4       	brne	.+6      	; 0x14a2 <getDataDHT+0x96>
	{
		for (i=0; i < 4; i++)
		{
			array[i]=data[i]; //transfer data
		}
			*temp=array[2];	//gets integer part of temperature byte 2 in array
    149c:	5c 93       	st	X, r21
			*humid=array[0]; //gets integer part of humidity byte 0 in array
    149e:	fb 01       	movw	r30, r22
    14a0:	40 83       	st	Z, r20
	}
	
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	08 95       	ret

000014b2 <getDHTInterface>:
//Constructor
DHT_t *getDHTInterface(void)
{
	if (!init)
	{
		DHTinterface.getTempHumid=getDataDHT;
    14b2:	86 e0       	ldi	r24, 0x06	; 6
    14b4:	9a e0       	ldi	r25, 0x0A	; 10
    14b6:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <DHTinterface+0x1>
    14ba:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <DHTinterface>
	}
	return &DHTinterface;
};
    14be:	86 ec       	ldi	r24, 0xC6	; 198
    14c0:	92 e0       	ldi	r25, 0x02	; 2
    14c2:	08 95       	ret

000014c4 <CLK>:
}

static void CLK()
{
	uint8_t bit = 0b00000001;
	TOUCH_CLK_PORT |= bit<<TOUCH_CLK_BIT;
    14c4:	e2 e0       	ldi	r30, 0x02	; 2
    14c6:	f1 e0       	ldi	r31, 0x01	; 1
    14c8:	80 81       	ld	r24, Z
    14ca:	88 60       	ori	r24, 0x08	; 8
    14cc:	80 83       	st	Z, r24
	...
	_NOP();
	_NOP();
	_NOP();
	_NOP();
	
	TOUCH_CLK_PORT &= ~(bit<<TOUCH_CLK_BIT);
    14d6:	80 81       	ld	r24, Z
    14d8:	87 7f       	andi	r24, 0xF7	; 247
    14da:	80 83       	st	Z, r24
	...
	_NOP();
	_NOP();
	_NOP();
	_NOP();
    14e4:	08 95       	ret

000014e6 <getData>:
	DDRE &= ~(bit<<TOUCH_DOUT_BIT);
	DDRE &= ~(bit<<TOUCH_IRQ_BIT);
}

static uint16_t getData(uint8_t command)
{
    14e6:	ef 92       	push	r14
    14e8:	ff 92       	push	r15
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t bit = 0b00000001;
	uint16_t data = 0;
	
	TOUCH_CS_PORT |= bit<<TOUCH_CS_BIT;
    14f2:	73 9a       	sbi	0x0e, 3	; 14
	TOUCH_CLK_PORT &= ~(bit<<TOUCH_CLK_BIT);
    14f4:	e2 e0       	ldi	r30, 0x02	; 2
    14f6:	f1 e0       	ldi	r31, 0x01	; 1
    14f8:	90 81       	ld	r25, Z
    14fa:	97 7f       	andi	r25, 0xF7	; 247
    14fc:	90 83       	st	Z, r25
	
	/* Start sending command */
	TOUCH_CS_PORT &= ~(bit<<TOUCH_CS_BIT);
    14fe:	73 98       	cbi	0x0e, 3	; 14
	_NOP();
    1500:	00 00       	nop
	_NOP();
    1502:	00 00       	nop
    1504:	c7 e0       	ldi	r28, 0x07	; 7
    1506:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (i = 0; i<8; i++)
	{
		if (command&(bit<<(7-i)))
    1508:	ee 24       	eor	r14, r14
    150a:	e3 94       	inc	r14
    150c:	f1 2c       	mov	r15, r1
    150e:	08 2f       	mov	r16, r24
    1510:	10 e0       	ldi	r17, 0x00	; 0
    1512:	97 01       	movw	r18, r14
    1514:	0c 2e       	mov	r0, r28
    1516:	02 c0       	rjmp	.+4      	; 0x151c <getData+0x36>
    1518:	22 0f       	add	r18, r18
    151a:	33 1f       	adc	r19, r19
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <getData+0x32>
    1520:	20 23       	and	r18, r16
    1522:	31 23       	and	r19, r17
    1524:	23 2b       	or	r18, r19
    1526:	11 f0       	breq	.+4      	; 0x152c <getData+0x46>
		{
			TOUCH_DIN_PORT |= bit<<TOUCH_DIN_BIT;
    1528:	a5 9a       	sbi	0x14, 5	; 20
    152a:	01 c0       	rjmp	.+2      	; 0x152e <getData+0x48>
		} 
		else
		{
			TOUCH_DIN_PORT  &= ~(bit<<TOUCH_DIN_BIT);
    152c:	a5 98       	cbi	0x14, 5	; 20
		}
		CLK();
    152e:	ca df       	rcall	.-108    	; 0x14c4 <CLK>
    1530:	21 97       	sbiw	r28, 0x01	; 1
    1532:	78 f7       	brcc	.-34     	; 0x1512 <getData+0x2c>
	}
	i = 0;
	TOUCH_DIN_PORT  &= ~(bit<<TOUCH_DIN_BIT);
    1534:	a5 98       	cbi	0x14, 5	; 20
    1536:	cf e0       	ldi	r28, 0x0F	; 15
    1538:	d0 e0       	ldi	r29, 0x00	; 0

static uint16_t getData(uint8_t command)
{
	uint8_t i = 0;
	uint8_t bit = 0b00000001;
	uint16_t data = 0;
    153a:	00 e0       	ldi	r16, 0x00	; 0
    153c:	10 e0       	ldi	r17, 0x00	; 0
	for (i = 0; i<16; i++)
	{
		CLK();
		if (TOUCH_DOUT_PIN&(bit<<TOUCH_DOUT_BIT))
		{
			data |= bit<<(15-i);
    153e:	ee 24       	eor	r14, r14
    1540:	e3 94       	inc	r14
	}
	i = 0;
	TOUCH_DIN_PORT  &= ~(bit<<TOUCH_DIN_BIT);
	for (i = 0; i<16; i++)
	{
		CLK();
    1542:	f1 2c       	mov	r15, r1
    1544:	bf df       	rcall	.-130    	; 0x14c4 <CLK>
		if (TOUCH_DOUT_PIN&(bit<<TOUCH_DOUT_BIT))
    1546:	65 9b       	sbis	0x0c, 5	; 12
    1548:	09 c0       	rjmp	.+18     	; 0x155c <getData+0x76>
		{
			data |= bit<<(15-i);
    154a:	c7 01       	movw	r24, r14
    154c:	0c 2e       	mov	r0, r28
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <getData+0x6e>
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	0a 94       	dec	r0
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <getData+0x6a>
    1558:	08 2b       	or	r16, r24
    155a:	19 2b       	or	r17, r25
    155c:	21 97       	sbiw	r28, 0x01	; 1
    155e:	90 f7       	brcc	.-28     	; 0x1544 <getData+0x5e>
		}
	}
	TOUCH_CS_PORT |= bit<<TOUCH_CS_BIT;
    1560:	73 9a       	sbi	0x0e, 3	; 14
	
	return (data>>4);
}
    1562:	c8 01       	movw	r24, r16
    1564:	92 95       	swap	r25
    1566:	82 95       	swap	r24
    1568:	8f 70       	andi	r24, 0x0F	; 15
    156a:	89 27       	eor	r24, r25
    156c:	9f 70       	andi	r25, 0x0F	; 15
    156e:	89 27       	eor	r24, r25
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	ff 90       	pop	r15
    157a:	ef 90       	pop	r14
    157c:	08 95       	ret

0000157e <getThouchX>:
	
}

static uint16_t getThouchX(void)
{
	return getData(READ_X_POSITION);	
    157e:	89 e9       	ldi	r24, 0x99	; 153
    1580:	b2 cf       	rjmp	.-156    	; 0x14e6 <getData>
}
    1582:	08 95       	ret

00001584 <getThouchY>:
static uint16_t getThouchY(void)
{
	return getData(READ_Y_POSITION);
    1584:	89 ed       	ldi	r24, 0xD9	; 217
    1586:	af cf       	rjmp	.-162    	; 0x14e6 <getData>
}
    1588:	08 95       	ret

0000158a <getPressure>:
static uint16_t getPressure(void)
{
	return getData(READ_PRESSURE);
    158a:	89 ec       	ldi	r24, 0xC9	; 201
    158c:	ac cf       	rjmp	.-168    	; 0x14e6 <getData>
    158e:	08 95       	ret

00001590 <touchDriver_getDriver>:
static void driverInit()
{
	uint8_t bit = 0b00000001;
	
	/* Set CLK, CS and DIN as outputs, DIN refers to DIN of touch controller*/
	DDRH |= (bit<<TOUCH_CLK_BIT);
    1590:	e1 e0       	ldi	r30, 0x01	; 1
    1592:	f1 e0       	ldi	r31, 0x01	; 1
    1594:	80 81       	ld	r24, Z
    1596:	88 60       	ori	r24, 0x08	; 8
    1598:	80 83       	st	Z, r24
	DDRE |= (bit<<TOUCH_CS_BIT);
    159a:	6b 9a       	sbi	0x0d, 3	; 13
	DDRG |= (bit<<TOUCH_DIN_BIT);
    159c:	9d 9a       	sbi	0x13, 5	; 19
	
	
	/* Set DOUT of touch controller to be input in arduino*/
	DDRE &= ~(bit<<TOUCH_DOUT_BIT);
    159e:	6d 98       	cbi	0x0d, 5	; 13
	DDRE &= ~(bit<<TOUCH_IRQ_BIT);
    15a0:	6c 98       	cbi	0x0d, 4	; 13
touchDriverInterface_t* touchDriver_getDriver()
{
	if(!initialized)
	{
		driverInit();
		myInterface.readPressure = getPressure;
    15a2:	e8 ec       	ldi	r30, 0xC8	; 200
    15a4:	f2 e0       	ldi	r31, 0x02	; 2
    15a6:	85 ec       	ldi	r24, 0xC5	; 197
    15a8:	9a e0       	ldi	r25, 0x0A	; 10
    15aa:	95 83       	std	Z+5, r25	; 0x05
    15ac:	84 83       	std	Z+4, r24	; 0x04
		myInterface.readTouchX = getThouchX;
    15ae:	8f eb       	ldi	r24, 0xBF	; 191
    15b0:	9a e0       	ldi	r25, 0x0A	; 10
    15b2:	91 83       	std	Z+1, r25	; 0x01
    15b4:	80 83       	st	Z, r24
		myInterface.readTouchY = getThouchY;
    15b6:	82 ec       	ldi	r24, 0xC2	; 194
    15b8:	9a e0       	ldi	r25, 0x0A	; 10
    15ba:	93 83       	std	Z+3, r25	; 0x03
    15bc:	82 83       	std	Z+2, r24	; 0x02
	}
	return &myInterface;
}
    15be:	cf 01       	movw	r24, r30
    15c0:	08 95       	ret

000015c2 <main>:
	}
}

static void setUpGUIColors(void)
{
	GUIstateColors[BACKGROUND_COLOR][ALL] = rgb3byteToInt(181,230,29);
    15c2:	4d e1       	ldi	r20, 0x1D	; 29
    15c4:	66 ee       	ldi	r22, 0xE6	; 230
    15c6:	85 eb       	ldi	r24, 0xB5	; 181
    15c8:	27 de       	rcall	.-946    	; 0x1218 <rgb3byteToInt>
    15ca:	c2 ed       	ldi	r28, 0xD2	; 210
    15cc:	d2 e0       	ldi	r29, 0x02	; 2
    15ce:	99 83       	std	Y+1, r25	; 0x01
    15d0:	88 83       	st	Y, r24
	GUIstateColors[FONT_COLOR][ALL] = rgb3byteToInt(8,4,8);
    15d2:	48 e0       	ldi	r20, 0x08	; 8
    15d4:	64 e0       	ldi	r22, 0x04	; 4
    15d6:	88 e0       	ldi	r24, 0x08	; 8
    15d8:	1f de       	rcall	.-962    	; 0x1218 <rgb3byteToInt>
    15da:	9b 87       	std	Y+11, r25	; 0x0b
    15dc:	8a 87       	std	Y+10, r24	; 0x0a
	
	GUIstateColors[BACKGROUND_COLOR][MILESTONE] = rgb3byteToInt(112,146,190);
    15de:	4e eb       	ldi	r20, 0xBE	; 190
    15e0:	62 e9       	ldi	r22, 0x92	; 146
    15e2:	80 e7       	ldi	r24, 0x70	; 112
    15e4:	19 de       	rcall	.-974    	; 0x1218 <rgb3byteToInt>
    15e6:	9b 83       	std	Y+3, r25	; 0x03
    15e8:	8a 83       	std	Y+2, r24	; 0x02
	GUIstateColors[FONT_COLOR][MILESTONE] = rgb3byteToInt(255,255,255);
    15ea:	4f ef       	ldi	r20, 0xFF	; 255
    15ec:	6f ef       	ldi	r22, 0xFF	; 255
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	13 de       	rcall	.-986    	; 0x1218 <rgb3byteToInt>
    15f2:	9d 87       	std	Y+13, r25	; 0x0d
    15f4:	8c 87       	std	Y+12, r24	; 0x0c
	
	GUIstateColors[BACKGROUND_COLOR][TEMPERATURE] = rgb3byteToInt(254,254,254);
    15f6:	4e ef       	ldi	r20, 0xFE	; 254
    15f8:	6e ef       	ldi	r22, 0xFE	; 254
    15fa:	8e ef       	ldi	r24, 0xFE	; 254
    15fc:	0d de       	rcall	.-998    	; 0x1218 <rgb3byteToInt>
    15fe:	9d 83       	std	Y+5, r25	; 0x05
    1600:	8c 83       	std	Y+4, r24	; 0x04
	GUIstateColors[FONT_COLOR][TEMPERATURE] = rgb3byteToInt(255,127,39);
    1602:	47 e2       	ldi	r20, 0x27	; 39
    1604:	6f e7       	ldi	r22, 0x7F	; 127
    1606:	8f ef       	ldi	r24, 0xFF	; 255
    1608:	07 de       	rcall	.-1010   	; 0x1218 <rgb3byteToInt>
    160a:	9f 87       	std	Y+15, r25	; 0x0f
    160c:	8e 87       	std	Y+14, r24	; 0x0e
	
	GUIstateColors[BACKGROUND_COLOR][VELOCITY] = rgb3byteToInt(200,192,231);
    160e:	47 ee       	ldi	r20, 0xE7	; 231
    1610:	60 ec       	ldi	r22, 0xC0	; 192
    1612:	88 ec       	ldi	r24, 0xC8	; 200
    1614:	01 de       	rcall	.-1022   	; 0x1218 <rgb3byteToInt>
    1616:	9f 83       	std	Y+7, r25	; 0x07
    1618:	8e 83       	std	Y+6, r24	; 0x06
	GUIstateColors[FONT_COLOR][VELOCITY] = rgb3byteToInt(253,240,9);
    161a:	49 e0       	ldi	r20, 0x09	; 9
    161c:	60 ef       	ldi	r22, 0xF0	; 240
    161e:	8d ef       	ldi	r24, 0xFD	; 253
    1620:	fb dd       	rcall	.-1034   	; 0x1218 <rgb3byteToInt>
    1622:	99 8b       	std	Y+17, r25	; 0x11
    1624:	88 8b       	std	Y+16, r24	; 0x10
	
	GUIstateColors[BACKGROUND_COLOR][STEEPNESS] = rgb3byteToInt(163,73,164);
    1626:	44 ea       	ldi	r20, 0xA4	; 164
    1628:	69 e4       	ldi	r22, 0x49	; 73
    162a:	83 ea       	ldi	r24, 0xA3	; 163
    162c:	f5 dd       	rcall	.-1046   	; 0x1218 <rgb3byteToInt>
    162e:	99 87       	std	Y+9, r25	; 0x09
	GUIstateColors[FONT_COLOR][STEEPNESS] = rgb3byteToInt(253,200,14);
    1630:	88 87       	std	Y+8, r24	; 0x08
    1632:	4e e0       	ldi	r20, 0x0E	; 14
    1634:	68 ec       	ldi	r22, 0xC8	; 200
    1636:	8d ef       	ldi	r24, 0xFD	; 253
    1638:	ef dd       	rcall	.-1058   	; 0x1218 <rgb3byteToInt>
    163a:	9b 8b       	std	Y+19, r25	; 0x13
static void lightRoutine(void);

int main(void)
{
	setUpGUIColors();
	screen = lcdDriver_getDriver();
    163c:	8a 8b       	std	Y+18, r24	; 0x12
    163e:	81 dd       	rcall	.-1278   	; 0x1142 <lcdDriver_getDriver>
    1640:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <screen+0x1>
    1644:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <screen>
	touch = touchDriver_getDriver();
    1648:	a3 df       	rcall	.-186    	; 0x1590 <touchDriver_getDriver>
    164a:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <touch+0x1>
    164e:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <touch>
	speedSensor = speedSensor_getDriver(65);
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	82 e8       	ldi	r24, 0x82	; 130
    1658:	92 e4       	ldi	r25, 0x42	; 66
    165a:	6b de       	rcall	.-810    	; 0x1332 <speedSensor_getDriver>
    165c:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <speedSensor+0x1>
	tempSensor = getDHTInterface();
    1660:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <speedSensor>
    1664:	26 df       	rcall	.-436    	; 0x14b2 <getDHTInterface>
    1666:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <tempSensor+0x1>
    166a:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <tempSensor>
	myADC	= get_ADC_interface();
    166e:	89 d8       	rcall	.-3822   	; 0x782 <get_ADC_interface>
    1670:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <myADC+0x1>
    1674:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <myADC>
	myLights = get_lightDriverInterface();
    1678:	a6 d9       	rcall	.-3252   	; 0x9c6 <get_lightDriverInterface>
    167a:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <myLights+0x1>
    167e:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <myLights>
	myLightSensor = get_lightSensor_interface(myADC);
    1682:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <myADC>
    1686:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <myADC+0x1>
    168a:	c9 d9       	rcall	.-3182   	; 0xa1e <get_lightSensor_interface>
    168c:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <myLightSensor+0x1>
    1690:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <myLightSensor>
	myI2C = get_i2c_interface();
    1694:	33 d9       	rcall	.-3482   	; 0x8fc <get_i2c_interface>
    1696:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <myI2C+0x1>
    169a:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <myI2C>
    169e:	94 db       	rcall	.-2264   	; 0xdc8 <get_RTC_interface>
	
	myClock = get_RTC_interface(myI2C);
    16a0:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <myClock+0x1>
    16a4:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <myClock>
    16a8:	dc 01       	movw	r26, r24
    16aa:	ed 91       	ld	r30, X+
	myClock->setDateTime(20,5,20,3,16,45,30);
    16ac:	fc 91       	ld	r31, X
    16ae:	0f 2e       	mov	r0, r31
    16b0:	fe e1       	ldi	r31, 0x1E	; 30
    16b2:	cf 2e       	mov	r12, r31
    16b4:	f0 2d       	mov	r31, r0
    16b6:	0f 2e       	mov	r0, r31
    16b8:	fd e2       	ldi	r31, 0x2D	; 45
    16ba:	ef 2e       	mov	r14, r31
    16bc:	f0 2d       	mov	r31, r0
    16be:	00 e1       	ldi	r16, 0x10	; 16
    16c0:	23 e0       	ldi	r18, 0x03	; 3
    16c2:	44 e1       	ldi	r20, 0x14	; 20
    16c4:	65 e0       	ldi	r22, 0x05	; 5
    16c6:	84 e1       	ldi	r24, 0x14	; 20
    16c8:	19 95       	eicall
    16ca:	e0 91 ec 02 	lds	r30, 0x02EC	; 0x8002ec <myI2C>
	//myGyro = get_GA_interface(myI2C);
	
	myI2C->init(10000,false);
    16ce:	f0 91 ed 02 	lds	r31, 0x02ED	; 0x8002ed <myI2C+0x1>
    16d2:	01 90       	ld	r0, Z+
    16d4:	f0 81       	ld	r31, Z
    16d6:	e0 2d       	mov	r30, r0
    16d8:	40 e0       	ldi	r20, 0x00	; 0
    16da:	60 e1       	ldi	r22, 0x10	; 16
    16dc:	77 e2       	ldi	r23, 0x27	; 39
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	19 95       	eicall
    16e4:	e0 91 ec 02 	lds	r30, 0x02EC	; 0x8002ec <myI2C>
	myI2C->setBusy(false);
    16e8:	f0 91 ed 02 	lds	r31, 0x02ED	; 0x8002ed <myI2C+0x1>
    16ec:	06 84       	ldd	r0, Z+14	; 0x0e
    16ee:	f7 85       	ldd	r31, Z+15	; 0x0f
    16f0:	e0 2d       	mov	r30, r0
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	19 95       	eicall
    16f6:	e0 91 ea 02 	lds	r30, 0x02EA	; 0x8002ea <myADC>
	myADC->initADC(AVCC,0);
    16fa:	f0 91 eb 02 	lds	r31, 0x02EB	; 0x8002eb <myADC+0x1>
    16fe:	01 90       	ld	r0, Z+
    1700:	f0 81       	ld	r31, Z
    1702:	e0 2d       	mov	r30, r0
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	ba 01       	movw	r22, r20
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	19 95       	eicall
    170e:	e0 91 e8 02 	lds	r30, 0x02E8	; 0x8002e8 <myLightSensor>
	myLightSensor->init(0, LIGHT_TRESH);
    1712:	f0 91 e9 02 	lds	r31, 0x02E9	; 0x8002e9 <myLightSensor+0x1>
    1716:	01 90       	ld	r0, Z+
    1718:	f0 81       	ld	r31, Z
    171a:	e0 2d       	mov	r30, r0
    171c:	64 eb       	ldi	r22, 0xB4	; 180
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	19 95       	eicall
    1724:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <myLights>
	myLights->init();
    1728:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <myLights+0x1>
    172c:	01 90       	ld	r0, Z+
    172e:	f0 81       	ld	r31, Z
    1730:	e0 2d       	mov	r30, r0
    1732:	19 95       	eicall
    1734:	78 94       	sei
    1736:	c5 e0       	ldi	r28, 0x05	; 5
	//myGyro->reset();
	//myGyro->accerelSettings(1);
	sei();
    1738:	d0 e0       	ldi	r29, 0x00	; 0
			lcnt = 0;
			rcnt++;
			_delay_ms(5);
			if(rcnt>10)
			{
				currentState = (currentState+1) % NUMBER_OF_STATES;
    173a:	04 e0       	ldi	r16, 0x04	; 4
    173c:	12 e0       	ldi	r17, 0x02	; 2
			rcnt = 0;
			lcnt++;
			_delay_ms(5);
			if(lcnt>10)
			{
				currentState = (currentState == ALL) ? (NUMBER_OF_STATES-1) : currentState-1;
    173e:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <touch>
	//myGyro->reset();
	//myGyro->accerelSettings(1);
	sei();
	while (1)
	{
		uint16_t val = touch->readTouchX();
    1742:	f0 91 f5 02 	lds	r31, 0x02F5	; 0x8002f5 <touch+0x1>
    1746:	01 90       	ld	r0, Z+
    1748:	f0 81       	ld	r31, Z
    174a:	e0 2d       	mov	r30, r0
    174c:	19 95       	eicall
    174e:	9c 01       	movw	r18, r24
    1750:	22 50       	subi	r18, 0x02	; 2
		
		if ((val < 2000) && (val > 1))
    1752:	31 09       	sbc	r19, r1
    1754:	2e 3c       	cpi	r18, 0xCE	; 206
    1756:	37 40       	sbci	r19, 0x07	; 7
    1758:	38 f5       	brcc	.+78     	; 0x17a8 <main+0x1e6>
    175a:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <lcnt+0x1>
		{
			lcnt = 0;
    175e:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <lcnt>
    1762:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <rcnt>
			rcnt++;
    1766:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <rcnt+0x1>
    176a:	01 96       	adiw	r24, 0x01	; 1
    176c:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <rcnt+0x1>
    1770:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <rcnt>
    1774:	8f e1       	ldi	r24, 0x1F	; 31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1776:	9e e4       	ldi	r25, 0x4E	; 78
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <main+0x1b6>
    177c:	00 c0       	rjmp	.+0      	; 0x177e <main+0x1bc>
    177e:	00 00       	nop
    1780:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <rcnt>
			_delay_ms(5);
			if(rcnt>10)
    1784:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <rcnt+0x1>
    1788:	0b 97       	sbiw	r24, 0x0b	; 11
    178a:	08 f4       	brcc	.+2      	; 0x178e <main+0x1cc>
    178c:	41 c0       	rjmp	.+130    	; 0x1810 <main+0x24e>
    178e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <currentState>
			{
				currentState = (currentState+1) % NUMBER_OF_STATES;
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	be 01       	movw	r22, r28
    1798:	3e d6       	rcall	.+3196   	; 0x2416 <__divmodhi4>
    179a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <currentState>
    179e:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <rcnt+0x1>
				rcnt = 0;
    17a2:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <rcnt>
    17a6:	34 c0       	rjmp	.+104    	; 0x1810 <main+0x24e>
    17a8:	89 5b       	subi	r24, 0xB9	; 185
    17aa:	9b 40       	sbci	r25, 0x0B	; 11
			}
		}
		
		else if ((val > 3000) && (val < 4000))
    17ac:	87 3e       	cpi	r24, 0xE7	; 231
    17ae:	93 40       	sbci	r25, 0x03	; 3
    17b0:	38 f5       	brcc	.+78     	; 0x1800 <main+0x23e>
    17b2:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <rcnt+0x1>
		{
			rcnt = 0;
    17b6:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <rcnt>
    17ba:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <lcnt>
			lcnt++;
    17be:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <lcnt+0x1>
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <lcnt+0x1>
    17c8:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <lcnt>
    17cc:	8f e1       	ldi	r24, 0x1F	; 31
    17ce:	9e e4       	ldi	r25, 0x4E	; 78
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	f1 f7       	brne	.-4      	; 0x17d0 <main+0x20e>
    17d4:	00 c0       	rjmp	.+0      	; 0x17d6 <main+0x214>
    17d6:	00 00       	nop
    17d8:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <lcnt>
			_delay_ms(5);
			if(lcnt>10)
    17dc:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <lcnt+0x1>
    17e0:	0b 97       	sbiw	r24, 0x0b	; 11
    17e2:	b0 f0       	brcs	.+44     	; 0x1810 <main+0x24e>
    17e4:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <currentState>
			{
				currentState = (currentState == ALL) ? (NUMBER_OF_STATES-1) : currentState-1;
    17e8:	88 23       	and	r24, r24
    17ea:	11 f0       	breq	.+4      	; 0x17f0 <main+0x22e>
    17ec:	81 50       	subi	r24, 0x01	; 1
    17ee:	01 c0       	rjmp	.+2      	; 0x17f2 <main+0x230>
    17f0:	80 2f       	mov	r24, r16
    17f2:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <currentState>
    17f6:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <lcnt+0x1>
				lcnt = 0;
    17fa:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <lcnt>
    17fe:	08 c0       	rjmp	.+16     	; 0x1810 <main+0x24e>
    1800:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <rcnt+0x1>
			}
		}
		else
		{
			rcnt = 0;
    1804:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <rcnt>
    1808:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <lcnt+0x1>
			lcnt = 0;
    180c:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <lcnt>
    1810:	a0 91 03 02 	lds	r26, 0x0203	; 0x800203 <currentState>
	}


static void GUI_sm()
{
	if (previousState != currentState)
    1814:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <previousState>
    1818:	8a 17       	cp	r24, r26
    181a:	09 f4       	brne	.+2      	; 0x181e <main+0x25c>
    181c:	90 cf       	rjmp	.-224    	; 0x173e <main+0x17c>
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	aa 0f       	add	r26, r26
	{
		screen->setCursorColor(GUIstateColors[BACKGROUND_COLOR][currentState]);
    1822:	bb 1f       	adc	r27, r27
    1824:	ae 52       	subi	r26, 0x2E	; 46
    1826:	bd 4f       	sbci	r27, 0xFD	; 253
    1828:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    182c:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1830:	06 80       	ldd	r0, Z+6	; 0x06
    1832:	f7 81       	ldd	r31, Z+7	; 0x07
    1834:	e0 2d       	mov	r30, r0
    1836:	8d 91       	ld	r24, X+
    1838:	9c 91       	ld	r25, X
    183a:	19 95       	eicall
    183c:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
		screen->setCursor(0,0);
    1840:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1844:	00 84       	ldd	r0, Z+8	; 0x08
    1846:	f1 85       	ldd	r31, Z+9	; 0x09
    1848:	e0 2d       	mov	r30, r0
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	19 95       	eicall
    1854:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
		screen->drawRectangle(319,239);
    1858:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    185c:	02 84       	ldd	r0, Z+10	; 0x0a
    185e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1860:	e0 2d       	mov	r30, r0
    1862:	6f ee       	ldi	r22, 0xEF	; 239
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	8f e3       	ldi	r24, 0x3F	; 63
    1868:	91 e0       	ldi	r25, 0x01	; 1
    186a:	19 95       	eicall
    186c:	a0 91 03 02 	lds	r26, 0x0203	; 0x800203 <currentState>
		screen->setCursorColor(GUIstateColors[FONT_COLOR][currentState]);
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	aa 0f       	add	r26, r26
    1874:	bb 1f       	adc	r27, r27
    1876:	a4 52       	subi	r26, 0x24	; 36
    1878:	bd 4f       	sbci	r27, 0xFD	; 253
    187a:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    187e:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1882:	06 80       	ldd	r0, Z+6	; 0x06
    1884:	f7 81       	ldd	r31, Z+7	; 0x07
    1886:	e0 2d       	mov	r30, r0
    1888:	8d 91       	ld	r24, X+
    188a:	9c 91       	ld	r25, X
    188c:	19 95       	eicall
    188e:	a0 91 03 02 	lds	r26, 0x0203	; 0x800203 <currentState>
		screen->setBackgroundColor(GUIstateColors[BACKGROUND_COLOR][currentState]);
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	aa 0f       	add	r26, r26
    1896:	bb 1f       	adc	r27, r27
    1898:	ae 52       	subi	r26, 0x2E	; 46
    189a:	bd 4f       	sbci	r27, 0xFD	; 253
    189c:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    18a0:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    18a4:	04 80       	ldd	r0, Z+4	; 0x04
    18a6:	f5 81       	ldd	r31, Z+5	; 0x05
    18a8:	e0 2d       	mov	r30, r0
    18aa:	8d 91       	ld	r24, X+
    18ac:	9c 91       	ld	r25, X
    18ae:	19 95       	eicall
    18b0:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <currentState>
		
		switch(currentState)
    18b4:	82 30       	cpi	r24, 0x02	; 2
    18b6:	09 f4       	brne	.+2      	; 0x18ba <main+0x2f8>
    18b8:	30 c1       	rjmp	.+608    	; 0x1b1a <main+0x558>
    18ba:	30 f4       	brcc	.+12     	; 0x18c8 <main+0x306>
    18bc:	88 23       	and	r24, r24
    18be:	59 f0       	breq	.+22     	; 0x18d6 <main+0x314>
    18c0:	81 30       	cpi	r24, 0x01	; 1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <main+0x304>
    18c4:	13 c1       	rjmp	.+550    	; 0x1aec <main+0x52a>
    18c6:	6e c1       	rjmp	.+732    	; 0x1ba4 <main+0x5e2>
    18c8:	83 30       	cpi	r24, 0x03	; 3
    18ca:	09 f4       	brne	.+2      	; 0x18ce <main+0x30c>
    18cc:	3d c1       	rjmp	.+634    	; 0x1b48 <main+0x586>
    18ce:	84 30       	cpi	r24, 0x04	; 4
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <main+0x312>
    18d2:	51 c1       	rjmp	.+674    	; 0x1b76 <main+0x5b4>
    18d4:	67 c1       	rjmp	.+718    	; 0x1ba4 <main+0x5e2>
    18d6:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
	GUIstateColors[FONT_COLOR][STEEPNESS] = rgb3byteToInt(253,200,14);
}

static void drawGrid(void)
{
	screen->setCursor(0,0);
    18da:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    18de:	00 84       	ldd	r0, Z+8	; 0x08
    18e0:	f1 85       	ldd	r31, Z+9	; 0x09
    18e2:	e0 2d       	mov	r30, r0
    18e4:	60 e0       	ldi	r22, 0x00	; 0
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	19 95       	eicall
    18ee:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
	screen->drawRectangle(319,239);
    18f2:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    18f6:	02 84       	ldd	r0, Z+10	; 0x0a
    18f8:	f3 85       	ldd	r31, Z+11	; 0x0b
    18fa:	e0 2d       	mov	r30, r0
    18fc:	6f ee       	ldi	r22, 0xEF	; 239
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	8f e3       	ldi	r24, 0x3F	; 63
    1902:	91 e0       	ldi	r25, 0x01	; 1
    1904:	19 95       	eicall
    1906:	a0 91 03 02 	lds	r26, 0x0203	; 0x800203 <currentState>
	screen->setCursorColor(GUIstateColors[BACKGROUND_COLOR][currentState]);
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	aa 0f       	add	r26, r26
    190e:	bb 1f       	adc	r27, r27
    1910:	ae 52       	subi	r26, 0x2E	; 46
    1912:	bd 4f       	sbci	r27, 0xFD	; 253
    1914:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1918:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    191c:	06 80       	ldd	r0, Z+6	; 0x06
    191e:	f7 81       	ldd	r31, Z+7	; 0x07
    1920:	e0 2d       	mov	r30, r0
    1922:	8d 91       	ld	r24, X+
    1924:	9c 91       	ld	r25, X
    1926:	19 95       	eicall
    1928:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
	screen->setCursor(3,3);
    192c:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1930:	00 84       	ldd	r0, Z+8	; 0x08
    1932:	f1 85       	ldd	r31, Z+9	; 0x09
    1934:	e0 2d       	mov	r30, r0
    1936:	63 e0       	ldi	r22, 0x03	; 3
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	83 e0       	ldi	r24, 0x03	; 3
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	19 95       	eicall
    1940:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
	screen->drawRectangle(154,74);
    1944:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1948:	02 84       	ldd	r0, Z+10	; 0x0a
    194a:	f3 85       	ldd	r31, Z+11	; 0x0b
    194c:	e0 2d       	mov	r30, r0
    194e:	6a e4       	ldi	r22, 0x4A	; 74
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	8a e9       	ldi	r24, 0x9A	; 154
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	19 95       	eicall
    1958:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
	screen->setCursor(160,3);
    195c:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1960:	00 84       	ldd	r0, Z+8	; 0x08
    1962:	f1 85       	ldd	r31, Z+9	; 0x09
    1964:	e0 2d       	mov	r30, r0
    1966:	63 e0       	ldi	r22, 0x03	; 3
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	80 ea       	ldi	r24, 0xA0	; 160
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	19 95       	eicall
    1970:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
	screen->drawRectangle(154,74);
    1974:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1978:	02 84       	ldd	r0, Z+10	; 0x0a
    197a:	f3 85       	ldd	r31, Z+11	; 0x0b
    197c:	e0 2d       	mov	r30, r0
    197e:	6a e4       	ldi	r22, 0x4A	; 74
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	8a e9       	ldi	r24, 0x9A	; 154
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	19 95       	eicall
    1988:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
	screen->setCursor(3,80);
    198c:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1990:	00 84       	ldd	r0, Z+8	; 0x08
    1992:	f1 85       	ldd	r31, Z+9	; 0x09
    1994:	e0 2d       	mov	r30, r0
    1996:	60 e5       	ldi	r22, 0x50	; 80
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	83 e0       	ldi	r24, 0x03	; 3
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	19 95       	eicall
    19a0:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
	screen->drawRectangle(154,74);
    19a4:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    19a8:	02 84       	ldd	r0, Z+10	; 0x0a
    19aa:	f3 85       	ldd	r31, Z+11	; 0x0b
    19ac:	e0 2d       	mov	r30, r0
    19ae:	6a e4       	ldi	r22, 0x4A	; 74
    19b0:	70 e0       	ldi	r23, 0x00	; 0
    19b2:	8a e9       	ldi	r24, 0x9A	; 154
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	19 95       	eicall
    19b8:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
	screen->setCursor(160,80);
    19bc:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    19c0:	00 84       	ldd	r0, Z+8	; 0x08
    19c2:	f1 85       	ldd	r31, Z+9	; 0x09
    19c4:	e0 2d       	mov	r30, r0
    19c6:	60 e5       	ldi	r22, 0x50	; 80
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	80 ea       	ldi	r24, 0xA0	; 160
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	19 95       	eicall
    19d0:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
	screen->drawRectangle(154,74);
    19d4:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    19d8:	02 84       	ldd	r0, Z+10	; 0x0a
    19da:	f3 85       	ldd	r31, Z+11	; 0x0b
    19dc:	e0 2d       	mov	r30, r0
    19de:	6a e4       	ldi	r22, 0x4A	; 74
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	8a e9       	ldi	r24, 0x9A	; 154
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	19 95       	eicall
    19e8:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
	screen->setCursor(3,160);
    19ec:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    19f0:	00 84       	ldd	r0, Z+8	; 0x08
    19f2:	f1 85       	ldd	r31, Z+9	; 0x09
    19f4:	e0 2d       	mov	r30, r0
    19f6:	60 ea       	ldi	r22, 0xA0	; 160
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	83 e0       	ldi	r24, 0x03	; 3
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	19 95       	eicall
    1a00:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
	screen->drawRectangle(311,74);
    1a04:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1a08:	02 84       	ldd	r0, Z+10	; 0x0a
    1a0a:	f3 85       	ldd	r31, Z+11	; 0x0b
    1a0c:	e0 2d       	mov	r30, r0
    1a0e:	6a e4       	ldi	r22, 0x4A	; 74
    1a10:	70 e0       	ldi	r23, 0x00	; 0
    1a12:	87 e3       	ldi	r24, 0x37	; 55
    1a14:	91 e0       	ldi	r25, 0x01	; 1
    1a16:	19 95       	eicall
    1a18:	a0 91 03 02 	lds	r26, 0x0203	; 0x800203 <currentState>
	screen->setCursorColor(GUIstateColors[FONT_COLOR][currentState]);
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	aa 0f       	add	r26, r26
    1a20:	bb 1f       	adc	r27, r27
    1a22:	a4 52       	subi	r26, 0x24	; 36
    1a24:	bd 4f       	sbci	r27, 0xFD	; 253
    1a26:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1a2a:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1a2e:	06 80       	ldd	r0, Z+6	; 0x06
    1a30:	f7 81       	ldd	r31, Z+7	; 0x07
    1a32:	e0 2d       	mov	r30, r0
    1a34:	8d 91       	ld	r24, X+
    1a36:	9c 91       	ld	r25, X
    1a38:	19 95       	eicall
    1a3a:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
		switch(currentState)
		{
			case ALL:
			
			drawGrid();
			screen->setCursor(35,20);
    1a3e:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1a42:	00 84       	ldd	r0, Z+8	; 0x08
    1a44:	f1 85       	ldd	r31, Z+9	; 0x09
    1a46:	e0 2d       	mov	r30, r0
    1a48:	64 e1       	ldi	r22, 0x14	; 20
    1a4a:	70 e0       	ldi	r23, 0x00	; 0
    1a4c:	83 e2       	ldi	r24, 0x23	; 35
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	19 95       	eicall
    1a52:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
			screen->printString("Time");
    1a56:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1a5a:	04 84       	ldd	r0, Z+12	; 0x0c
    1a5c:	f5 85       	ldd	r31, Z+13	; 0x0d
    1a5e:	e0 2d       	mov	r30, r0
    1a60:	84 e0       	ldi	r24, 0x04	; 4
    1a62:	92 e0       	ldi	r25, 0x02	; 2
    1a64:	19 95       	eicall
    1a66:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
			
			screen->setCursor(210,20);
    1a6a:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1a6e:	00 84       	ldd	r0, Z+8	; 0x08
    1a70:	f1 85       	ldd	r31, Z+9	; 0x09
    1a72:	e0 2d       	mov	r30, r0
    1a74:	64 e1       	ldi	r22, 0x14	; 20
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	82 ed       	ldi	r24, 0xD2	; 210
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	19 95       	eicall
    1a7e:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
			screen->printString("km/t");
    1a82:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1a86:	04 84       	ldd	r0, Z+12	; 0x0c
    1a88:	f5 85       	ldd	r31, Z+13	; 0x0d
    1a8a:	e0 2d       	mov	r30, r0
    1a8c:	89 e0       	ldi	r24, 0x09	; 9
    1a8e:	92 e0       	ldi	r25, 0x02	; 2
    1a90:	19 95       	eicall
    1a92:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
			
			screen->setCursor(50,100);
    1a96:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1a9a:	00 84       	ldd	r0, Z+8	; 0x08
    1a9c:	f1 85       	ldd	r31, Z+9	; 0x09
    1a9e:	e0 2d       	mov	r30, r0
    1aa0:	64 e6       	ldi	r22, 0x64	; 100
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	82 e3       	ldi	r24, 0x32	; 50
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	19 95       	eicall
    1aaa:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
			screen->printString("Temp.");
    1aae:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1ab2:	04 84       	ldd	r0, Z+12	; 0x0c
    1ab4:	f5 85       	ldd	r31, Z+13	; 0x0d
    1ab6:	e0 2d       	mov	r30, r0
    1ab8:	8e e0       	ldi	r24, 0x0E	; 14
    1aba:	92 e0       	ldi	r25, 0x02	; 2
    1abc:	19 95       	eicall
    1abe:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
			
			screen->setCursor(100,175);
    1ac2:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1ac6:	00 84       	ldd	r0, Z+8	; 0x08
    1ac8:	f1 85       	ldd	r31, Z+9	; 0x09
    1aca:	e0 2d       	mov	r30, r0
    1acc:	6f ea       	ldi	r22, 0xAF	; 175
    1ace:	70 e0       	ldi	r23, 0x00	; 0
    1ad0:	84 e6       	ldi	r24, 0x64	; 100
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	19 95       	eicall
    1ad6:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
			screen->printString("Km count");
    1ada:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1ade:	04 84       	ldd	r0, Z+12	; 0x0c
    1ae0:	f5 85       	ldd	r31, Z+13	; 0x0d
    1ae2:	e0 2d       	mov	r30, r0
    1ae4:	84 e1       	ldi	r24, 0x14	; 20
    1ae6:	92 e0       	ldi	r25, 0x02	; 2
    1ae8:	19 95       	eicall
    1aea:	5e c0       	rjmp	.+188    	; 0x1ba8 <main+0x5e6>
    1aec:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
			break;
			
			case MILESTONE:
			screen->setCursor(80,120);
    1af0:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1af4:	00 84       	ldd	r0, Z+8	; 0x08
    1af6:	f1 85       	ldd	r31, Z+9	; 0x09
    1af8:	e0 2d       	mov	r30, r0
    1afa:	68 e7       	ldi	r22, 0x78	; 120
    1afc:	70 e0       	ldi	r23, 0x00	; 0
    1afe:	80 e5       	ldi	r24, 0x50	; 80
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	19 95       	eicall
    1b04:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
			screen->printString(" MILESTONE  ");
    1b08:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1b0c:	04 84       	ldd	r0, Z+12	; 0x0c
    1b0e:	f5 85       	ldd	r31, Z+13	; 0x0d
    1b10:	e0 2d       	mov	r30, r0
    1b12:	8d e1       	ldi	r24, 0x1D	; 29
    1b14:	92 e0       	ldi	r25, 0x02	; 2
    1b16:	19 95       	eicall
    1b18:	47 c0       	rjmp	.+142    	; 0x1ba8 <main+0x5e6>
    1b1a:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
			break;
			
			case TEMPERATURE:
			screen->setCursor(80,120);
    1b1e:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1b22:	00 84       	ldd	r0, Z+8	; 0x08
    1b24:	f1 85       	ldd	r31, Z+9	; 0x09
    1b26:	e0 2d       	mov	r30, r0
    1b28:	68 e7       	ldi	r22, 0x78	; 120
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	80 e5       	ldi	r24, 0x50	; 80
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	19 95       	eicall
    1b32:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
			screen->printString("   TEMP     ");
    1b36:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1b3a:	04 84       	ldd	r0, Z+12	; 0x0c
    1b3c:	f5 85       	ldd	r31, Z+13	; 0x0d
    1b3e:	e0 2d       	mov	r30, r0
    1b40:	8a e2       	ldi	r24, 0x2A	; 42
    1b42:	92 e0       	ldi	r25, 0x02	; 2
    1b44:	19 95       	eicall
    1b46:	30 c0       	rjmp	.+96     	; 0x1ba8 <main+0x5e6>
    1b48:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
			break;
			
			case VELOCITY:
			screen->setCursor(80,120);
    1b4c:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1b50:	00 84       	ldd	r0, Z+8	; 0x08
    1b52:	f1 85       	ldd	r31, Z+9	; 0x09
    1b54:	e0 2d       	mov	r30, r0
    1b56:	68 e7       	ldi	r22, 0x78	; 120
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	80 e5       	ldi	r24, 0x50	; 80
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	19 95       	eicall
    1b60:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
			screen->printString("   VELO     ");
    1b64:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1b68:	04 84       	ldd	r0, Z+12	; 0x0c
    1b6a:	f5 85       	ldd	r31, Z+13	; 0x0d
    1b6c:	e0 2d       	mov	r30, r0
    1b6e:	87 e3       	ldi	r24, 0x37	; 55
    1b70:	92 e0       	ldi	r25, 0x02	; 2
    1b72:	19 95       	eicall
    1b74:	19 c0       	rjmp	.+50     	; 0x1ba8 <main+0x5e6>
    1b76:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
			break;
			
			case STEEPNESS:
			screen->setCursor(80,90);
    1b7a:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1b7e:	00 84       	ldd	r0, Z+8	; 0x08
    1b80:	f1 85       	ldd	r31, Z+9	; 0x09
    1b82:	e0 2d       	mov	r30, r0
    1b84:	6a e5       	ldi	r22, 0x5A	; 90
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	80 e5       	ldi	r24, 0x50	; 80
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	19 95       	eicall
    1b8e:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
			screen->printString(" STEEPNESS  ");
    1b92:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1b96:	04 84       	ldd	r0, Z+12	; 0x0c
    1b98:	f5 85       	ldd	r31, Z+13	; 0x0d
    1b9a:	e0 2d       	mov	r30, r0
    1b9c:	84 e4       	ldi	r24, 0x44	; 68
    1b9e:	92 e0       	ldi	r25, 0x02	; 2
    1ba0:	19 95       	eicall
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <main+0x5e6>
    1ba4:	10 93 03 02 	sts	0x0203, r17	; 0x800203 <currentState>
			
			break;
			
			
			default:
			currentState = TEMPERATURE;
    1ba8:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <currentState>
			break;
		}
		previousState = currentState;
    1bac:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <previousState>
    1bb0:	9f ef       	ldi	r25, 0xFF	; 255
    1bb2:	a9 e6       	ldi	r26, 0x69	; 105
    1bb4:	b8 e1       	ldi	r27, 0x18	; 24
    1bb6:	91 50       	subi	r25, 0x01	; 1
    1bb8:	a0 40       	sbci	r26, 0x00	; 0
    1bba:	b0 40       	sbci	r27, 0x00	; 0
    1bbc:	e1 f7       	brne	.-8      	; 0x1bb6 <main+0x5f4>
    1bbe:	00 c0       	rjmp	.+0      	; 0x1bc0 <main+0x5fe>
    1bc0:	00 00       	nop
    1bc2:	bd cd       	rjmp	.-1158   	; 0x173e <main+0x17c>

00001bc4 <__vector_4>:
    1bc4:	1f 92       	push	r1
    1bc6:	0f 92       	push	r0
		
		return 0;
}

	ISR(INT3_vect) //PE4
	{
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	0f 92       	push	r0
    1bcc:	11 24       	eor	r1, r1
    1bce:	8f 93       	push	r24
	//	speedSensor->updateMilestoneCount();
		revolutionsForCalc++; //Counts up the revolutions for speed calculation.
    1bd0:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <revolutionsForCalc>
    1bd4:	8f 5f       	subi	r24, 0xFF	; 255
    1bd6:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <revolutionsForCalc>
	}
    1bda:	8f 91       	pop	r24
    1bdc:	0f 90       	pop	r0
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	0f 90       	pop	r0
    1be2:	1f 90       	pop	r1
    1be4:	18 95       	reti

00001be6 <__vector_15>:


	//TIMER 2 interrupts every second to measure how many revolutions the wheel has made.
	ISR(TIMER2_OVF_vect)
	{
    1be6:	1f 92       	push	r1
    1be8:	0f 92       	push	r0
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	0f 92       	push	r0
    1bee:	11 24       	eor	r1, r1
    1bf0:	0b b6       	in	r0, 0x3b	; 59
    1bf2:	0f 92       	push	r0
    1bf4:	cf 92       	push	r12
    1bf6:	df 92       	push	r13
    1bf8:	ef 92       	push	r14
    1bfa:	ff 92       	push	r15
    1bfc:	0f 93       	push	r16
    1bfe:	1f 93       	push	r17
    1c00:	2f 93       	push	r18
    1c02:	3f 93       	push	r19
    1c04:	4f 93       	push	r20
    1c06:	5f 93       	push	r21
    1c08:	6f 93       	push	r22
    1c0a:	7f 93       	push	r23
    1c0c:	8f 93       	push	r24
    1c0e:	9f 93       	push	r25
    1c10:	af 93       	push	r26
    1c12:	bf 93       	push	r27
    1c14:	ef 93       	push	r30
    1c16:	ff 93       	push	r31
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	28 97       	sbiw	r28, 0x08	; 8
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	cd bf       	out	0x3d, r28	; 61
		// After 62500 interrupts overflows the timer counts another timer to get other times.
		// Because of CPU clock and prescaling 8bit timer overflows every 16.063 us. Delay=prescaler*(OCRn+1)/fcpu
		timerOverflows++;
    1c26:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <timerOverflows>
    1c2a:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <timerOverflows+0x1>
    1c2e:	01 96       	adiw	r24, 0x01	; 1
    1c30:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <timerOverflows+0x1>
    1c34:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <timerOverflows>
		
		if (timerOverflows == 62500)	// 16.063us*62500=1.004s
    1c38:	84 32       	cpi	r24, 0x24	; 36
    1c3a:	94 4f       	sbci	r25, 0xF4	; 244
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <__vector_15+0x5a>
    1c3e:	aa c1       	rjmp	.+852    	; 0x1f94 <__vector_15+0x3ae>
		{
			timerOverflows = 0; //reset timer
    1c40:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <timerOverflows+0x1>
    1c44:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <timerOverflows>
			PORTB |=(1<<PB5); //debug
    1c48:	2d 9a       	sbi	0x05, 5	; 5
			
			speedSensor->updateRevolutionCount(revolutionsForCalc);
    1c4a:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <speedSensor>
    1c4e:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <speedSensor+0x1>
    1c52:	01 90       	ld	r0, Z+
    1c54:	f0 81       	ld	r31, Z
    1c56:	e0 2d       	mov	r30, r0
    1c58:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <revolutionsForCalc>
    1c5c:	19 95       	eicall
			revolutionsForCalc = 0; //Resetting after getting value for KHM calculation
    1c5e:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <revolutionsForCalc>
			timerCount=0; //Resetting before getting value.
			checkpointCnt++;
    1c62:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <checkpointCnt>
    1c66:	8f 5f       	subi	r24, 0xFF	; 255
    1c68:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <checkpointCnt>
			if (previousState == currentState)
    1c6c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <previousState>
    1c70:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <currentState>
    1c74:	89 13       	cpse	r24, r25
    1c76:	8e c1       	rjmp	.+796    	; 0x1f94 <__vector_15+0x3ae>
	screen->setCursorColor(GUIstateColors[FONT_COLOR][currentState]);
}

static void updateGUI_sm(void)
{
	switch(currentState)
    1c78:	82 30       	cpi	r24, 0x02	; 2
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <__vector_15+0x98>
    1c7c:	1b c1       	rjmp	.+566    	; 0x1eb4 <__vector_15+0x2ce>
    1c7e:	30 f4       	brcc	.+12     	; 0x1c8c <__vector_15+0xa6>
    1c80:	88 23       	and	r24, r24
    1c82:	59 f0       	breq	.+22     	; 0x1c9a <__vector_15+0xb4>
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	09 f4       	brne	.+2      	; 0x1c8a <__vector_15+0xa4>
    1c88:	f8 c0       	rjmp	.+496    	; 0x1e7a <__vector_15+0x294>
    1c8a:	81 c1       	rjmp	.+770    	; 0x1f8e <__vector_15+0x3a8>
    1c8c:	83 30       	cpi	r24, 0x03	; 3
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <__vector_15+0xac>
    1c90:	35 c1       	rjmp	.+618    	; 0x1efc <__vector_15+0x316>
    1c92:	84 30       	cpi	r24, 0x04	; 4
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <__vector_15+0xb2>
    1c96:	4f c1       	rjmp	.+670    	; 0x1f36 <__vector_15+0x350>
    1c98:	7a c1       	rjmp	.+756    	; 0x1f8e <__vector_15+0x3a8>
	{
		uint8_t temp,none,hour,min,sec,year,month,day;
		case ALL:
		// DATE
		screen->setCursor(35,50);
    1c9a:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1c9e:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1ca2:	00 84       	ldd	r0, Z+8	; 0x08
    1ca4:	f1 85       	ldd	r31, Z+9	; 0x09
    1ca6:	e0 2d       	mov	r30, r0
    1ca8:	62 e3       	ldi	r22, 0x32	; 50
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	83 e2       	ldi	r24, 0x23	; 35
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	19 95       	eicall
		myClock->getDateTime(&year,&month,&day,&hour,&min,&sec);
    1cb2:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <myClock>
    1cb6:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <myClock+0x1>
    1cba:	02 80       	ldd	r0, Z+2	; 0x02
    1cbc:	f3 81       	ldd	r31, Z+3	; 0x03
    1cbe:	e0 2d       	mov	r30, r0
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	04 96       	adiw	r24, 0x04	; 4
    1cc4:	7c 01       	movw	r14, r24
    1cc6:	8e 01       	movw	r16, r28
    1cc8:	0b 5f       	subi	r16, 0xFB	; 251
    1cca:	1f 4f       	sbci	r17, 0xFF	; 255
    1ccc:	9e 01       	movw	r18, r28
    1cce:	2a 5f       	subi	r18, 0xFA	; 250
    1cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd2:	ae 01       	movw	r20, r28
    1cd4:	4f 5f       	subi	r20, 0xFF	; 255
    1cd6:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd8:	be 01       	movw	r22, r28
    1cda:	6e 5f       	subi	r22, 0xFE	; 254
    1cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	19 95       	eicall
		screen->printInteger(hour);
    1ce2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce4:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1ce8:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1cec:	06 84       	ldd	r0, Z+14	; 0x0e
    1cee:	f7 85       	ldd	r31, Z+15	; 0x0f
    1cf0:	e0 2d       	mov	r30, r0
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	19 95       	eicall
		screen->printString(":");
    1cf6:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1cfa:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1cfe:	04 84       	ldd	r0, Z+12	; 0x0c
    1d00:	f5 85       	ldd	r31, Z+13	; 0x0d
    1d02:	e0 2d       	mov	r30, r0
    1d04:	81 e5       	ldi	r24, 0x51	; 81
    1d06:	92 e0       	ldi	r25, 0x02	; 2
    1d08:	19 95       	eicall
		screen->printInteger(min);
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1d10:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1d14:	06 84       	ldd	r0, Z+14	; 0x0e
    1d16:	f7 85       	ldd	r31, Z+15	; 0x0f
    1d18:	e0 2d       	mov	r30, r0
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	19 95       	eicall
		screen->printString(":");
    1d1e:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1d22:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1d26:	04 84       	ldd	r0, Z+12	; 0x0c
    1d28:	f5 85       	ldd	r31, Z+13	; 0x0d
    1d2a:	e0 2d       	mov	r30, r0
    1d2c:	81 e5       	ldi	r24, 0x51	; 81
    1d2e:	92 e0       	ldi	r25, 0x02	; 2
    1d30:	19 95       	eicall
		screen->printInteger(sec);
    1d32:	8c 81       	ldd	r24, Y+4	; 0x04
    1d34:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1d38:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1d3c:	06 84       	ldd	r0, Z+14	; 0x0e
    1d3e:	f7 85       	ldd	r31, Z+15	; 0x0f
    1d40:	e0 2d       	mov	r30, r0
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	19 95       	eicall
		// SPEED
		screen->setCursor(210,50);
    1d46:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1d4a:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1d4e:	00 84       	ldd	r0, Z+8	; 0x08
    1d50:	f1 85       	ldd	r31, Z+9	; 0x09
    1d52:	e0 2d       	mov	r30, r0
    1d54:	62 e3       	ldi	r22, 0x32	; 50
    1d56:	70 e0       	ldi	r23, 0x00	; 0
    1d58:	82 ed       	ldi	r24, 0xD2	; 210
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	19 95       	eicall
		screen->printFloat(speedSensor->getSpeedInKmh());
    1d5e:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1d62:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1d66:	00 89       	ldd	r16, Z+16	; 0x10
    1d68:	11 89       	ldd	r17, Z+17	; 0x11
    1d6a:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <speedSensor>
    1d6e:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <speedSensor+0x1>
    1d72:	06 80       	ldd	r0, Z+6	; 0x06
    1d74:	f7 81       	ldd	r31, Z+7	; 0x07
    1d76:	e0 2d       	mov	r30, r0
    1d78:	19 95       	eicall
    1d7a:	f8 01       	movw	r30, r16
    1d7c:	19 95       	eicall
		
		//TEMP
		screen->setCursor(60,130);
    1d7e:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1d82:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1d86:	00 84       	ldd	r0, Z+8	; 0x08
    1d88:	f1 85       	ldd	r31, Z+9	; 0x09
    1d8a:	e0 2d       	mov	r30, r0
    1d8c:	62 e8       	ldi	r22, 0x82	; 130
    1d8e:	70 e0       	ldi	r23, 0x00	; 0
    1d90:	8c e3       	ldi	r24, 0x3C	; 60
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	19 95       	eicall
		tempSensor->getTempHumid(&temp,&none);
    1d96:	e0 91 f0 02 	lds	r30, 0x02F0	; 0x8002f0 <tempSensor>
    1d9a:	f0 91 f1 02 	lds	r31, 0x02F1	; 0x8002f1 <tempSensor+0x1>
    1d9e:	01 90       	ld	r0, Z+
    1da0:	f0 81       	ld	r31, Z
    1da2:	e0 2d       	mov	r30, r0
    1da4:	be 01       	movw	r22, r28
    1da6:	69 5f       	subi	r22, 0xF9	; 249
    1da8:	7f 4f       	sbci	r23, 0xFF	; 255
    1daa:	ce 01       	movw	r24, r28
    1dac:	08 96       	adiw	r24, 0x08	; 8
    1dae:	19 95       	eicall
		screen->printInteger(temp);
    1db0:	88 85       	ldd	r24, Y+8	; 0x08
    1db2:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1db6:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1dba:	06 84       	ldd	r0, Z+14	; 0x0e
    1dbc:	f7 85       	ldd	r31, Z+15	; 0x0f
    1dbe:	e0 2d       	mov	r30, r0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	19 95       	eicall
		
		//STEEPNESS
		screen->setCursor(210,110);
    1dc4:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1dc8:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1dcc:	00 84       	ldd	r0, Z+8	; 0x08
    1dce:	f1 85       	ldd	r31, Z+9	; 0x09
    1dd0:	e0 2d       	mov	r30, r0
    1dd2:	6e e6       	ldi	r22, 0x6E	; 110
    1dd4:	70 e0       	ldi	r23, 0x00	; 0
    1dd6:	82 ed       	ldi	r24, 0xD2	; 210
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	19 95       	eicall
		screen->printInteger(day);
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1de2:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1de6:	06 84       	ldd	r0, Z+14	; 0x0e
    1de8:	f7 85       	ldd	r31, Z+15	; 0x0f
    1dea:	e0 2d       	mov	r30, r0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	19 95       	eicall
		screen->printString("-");
    1df0:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1df4:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1df8:	04 84       	ldd	r0, Z+12	; 0x0c
    1dfa:	f5 85       	ldd	r31, Z+13	; 0x0d
    1dfc:	e0 2d       	mov	r30, r0
    1dfe:	83 e5       	ldi	r24, 0x53	; 83
    1e00:	92 e0       	ldi	r25, 0x02	; 2
    1e02:	19 95       	eicall
		screen->printInteger(month);
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1e0a:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1e0e:	06 84       	ldd	r0, Z+14	; 0x0e
    1e10:	f7 85       	ldd	r31, Z+15	; 0x0f
    1e12:	e0 2d       	mov	r30, r0
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	19 95       	eicall
		screen->printString("-");
    1e18:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1e1c:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1e20:	04 84       	ldd	r0, Z+12	; 0x0c
    1e22:	f5 85       	ldd	r31, Z+13	; 0x0d
    1e24:	e0 2d       	mov	r30, r0
    1e26:	83 e5       	ldi	r24, 0x53	; 83
    1e28:	92 e0       	ldi	r25, 0x02	; 2
    1e2a:	19 95       	eicall
		screen->printInteger(year);
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1e32:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1e36:	06 84       	ldd	r0, Z+14	; 0x0e
    1e38:	f7 85       	ldd	r31, Z+15	; 0x0f
    1e3a:	e0 2d       	mov	r30, r0
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	19 95       	eicall
		
		//MILESTONES
		screen->setCursor(130,205);
    1e40:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1e44:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1e48:	00 84       	ldd	r0, Z+8	; 0x08
    1e4a:	f1 85       	ldd	r31, Z+9	; 0x09
    1e4c:	e0 2d       	mov	r30, r0
    1e4e:	6d ec       	ldi	r22, 0xCD	; 205
    1e50:	70 e0       	ldi	r23, 0x00	; 0
    1e52:	82 e8       	ldi	r24, 0x82	; 130
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	19 95       	eicall
		screen->printFloat(speedSensor->getTripDistance());
    1e58:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1e5c:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1e60:	00 89       	ldd	r16, Z+16	; 0x10
    1e62:	11 89       	ldd	r17, Z+17	; 0x11
    1e64:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <speedSensor>
    1e68:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <speedSensor+0x1>
    1e6c:	00 84       	ldd	r0, Z+8	; 0x08
    1e6e:	f1 85       	ldd	r31, Z+9	; 0x09
    1e70:	e0 2d       	mov	r30, r0
    1e72:	19 95       	eicall
    1e74:	f8 01       	movw	r30, r16
    1e76:	19 95       	eicall
    1e78:	8d c0       	rjmp	.+282    	; 0x1f94 <__vector_15+0x3ae>
		break;
		
		case MILESTONE:
		screen->setCursor(80,140);
    1e7a:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1e7e:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1e82:	00 84       	ldd	r0, Z+8	; 0x08
    1e84:	f1 85       	ldd	r31, Z+9	; 0x09
    1e86:	e0 2d       	mov	r30, r0
    1e88:	6c e8       	ldi	r22, 0x8C	; 140
    1e8a:	70 e0       	ldi	r23, 0x00	; 0
    1e8c:	80 e5       	ldi	r24, 0x50	; 80
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	19 95       	eicall
		screen->printFloat(speedSensor->getTripDistance());
    1e92:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1e96:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1e9a:	00 89       	ldd	r16, Z+16	; 0x10
    1e9c:	11 89       	ldd	r17, Z+17	; 0x11
    1e9e:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <speedSensor>
    1ea2:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <speedSensor+0x1>
    1ea6:	00 84       	ldd	r0, Z+8	; 0x08
    1ea8:	f1 85       	ldd	r31, Z+9	; 0x09
    1eaa:	e0 2d       	mov	r30, r0
    1eac:	19 95       	eicall
    1eae:	f8 01       	movw	r30, r16
    1eb0:	19 95       	eicall
    1eb2:	70 c0       	rjmp	.+224    	; 0x1f94 <__vector_15+0x3ae>
		break;
		
		case TEMPERATURE:
		screen->setCursor(80,140);
    1eb4:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1eb8:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1ebc:	00 84       	ldd	r0, Z+8	; 0x08
    1ebe:	f1 85       	ldd	r31, Z+9	; 0x09
    1ec0:	e0 2d       	mov	r30, r0
    1ec2:	6c e8       	ldi	r22, 0x8C	; 140
    1ec4:	70 e0       	ldi	r23, 0x00	; 0
    1ec6:	80 e5       	ldi	r24, 0x50	; 80
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	19 95       	eicall
		tempSensor->getTempHumid(&temp,&none);
    1ecc:	e0 91 f0 02 	lds	r30, 0x02F0	; 0x8002f0 <tempSensor>
    1ed0:	f0 91 f1 02 	lds	r31, 0x02F1	; 0x8002f1 <tempSensor+0x1>
    1ed4:	01 90       	ld	r0, Z+
    1ed6:	f0 81       	ld	r31, Z
    1ed8:	e0 2d       	mov	r30, r0
    1eda:	be 01       	movw	r22, r28
    1edc:	69 5f       	subi	r22, 0xF9	; 249
    1ede:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	08 96       	adiw	r24, 0x08	; 8
    1ee4:	19 95       	eicall
		screen->printInteger(temp);
    1ee6:	88 85       	ldd	r24, Y+8	; 0x08
    1ee8:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1eec:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1ef0:	06 84       	ldd	r0, Z+14	; 0x0e
    1ef2:	f7 85       	ldd	r31, Z+15	; 0x0f
    1ef4:	e0 2d       	mov	r30, r0
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	19 95       	eicall
    1efa:	4c c0       	rjmp	.+152    	; 0x1f94 <__vector_15+0x3ae>
		break;
		
		case VELOCITY:
		screen->setCursor(80,140);
    1efc:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1f00:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1f04:	00 84       	ldd	r0, Z+8	; 0x08
    1f06:	f1 85       	ldd	r31, Z+9	; 0x09
    1f08:	e0 2d       	mov	r30, r0
    1f0a:	6c e8       	ldi	r22, 0x8C	; 140
    1f0c:	70 e0       	ldi	r23, 0x00	; 0
    1f0e:	80 e5       	ldi	r24, 0x50	; 80
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	19 95       	eicall
		screen->printFloat(speedSensor->getSpeedInKmh());
    1f14:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1f18:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1f1c:	00 89       	ldd	r16, Z+16	; 0x10
    1f1e:	11 89       	ldd	r17, Z+17	; 0x11
    1f20:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <speedSensor>
    1f24:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <speedSensor+0x1>
    1f28:	06 80       	ldd	r0, Z+6	; 0x06
    1f2a:	f7 81       	ldd	r31, Z+7	; 0x07
    1f2c:	e0 2d       	mov	r30, r0
    1f2e:	19 95       	eicall
    1f30:	f8 01       	movw	r30, r16
    1f32:	19 95       	eicall
    1f34:	2f c0       	rjmp	.+94     	; 0x1f94 <__vector_15+0x3ae>
		break;
		
		case STEEPNESS:
		screen->setCursor(80,120);
    1f36:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1f3a:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1f3e:	00 84       	ldd	r0, Z+8	; 0x08
    1f40:	f1 85       	ldd	r31, Z+9	; 0x09
    1f42:	e0 2d       	mov	r30, r0
    1f44:	68 e7       	ldi	r22, 0x78	; 120
    1f46:	70 e0       	ldi	r23, 0x00	; 0
    1f48:	80 e5       	ldi	r24, 0x50	; 80
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	19 95       	eicall
		int16_t pitchroll[2];
		//myGyro->gatherData();
		//myGyro->getPitchRoll(pitchroll);
		screen->printInteger(pitchroll[0]);
    1f4e:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1f52:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1f56:	06 84       	ldd	r0, Z+14	; 0x0e
    1f58:	f7 85       	ldd	r31, Z+15	; 0x0f
    1f5a:	e0 2d       	mov	r30, r0
    1f5c:	c1 2c       	mov	r12, r1
    1f5e:	d1 2c       	mov	r13, r1
    1f60:	76 01       	movw	r14, r12
    1f62:	c6 01       	movw	r24, r12
    1f64:	19 95       	eicall
		screen->printString(",");
    1f66:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1f6a:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1f6e:	04 84       	ldd	r0, Z+12	; 0x0c
    1f70:	f5 85       	ldd	r31, Z+13	; 0x0d
    1f72:	e0 2d       	mov	r30, r0
    1f74:	85 e5       	ldi	r24, 0x55	; 85
    1f76:	92 e0       	ldi	r25, 0x02	; 2
    1f78:	19 95       	eicall
		screen->printInteger(pitchroll[1]);
    1f7a:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <screen>
    1f7e:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <screen+0x1>
    1f82:	06 84       	ldd	r0, Z+14	; 0x0e
    1f84:	f7 85       	ldd	r31, Z+15	; 0x0f
    1f86:	e0 2d       	mov	r30, r0
    1f88:	c7 01       	movw	r24, r14
    1f8a:	19 95       	eicall
    1f8c:	03 c0       	rjmp	.+6      	; 0x1f94 <__vector_15+0x3ae>
		break;
		
		
		default:
		currentState = TEMPERATURE;
    1f8e:	82 e0       	ldi	r24, 0x02	; 2
    1f90:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <currentState>
			{
				updateGUI_sm();
			}
		}
		
		if (checkpointCnt>60) //Save milestone to EEPROM every minute
    1f94:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <checkpointCnt>
    1f98:	8d 33       	cpi	r24, 0x3D	; 61
    1f9a:	50 f0       	brcs	.+20     	; 0x1fb0 <__vector_15+0x3ca>
		{
			checkpointCnt = 0;
    1f9c:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <checkpointCnt>
			speedSensor->saveMilestoneCount();
    1fa0:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <speedSensor>
    1fa4:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <speedSensor+0x1>
    1fa8:	04 80       	ldd	r0, Z+4	; 0x04
    1faa:	f5 81       	ldd	r31, Z+5	; 0x05
    1fac:	e0 2d       	mov	r30, r0
    1fae:	19 95       	eicall
		}

	}
    1fb0:	28 96       	adiw	r28, 0x08	; 8
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	df 91       	pop	r29
    1fbe:	cf 91       	pop	r28
    1fc0:	ff 91       	pop	r31
    1fc2:	ef 91       	pop	r30
    1fc4:	bf 91       	pop	r27
    1fc6:	af 91       	pop	r26
    1fc8:	9f 91       	pop	r25
    1fca:	8f 91       	pop	r24
    1fcc:	7f 91       	pop	r23
    1fce:	6f 91       	pop	r22
    1fd0:	5f 91       	pop	r21
    1fd2:	4f 91       	pop	r20
    1fd4:	3f 91       	pop	r19
    1fd6:	2f 91       	pop	r18
    1fd8:	1f 91       	pop	r17
    1fda:	0f 91       	pop	r16
    1fdc:	ff 90       	pop	r15
    1fde:	ef 90       	pop	r14
    1fe0:	df 90       	pop	r13
    1fe2:	cf 90       	pop	r12
    1fe4:	0f 90       	pop	r0
    1fe6:	0b be       	out	0x3b, r0	; 59
    1fe8:	0f 90       	pop	r0
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	0f 90       	pop	r0
    1fee:	1f 90       	pop	r1
    1ff0:	18 95       	reti

00001ff2 <__subsf3>:
    1ff2:	50 58       	subi	r21, 0x80	; 128

00001ff4 <__addsf3>:
    1ff4:	bb 27       	eor	r27, r27
    1ff6:	aa 27       	eor	r26, r26
    1ff8:	0e d0       	rcall	.+28     	; 0x2016 <__addsf3x>
    1ffa:	48 c1       	rjmp	.+656    	; 0x228c <__fp_round>
    1ffc:	39 d1       	rcall	.+626    	; 0x2270 <__fp_pscA>
    1ffe:	30 f0       	brcs	.+12     	; 0x200c <__addsf3+0x18>
    2000:	3e d1       	rcall	.+636    	; 0x227e <__fp_pscB>
    2002:	20 f0       	brcs	.+8      	; 0x200c <__addsf3+0x18>
    2004:	31 f4       	brne	.+12     	; 0x2012 <__addsf3+0x1e>
    2006:	9f 3f       	cpi	r25, 0xFF	; 255
    2008:	11 f4       	brne	.+4      	; 0x200e <__addsf3+0x1a>
    200a:	1e f4       	brtc	.+6      	; 0x2012 <__addsf3+0x1e>
    200c:	2e c1       	rjmp	.+604    	; 0x226a <__fp_nan>
    200e:	0e f4       	brtc	.+2      	; 0x2012 <__addsf3+0x1e>
    2010:	e0 95       	com	r30
    2012:	e7 fb       	bst	r30, 7
    2014:	24 c1       	rjmp	.+584    	; 0x225e <__fp_inf>

00002016 <__addsf3x>:
    2016:	e9 2f       	mov	r30, r25
    2018:	4a d1       	rcall	.+660    	; 0x22ae <__fp_split3>
    201a:	80 f3       	brcs	.-32     	; 0x1ffc <__addsf3+0x8>
    201c:	ba 17       	cp	r27, r26
    201e:	62 07       	cpc	r22, r18
    2020:	73 07       	cpc	r23, r19
    2022:	84 07       	cpc	r24, r20
    2024:	95 07       	cpc	r25, r21
    2026:	18 f0       	brcs	.+6      	; 0x202e <__addsf3x+0x18>
    2028:	71 f4       	brne	.+28     	; 0x2046 <__addsf3x+0x30>
    202a:	9e f5       	brtc	.+102    	; 0x2092 <__addsf3x+0x7c>
    202c:	62 c1       	rjmp	.+708    	; 0x22f2 <__fp_zero>
    202e:	0e f4       	brtc	.+2      	; 0x2032 <__addsf3x+0x1c>
    2030:	e0 95       	com	r30
    2032:	0b 2e       	mov	r0, r27
    2034:	ba 2f       	mov	r27, r26
    2036:	a0 2d       	mov	r26, r0
    2038:	0b 01       	movw	r0, r22
    203a:	b9 01       	movw	r22, r18
    203c:	90 01       	movw	r18, r0
    203e:	0c 01       	movw	r0, r24
    2040:	ca 01       	movw	r24, r20
    2042:	a0 01       	movw	r20, r0
    2044:	11 24       	eor	r1, r1
    2046:	ff 27       	eor	r31, r31
    2048:	59 1b       	sub	r21, r25
    204a:	99 f0       	breq	.+38     	; 0x2072 <__addsf3x+0x5c>
    204c:	59 3f       	cpi	r21, 0xF9	; 249
    204e:	50 f4       	brcc	.+20     	; 0x2064 <__addsf3x+0x4e>
    2050:	50 3e       	cpi	r21, 0xE0	; 224
    2052:	68 f1       	brcs	.+90     	; 0x20ae <__addsf3x+0x98>
    2054:	1a 16       	cp	r1, r26
    2056:	f0 40       	sbci	r31, 0x00	; 0
    2058:	a2 2f       	mov	r26, r18
    205a:	23 2f       	mov	r18, r19
    205c:	34 2f       	mov	r19, r20
    205e:	44 27       	eor	r20, r20
    2060:	58 5f       	subi	r21, 0xF8	; 248
    2062:	f3 cf       	rjmp	.-26     	; 0x204a <__addsf3x+0x34>
    2064:	46 95       	lsr	r20
    2066:	37 95       	ror	r19
    2068:	27 95       	ror	r18
    206a:	a7 95       	ror	r26
    206c:	f0 40       	sbci	r31, 0x00	; 0
    206e:	53 95       	inc	r21
    2070:	c9 f7       	brne	.-14     	; 0x2064 <__addsf3x+0x4e>
    2072:	7e f4       	brtc	.+30     	; 0x2092 <__addsf3x+0x7c>
    2074:	1f 16       	cp	r1, r31
    2076:	ba 0b       	sbc	r27, r26
    2078:	62 0b       	sbc	r22, r18
    207a:	73 0b       	sbc	r23, r19
    207c:	84 0b       	sbc	r24, r20
    207e:	ba f0       	brmi	.+46     	; 0x20ae <__addsf3x+0x98>
    2080:	91 50       	subi	r25, 0x01	; 1
    2082:	a1 f0       	breq	.+40     	; 0x20ac <__addsf3x+0x96>
    2084:	ff 0f       	add	r31, r31
    2086:	bb 1f       	adc	r27, r27
    2088:	66 1f       	adc	r22, r22
    208a:	77 1f       	adc	r23, r23
    208c:	88 1f       	adc	r24, r24
    208e:	c2 f7       	brpl	.-16     	; 0x2080 <__addsf3x+0x6a>
    2090:	0e c0       	rjmp	.+28     	; 0x20ae <__addsf3x+0x98>
    2092:	ba 0f       	add	r27, r26
    2094:	62 1f       	adc	r22, r18
    2096:	73 1f       	adc	r23, r19
    2098:	84 1f       	adc	r24, r20
    209a:	48 f4       	brcc	.+18     	; 0x20ae <__addsf3x+0x98>
    209c:	87 95       	ror	r24
    209e:	77 95       	ror	r23
    20a0:	67 95       	ror	r22
    20a2:	b7 95       	ror	r27
    20a4:	f7 95       	ror	r31
    20a6:	9e 3f       	cpi	r25, 0xFE	; 254
    20a8:	08 f0       	brcs	.+2      	; 0x20ac <__addsf3x+0x96>
    20aa:	b3 cf       	rjmp	.-154    	; 0x2012 <__addsf3+0x1e>
    20ac:	93 95       	inc	r25
    20ae:	88 0f       	add	r24, r24
    20b0:	08 f0       	brcs	.+2      	; 0x20b4 <__addsf3x+0x9e>
    20b2:	99 27       	eor	r25, r25
    20b4:	ee 0f       	add	r30, r30
    20b6:	97 95       	ror	r25
    20b8:	87 95       	ror	r24
    20ba:	08 95       	ret

000020bc <__divsf3>:
    20bc:	0c d0       	rcall	.+24     	; 0x20d6 <__divsf3x>
    20be:	e6 c0       	rjmp	.+460    	; 0x228c <__fp_round>
    20c0:	de d0       	rcall	.+444    	; 0x227e <__fp_pscB>
    20c2:	40 f0       	brcs	.+16     	; 0x20d4 <__divsf3+0x18>
    20c4:	d5 d0       	rcall	.+426    	; 0x2270 <__fp_pscA>
    20c6:	30 f0       	brcs	.+12     	; 0x20d4 <__divsf3+0x18>
    20c8:	21 f4       	brne	.+8      	; 0x20d2 <__divsf3+0x16>
    20ca:	5f 3f       	cpi	r21, 0xFF	; 255
    20cc:	19 f0       	breq	.+6      	; 0x20d4 <__divsf3+0x18>
    20ce:	c7 c0       	rjmp	.+398    	; 0x225e <__fp_inf>
    20d0:	51 11       	cpse	r21, r1
    20d2:	10 c1       	rjmp	.+544    	; 0x22f4 <__fp_szero>
    20d4:	ca c0       	rjmp	.+404    	; 0x226a <__fp_nan>

000020d6 <__divsf3x>:
    20d6:	eb d0       	rcall	.+470    	; 0x22ae <__fp_split3>
    20d8:	98 f3       	brcs	.-26     	; 0x20c0 <__divsf3+0x4>

000020da <__divsf3_pse>:
    20da:	99 23       	and	r25, r25
    20dc:	c9 f3       	breq	.-14     	; 0x20d0 <__divsf3+0x14>
    20de:	55 23       	and	r21, r21
    20e0:	b1 f3       	breq	.-20     	; 0x20ce <__divsf3+0x12>
    20e2:	95 1b       	sub	r25, r21
    20e4:	55 0b       	sbc	r21, r21
    20e6:	bb 27       	eor	r27, r27
    20e8:	aa 27       	eor	r26, r26
    20ea:	62 17       	cp	r22, r18
    20ec:	73 07       	cpc	r23, r19
    20ee:	84 07       	cpc	r24, r20
    20f0:	38 f0       	brcs	.+14     	; 0x2100 <__divsf3_pse+0x26>
    20f2:	9f 5f       	subi	r25, 0xFF	; 255
    20f4:	5f 4f       	sbci	r21, 0xFF	; 255
    20f6:	22 0f       	add	r18, r18
    20f8:	33 1f       	adc	r19, r19
    20fa:	44 1f       	adc	r20, r20
    20fc:	aa 1f       	adc	r26, r26
    20fe:	a9 f3       	breq	.-22     	; 0x20ea <__divsf3_pse+0x10>
    2100:	33 d0       	rcall	.+102    	; 0x2168 <__divsf3_pse+0x8e>
    2102:	0e 2e       	mov	r0, r30
    2104:	3a f0       	brmi	.+14     	; 0x2114 <__divsf3_pse+0x3a>
    2106:	e0 e8       	ldi	r30, 0x80	; 128
    2108:	30 d0       	rcall	.+96     	; 0x216a <__divsf3_pse+0x90>
    210a:	91 50       	subi	r25, 0x01	; 1
    210c:	50 40       	sbci	r21, 0x00	; 0
    210e:	e6 95       	lsr	r30
    2110:	00 1c       	adc	r0, r0
    2112:	ca f7       	brpl	.-14     	; 0x2106 <__divsf3_pse+0x2c>
    2114:	29 d0       	rcall	.+82     	; 0x2168 <__divsf3_pse+0x8e>
    2116:	fe 2f       	mov	r31, r30
    2118:	27 d0       	rcall	.+78     	; 0x2168 <__divsf3_pse+0x8e>
    211a:	66 0f       	add	r22, r22
    211c:	77 1f       	adc	r23, r23
    211e:	88 1f       	adc	r24, r24
    2120:	bb 1f       	adc	r27, r27
    2122:	26 17       	cp	r18, r22
    2124:	37 07       	cpc	r19, r23
    2126:	48 07       	cpc	r20, r24
    2128:	ab 07       	cpc	r26, r27
    212a:	b0 e8       	ldi	r27, 0x80	; 128
    212c:	09 f0       	breq	.+2      	; 0x2130 <__divsf3_pse+0x56>
    212e:	bb 0b       	sbc	r27, r27
    2130:	80 2d       	mov	r24, r0
    2132:	bf 01       	movw	r22, r30
    2134:	ff 27       	eor	r31, r31
    2136:	93 58       	subi	r25, 0x83	; 131
    2138:	5f 4f       	sbci	r21, 0xFF	; 255
    213a:	2a f0       	brmi	.+10     	; 0x2146 <__divsf3_pse+0x6c>
    213c:	9e 3f       	cpi	r25, 0xFE	; 254
    213e:	51 05       	cpc	r21, r1
    2140:	68 f0       	brcs	.+26     	; 0x215c <__divsf3_pse+0x82>
    2142:	8d c0       	rjmp	.+282    	; 0x225e <__fp_inf>
    2144:	d7 c0       	rjmp	.+430    	; 0x22f4 <__fp_szero>
    2146:	5f 3f       	cpi	r21, 0xFF	; 255
    2148:	ec f3       	brlt	.-6      	; 0x2144 <__divsf3_pse+0x6a>
    214a:	98 3e       	cpi	r25, 0xE8	; 232
    214c:	dc f3       	brlt	.-10     	; 0x2144 <__divsf3_pse+0x6a>
    214e:	86 95       	lsr	r24
    2150:	77 95       	ror	r23
    2152:	67 95       	ror	r22
    2154:	b7 95       	ror	r27
    2156:	f7 95       	ror	r31
    2158:	9f 5f       	subi	r25, 0xFF	; 255
    215a:	c9 f7       	brne	.-14     	; 0x214e <__divsf3_pse+0x74>
    215c:	88 0f       	add	r24, r24
    215e:	91 1d       	adc	r25, r1
    2160:	96 95       	lsr	r25
    2162:	87 95       	ror	r24
    2164:	97 f9       	bld	r25, 7
    2166:	08 95       	ret
    2168:	e1 e0       	ldi	r30, 0x01	; 1
    216a:	66 0f       	add	r22, r22
    216c:	77 1f       	adc	r23, r23
    216e:	88 1f       	adc	r24, r24
    2170:	bb 1f       	adc	r27, r27
    2172:	62 17       	cp	r22, r18
    2174:	73 07       	cpc	r23, r19
    2176:	84 07       	cpc	r24, r20
    2178:	ba 07       	cpc	r27, r26
    217a:	20 f0       	brcs	.+8      	; 0x2184 <__divsf3_pse+0xaa>
    217c:	62 1b       	sub	r22, r18
    217e:	73 0b       	sbc	r23, r19
    2180:	84 0b       	sbc	r24, r20
    2182:	ba 0b       	sbc	r27, r26
    2184:	ee 1f       	adc	r30, r30
    2186:	88 f7       	brcc	.-30     	; 0x216a <__divsf3_pse+0x90>
    2188:	e0 95       	com	r30
    218a:	08 95       	ret

0000218c <__fixunssfsi>:
    218c:	98 d0       	rcall	.+304    	; 0x22be <__fp_splitA>
    218e:	88 f0       	brcs	.+34     	; 0x21b2 <__fixunssfsi+0x26>
    2190:	9f 57       	subi	r25, 0x7F	; 127
    2192:	90 f0       	brcs	.+36     	; 0x21b8 <__fixunssfsi+0x2c>
    2194:	b9 2f       	mov	r27, r25
    2196:	99 27       	eor	r25, r25
    2198:	b7 51       	subi	r27, 0x17	; 23
    219a:	a0 f0       	brcs	.+40     	; 0x21c4 <__fixunssfsi+0x38>
    219c:	d1 f0       	breq	.+52     	; 0x21d2 <__fixunssfsi+0x46>
    219e:	66 0f       	add	r22, r22
    21a0:	77 1f       	adc	r23, r23
    21a2:	88 1f       	adc	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	1a f0       	brmi	.+6      	; 0x21ae <__fixunssfsi+0x22>
    21a8:	ba 95       	dec	r27
    21aa:	c9 f7       	brne	.-14     	; 0x219e <__fixunssfsi+0x12>
    21ac:	12 c0       	rjmp	.+36     	; 0x21d2 <__fixunssfsi+0x46>
    21ae:	b1 30       	cpi	r27, 0x01	; 1
    21b0:	81 f0       	breq	.+32     	; 0x21d2 <__fixunssfsi+0x46>
    21b2:	9f d0       	rcall	.+318    	; 0x22f2 <__fp_zero>
    21b4:	b1 e0       	ldi	r27, 0x01	; 1
    21b6:	08 95       	ret
    21b8:	9c c0       	rjmp	.+312    	; 0x22f2 <__fp_zero>
    21ba:	67 2f       	mov	r22, r23
    21bc:	78 2f       	mov	r23, r24
    21be:	88 27       	eor	r24, r24
    21c0:	b8 5f       	subi	r27, 0xF8	; 248
    21c2:	39 f0       	breq	.+14     	; 0x21d2 <__fixunssfsi+0x46>
    21c4:	b9 3f       	cpi	r27, 0xF9	; 249
    21c6:	cc f3       	brlt	.-14     	; 0x21ba <__fixunssfsi+0x2e>
    21c8:	86 95       	lsr	r24
    21ca:	77 95       	ror	r23
    21cc:	67 95       	ror	r22
    21ce:	b3 95       	inc	r27
    21d0:	d9 f7       	brne	.-10     	; 0x21c8 <__fixunssfsi+0x3c>
    21d2:	3e f4       	brtc	.+14     	; 0x21e2 <__fixunssfsi+0x56>
    21d4:	90 95       	com	r25
    21d6:	80 95       	com	r24
    21d8:	70 95       	com	r23
    21da:	61 95       	neg	r22
    21dc:	7f 4f       	sbci	r23, 0xFF	; 255
    21de:	8f 4f       	sbci	r24, 0xFF	; 255
    21e0:	9f 4f       	sbci	r25, 0xFF	; 255
    21e2:	08 95       	ret

000021e4 <__floatunsisf>:
    21e4:	e8 94       	clt
    21e6:	09 c0       	rjmp	.+18     	; 0x21fa <__floatsisf+0x12>

000021e8 <__floatsisf>:
    21e8:	97 fb       	bst	r25, 7
    21ea:	3e f4       	brtc	.+14     	; 0x21fa <__floatsisf+0x12>
    21ec:	90 95       	com	r25
    21ee:	80 95       	com	r24
    21f0:	70 95       	com	r23
    21f2:	61 95       	neg	r22
    21f4:	7f 4f       	sbci	r23, 0xFF	; 255
    21f6:	8f 4f       	sbci	r24, 0xFF	; 255
    21f8:	9f 4f       	sbci	r25, 0xFF	; 255
    21fa:	99 23       	and	r25, r25
    21fc:	a9 f0       	breq	.+42     	; 0x2228 <__stack+0x29>
    21fe:	f9 2f       	mov	r31, r25
    2200:	96 e9       	ldi	r25, 0x96	; 150
    2202:	bb 27       	eor	r27, r27
    2204:	93 95       	inc	r25
    2206:	f6 95       	lsr	r31
    2208:	87 95       	ror	r24
    220a:	77 95       	ror	r23
    220c:	67 95       	ror	r22
    220e:	b7 95       	ror	r27
    2210:	f1 11       	cpse	r31, r1
    2212:	f8 cf       	rjmp	.-16     	; 0x2204 <__stack+0x5>
    2214:	fa f4       	brpl	.+62     	; 0x2254 <__stack+0x55>
    2216:	bb 0f       	add	r27, r27
    2218:	11 f4       	brne	.+4      	; 0x221e <__stack+0x1f>
    221a:	60 ff       	sbrs	r22, 0
    221c:	1b c0       	rjmp	.+54     	; 0x2254 <__stack+0x55>
    221e:	6f 5f       	subi	r22, 0xFF	; 255
    2220:	7f 4f       	sbci	r23, 0xFF	; 255
    2222:	8f 4f       	sbci	r24, 0xFF	; 255
    2224:	9f 4f       	sbci	r25, 0xFF	; 255
    2226:	16 c0       	rjmp	.+44     	; 0x2254 <__stack+0x55>
    2228:	88 23       	and	r24, r24
    222a:	11 f0       	breq	.+4      	; 0x2230 <__stack+0x31>
    222c:	96 e9       	ldi	r25, 0x96	; 150
    222e:	11 c0       	rjmp	.+34     	; 0x2252 <__stack+0x53>
    2230:	77 23       	and	r23, r23
    2232:	21 f0       	breq	.+8      	; 0x223c <__stack+0x3d>
    2234:	9e e8       	ldi	r25, 0x8E	; 142
    2236:	87 2f       	mov	r24, r23
    2238:	76 2f       	mov	r23, r22
    223a:	05 c0       	rjmp	.+10     	; 0x2246 <__stack+0x47>
    223c:	66 23       	and	r22, r22
    223e:	71 f0       	breq	.+28     	; 0x225c <__stack+0x5d>
    2240:	96 e8       	ldi	r25, 0x86	; 134
    2242:	86 2f       	mov	r24, r22
    2244:	70 e0       	ldi	r23, 0x00	; 0
    2246:	60 e0       	ldi	r22, 0x00	; 0
    2248:	2a f0       	brmi	.+10     	; 0x2254 <__stack+0x55>
    224a:	9a 95       	dec	r25
    224c:	66 0f       	add	r22, r22
    224e:	77 1f       	adc	r23, r23
    2250:	88 1f       	adc	r24, r24
    2252:	da f7       	brpl	.-10     	; 0x224a <__stack+0x4b>
    2254:	88 0f       	add	r24, r24
    2256:	96 95       	lsr	r25
    2258:	87 95       	ror	r24
    225a:	97 f9       	bld	r25, 7
    225c:	08 95       	ret

0000225e <__fp_inf>:
    225e:	97 f9       	bld	r25, 7
    2260:	9f 67       	ori	r25, 0x7F	; 127
    2262:	80 e8       	ldi	r24, 0x80	; 128
    2264:	70 e0       	ldi	r23, 0x00	; 0
    2266:	60 e0       	ldi	r22, 0x00	; 0
    2268:	08 95       	ret

0000226a <__fp_nan>:
    226a:	9f ef       	ldi	r25, 0xFF	; 255
    226c:	80 ec       	ldi	r24, 0xC0	; 192
    226e:	08 95       	ret

00002270 <__fp_pscA>:
    2270:	00 24       	eor	r0, r0
    2272:	0a 94       	dec	r0
    2274:	16 16       	cp	r1, r22
    2276:	17 06       	cpc	r1, r23
    2278:	18 06       	cpc	r1, r24
    227a:	09 06       	cpc	r0, r25
    227c:	08 95       	ret

0000227e <__fp_pscB>:
    227e:	00 24       	eor	r0, r0
    2280:	0a 94       	dec	r0
    2282:	12 16       	cp	r1, r18
    2284:	13 06       	cpc	r1, r19
    2286:	14 06       	cpc	r1, r20
    2288:	05 06       	cpc	r0, r21
    228a:	08 95       	ret

0000228c <__fp_round>:
    228c:	09 2e       	mov	r0, r25
    228e:	03 94       	inc	r0
    2290:	00 0c       	add	r0, r0
    2292:	11 f4       	brne	.+4      	; 0x2298 <__fp_round+0xc>
    2294:	88 23       	and	r24, r24
    2296:	52 f0       	brmi	.+20     	; 0x22ac <__fp_round+0x20>
    2298:	bb 0f       	add	r27, r27
    229a:	40 f4       	brcc	.+16     	; 0x22ac <__fp_round+0x20>
    229c:	bf 2b       	or	r27, r31
    229e:	11 f4       	brne	.+4      	; 0x22a4 <__fp_round+0x18>
    22a0:	60 ff       	sbrs	r22, 0
    22a2:	04 c0       	rjmp	.+8      	; 0x22ac <__fp_round+0x20>
    22a4:	6f 5f       	subi	r22, 0xFF	; 255
    22a6:	7f 4f       	sbci	r23, 0xFF	; 255
    22a8:	8f 4f       	sbci	r24, 0xFF	; 255
    22aa:	9f 4f       	sbci	r25, 0xFF	; 255
    22ac:	08 95       	ret

000022ae <__fp_split3>:
    22ae:	57 fd       	sbrc	r21, 7
    22b0:	90 58       	subi	r25, 0x80	; 128
    22b2:	44 0f       	add	r20, r20
    22b4:	55 1f       	adc	r21, r21
    22b6:	59 f0       	breq	.+22     	; 0x22ce <__fp_splitA+0x10>
    22b8:	5f 3f       	cpi	r21, 0xFF	; 255
    22ba:	71 f0       	breq	.+28     	; 0x22d8 <__fp_splitA+0x1a>
    22bc:	47 95       	ror	r20

000022be <__fp_splitA>:
    22be:	88 0f       	add	r24, r24
    22c0:	97 fb       	bst	r25, 7
    22c2:	99 1f       	adc	r25, r25
    22c4:	61 f0       	breq	.+24     	; 0x22de <__fp_splitA+0x20>
    22c6:	9f 3f       	cpi	r25, 0xFF	; 255
    22c8:	79 f0       	breq	.+30     	; 0x22e8 <__fp_splitA+0x2a>
    22ca:	87 95       	ror	r24
    22cc:	08 95       	ret
    22ce:	12 16       	cp	r1, r18
    22d0:	13 06       	cpc	r1, r19
    22d2:	14 06       	cpc	r1, r20
    22d4:	55 1f       	adc	r21, r21
    22d6:	f2 cf       	rjmp	.-28     	; 0x22bc <__fp_split3+0xe>
    22d8:	46 95       	lsr	r20
    22da:	f1 df       	rcall	.-30     	; 0x22be <__fp_splitA>
    22dc:	08 c0       	rjmp	.+16     	; 0x22ee <__fp_splitA+0x30>
    22de:	16 16       	cp	r1, r22
    22e0:	17 06       	cpc	r1, r23
    22e2:	18 06       	cpc	r1, r24
    22e4:	99 1f       	adc	r25, r25
    22e6:	f1 cf       	rjmp	.-30     	; 0x22ca <__fp_splitA+0xc>
    22e8:	86 95       	lsr	r24
    22ea:	71 05       	cpc	r23, r1
    22ec:	61 05       	cpc	r22, r1
    22ee:	08 94       	sec
    22f0:	08 95       	ret

000022f2 <__fp_zero>:
    22f2:	e8 94       	clt

000022f4 <__fp_szero>:
    22f4:	bb 27       	eor	r27, r27
    22f6:	66 27       	eor	r22, r22
    22f8:	77 27       	eor	r23, r23
    22fa:	cb 01       	movw	r24, r22
    22fc:	97 f9       	bld	r25, 7
    22fe:	08 95       	ret

00002300 <__gesf2>:
    2300:	66 d0       	rcall	.+204    	; 0x23ce <__fp_cmp>
    2302:	08 f4       	brcc	.+2      	; 0x2306 <__gesf2+0x6>
    2304:	8f ef       	ldi	r24, 0xFF	; 255
    2306:	08 95       	ret

00002308 <__mulsf3>:
    2308:	0b d0       	rcall	.+22     	; 0x2320 <__mulsf3x>
    230a:	c0 cf       	rjmp	.-128    	; 0x228c <__fp_round>
    230c:	b1 df       	rcall	.-158    	; 0x2270 <__fp_pscA>
    230e:	28 f0       	brcs	.+10     	; 0x231a <__mulsf3+0x12>
    2310:	b6 df       	rcall	.-148    	; 0x227e <__fp_pscB>
    2312:	18 f0       	brcs	.+6      	; 0x231a <__mulsf3+0x12>
    2314:	95 23       	and	r25, r21
    2316:	09 f0       	breq	.+2      	; 0x231a <__mulsf3+0x12>
    2318:	a2 cf       	rjmp	.-188    	; 0x225e <__fp_inf>
    231a:	a7 cf       	rjmp	.-178    	; 0x226a <__fp_nan>
    231c:	11 24       	eor	r1, r1
    231e:	ea cf       	rjmp	.-44     	; 0x22f4 <__fp_szero>

00002320 <__mulsf3x>:
    2320:	c6 df       	rcall	.-116    	; 0x22ae <__fp_split3>
    2322:	a0 f3       	brcs	.-24     	; 0x230c <__mulsf3+0x4>

00002324 <__mulsf3_pse>:
    2324:	95 9f       	mul	r25, r21
    2326:	d1 f3       	breq	.-12     	; 0x231c <__mulsf3+0x14>
    2328:	95 0f       	add	r25, r21
    232a:	50 e0       	ldi	r21, 0x00	; 0
    232c:	55 1f       	adc	r21, r21
    232e:	62 9f       	mul	r22, r18
    2330:	f0 01       	movw	r30, r0
    2332:	72 9f       	mul	r23, r18
    2334:	bb 27       	eor	r27, r27
    2336:	f0 0d       	add	r31, r0
    2338:	b1 1d       	adc	r27, r1
    233a:	63 9f       	mul	r22, r19
    233c:	aa 27       	eor	r26, r26
    233e:	f0 0d       	add	r31, r0
    2340:	b1 1d       	adc	r27, r1
    2342:	aa 1f       	adc	r26, r26
    2344:	64 9f       	mul	r22, r20
    2346:	66 27       	eor	r22, r22
    2348:	b0 0d       	add	r27, r0
    234a:	a1 1d       	adc	r26, r1
    234c:	66 1f       	adc	r22, r22
    234e:	82 9f       	mul	r24, r18
    2350:	22 27       	eor	r18, r18
    2352:	b0 0d       	add	r27, r0
    2354:	a1 1d       	adc	r26, r1
    2356:	62 1f       	adc	r22, r18
    2358:	73 9f       	mul	r23, r19
    235a:	b0 0d       	add	r27, r0
    235c:	a1 1d       	adc	r26, r1
    235e:	62 1f       	adc	r22, r18
    2360:	83 9f       	mul	r24, r19
    2362:	a0 0d       	add	r26, r0
    2364:	61 1d       	adc	r22, r1
    2366:	22 1f       	adc	r18, r18
    2368:	74 9f       	mul	r23, r20
    236a:	33 27       	eor	r19, r19
    236c:	a0 0d       	add	r26, r0
    236e:	61 1d       	adc	r22, r1
    2370:	23 1f       	adc	r18, r19
    2372:	84 9f       	mul	r24, r20
    2374:	60 0d       	add	r22, r0
    2376:	21 1d       	adc	r18, r1
    2378:	82 2f       	mov	r24, r18
    237a:	76 2f       	mov	r23, r22
    237c:	6a 2f       	mov	r22, r26
    237e:	11 24       	eor	r1, r1
    2380:	9f 57       	subi	r25, 0x7F	; 127
    2382:	50 40       	sbci	r21, 0x00	; 0
    2384:	8a f0       	brmi	.+34     	; 0x23a8 <__mulsf3_pse+0x84>
    2386:	e1 f0       	breq	.+56     	; 0x23c0 <__mulsf3_pse+0x9c>
    2388:	88 23       	and	r24, r24
    238a:	4a f0       	brmi	.+18     	; 0x239e <__mulsf3_pse+0x7a>
    238c:	ee 0f       	add	r30, r30
    238e:	ff 1f       	adc	r31, r31
    2390:	bb 1f       	adc	r27, r27
    2392:	66 1f       	adc	r22, r22
    2394:	77 1f       	adc	r23, r23
    2396:	88 1f       	adc	r24, r24
    2398:	91 50       	subi	r25, 0x01	; 1
    239a:	50 40       	sbci	r21, 0x00	; 0
    239c:	a9 f7       	brne	.-22     	; 0x2388 <__mulsf3_pse+0x64>
    239e:	9e 3f       	cpi	r25, 0xFE	; 254
    23a0:	51 05       	cpc	r21, r1
    23a2:	70 f0       	brcs	.+28     	; 0x23c0 <__mulsf3_pse+0x9c>
    23a4:	5c cf       	rjmp	.-328    	; 0x225e <__fp_inf>
    23a6:	a6 cf       	rjmp	.-180    	; 0x22f4 <__fp_szero>
    23a8:	5f 3f       	cpi	r21, 0xFF	; 255
    23aa:	ec f3       	brlt	.-6      	; 0x23a6 <__mulsf3_pse+0x82>
    23ac:	98 3e       	cpi	r25, 0xE8	; 232
    23ae:	dc f3       	brlt	.-10     	; 0x23a6 <__mulsf3_pse+0x82>
    23b0:	86 95       	lsr	r24
    23b2:	77 95       	ror	r23
    23b4:	67 95       	ror	r22
    23b6:	b7 95       	ror	r27
    23b8:	f7 95       	ror	r31
    23ba:	e7 95       	ror	r30
    23bc:	9f 5f       	subi	r25, 0xFF	; 255
    23be:	c1 f7       	brne	.-16     	; 0x23b0 <__mulsf3_pse+0x8c>
    23c0:	fe 2b       	or	r31, r30
    23c2:	88 0f       	add	r24, r24
    23c4:	91 1d       	adc	r25, r1
    23c6:	96 95       	lsr	r25
    23c8:	87 95       	ror	r24
    23ca:	97 f9       	bld	r25, 7
    23cc:	08 95       	ret

000023ce <__fp_cmp>:
    23ce:	99 0f       	add	r25, r25
    23d0:	00 08       	sbc	r0, r0
    23d2:	55 0f       	add	r21, r21
    23d4:	aa 0b       	sbc	r26, r26
    23d6:	e0 e8       	ldi	r30, 0x80	; 128
    23d8:	fe ef       	ldi	r31, 0xFE	; 254
    23da:	16 16       	cp	r1, r22
    23dc:	17 06       	cpc	r1, r23
    23de:	e8 07       	cpc	r30, r24
    23e0:	f9 07       	cpc	r31, r25
    23e2:	c0 f0       	brcs	.+48     	; 0x2414 <__fp_cmp+0x46>
    23e4:	12 16       	cp	r1, r18
    23e6:	13 06       	cpc	r1, r19
    23e8:	e4 07       	cpc	r30, r20
    23ea:	f5 07       	cpc	r31, r21
    23ec:	98 f0       	brcs	.+38     	; 0x2414 <__fp_cmp+0x46>
    23ee:	62 1b       	sub	r22, r18
    23f0:	73 0b       	sbc	r23, r19
    23f2:	84 0b       	sbc	r24, r20
    23f4:	95 0b       	sbc	r25, r21
    23f6:	39 f4       	brne	.+14     	; 0x2406 <__fp_cmp+0x38>
    23f8:	0a 26       	eor	r0, r26
    23fa:	61 f0       	breq	.+24     	; 0x2414 <__fp_cmp+0x46>
    23fc:	23 2b       	or	r18, r19
    23fe:	24 2b       	or	r18, r20
    2400:	25 2b       	or	r18, r21
    2402:	21 f4       	brne	.+8      	; 0x240c <__fp_cmp+0x3e>
    2404:	08 95       	ret
    2406:	0a 26       	eor	r0, r26
    2408:	09 f4       	brne	.+2      	; 0x240c <__fp_cmp+0x3e>
    240a:	a1 40       	sbci	r26, 0x01	; 1
    240c:	a6 95       	lsr	r26
    240e:	8f ef       	ldi	r24, 0xFF	; 255
    2410:	81 1d       	adc	r24, r1
    2412:	81 1d       	adc	r24, r1
    2414:	08 95       	ret

00002416 <__divmodhi4>:
    2416:	97 fb       	bst	r25, 7
    2418:	07 2e       	mov	r0, r23
    241a:	16 f4       	brtc	.+4      	; 0x2420 <__divmodhi4+0xa>
    241c:	00 94       	com	r0
    241e:	06 d0       	rcall	.+12     	; 0x242c <__divmodhi4_neg1>
    2420:	77 fd       	sbrc	r23, 7
    2422:	08 d0       	rcall	.+16     	; 0x2434 <__divmodhi4_neg2>
    2424:	1a d0       	rcall	.+52     	; 0x245a <__udivmodhi4>
    2426:	07 fc       	sbrc	r0, 7
    2428:	05 d0       	rcall	.+10     	; 0x2434 <__divmodhi4_neg2>
    242a:	3e f4       	brtc	.+14     	; 0x243a <__divmodhi4_exit>

0000242c <__divmodhi4_neg1>:
    242c:	90 95       	com	r25
    242e:	81 95       	neg	r24
    2430:	9f 4f       	sbci	r25, 0xFF	; 255
    2432:	08 95       	ret

00002434 <__divmodhi4_neg2>:
    2434:	70 95       	com	r23
    2436:	61 95       	neg	r22
    2438:	7f 4f       	sbci	r23, 0xFF	; 255

0000243a <__divmodhi4_exit>:
    243a:	08 95       	ret

0000243c <__umulhisi3>:
    243c:	a2 9f       	mul	r26, r18
    243e:	b0 01       	movw	r22, r0
    2440:	b3 9f       	mul	r27, r19
    2442:	c0 01       	movw	r24, r0
    2444:	a3 9f       	mul	r26, r19
    2446:	70 0d       	add	r23, r0
    2448:	81 1d       	adc	r24, r1
    244a:	11 24       	eor	r1, r1
    244c:	91 1d       	adc	r25, r1
    244e:	b2 9f       	mul	r27, r18
    2450:	70 0d       	add	r23, r0
    2452:	81 1d       	adc	r24, r1
    2454:	11 24       	eor	r1, r1
    2456:	91 1d       	adc	r25, r1
    2458:	08 95       	ret

0000245a <__udivmodhi4>:
    245a:	aa 1b       	sub	r26, r26
    245c:	bb 1b       	sub	r27, r27
    245e:	51 e1       	ldi	r21, 0x11	; 17
    2460:	07 c0       	rjmp	.+14     	; 0x2470 <__udivmodhi4_ep>

00002462 <__udivmodhi4_loop>:
    2462:	aa 1f       	adc	r26, r26
    2464:	bb 1f       	adc	r27, r27
    2466:	a6 17       	cp	r26, r22
    2468:	b7 07       	cpc	r27, r23
    246a:	10 f0       	brcs	.+4      	; 0x2470 <__udivmodhi4_ep>
    246c:	a6 1b       	sub	r26, r22
    246e:	b7 0b       	sbc	r27, r23

00002470 <__udivmodhi4_ep>:
    2470:	88 1f       	adc	r24, r24
    2472:	99 1f       	adc	r25, r25
    2474:	5a 95       	dec	r21
    2476:	a9 f7       	brne	.-22     	; 0x2462 <__udivmodhi4_loop>
    2478:	80 95       	com	r24
    247a:	90 95       	com	r25
    247c:	bc 01       	movw	r22, r24
    247e:	cd 01       	movw	r24, r26
    2480:	08 95       	ret

00002482 <__itoa_ncheck>:
    2482:	bb 27       	eor	r27, r27
    2484:	4a 30       	cpi	r20, 0x0A	; 10
    2486:	31 f4       	brne	.+12     	; 0x2494 <__itoa_ncheck+0x12>
    2488:	99 23       	and	r25, r25
    248a:	22 f4       	brpl	.+8      	; 0x2494 <__itoa_ncheck+0x12>
    248c:	bd e2       	ldi	r27, 0x2D	; 45
    248e:	90 95       	com	r25
    2490:	81 95       	neg	r24
    2492:	9f 4f       	sbci	r25, 0xFF	; 255
    2494:	01 c0       	rjmp	.+2      	; 0x2498 <__utoa_common>

00002496 <__utoa_ncheck>:
    2496:	bb 27       	eor	r27, r27

00002498 <__utoa_common>:
    2498:	fb 01       	movw	r30, r22
    249a:	55 27       	eor	r21, r21
    249c:	aa 27       	eor	r26, r26
    249e:	88 0f       	add	r24, r24
    24a0:	99 1f       	adc	r25, r25
    24a2:	aa 1f       	adc	r26, r26
    24a4:	a4 17       	cp	r26, r20
    24a6:	10 f0       	brcs	.+4      	; 0x24ac <__utoa_common+0x14>
    24a8:	a4 1b       	sub	r26, r20
    24aa:	83 95       	inc	r24
    24ac:	50 51       	subi	r21, 0x10	; 16
    24ae:	b9 f7       	brne	.-18     	; 0x249e <__utoa_common+0x6>
    24b0:	a0 5d       	subi	r26, 0xD0	; 208
    24b2:	aa 33       	cpi	r26, 0x3A	; 58
    24b4:	08 f0       	brcs	.+2      	; 0x24b8 <__utoa_common+0x20>
    24b6:	a9 5d       	subi	r26, 0xD9	; 217
    24b8:	a1 93       	st	Z+, r26
    24ba:	00 97       	sbiw	r24, 0x00	; 0
    24bc:	79 f7       	brne	.-34     	; 0x249c <__utoa_common+0x4>
    24be:	b1 11       	cpse	r27, r1
    24c0:	b1 93       	st	Z+, r27
    24c2:	11 92       	st	Z+, r1
    24c4:	cb 01       	movw	r24, r22
    24c6:	00 c0       	rjmp	.+0      	; 0x24c8 <strrev>

000024c8 <strrev>:
    24c8:	dc 01       	movw	r26, r24
    24ca:	fc 01       	movw	r30, r24
    24cc:	67 2f       	mov	r22, r23
    24ce:	71 91       	ld	r23, Z+
    24d0:	77 23       	and	r23, r23
    24d2:	e1 f7       	brne	.-8      	; 0x24cc <strrev+0x4>
    24d4:	32 97       	sbiw	r30, 0x02	; 2
    24d6:	04 c0       	rjmp	.+8      	; 0x24e0 <strrev+0x18>
    24d8:	7c 91       	ld	r23, X
    24da:	6d 93       	st	X+, r22
    24dc:	70 83       	st	Z, r23
    24de:	62 91       	ld	r22, -Z
    24e0:	ae 17       	cp	r26, r30
    24e2:	bf 07       	cpc	r27, r31
    24e4:	c8 f3       	brcs	.-14     	; 0x24d8 <strrev+0x10>
    24e6:	08 95       	ret

000024e8 <eeprom_read_dword>:
    24e8:	a6 e1       	ldi	r26, 0x16	; 22
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	44 e0       	ldi	r20, 0x04	; 4
    24ee:	50 e0       	ldi	r21, 0x00	; 0
    24f0:	0a c0       	rjmp	.+20     	; 0x2506 <eeprom_read_blraw>

000024f2 <eeprom_update_dword>:
    24f2:	03 96       	adiw	r24, 0x03	; 3
    24f4:	27 2f       	mov	r18, r23
    24f6:	16 d0       	rcall	.+44     	; 0x2524 <eeprom_update_r18>
    24f8:	14 d0       	rcall	.+40     	; 0x2522 <eeprom_update_byte>
    24fa:	25 2f       	mov	r18, r21
    24fc:	13 d0       	rcall	.+38     	; 0x2524 <eeprom_update_r18>
    24fe:	24 2f       	mov	r18, r20
    2500:	11 c0       	rjmp	.+34     	; 0x2524 <eeprom_update_r18>

00002502 <eeprom_read_block>:
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22

00002506 <eeprom_read_blraw>:
    2506:	fc 01       	movw	r30, r24
    2508:	f9 99       	sbic	0x1f, 1	; 31
    250a:	fe cf       	rjmp	.-4      	; 0x2508 <eeprom_read_blraw+0x2>
    250c:	06 c0       	rjmp	.+12     	; 0x251a <eeprom_read_blraw+0x14>
    250e:	f2 bd       	out	0x22, r31	; 34
    2510:	e1 bd       	out	0x21, r30	; 33
    2512:	f8 9a       	sbi	0x1f, 0	; 31
    2514:	31 96       	adiw	r30, 0x01	; 1
    2516:	00 b4       	in	r0, 0x20	; 32
    2518:	0d 92       	st	X+, r0
    251a:	41 50       	subi	r20, 0x01	; 1
    251c:	50 40       	sbci	r21, 0x00	; 0
    251e:	b8 f7       	brcc	.-18     	; 0x250e <eeprom_read_blraw+0x8>
    2520:	08 95       	ret

00002522 <eeprom_update_byte>:
    2522:	26 2f       	mov	r18, r22

00002524 <eeprom_update_r18>:
    2524:	f9 99       	sbic	0x1f, 1	; 31
    2526:	fe cf       	rjmp	.-4      	; 0x2524 <eeprom_update_r18>
    2528:	92 bd       	out	0x22, r25	; 34
    252a:	81 bd       	out	0x21, r24	; 33
    252c:	f8 9a       	sbi	0x1f, 0	; 31
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	00 b4       	in	r0, 0x20	; 32
    2532:	02 16       	cp	r0, r18
    2534:	39 f0       	breq	.+14     	; 0x2544 <eeprom_update_r18+0x20>
    2536:	1f ba       	out	0x1f, r1	; 31
    2538:	20 bd       	out	0x20, r18	; 32
    253a:	0f b6       	in	r0, 0x3f	; 63
    253c:	f8 94       	cli
    253e:	fa 9a       	sbi	0x1f, 2	; 31
    2540:	f9 9a       	sbi	0x1f, 1	; 31
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	08 95       	ret

00002546 <_exit>:
    2546:	f8 94       	cli

00002548 <__stop_program>:
    2548:	ff cf       	rjmp	.-2      	; 0x2548 <__stop_program>
