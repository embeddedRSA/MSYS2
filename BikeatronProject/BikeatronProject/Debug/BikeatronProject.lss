
BikeatronProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800200  0000195c  000019f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000195c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005d  00800260  00800260  00001a50  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00001ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ca4  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014e7  00000000  00000000  0000496c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012bc  00000000  00000000  00005e53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ec  00000000  00000000  00007110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bb9  00000000  00000000  000074fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e26  00000000  00000000  000080b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00008edb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	db c2       	rjmp	.+1462   	; 0x5b8 <__ctors_end>
       2:	00 00       	nop
       4:	f9 c2       	rjmp	.+1522   	; 0x5f8 <__bad_interrupt>
       6:	00 00       	nop
       8:	f7 c2       	rjmp	.+1518   	; 0x5f8 <__bad_interrupt>
       a:	00 00       	nop
       c:	f5 c2       	rjmp	.+1514   	; 0x5f8 <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__vector_4>
      14:	f1 c2       	rjmp	.+1506   	; 0x5f8 <__bad_interrupt>
      16:	00 00       	nop
      18:	ef c2       	rjmp	.+1502   	; 0x5f8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ed c2       	rjmp	.+1498   	; 0x5f8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	eb c2       	rjmp	.+1494   	; 0x5f8 <__bad_interrupt>
      22:	00 00       	nop
      24:	e9 c2       	rjmp	.+1490   	; 0x5f8 <__bad_interrupt>
      26:	00 00       	nop
      28:	e7 c2       	rjmp	.+1486   	; 0x5f8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e5 c2       	rjmp	.+1482   	; 0x5f8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e3 c2       	rjmp	.+1478   	; 0x5f8 <__bad_interrupt>
      32:	00 00       	nop
      34:	e1 c2       	rjmp	.+1474   	; 0x5f8 <__bad_interrupt>
      36:	00 00       	nop
      38:	df c2       	rjmp	.+1470   	; 0x5f8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__vector_15>
      40:	db c2       	rjmp	.+1462   	; 0x5f8 <__bad_interrupt>
      42:	00 00       	nop
      44:	d9 c2       	rjmp	.+1458   	; 0x5f8 <__bad_interrupt>
      46:	00 00       	nop
      48:	d7 c2       	rjmp	.+1454   	; 0x5f8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d5 c2       	rjmp	.+1450   	; 0x5f8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d3 c2       	rjmp	.+1446   	; 0x5f8 <__bad_interrupt>
      52:	00 00       	nop
      54:	d1 c2       	rjmp	.+1442   	; 0x5f8 <__bad_interrupt>
      56:	00 00       	nop
      58:	cf c2       	rjmp	.+1438   	; 0x5f8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	cd c2       	rjmp	.+1434   	; 0x5f8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	cb c2       	rjmp	.+1430   	; 0x5f8 <__bad_interrupt>
      62:	00 00       	nop
      64:	c9 c2       	rjmp	.+1426   	; 0x5f8 <__bad_interrupt>
      66:	00 00       	nop
      68:	c7 c2       	rjmp	.+1422   	; 0x5f8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c5 c2       	rjmp	.+1418   	; 0x5f8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c3 c2       	rjmp	.+1414   	; 0x5f8 <__bad_interrupt>
      72:	00 00       	nop
      74:	c1 c2       	rjmp	.+1410   	; 0x5f8 <__bad_interrupt>
      76:	00 00       	nop
      78:	bf c2       	rjmp	.+1406   	; 0x5f8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	bd c2       	rjmp	.+1402   	; 0x5f8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	bb c2       	rjmp	.+1398   	; 0x5f8 <__bad_interrupt>
      82:	00 00       	nop
      84:	b9 c2       	rjmp	.+1394   	; 0x5f8 <__bad_interrupt>
      86:	00 00       	nop
      88:	b7 c2       	rjmp	.+1390   	; 0x5f8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b5 c2       	rjmp	.+1386   	; 0x5f8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b3 c2       	rjmp	.+1382   	; 0x5f8 <__bad_interrupt>
      92:	00 00       	nop
      94:	b1 c2       	rjmp	.+1378   	; 0x5f8 <__bad_interrupt>
      96:	00 00       	nop
      98:	af c2       	rjmp	.+1374   	; 0x5f8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ad c2       	rjmp	.+1370   	; 0x5f8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ab c2       	rjmp	.+1366   	; 0x5f8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	a9 c2       	rjmp	.+1362   	; 0x5f8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	a7 c2       	rjmp	.+1358   	; 0x5f8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	a5 c2       	rjmp	.+1354   	; 0x5f8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	a3 c2       	rjmp	.+1350   	; 0x5f8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	a1 c2       	rjmp	.+1346   	; 0x5f8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	9f c2       	rjmp	.+1342   	; 0x5f8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	9d c2       	rjmp	.+1338   	; 0x5f8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	9b c2       	rjmp	.+1334   	; 0x5f8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	99 c2       	rjmp	.+1330   	; 0x5f8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	97 c2       	rjmp	.+1326   	; 0x5f8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	95 c2       	rjmp	.+1322   	; 0x5f8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	93 c2       	rjmp	.+1318   	; 0x5f8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	91 c2       	rjmp	.+1314   	; 0x5f8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	8f c2       	rjmp	.+1310   	; 0x5f8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	8d c2       	rjmp	.+1306   	; 0x5f8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	8b c2       	rjmp	.+1302   	; 0x5f8 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
	...
      f0:	00 00       	nop
      f2:	00 18       	sub	r0, r0
      f4:	18 00       	.word	0x0018	; ????
      f6:	00 18       	sub	r0, r0
      f8:	18 18       	sub	r1, r8
      fa:	18 18       	sub	r1, r8
      fc:	18 18       	sub	r1, r8
	...
     106:	00 36       	cpi	r16, 0x60	; 96
     108:	36 36       	cpi	r19, 0x66	; 102
     10a:	36 00       	.word	0x0036	; ????
     10c:	00 00       	nop
     10e:	66 66       	ori	r22, 0x66	; 102
     110:	ff 66       	ori	r31, 0x6F	; 111
     112:	66 ff       	sbrs	r22, 6
     114:	66 66       	ori	r22, 0x66	; 102
     116:	00 00       	nop
     118:	00 00       	nop
     11a:	18 7e       	andi	r17, 0xE8	; 232
     11c:	ff 1b       	sub	r31, r31
     11e:	1f 7e       	andi	r17, 0xEF	; 239
     120:	f8 d8       	rcall	.-3600   	; 0xfffff312 <__eeprom_end+0xff7ef312>
     122:	ff 7e       	andi	r31, 0xEF	; 239
     124:	18 00       	.word	0x0018	; ????
     126:	00 0e       	add	r0, r16
     128:	1b db       	rcall	.-2506   	; 0xfffff760 <__eeprom_end+0xff7ef760>
     12a:	6e 30       	cpi	r22, 0x0E	; 14
     12c:	18 0c       	add	r1, r8
     12e:	76 db       	rcall	.-2324   	; 0xfffff81c <__eeprom_end+0xff7ef81c>
     130:	d8 70       	andi	r29, 0x08	; 8
     132:	00 00       	nop
     134:	7f c6       	rjmp	.+3326   	; 0xe34 <main+0x14a>
     136:	cf d8       	rcall	.-3682   	; 0xfffff2d6 <__eeprom_end+0xff7ef2d6>
     138:	70 70       	andi	r23, 0x00	; 0
     13a:	d8 cc       	rjmp	.-1616   	; 0xfffffaec <__eeprom_end+0xff7efaec>
     13c:	cc 6c       	ori	r28, 0xCC	; 204
     13e:	38 00       	.word	0x0038	; ????
	...
     148:	18 1c       	adc	r1, r8
     14a:	0c 0e       	add	r0, r28
     14c:	00 00       	nop
     14e:	0c 18       	sub	r0, r12
     150:	30 30       	cpi	r19, 0x00	; 0
     152:	30 30       	cpi	r19, 0x00	; 0
     154:	30 30       	cpi	r19, 0x00	; 0
     156:	30 18       	sub	r3, r0
     158:	0c 00       	.word	0x000c	; ????
     15a:	00 30       	cpi	r16, 0x00	; 0
     15c:	18 0c       	add	r1, r8
     15e:	0c 0c       	add	r0, r12
     160:	0c 0c       	add	r0, r12
     162:	0c 0c       	add	r0, r12
     164:	18 30       	cpi	r17, 0x08	; 8
     166:	00 00       	nop
     168:	00 00       	nop
     16a:	99 5a       	subi	r25, 0xA9	; 169
     16c:	3c ff       	.word	0xff3c	; ????
     16e:	3c 5a       	subi	r19, 0xAC	; 172
     170:	99 00       	.word	0x0099	; ????
     172:	00 00       	nop
     174:	00 00       	nop
     176:	18 18       	sub	r1, r8
     178:	18 ff       	.word	0xff18	; ????
     17a:	ff 18       	sub	r15, r15
     17c:	18 18       	sub	r1, r8
     17e:	00 00       	nop
     180:	00 00       	nop
     182:	30 18       	sub	r3, r0
     184:	1c 1c       	adc	r1, r12
	...
     192:	00 ff       	sbrs	r16, 0
     194:	ff 00       	.word	0x00ff	; ????
     196:	00 00       	nop
     198:	00 00       	nop
     19a:	00 00       	nop
     19c:	00 38       	cpi	r16, 0x80	; 128
     19e:	38 00       	.word	0x0038	; ????
	...
     1a8:	60 60       	ori	r22, 0x00	; 0
     1aa:	30 30       	cpi	r19, 0x00	; 0
     1ac:	18 18       	sub	r1, r8
     1ae:	0c 0c       	add	r0, r12
     1b0:	06 06       	cpc	r0, r22
     1b2:	03 03       	mulsu	r16, r19
     1b4:	00 00       	nop
     1b6:	3c 66       	ori	r19, 0x6C	; 108
     1b8:	c3 e3       	ldi	r28, 0x33	; 51
     1ba:	f3 db       	rcall	.-2074   	; 0xfffff9a2 <__eeprom_end+0xff7ef9a2>
     1bc:	cf c7       	rjmp	.+3998   	; 0x115c <main+0x472>
     1be:	c3 66       	ori	r28, 0x63	; 99
     1c0:	3c 00       	.word	0x003c	; ????
     1c2:	00 7e       	andi	r16, 0xE0	; 224
     1c4:	18 18       	sub	r1, r8
     1c6:	18 18       	sub	r1, r8
     1c8:	18 18       	sub	r1, r8
     1ca:	18 78       	andi	r17, 0x88	; 136
     1cc:	38 18       	sub	r3, r8
     1ce:	00 00       	nop
     1d0:	ff c0       	rjmp	.+510    	; 0x3d0 <__trampolines_end+0x2ec>
     1d2:	c0 60       	ori	r28, 0x00	; 0
     1d4:	30 18       	sub	r3, r0
     1d6:	0c 06       	cpc	r0, r28
     1d8:	03 e7       	ldi	r16, 0x73	; 115
     1da:	7e 00       	.word	0x007e	; ????
     1dc:	00 7e       	andi	r16, 0xE0	; 224
     1de:	e7 03       	fmuls	r22, r23
     1e0:	03 07       	cpc	r16, r19
     1e2:	7e 07       	cpc	r23, r30
     1e4:	03 03       	mulsu	r16, r19
     1e6:	e7 7e       	andi	r30, 0xE7	; 231
     1e8:	00 00       	nop
     1ea:	0c 0c       	add	r0, r12
     1ec:	0c 0c       	add	r0, r12
     1ee:	0c ff       	.word	0xff0c	; ????
     1f0:	cc 6c       	ori	r28, 0xCC	; 204
     1f2:	3c 1c       	adc	r3, r12
     1f4:	0c 00       	.word	0x000c	; ????
     1f6:	00 7e       	andi	r16, 0xE0	; 224
     1f8:	e7 03       	fmuls	r22, r23
     1fa:	03 07       	cpc	r16, r19
     1fc:	fe c0       	rjmp	.+508    	; 0x3fa <__trampolines_end+0x316>
     1fe:	c0 c0       	rjmp	.+384    	; 0x380 <__trampolines_end+0x29c>
     200:	c0 ff       	sbrs	r28, 0
     202:	00 00       	nop
     204:	7e e7       	ldi	r23, 0x7E	; 126
     206:	c3 c3       	rjmp	.+1926   	; 0x98e <lcdDriver_getDriver+0x4c>
     208:	c7 fe       	sbrs	r12, 7
     20a:	c0 c0       	rjmp	.+384    	; 0x38c <__trampolines_end+0x2a8>
     20c:	c0 e7       	ldi	r28, 0x70	; 112
     20e:	7e 00       	.word	0x007e	; ????
     210:	00 30       	cpi	r16, 0x00	; 0
     212:	30 30       	cpi	r19, 0x00	; 0
     214:	30 18       	sub	r3, r0
     216:	0c 06       	cpc	r0, r28
     218:	03 03       	mulsu	r16, r19
     21a:	03 ff       	sbrs	r16, 3
     21c:	00 00       	nop
     21e:	7e e7       	ldi	r23, 0x7E	; 126
     220:	c3 c3       	rjmp	.+1926   	; 0x9a8 <lcdDriver_getDriver+0x66>
     222:	e7 7e       	andi	r30, 0xE7	; 231
     224:	e7 c3       	rjmp	.+1998   	; 0x9f4 <lcdDriver_getDriver+0xb2>
     226:	c3 e7       	ldi	r28, 0x73	; 115
     228:	7e 00       	.word	0x007e	; ????
     22a:	00 7e       	andi	r16, 0xE0	; 224
     22c:	e7 03       	fmuls	r22, r23
     22e:	03 03       	mulsu	r16, r19
     230:	7f e7       	ldi	r23, 0x7F	; 127
     232:	c3 c3       	rjmp	.+1926   	; 0x9ba <lcdDriver_getDriver+0x78>
     234:	e7 7e       	andi	r30, 0xE7	; 231
     236:	00 00       	nop
     238:	00 38       	cpi	r16, 0x80	; 128
     23a:	38 00       	.word	0x0038	; ????
     23c:	00 38       	cpi	r16, 0x80	; 128
     23e:	38 00       	.word	0x0038	; ????
     240:	00 00       	nop
     242:	00 00       	nop
     244:	00 30       	cpi	r16, 0x00	; 0
     246:	18 1c       	adc	r1, r8
     248:	1c 00       	.word	0x001c	; ????
     24a:	00 1c       	adc	r0, r0
     24c:	1c 00       	.word	0x001c	; ????
     24e:	00 00       	nop
     250:	00 00       	nop
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 c0       	rjmp	.+192    	; 0x318 <__trampolines_end+0x234>
     258:	60 30       	cpi	r22, 0x00	; 0
     25a:	18 0c       	add	r1, r8
     25c:	06 00       	.word	0x0006	; ????
     25e:	00 00       	nop
     260:	00 ff       	sbrs	r16, 0
     262:	ff 00       	.word	0x00ff	; ????
     264:	ff ff       	.word	0xffff	; ????
     266:	00 00       	nop
     268:	00 00       	nop
     26a:	00 00       	nop
     26c:	60 30       	cpi	r22, 0x00	; 0
     26e:	18 0c       	add	r1, r8
     270:	06 03       	mulsu	r16, r22
     272:	06 0c       	add	r0, r6
     274:	18 30       	cpi	r17, 0x08	; 8
     276:	60 00       	.word	0x0060	; ????
     278:	00 18       	sub	r0, r0
     27a:	00 00       	nop
     27c:	18 18       	sub	r1, r8
     27e:	0c 06       	cpc	r0, r28
     280:	03 c3       	rjmp	.+1542   	; 0x888 <printString+0x140>
     282:	c3 7e       	andi	r28, 0xE3	; 227
     284:	00 00       	nop
     286:	3f 60       	ori	r19, 0x0F	; 15
     288:	cf db       	rcall	.-2146   	; 0xfffffa28 <__eeprom_end+0xff7efa28>
     28a:	d3 dd       	rcall	.-1114   	; 0xfffffe32 <__eeprom_end+0xff7efe32>
     28c:	c3 7e       	andi	r28, 0xE3	; 227
     28e:	00 00       	nop
     290:	00 00       	nop
     292:	00 c3       	rjmp	.+1536   	; 0x894 <printString+0x14c>
     294:	c3 c3       	rjmp	.+1926   	; 0xa1c <rgb3byteToInt+0x4>
     296:	c3 ff       	sbrs	r28, 3
     298:	c3 c3       	rjmp	.+1926   	; 0xa20 <rgb3byteToInt+0x8>
     29a:	c3 66       	ori	r28, 0x63	; 99
     29c:	3c 18       	sub	r3, r12
     29e:	00 00       	nop
     2a0:	fe c7       	rjmp	.+4092   	; 0x129e <main+0x5b4>
     2a2:	c3 c3       	rjmp	.+1926   	; 0xa2a <rgb3byteToInt+0x12>
     2a4:	c7 fe       	sbrs	r12, 7
     2a6:	c7 c3       	rjmp	.+1934   	; 0xa36 <rgb3byteToInt+0x1e>
     2a8:	c3 c7       	rjmp	.+3974   	; 0x1230 <main+0x546>
     2aa:	fe 00       	.word	0x00fe	; ????
     2ac:	00 7e       	andi	r16, 0xE0	; 224
     2ae:	e7 c0       	rjmp	.+462    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     2b0:	c0 c0       	rjmp	.+384    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     2b2:	c0 c0       	rjmp	.+384    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     2b4:	c0 c0       	rjmp	.+384    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     2b6:	e7 7e       	andi	r30, 0xE7	; 231
     2b8:	00 00       	nop
     2ba:	fc ce       	rjmp	.-520    	; 0xb4 <__SREG__+0x75>
     2bc:	c7 c3       	rjmp	.+1934   	; 0xa4c <getTripDistance+0x8>
     2be:	c3 c3       	rjmp	.+1926   	; 0xa46 <getTripDistance+0x2>
     2c0:	c3 c3       	rjmp	.+1926   	; 0xa48 <getTripDistance+0x4>
     2c2:	c7 ce       	rjmp	.-626    	; 0x52 <__SREG__+0x13>
     2c4:	fc 00       	.word	0x00fc	; ????
     2c6:	00 ff       	sbrs	r16, 0
     2c8:	c0 c0       	rjmp	.+384    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     2ca:	c0 c0       	rjmp	.+384    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     2cc:	fc c0       	rjmp	.+504    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     2ce:	c0 c0       	rjmp	.+384    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     2d0:	c0 ff       	sbrs	r28, 0
     2d2:	00 00       	nop
     2d4:	c0 c0       	rjmp	.+384    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     2d6:	c0 c0       	rjmp	.+384    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     2d8:	c0 c0       	rjmp	.+384    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     2da:	fc c0       	rjmp	.+504    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     2dc:	c0 c0       	rjmp	.+384    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     2de:	ff 00       	.word	0x00ff	; ????
     2e0:	00 7e       	andi	r16, 0xE0	; 224
     2e2:	e7 c3       	rjmp	.+1998   	; 0xab2 <updateRevolutionCount+0x4>
     2e4:	c3 cf       	rjmp	.-122    	; 0x26c <__trampolines_end+0x188>
     2e6:	c0 c0       	rjmp	.+384    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     2e8:	c0 c0       	rjmp	.+384    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     2ea:	e7 7e       	andi	r30, 0xE7	; 231
     2ec:	00 00       	nop
     2ee:	c3 c3       	rjmp	.+1926   	; 0xa76 <getTripDistance+0x32>
     2f0:	c3 c3       	rjmp	.+1926   	; 0xa78 <getTripDistance+0x34>
     2f2:	c3 ff       	sbrs	r28, 3
     2f4:	c3 c3       	rjmp	.+1926   	; 0xa7c <getTripDistance+0x38>
     2f6:	c3 c3       	rjmp	.+1926   	; 0xa7e <getTripDistance+0x3a>
     2f8:	c3 00       	.word	0x00c3	; ????
     2fa:	00 7e       	andi	r16, 0xE0	; 224
     2fc:	18 18       	sub	r1, r8
     2fe:	18 18       	sub	r1, r8
     300:	18 18       	sub	r1, r8
     302:	18 18       	sub	r1, r8
     304:	18 7e       	andi	r17, 0xE8	; 232
     306:	00 00       	nop
     308:	7c ee       	ldi	r23, 0xEC	; 236
     30a:	c6 06       	cpc	r12, r22
     30c:	06 06       	cpc	r0, r22
     30e:	06 06       	cpc	r0, r22
     310:	06 06       	cpc	r0, r22
     312:	06 00       	.word	0x0006	; ????
     314:	00 c3       	rjmp	.+1536   	; 0x916 <printFloat+0x48>
     316:	c6 cc       	rjmp	.-1652   	; 0xfffffca4 <__eeprom_end+0xff7efca4>
     318:	d8 f0       	brcs	.+54     	; 0x350 <__trampolines_end+0x26c>
     31a:	e0 f0       	brcs	.+56     	; 0x354 <__trampolines_end+0x270>
     31c:	d8 cc       	rjmp	.-1616   	; 0xfffffcce <__eeprom_end+0xff7efcce>
     31e:	c6 c3       	rjmp	.+1932   	; 0xaac <updateMilestoneCount+0x26>
     320:	00 00       	nop
     322:	ff c0       	rjmp	.+510    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     324:	c0 c0       	rjmp	.+384    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     326:	c0 c0       	rjmp	.+384    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     328:	c0 c0       	rjmp	.+384    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     32a:	c0 c0       	rjmp	.+384    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     32c:	c0 00       	.word	0x00c0	; ????
     32e:	00 c3       	rjmp	.+1536   	; 0x930 <printFloat+0x62>
     330:	c3 c3       	rjmp	.+1926   	; 0xab8 <updateRevolutionCount+0xa>
     332:	c3 c3       	rjmp	.+1926   	; 0xaba <updateRevolutionCount+0xc>
     334:	c3 db       	rcall	.-2170   	; 0xfffffabc <__eeprom_end+0xff7efabc>
     336:	ff ff       	.word	0xffff	; ????
     338:	e7 c3       	rjmp	.+1998   	; 0xb08 <getSpeedKMH+0x32>
     33a:	00 00       	nop
     33c:	c7 c7       	rjmp	.+3982   	; 0x12cc <main+0x5e2>
     33e:	cf cf       	rjmp	.-98     	; 0x2de <__trampolines_end+0x1fa>
     340:	df db       	rcall	.-2114   	; 0xfffffb00 <__eeprom_end+0xff7efb00>
     342:	fb f3       	brvs	.-2      	; 0x342 <__trampolines_end+0x25e>
     344:	f3 e3       	ldi	r31, 0x33	; 51
     346:	e3 00       	.word	0x00e3	; ????
     348:	00 7e       	andi	r16, 0xE0	; 224
     34a:	e7 c3       	rjmp	.+1998   	; 0xb1a <getSpeedKMH+0x44>
     34c:	c3 c3       	rjmp	.+1926   	; 0xad4 <updateRevolutionCount+0x26>
     34e:	c3 c3       	rjmp	.+1926   	; 0xad6 <getSpeedKMH>
     350:	c3 c3       	rjmp	.+1926   	; 0xad8 <getSpeedKMH+0x2>
     352:	e7 7e       	andi	r30, 0xE7	; 231
     354:	00 00       	nop
     356:	c0 c0       	rjmp	.+384    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     358:	c0 c0       	rjmp	.+384    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     35a:	c0 fe       	sbrs	r12, 0
     35c:	c7 c3       	rjmp	.+1934   	; 0xaec <getSpeedKMH+0x16>
     35e:	c3 c7       	rjmp	.+3974   	; 0x12e6 <main+0x5fc>
     360:	fe 00       	.word	0x00fe	; ????
     362:	00 3f       	cpi	r16, 0xF0	; 240
     364:	6e df       	rcall	.-292    	; 0x242 <__trampolines_end+0x15e>
     366:	db c3       	rjmp	.+1974   	; 0xb1e <eepromSave>
     368:	c3 c3       	rjmp	.+1926   	; 0xaf0 <getSpeedKMH+0x1a>
     36a:	c3 c3       	rjmp	.+1926   	; 0xaf2 <getSpeedKMH+0x1c>
     36c:	66 3c       	cpi	r22, 0xC6	; 198
     36e:	00 00       	nop
     370:	c3 c6       	rjmp	.+3462   	; 0x10f8 <main+0x40e>
     372:	cc d8       	rcall	.-3688   	; 0xfffff50c <__eeprom_end+0xff7ef50c>
     374:	f0 fe       	sbrs	r15, 0
     376:	c7 c3       	rjmp	.+1934   	; 0xb06 <getSpeedKMH+0x30>
     378:	c3 c7       	rjmp	.+3974   	; 0x1300 <__vector_4+0x6>
     37a:	fe 00       	.word	0x00fe	; ????
     37c:	00 7e       	andi	r16, 0xE0	; 224
     37e:	e7 03       	fmuls	r22, r23
     380:	03 07       	cpc	r16, r19
     382:	7e e0       	ldi	r23, 0x0E	; 14
     384:	c0 c0       	rjmp	.+384    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
     386:	e7 7e       	andi	r30, 0xE7	; 231
     388:	00 00       	nop
     38a:	18 18       	sub	r1, r8
     38c:	18 18       	sub	r1, r8
     38e:	18 18       	sub	r1, r8
     390:	18 18       	sub	r1, r8
     392:	18 18       	sub	r1, r8
     394:	ff 00       	.word	0x00ff	; ????
     396:	00 7e       	andi	r16, 0xE0	; 224
     398:	e7 c3       	rjmp	.+1998   	; 0xb68 <speedSensor_getDriver+0x3c>
     39a:	c3 c3       	rjmp	.+1926   	; 0xb22 <eepromSave+0x4>
     39c:	c3 c3       	rjmp	.+1926   	; 0xb24 <eepromSave+0x6>
     39e:	c3 c3       	rjmp	.+1926   	; 0xb26 <eepromSave+0x8>
     3a0:	c3 c3       	rjmp	.+1926   	; 0xb28 <eepromSave+0xa>
     3a2:	00 00       	nop
     3a4:	18 3c       	cpi	r17, 0xC8	; 200
     3a6:	3c 66       	ori	r19, 0x6C	; 108
     3a8:	66 c3       	rjmp	.+1740   	; 0xa76 <getTripDistance+0x32>
     3aa:	c3 c3       	rjmp	.+1926   	; 0xb32 <speedSensor_getDriver+0x6>
     3ac:	c3 c3       	rjmp	.+1926   	; 0xb34 <speedSensor_getDriver+0x8>
     3ae:	c3 00       	.word	0x00c3	; ????
     3b0:	00 c3       	rjmp	.+1536   	; 0x9b2 <lcdDriver_getDriver+0x70>
     3b2:	e7 ff       	sbrs	r30, 7
     3b4:	ff db       	rcall	.-2050   	; 0xfffffbb4 <__eeprom_end+0xff7efbb4>
     3b6:	db c3       	rjmp	.+1974   	; 0xb6e <speedSensor_getDriver+0x42>
     3b8:	c3 c3       	rjmp	.+1926   	; 0xb40 <speedSensor_getDriver+0x14>
     3ba:	c3 c3       	rjmp	.+1926   	; 0xb42 <speedSensor_getDriver+0x16>
     3bc:	00 00       	nop
     3be:	c3 66       	ori	r28, 0x63	; 99
     3c0:	66 3c       	cpi	r22, 0xC6	; 198
     3c2:	3c 18       	sub	r3, r12
     3c4:	3c 3c       	cpi	r19, 0xCC	; 204
     3c6:	66 66       	ori	r22, 0x66	; 102
     3c8:	c3 00       	.word	0x00c3	; ????
     3ca:	00 18       	sub	r0, r0
     3cc:	18 18       	sub	r1, r8
     3ce:	18 18       	sub	r1, r8
     3d0:	18 3c       	cpi	r17, 0xC8	; 200
     3d2:	3c 66       	ori	r19, 0x6C	; 108
     3d4:	66 c3       	rjmp	.+1740   	; 0xaa2 <updateMilestoneCount+0x1c>
     3d6:	00 00       	nop
     3d8:	ff c0       	rjmp	.+510    	; 0x5d8 <__do_copy_data+0x10>
     3da:	c0 60       	ori	r28, 0x00	; 0
     3dc:	30 7e       	andi	r19, 0xE0	; 224
     3de:	0c 06       	cpc	r0, r28
     3e0:	03 03       	mulsu	r16, r19
     3e2:	ff 00       	.word	0x00ff	; ????
     3e4:	00 3c       	cpi	r16, 0xC0	; 192
     3e6:	30 30       	cpi	r19, 0x00	; 0
     3e8:	30 30       	cpi	r19, 0x00	; 0
     3ea:	30 30       	cpi	r19, 0x00	; 0
     3ec:	30 30       	cpi	r19, 0x00	; 0
     3ee:	30 3c       	cpi	r19, 0xC0	; 192
     3f0:	00 03       	mulsu	r16, r16
     3f2:	03 06       	cpc	r0, r19
     3f4:	06 0c       	add	r0, r6
     3f6:	0c 18       	sub	r0, r12
     3f8:	18 30       	cpi	r17, 0x08	; 8
     3fa:	30 60       	ori	r19, 0x00	; 0
     3fc:	60 00       	.word	0x0060	; ????
     3fe:	00 3c       	cpi	r16, 0xC0	; 192
     400:	0c 0c       	add	r0, r12
     402:	0c 0c       	add	r0, r12
     404:	0c 0c       	add	r0, r12
     406:	0c 0c       	add	r0, r12
     408:	0c 3c       	cpi	r16, 0xCC	; 204
	...
     412:	00 c3       	rjmp	.+1536   	; 0xa14 <lcdDriver_getDriver+0xd2>
     414:	66 3c       	cpi	r22, 0xC6	; 198
     416:	18 ff       	.word	0xff18	; ????
     418:	ff 00       	.word	0x00ff	; ????
	...
     42a:	00 00       	nop
     42c:	00 18       	sub	r0, r0
     42e:	38 30       	cpi	r19, 0x08	; 8
     430:	70 00       	.word	0x0070	; ????
     432:	00 7f       	andi	r16, 0xF0	; 240
     434:	c3 c3       	rjmp	.+1926   	; 0xbbc <speedSensor_getDriver+0x90>
     436:	7f 03       	fmul	r23, r23
     438:	c3 7e       	andi	r28, 0xE3	; 227
     43a:	00 00       	nop
     43c:	00 00       	nop
     43e:	00 00       	nop
     440:	fe c3       	rjmp	.+2044   	; 0xc3e <getData+0x30>
     442:	c3 c3       	rjmp	.+1926   	; 0xbca <speedSensor_getDriver+0x9e>
     444:	c3 fe       	sbrs	r12, 3
     446:	c0 c0       	rjmp	.+384    	; 0x5c8 <__do_copy_data>
     448:	c0 c0       	rjmp	.+384    	; 0x5ca <__do_copy_data+0x2>
     44a:	c0 00       	.word	0x00c0	; ????
     44c:	00 7e       	andi	r16, 0xE0	; 224
     44e:	c3 c0       	rjmp	.+390    	; 0x5d6 <__do_copy_data+0xe>
     450:	c0 c0       	rjmp	.+384    	; 0x5d2 <__do_copy_data+0xa>
     452:	c3 7e       	andi	r28, 0xE3	; 227
     454:	00 00       	nop
     456:	00 00       	nop
     458:	00 00       	nop
     45a:	7f c3       	rjmp	.+1790   	; 0xb5a <speedSensor_getDriver+0x2e>
     45c:	c3 c3       	rjmp	.+1926   	; 0xbe4 <speedSensor_getDriver+0xb8>
     45e:	c3 7f       	andi	r28, 0xF3	; 243
     460:	03 03       	mulsu	r16, r19
     462:	03 03       	mulsu	r16, r19
     464:	03 00       	.word	0x0003	; ????
     466:	00 7f       	andi	r16, 0xF0	; 240
     468:	c0 c0       	rjmp	.+384    	; 0x5ea <.do_clear_bss_loop>
     46a:	fe c3       	rjmp	.+2044   	; 0xc68 <getData+0x5a>
     46c:	c3 7e       	andi	r28, 0xE3	; 227
     46e:	00 00       	nop
     470:	00 00       	nop
     472:	00 00       	nop
     474:	30 30       	cpi	r19, 0x00	; 0
     476:	30 30       	cpi	r19, 0x00	; 0
     478:	30 fc       	sbrc	r3, 0
     47a:	30 30       	cpi	r19, 0x00	; 0
     47c:	30 33       	cpi	r19, 0x30	; 48
     47e:	1e 7e       	andi	r17, 0xEE	; 238
     480:	c3 03       	fmuls	r20, r19
     482:	03 7f       	andi	r16, 0xF3	; 243
     484:	c3 c3       	rjmp	.+1926   	; 0xc0c <CLK+0x20>
     486:	c3 7e       	andi	r28, 0xE3	; 227
     488:	00 00       	nop
     48a:	00 00       	nop
     48c:	00 00       	nop
     48e:	c3 c3       	rjmp	.+1926   	; 0xc16 <getData+0x8>
     490:	c3 c3       	rjmp	.+1926   	; 0xc18 <getData+0xa>
     492:	c3 c3       	rjmp	.+1926   	; 0xc1a <getData+0xc>
     494:	fe c0       	rjmp	.+508    	; 0x692 <setBackgroundColor+0x6>
     496:	c0 c0       	rjmp	.+384    	; 0x618 <displayOff+0x4>
     498:	c0 00       	.word	0x00c0	; ????
     49a:	00 18       	sub	r0, r0
     49c:	18 18       	sub	r1, r8
     49e:	18 18       	sub	r1, r8
     4a0:	18 18       	sub	r1, r8
     4a2:	00 00       	nop
     4a4:	18 00       	.word	0x0018	; ????
     4a6:	38 6c       	ori	r19, 0xC8	; 200
     4a8:	0c 0c       	add	r0, r12
     4aa:	0c 0c       	add	r0, r12
     4ac:	0c 0c       	add	r0, r12
     4ae:	0c 00       	.word	0x000c	; ????
     4b0:	00 0c       	add	r0, r0
     4b2:	00 00       	nop
     4b4:	00 c6       	rjmp	.+3072   	; 0x10b6 <main+0x3cc>
     4b6:	cc f8       	.word	0xf8cc	; ????
     4b8:	f0 d8       	rcall	.-3616   	; 0xfffff69a <__eeprom_end+0xff7ef69a>
     4ba:	cc c6       	rjmp	.+3480   	; 0x1254 <main+0x56a>
     4bc:	c0 c0       	rjmp	.+384    	; 0x63e <setColumnAddress+0x1e>
     4be:	c0 c0       	rjmp	.+384    	; 0x640 <setColumnAddress+0x20>
     4c0:	00 00       	nop
     4c2:	7e 18       	sub	r7, r14
     4c4:	18 18       	sub	r1, r8
     4c6:	18 18       	sub	r1, r8
     4c8:	18 18       	sub	r1, r8
     4ca:	18 18       	sub	r1, r8
     4cc:	78 00       	.word	0x0078	; ????
     4ce:	00 db       	rcall	.-2560   	; 0xfffffad0 <__eeprom_end+0xff7efad0>
     4d0:	db db       	rcall	.-2122   	; 0xfffffc88 <__eeprom_end+0xff7efc88>
     4d2:	db db       	rcall	.-2122   	; 0xfffffc8a <__eeprom_end+0xff7efc8a>
     4d4:	db fe       	.word	0xfedb	; ????
     4d6:	00 00       	nop
     4d8:	00 00       	nop
     4da:	00 00       	nop
     4dc:	c6 c6       	rjmp	.+3468   	; 0x126a <main+0x580>
     4de:	c6 c6       	rjmp	.+3468   	; 0x126c <main+0x582>
     4e0:	c6 c6       	rjmp	.+3468   	; 0x126e <main+0x584>
     4e2:	fc 00       	.word	0x00fc	; ????
     4e4:	00 00       	nop
     4e6:	00 00       	nop
     4e8:	00 7c       	andi	r16, 0xC0	; 192
     4ea:	c6 c6       	rjmp	.+3468   	; 0x1278 <main+0x58e>
     4ec:	c6 c6       	rjmp	.+3468   	; 0x127a <main+0x590>
     4ee:	c6 7c       	andi	r28, 0xC6	; 198
     4f0:	00 00       	nop
     4f2:	00 00       	nop
     4f4:	c0 c0       	rjmp	.+384    	; 0x676 <setPageAddress+0x20>
     4f6:	c0 fe       	sbrs	r12, 0
     4f8:	c3 c3       	rjmp	.+1926   	; 0xc80 <getData+0x72>
     4fa:	c3 c3       	rjmp	.+1926   	; 0xc82 <getData+0x74>
     4fc:	fe 00       	.word	0x00fe	; ????
     4fe:	00 00       	nop
     500:	00 03       	mulsu	r16, r16
     502:	03 03       	mulsu	r16, r19
     504:	7f c3       	rjmp	.+1790   	; 0xc04 <CLK+0x18>
     506:	c3 c3       	rjmp	.+1926   	; 0xc8e <getData+0x80>
     508:	c3 7f       	andi	r28, 0xF3	; 243
     50a:	00 00       	nop
     50c:	00 00       	nop
     50e:	00 00       	nop
     510:	c0 c0       	rjmp	.+384    	; 0x692 <setBackgroundColor+0x6>
     512:	c0 c0       	rjmp	.+384    	; 0x694 <setBackgroundColor+0x8>
     514:	c0 e0       	ldi	r28, 0x00	; 0
     516:	fe 00       	.word	0x00fe	; ????
     518:	00 00       	nop
     51a:	00 00       	nop
     51c:	00 fe       	sbrs	r0, 0
     51e:	03 03       	mulsu	r16, r19
     520:	7e c0       	rjmp	.+252    	; 0x61e <displayOn+0x4>
     522:	c0 7f       	andi	r28, 0xF0	; 240
     524:	00 00       	nop
     526:	00 00       	nop
     528:	00 00       	nop
     52a:	1c 36       	cpi	r17, 0x6C	; 108
     52c:	30 30       	cpi	r19, 0x00	; 0
     52e:	30 30       	cpi	r19, 0x00	; 0
     530:	fc 30       	cpi	r31, 0x0C	; 12
     532:	30 30       	cpi	r19, 0x00	; 0
     534:	00 00       	nop
     536:	00 7e       	andi	r16, 0xE0	; 224
     538:	c6 c6       	rjmp	.+3468   	; 0x12c6 <main+0x5dc>
     53a:	c6 c6       	rjmp	.+3468   	; 0x12c8 <main+0x5de>
     53c:	c6 c6       	rjmp	.+3468   	; 0x12ca <main+0x5e0>
     53e:	00 00       	nop
     540:	00 00       	nop
     542:	00 00       	nop
     544:	18 3c       	cpi	r17, 0xC8	; 200
     546:	3c 66       	ori	r19, 0x6C	; 108
     548:	66 c3       	rjmp	.+1740   	; 0xc16 <getData+0x8>
     54a:	c3 00       	.word	0x00c3	; ????
     54c:	00 00       	nop
     54e:	00 00       	nop
     550:	00 c3       	rjmp	.+1536   	; 0xb52 <speedSensor_getDriver+0x26>
     552:	e7 ff       	sbrs	r30, 7
     554:	db c3       	rjmp	.+1974   	; 0xd0c <main+0x22>
     556:	c3 c3       	rjmp	.+1926   	; 0xcde <touchDriver_getDriver+0x26>
     558:	00 00       	nop
     55a:	00 00       	nop
     55c:	00 00       	nop
     55e:	c3 66       	ori	r28, 0x63	; 99
     560:	3c 18       	sub	r3, r12
     562:	3c 66       	ori	r19, 0x6C	; 108
     564:	c3 00       	.word	0x00c3	; ????
     566:	00 00       	nop
     568:	00 c0       	rjmp	.+0      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     56a:	60 60       	ori	r22, 0x00	; 0
     56c:	30 18       	sub	r3, r0
     56e:	3c 66       	ori	r19, 0x6C	; 108
     570:	66 c3       	rjmp	.+1740   	; 0xc3e <getData+0x30>
     572:	00 00       	nop
     574:	00 00       	nop
     576:	00 00       	nop
     578:	ff 60       	ori	r31, 0x0F	; 15
     57a:	30 18       	sub	r3, r0
     57c:	0c 06       	cpc	r0, r28
     57e:	ff 00       	.word	0x00ff	; ????
     580:	00 00       	nop
     582:	00 00       	nop
     584:	00 0f       	add	r16, r16
     586:	18 18       	sub	r1, r8
     588:	18 38       	cpi	r17, 0x88	; 136
     58a:	f0 38       	cpi	r31, 0x80	; 128
     58c:	18 18       	sub	r1, r8
     58e:	18 0f       	add	r17, r24
     590:	18 18       	sub	r1, r8
     592:	18 18       	sub	r1, r8
     594:	18 18       	sub	r1, r8
     596:	18 18       	sub	r1, r8
     598:	18 18       	sub	r1, r8
     59a:	18 18       	sub	r1, r8
     59c:	18 00       	.word	0x0018	; ????
     59e:	00 f0       	brcs	.+0      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     5a0:	18 18       	sub	r1, r8
     5a2:	18 1c       	adc	r1, r8
     5a4:	0f 1c       	adc	r0, r15
     5a6:	18 18       	sub	r1, r8
     5a8:	18 f0       	brcs	.+6      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     5aa:	00 00       	nop
     5ac:	00 00       	nop
     5ae:	00 00       	nop
     5b0:	06 8f       	std	Z+30, r16	; 0x1e
     5b2:	f1 60       	ori	r31, 0x01	; 1
     5b4:	00 00       	nop
	...

000005b8 <__ctors_end>:
     5b8:	11 24       	eor	r1, r1
     5ba:	1f be       	out	0x3f, r1	; 63
     5bc:	cf ef       	ldi	r28, 0xFF	; 255
     5be:	d1 e2       	ldi	r29, 0x21	; 33
     5c0:	de bf       	out	0x3e, r29	; 62
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	00 e0       	ldi	r16, 0x00	; 0
     5c6:	0c bf       	out	0x3c, r16	; 60

000005c8 <__do_copy_data>:
     5c8:	12 e0       	ldi	r17, 0x02	; 2
     5ca:	a0 e0       	ldi	r26, 0x00	; 0
     5cc:	b2 e0       	ldi	r27, 0x02	; 2
     5ce:	ec e5       	ldi	r30, 0x5C	; 92
     5d0:	f9 e1       	ldi	r31, 0x19	; 25
     5d2:	00 e0       	ldi	r16, 0x00	; 0
     5d4:	0b bf       	out	0x3b, r16	; 59
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <__do_copy_data+0x14>
     5d8:	07 90       	elpm	r0, Z+
     5da:	0d 92       	st	X+, r0
     5dc:	a0 36       	cpi	r26, 0x60	; 96
     5de:	b1 07       	cpc	r27, r17
     5e0:	d9 f7       	brne	.-10     	; 0x5d8 <__do_copy_data+0x10>

000005e2 <__do_clear_bss>:
     5e2:	22 e0       	ldi	r18, 0x02	; 2
     5e4:	a0 e6       	ldi	r26, 0x60	; 96
     5e6:	b2 e0       	ldi	r27, 0x02	; 2
     5e8:	01 c0       	rjmp	.+2      	; 0x5ec <.do_clear_bss_start>

000005ea <.do_clear_bss_loop>:
     5ea:	1d 92       	st	X+, r1

000005ec <.do_clear_bss_start>:
     5ec:	ad 3b       	cpi	r26, 0xBD	; 189
     5ee:	b2 07       	cpc	r27, r18
     5f0:	e1 f7       	brne	.-8      	; 0x5ea <.do_clear_bss_loop>
     5f2:	7b d3       	rcall	.+1782   	; 0xcea <main>
     5f4:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <_exit>

000005f8 <__bad_interrupt>:
     5f8:	03 cd       	rjmp	.-1530   	; 0x0 <__vectors>

000005fa <writeCommand>:
// ILI 9341 data sheet, page 238
static void writeCommand(uint8_t command)
{
	uint8_t bit = 0b00000001;
	
	DATA_PORT_LOW =command;
     5fa:	88 b9       	out	0x08, r24	; 8
	
	DC_PORT &= ~(bit<<DC_BIT); //Trigger falling edge, no waiting because other controller is faster than us.
     5fc:	5f 98       	cbi	0x0b, 7	; 11
	CS_PORT &= ~(bit<<CS_BIT);
     5fe:	a1 98       	cbi	0x14, 1	; 20
	
	//Write pulse
	WR_PORT &= ~(bit<<WR_BIT); //WRX low
     600:	a2 98       	cbi	0x14, 2	; 20
	WR_PORT |= bit<<WR_BIT; //WRX high triggers read signal
     602:	a2 9a       	sbi	0x14, 2	; 20
     604:	08 95       	ret

00000606 <writeData>:
static void writeData(uint16_t data)
{
	uint8_t bit = 0b00000001;
	
	//Set data
	DATA_PORT_HIGH = (uint8_t)(data>>8);
     606:	92 b9       	out	0x02, r25	; 2
	DATA_PORT_LOW = (uint8_t)(data&(0x00FF));
     608:	88 b9       	out	0x08, r24	; 8
	
	DC_PORT |= bit<<DC_BIT; //Trigger rising edge, no waiting because other controller is faster than us.
     60a:	5f 9a       	sbi	0x0b, 7	; 11
	CS_PORT &= ~(bit<<CS_BIT); // Chip select active low, trigger falling edge
     60c:	a1 98       	cbi	0x14, 1	; 20
	
	//Write pulse
	WR_PORT &= ~(bit<<WR_BIT);
     60e:	a2 98       	cbi	0x14, 2	; 20
	WR_PORT |= bit<<WR_BIT;
     610:	a2 9a       	sbi	0x14, 2	; 20
     612:	08 95       	ret

00000614 <displayOff>:
}

static void displayOff()
{
	uint16_t command = 0b00101000;
	writeCommand(command);
     614:	88 e2       	ldi	r24, 0x28	; 40
     616:	f1 cf       	rjmp	.-30     	; 0x5fa <writeCommand>
     618:	08 95       	ret

0000061a <displayOn>:
}

static void displayOn()
{
	uint16_t command = 0b00101001;
	writeCommand(command);
     61a:	89 e2       	ldi	r24, 0x29	; 41
     61c:	ee cf       	rjmp	.-36     	; 0x5fa <writeCommand>
     61e:	08 95       	ret

00000620 <setColumnAddress>:
	uint16_t command = 0b00101100;
	writeCommand(command);
}

static void setColumnAddress(uint16_t Start, uint16_t End)
{
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	08 2f       	mov	r16, r24
     62a:	d9 2f       	mov	r29, r25
     62c:	16 2f       	mov	r17, r22
     62e:	c7 2f       	mov	r28, r23
	uint16_t command = 0b00101010;
	writeCommand(command);
     630:	8a e2       	ldi	r24, 0x2A	; 42
     632:	e3 df       	rcall	.-58     	; 0x5fa <writeCommand>
	writeData((Start>>8));
     634:	8d 2f       	mov	r24, r29
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	e6 df       	rcall	.-52     	; 0x606 <writeData>
	writeData((Start));
     63a:	80 2f       	mov	r24, r16
     63c:	9d 2f       	mov	r25, r29
     63e:	e3 df       	rcall	.-58     	; 0x606 <writeData>
	writeData((End>>8));
     640:	8c 2f       	mov	r24, r28
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	e0 df       	rcall	.-64     	; 0x606 <writeData>
	writeData((End));
     646:	81 2f       	mov	r24, r17
     648:	9c 2f       	mov	r25, r28
     64a:	dd df       	rcall	.-70     	; 0x606 <writeData>
     64c:	df 91       	pop	r29
}
     64e:	cf 91       	pop	r28
     650:	1f 91       	pop	r17
     652:	0f 91       	pop	r16
     654:	08 95       	ret

00000656 <setPageAddress>:
     656:	0f 93       	push	r16

// Set Page Address (0-319), Start > End
static void setPageAddress(uint16_t Start, uint16_t End)
{
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	08 2f       	mov	r16, r24
     660:	d9 2f       	mov	r29, r25
     662:	16 2f       	mov	r17, r22
     664:	c7 2f       	mov	r28, r23
	uint16_t command = 0b00101011;
	writeCommand(command);
     666:	8b e2       	ldi	r24, 0x2B	; 43
     668:	c8 df       	rcall	.-112    	; 0x5fa <writeCommand>
	writeData((Start>>8));
     66a:	8d 2f       	mov	r24, r29
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	cb df       	rcall	.-106    	; 0x606 <writeData>
	writeData((Start));
     670:	80 2f       	mov	r24, r16
     672:	9d 2f       	mov	r25, r29
     674:	c8 df       	rcall	.-112    	; 0x606 <writeData>
	writeData((End>>8));
     676:	8c 2f       	mov	r24, r28
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	c5 df       	rcall	.-118    	; 0x606 <writeData>
	writeData((End));
     67c:	81 2f       	mov	r24, r17
     67e:	9c 2f       	mov	r25, r28
     680:	c2 df       	rcall	.-124    	; 0x606 <writeData>
     682:	df 91       	pop	r29
}
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	08 95       	ret

0000068c <setBackgroundColor>:
     68c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>

static void setBackgroundColor(uint16_t color)
{
	backgroundColor = color;
     690:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     694:	08 95       	ret

00000696 <setCursorColor>:
}

static void setCursorColor(uint16_t color)
{
	myCursor.color = color;
     696:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <myCursor+0x1>
     69a:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <myCursor>
     69e:	08 95       	ret

000006a0 <setCursor>:
}

static void setCursor(uint16_t x_pos, uint16_t y_pos)
{
	myCursor.x_position = x_pos;
     6a0:	e3 e7       	ldi	r30, 0x73	; 115
     6a2:	f2 e0       	ldi	r31, 0x02	; 2
     6a4:	93 83       	std	Z+3, r25	; 0x03
     6a6:	82 83       	std	Z+2, r24	; 0x02
	myCursor.y_position = y_pos;
     6a8:	75 83       	std	Z+5, r23	; 0x05
     6aa:	64 83       	std	Z+4, r22	; 0x04
     6ac:	08 95       	ret

000006ae <drawRectangle>:
}

static void drawRectangle(uint16_t Width, uint16_t Height)
{
     6ae:	8f 92       	push	r8
     6b0:	9f 92       	push	r9
     6b2:	af 92       	push	r10
     6b4:	bf 92       	push	r11
     6b6:	cf 92       	push	r12
     6b8:	df 92       	push	r13
     6ba:	ef 92       	push	r14
     6bc:	ff 92       	push	r15
     6be:	0f 93       	push	r16
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	ac 01       	movw	r20, r24
     6c8:	eb 01       	movw	r28, r22
	uint32_t i = 0;
	uint32_t size = (uint32_t)Width*(uint32_t)Height;
     6ca:	9c 01       	movw	r18, r24
     6cc:	db 01       	movw	r26, r22
     6ce:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__umulhisi3>
     6d2:	4b 01       	movw	r8, r22
     6d4:	5c 01       	movw	r10, r24
	setPageAddress(myCursor.x_position,(myCursor.x_position+Width));
     6d6:	03 e7       	ldi	r16, 0x73	; 115
     6d8:	12 e0       	ldi	r17, 0x02	; 2
     6da:	f8 01       	movw	r30, r16
     6dc:	82 81       	ldd	r24, Z+2	; 0x02
     6de:	93 81       	ldd	r25, Z+3	; 0x03
     6e0:	ba 01       	movw	r22, r20
     6e2:	68 0f       	add	r22, r24
     6e4:	79 1f       	adc	r23, r25
     6e6:	b7 df       	rcall	.-146    	; 0x656 <setPageAddress>
	setColumnAddress(myCursor.y_position,(myCursor.y_position+Height-1));
     6e8:	f8 01       	movw	r30, r16
     6ea:	84 81       	ldd	r24, Z+4	; 0x04
     6ec:	95 81       	ldd	r25, Z+5	; 0x05
     6ee:	bc 01       	movw	r22, r24
     6f0:	61 50       	subi	r22, 0x01	; 1
     6f2:	71 09       	sbc	r23, r1
     6f4:	6c 0f       	add	r22, r28
     6f6:	7d 1f       	adc	r23, r29
     6f8:	93 df       	rcall	.-218    	; 0x620 <setColumnAddress>
}

static void memoryWrite()
{
	uint16_t command = 0b00101100;
	writeCommand(command);
     6fa:	8c e2       	ldi	r24, 0x2C	; 44
     6fc:	7e df       	rcall	.-260    	; 0x5fa <writeCommand>
     6fe:	81 14       	cp	r8, r1
	uint32_t size = (uint32_t)Width*(uint32_t)Height;
	setPageAddress(myCursor.x_position,(myCursor.x_position+Width));
	setColumnAddress(myCursor.y_position,(myCursor.y_position+Height-1));
	memoryWrite();
	
	for(i = 0; i<size; i++)
     700:	91 04       	cpc	r9, r1
     702:	a1 04       	cpc	r10, r1
     704:	b1 04       	cpc	r11, r1
     706:	89 f0       	breq	.+34     	; 0x72a <drawRectangle+0x7c>
     708:	c1 2c       	mov	r12, r1
     70a:	d1 2c       	mov	r13, r1
     70c:	76 01       	movw	r14, r12
     70e:	e8 01       	movw	r28, r16
	{
		writeData(myCursor.color);
     710:	88 81       	ld	r24, Y
     712:	99 81       	ldd	r25, Y+1	; 0x01
     714:	78 df       	rcall	.-272    	; 0x606 <writeData>
     716:	ff ef       	ldi	r31, 0xFF	; 255
	uint32_t size = (uint32_t)Width*(uint32_t)Height;
	setPageAddress(myCursor.x_position,(myCursor.x_position+Width));
	setColumnAddress(myCursor.y_position,(myCursor.y_position+Height-1));
	memoryWrite();
	
	for(i = 0; i<size; i++)
     718:	cf 1a       	sub	r12, r31
     71a:	df 0a       	sbc	r13, r31
     71c:	ef 0a       	sbc	r14, r31
     71e:	ff 0a       	sbc	r15, r31
     720:	8c 14       	cp	r8, r12
     722:	9d 04       	cpc	r9, r13
     724:	ae 04       	cpc	r10, r14
     726:	bf 04       	cpc	r11, r15
     728:	99 f7       	brne	.-26     	; 0x710 <drawRectangle+0x62>
	{
		writeData(myCursor.color);
	}
	writeCommand(0);
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	66 df       	rcall	.-308    	; 0x5fa <writeCommand>
     72e:	df 91       	pop	r29
}
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	df 90       	pop	r13
     73c:	cf 90       	pop	r12
     73e:	bf 90       	pop	r11
     740:	af 90       	pop	r10
     742:	9f 90       	pop	r9
     744:	8f 90       	pop	r8
     746:	08 95       	ret

00000748 <printString>:
     748:	2f 92       	push	r2

static void printString(char str[])
{
     74a:	3f 92       	push	r3
     74c:	4f 92       	push	r4
     74e:	5f 92       	push	r5
     750:	6f 92       	push	r6
     752:	7f 92       	push	r7
     754:	8f 92       	push	r8
     756:	9f 92       	push	r9
     758:	af 92       	push	r10
     75a:	bf 92       	push	r11
     75c:	cf 92       	push	r12
     75e:	df 92       	push	r13
     760:	ef 92       	push	r14
     762:	ff 92       	push	r15
     764:	0f 93       	push	r16
     766:	1f 93       	push	r17
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	3c 01       	movw	r6, r24
	uint8_t i = 0;
	for(i = 0; i<strlen(str); i++)
     76e:	31 2c       	mov	r3, r1



static void printCharById(uint8_t char_id)
{
	setPageAddress(myCursor.x_position,(myCursor.x_position+8));
     770:	0f 2e       	mov	r0, r31
     772:	f3 e7       	ldi	r31, 0x73	; 115
     774:	cf 2e       	mov	r12, r31
     776:	f2 e0       	ldi	r31, 0x02	; 2
     778:	df 2e       	mov	r13, r31
     77a:	f0 2d       	mov	r31, r0
     77c:	0f 2e       	mov	r0, r31
     77e:	fd e0       	ldi	r31, 0x0D	; 13
     780:	2f 2e       	mov	r2, r31
     782:	f0 2d       	mov	r31, r0
	uint8_t j = 0;
	for(i = 0; i<8; i++)
	{
		for (j = 0; j<13; j++)
		{
			if(pgm_read_byte(&letters[char_id][12-j])&(bit>>i))
     784:	68 94       	set
     786:	88 24       	eor	r8, r8
     788:	87 f8       	bld	r8, 7
     78a:	91 2c       	mov	r9, r1
}

static void printString(char str[])
{
	uint8_t i = 0;
	for(i = 0; i<strlen(str); i++)
     78c:	65 c0       	rjmp	.+202    	; 0x858 <printString+0x110>
	{
		printCharById(((uint8_t)str[i])-32);
     78e:	f3 01       	movw	r30, r6
     790:	e8 0f       	add	r30, r24
     792:	f9 1f       	adc	r31, r25
     794:	80 81       	ld	r24, Z
     796:	c0 ee       	ldi	r28, 0xE0	; 224
     798:	c8 0f       	add	r28, r24



static void printCharById(uint8_t char_id)
{
	setPageAddress(myCursor.x_position,(myCursor.x_position+8));
     79a:	f6 01       	movw	r30, r12
     79c:	82 81       	ldd	r24, Z+2	; 0x02
     79e:	93 81       	ldd	r25, Z+3	; 0x03
     7a0:	bc 01       	movw	r22, r24
     7a2:	68 5f       	subi	r22, 0xF8	; 248
     7a4:	7f 4f       	sbci	r23, 0xFF	; 255
     7a6:	57 df       	rcall	.-338    	; 0x656 <setPageAddress>
	setColumnAddress(myCursor.y_position,(myCursor.y_position+12));
     7a8:	f6 01       	movw	r30, r12
     7aa:	84 81       	ldd	r24, Z+4	; 0x04
     7ac:	95 81       	ldd	r25, Z+5	; 0x05
     7ae:	bc 01       	movw	r22, r24
     7b0:	64 5f       	subi	r22, 0xF4	; 244
     7b2:	7f 4f       	sbci	r23, 0xFF	; 255
     7b4:	35 df       	rcall	.-406    	; 0x620 <setColumnAddress>
}

static void memoryWrite()
{
	uint16_t command = 0b00101100;
	writeCommand(command);
     7b6:	8c e2       	ldi	r24, 0x2C	; 44
     7b8:	20 df       	rcall	.-448    	; 0x5fa <writeCommand>
     7ba:	2c 9e       	mul	r2, r28
     7bc:	c0 01       	movw	r24, r0
     7be:	11 24       	eor	r1, r1
     7c0:	9c 01       	movw	r18, r24
     7c2:	20 51       	subi	r18, 0x10	; 16
     7c4:	3f 4f       	sbci	r19, 0xFF	; 255
     7c6:	29 01       	movw	r4, r18
     7c8:	fc 01       	movw	r30, r24
     7ca:	ed 51       	subi	r30, 0x1D	; 29
     7cc:	ff 4f       	sbci	r31, 0xFF	; 255
     7ce:	7f 01       	movw	r14, r30
     7d0:	a1 2c       	mov	r10, r1
     7d2:	b1 2c       	mov	r11, r1
     7d4:	1c c0       	rjmp	.+56     	; 0x80e <printString+0xc6>
     7d6:	fe 01       	movw	r30, r28
	uint8_t j = 0;
	for(i = 0; i<8; i++)
	{
		for (j = 0; j<13; j++)
		{
			if(pgm_read_byte(&letters[char_id][12-j])&(bit>>i))
     7d8:	84 91       	lpm	r24, Z
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	80 23       	and	r24, r16
     7de:	91 23       	and	r25, r17
     7e0:	89 2b       	or	r24, r25
     7e2:	29 f0       	breq	.+10     	; 0x7ee <printString+0xa6>
     7e4:	f6 01       	movw	r30, r12
			{
				writeData(myCursor.color);
     7e6:	80 81       	ld	r24, Z
     7e8:	91 81       	ldd	r25, Z+1	; 0x01
     7ea:	0d df       	rcall	.-486    	; 0x606 <writeData>
     7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <printString+0xb0>
     7ee:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
			}
			else
			{
				writeData(backgroundColor);
     7f2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     7f6:	07 df       	rcall	.-498    	; 0x606 <writeData>
     7f8:	21 97       	sbiw	r28, 0x01	; 1
     7fa:	ce 15       	cp	r28, r14
	uint8_t bit = 0b10000000;
	uint8_t i = 0;
	uint8_t j = 0;
	for(i = 0; i<8; i++)
	{
		for (j = 0; j<13; j++)
     7fc:	df 05       	cpc	r29, r15
     7fe:	59 f7       	brne	.-42     	; 0x7d6 <printString+0x8e>
     800:	ff ef       	ldi	r31, 0xFF	; 255
     802:	af 1a       	sub	r10, r31
     804:	bf 0a       	sbc	r11, r31
     806:	28 e0       	ldi	r18, 0x08	; 8
	memoryWrite();

	uint8_t bit = 0b10000000;
	uint8_t i = 0;
	uint8_t j = 0;
	for(i = 0; i<8; i++)
     808:	a2 16       	cp	r10, r18
     80a:	b1 04       	cpc	r11, r1
     80c:	49 f0       	breq	.+18     	; 0x820 <printString+0xd8>
     80e:	84 01       	movw	r16, r8
	{
		for (j = 0; j<13; j++)
		{
			if(pgm_read_byte(&letters[char_id][12-j])&(bit>>i))
     810:	0a 2c       	mov	r0, r10
     812:	02 c0       	rjmp	.+4      	; 0x818 <printString+0xd0>
     814:	15 95       	asr	r17
     816:	07 95       	ror	r16
     818:	0a 94       	dec	r0
     81a:	e2 f7       	brpl	.-8      	; 0x814 <printString+0xcc>
     81c:	e2 01       	movw	r28, r4
     81e:	db cf       	rjmp	.-74     	; 0x7d6 <printString+0x8e>
				writeData(backgroundColor);
			}
		}
		j = 0;
	}
	writeCommand(0);
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	eb de       	rcall	.-554    	; 0x5fa <writeCommand>
     824:	f6 01       	movw	r30, r12
{
	uint8_t i = 0;
	for(i = 0; i<strlen(str); i++)
	{
		printCharById(((uint8_t)str[i])-32);
		if(myCursor.x_position < 280)
     826:	82 81       	ldd	r24, Z+2	; 0x02
     828:	93 81       	ldd	r25, Z+3	; 0x03
     82a:	88 31       	cpi	r24, 0x18	; 24
     82c:	f1 e0       	ldi	r31, 0x01	; 1
     82e:	9f 07       	cpc	r25, r31
     830:	28 f4       	brcc	.+10     	; 0x83c <printString+0xf4>
     832:	0d 96       	adiw	r24, 0x0d	; 13
		{
			myCursor.x_position += 13;
     834:	f6 01       	movw	r30, r12
     836:	93 83       	std	Z+3, r25	; 0x03
     838:	82 83       	std	Z+2, r24	; 0x02
     83a:	0d c0       	rjmp	.+26     	; 0x856 <printString+0x10e>
     83c:	f6 01       	movw	r30, r12
		}
		else if (myCursor.y_position < 210)
     83e:	84 81       	ldd	r24, Z+4	; 0x04
     840:	95 81       	ldd	r25, Z+5	; 0x05
     842:	82 3d       	cpi	r24, 0xD2	; 210
     844:	91 05       	cpc	r25, r1
     846:	38 f4       	brcc	.+14     	; 0x856 <printString+0x10e>
     848:	0d 96       	adiw	r24, 0x0d	; 13
		{
			myCursor.y_position +=13;
     84a:	95 83       	std	Z+5, r25	; 0x05
     84c:	84 83       	std	Z+4, r24	; 0x04
     84e:	2a e0       	ldi	r18, 0x0A	; 10
			myCursor.x_position = 10;
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	33 83       	std	Z+3, r19	; 0x03
     854:	22 83       	std	Z+2, r18	; 0x02
     856:	33 94       	inc	r3
}

static void printString(char str[])
{
	uint8_t i = 0;
	for(i = 0; i<strlen(str); i++)
     858:	83 2d       	mov	r24, r3
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	f3 01       	movw	r30, r6
     85e:	01 90       	ld	r0, Z+
     860:	00 20       	and	r0, r0
     862:	e9 f7       	brne	.-6      	; 0x85e <printString+0x116>
     864:	31 97       	sbiw	r30, 0x01	; 1
     866:	e6 19       	sub	r30, r6
     868:	f7 09       	sbc	r31, r7
     86a:	8e 17       	cp	r24, r30
     86c:	9f 07       	cpc	r25, r31
     86e:	08 f4       	brcc	.+2      	; 0x872 <printString+0x12a>
     870:	8e cf       	rjmp	.-228    	; 0x78e <printString+0x46>
     872:	df 91       	pop	r29
		{
			myCursor.y_position +=13;
			myCursor.x_position = 10;
		}
	}
}
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	ff 90       	pop	r15
     87c:	ef 90       	pop	r14
     87e:	df 90       	pop	r13
     880:	cf 90       	pop	r12
     882:	bf 90       	pop	r11
     884:	af 90       	pop	r10
     886:	9f 90       	pop	r9
     888:	8f 90       	pop	r8
     88a:	7f 90       	pop	r7
     88c:	6f 90       	pop	r6
     88e:	5f 90       	pop	r5
     890:	4f 90       	pop	r4
     892:	3f 90       	pop	r3
     894:	2f 90       	pop	r2
     896:	08 95       	ret

00000898 <printInteger>:
     898:	cf 93       	push	r28

static void printInteger(uint16_t num)
{
     89a:	df 93       	push	r29
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	2a 97       	sbiw	r28, 0x0a	; 10
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	f8 94       	cli
     8a6:	de bf       	out	0x3e, r29	; 62
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     8ac:	4a e0       	ldi	r20, 0x0A	; 10
     8ae:	be 01       	movw	r22, r28
     8b0:	6f 5f       	subi	r22, 0xFF	; 255
     8b2:	7f 4f       	sbci	r23, 0xFF	; 255
     8b4:	f3 d7       	rcall	.+4070   	; 0x189c <__itoa_ncheck>
	char buf[10];
	itoa(num,buf,10);
	printString(buf);
     8b6:	ce 01       	movw	r24, r28
     8b8:	01 96       	adiw	r24, 0x01	; 1
     8ba:	46 df       	rcall	.-372    	; 0x748 <printString>
}
     8bc:	2a 96       	adiw	r28, 0x0a	; 10
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	de bf       	out	0x3e, r29	; 62
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	cd bf       	out	0x3d, r28	; 61
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	08 95       	ret

000008ce <printFloat>:

static void printFloat(float num)
{
     8ce:	8f 92       	push	r8
     8d0:	9f 92       	push	r9
     8d2:	af 92       	push	r10
     8d4:	bf 92       	push	r11
     8d6:	cf 92       	push	r12
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	4b 01       	movw	r8, r22
     8e0:	5c 01       	movw	r10, r24
	uint16_t roundnum = num;
     8e2:	65 d6       	rcall	.+3274   	; 0x15ae <__fixunssfsi>
     8e4:	6b 01       	movw	r12, r22
     8e6:	7c 01       	movw	r14, r24
	printInteger(num);
     8e8:	cb 01       	movw	r24, r22
     8ea:	d6 df       	rcall	.-84     	; 0x898 <printInteger>
	printString(".");
     8ec:	8b e1       	ldi	r24, 0x1B	; 27
     8ee:	92 e0       	ldi	r25, 0x02	; 2
     8f0:	2b df       	rcall	.-426    	; 0x748 <printString>
	float dec = (num-roundnum)*100;
     8f2:	b6 01       	movw	r22, r12
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	86 d6       	rcall	.+3340   	; 0x1606 <__floatunsisf>
     8fa:	9b 01       	movw	r18, r22
     8fc:	ac 01       	movw	r20, r24
     8fe:	c5 01       	movw	r24, r10
     900:	b4 01       	movw	r22, r8
     902:	84 d5       	rcall	.+2824   	; 0x140c <__subsf3>
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	48 ec       	ldi	r20, 0xC8	; 200
     90a:	52 e4       	ldi	r21, 0x42	; 66
     90c:	2e d7       	rcall	.+3676   	; 0x176a <__mulsf3>
     90e:	6b 01       	movw	r12, r22
     910:	7c 01       	movw	r14, r24
	if (dec<10)
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	40 e2       	ldi	r20, 0x20	; 32
     918:	51 e4       	ldi	r21, 0x41	; 65
     91a:	dd d5       	rcall	.+3002   	; 0x14d6 <__cmpsf2>
     91c:	88 23       	and	r24, r24
	{
		printInteger(0);
     91e:	1c f4       	brge	.+6      	; 0x926 <printFloat+0x58>
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
	}
	printInteger((uint16_t)dec);
     924:	b9 df       	rcall	.-142    	; 0x898 <printInteger>
     926:	c7 01       	movw	r24, r14
     928:	b6 01       	movw	r22, r12
     92a:	41 d6       	rcall	.+3202   	; 0x15ae <__fixunssfsi>
     92c:	cb 01       	movw	r24, r22
     92e:	b4 df       	rcall	.-152    	; 0x898 <printInteger>
     930:	ff 90       	pop	r15
}
     932:	ef 90       	pop	r14
     934:	df 90       	pop	r13
     936:	cf 90       	pop	r12
     938:	bf 90       	pop	r11
     93a:	af 90       	pop	r10
     93c:	9f 90       	pop	r9
     93e:	8f 90       	pop	r8
     940:	08 95       	ret

00000942 <lcdDriver_getDriver>:
     942:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <__data_end>
static void printInteger(uint16_t num);
static void printFloat(float num);

lcdDriverInterface_t* lcdDriver_getDriver()
{
	if(!initialized)
     946:	81 11       	cpse	r24, r1
     948:	64 c0       	rjmp	.+200    	; 0xa12 <lcdDriver_getDriver+0xd0>
static void driverInit()
{
	uint8_t bit = 0b00000001;
	
	//Set control bits to output
	DDRG |= (bit<<CS_BIT)|(bit<<RST_BIT)|(bit<<WR_BIT);
     94a:	83 b3       	in	r24, 0x13	; 19
     94c:	87 60       	ori	r24, 0x07	; 7
     94e:	83 bb       	out	0x13, r24	; 19
	DDRD |= (bit<<DC_BIT);
     950:	57 9a       	sbi	0x0a, 7	; 10
	
	//Set data ports to output
	DDRA |= 0xFF;
     952:	81 b1       	in	r24, 0x01	; 1
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	81 b9       	out	0x01, r24	; 1
	DDRC |= 0xFF;
     958:	97 b1       	in	r25, 0x07	; 7
     95a:	87 b9       	out	0x07, r24	; 7
	
	// set control pins start position high
	DC_PORT |= bit<<DC_BIT;
     95c:	5f 9a       	sbi	0x0b, 7	; 11
	WR_PORT |= bit<<WR_BIT;
     95e:	a2 9a       	sbi	0x14, 2	; 20
	CS_PORT	|= bit<<CS_BIT;
     960:	a1 9a       	sbi	0x14, 1	; 20
	RST_PORT|= bit<<RST_BIT;
     962:	a0 9a       	sbi	0x14, 0	; 20
	
	//Reset grafik display
	RST_PORT &= ~(bit<<RST_BIT);
     964:	a0 98       	cbi	0x14, 0	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     966:	2f ef       	ldi	r18, 0xFF	; 255
     968:	89 e6       	ldi	r24, 0x69	; 105
     96a:	98 e1       	ldi	r25, 0x18	; 24
     96c:	21 50       	subi	r18, 0x01	; 1
     96e:	80 40       	sbci	r24, 0x00	; 0
     970:	90 40       	sbci	r25, 0x00	; 0
     972:	e1 f7       	brne	.-8      	; 0x96c <lcdDriver_getDriver+0x2a>
     974:	00 c0       	rjmp	.+0      	; 0x976 <lcdDriver_getDriver+0x34>
     976:	00 00       	nop
	_delay_ms(500);
	RST_PORT|= bit<<RST_BIT;
     978:	a0 9a       	sbi	0x14, 0	; 20
     97a:	af ef       	ldi	r26, 0xFF	; 255
     97c:	b8 e5       	ldi	r27, 0x58	; 88
     97e:	26 e0       	ldi	r18, 0x06	; 6
     980:	a1 50       	subi	r26, 0x01	; 1
     982:	b0 40       	sbci	r27, 0x00	; 0
     984:	20 40       	sbci	r18, 0x00	; 0
     986:	e1 f7       	brne	.-8      	; 0x980 <lcdDriver_getDriver+0x3e>
     988:	00 c0       	rjmp	.+0      	; 0x98a <lcdDriver_getDriver+0x48>
     98a:	00 00       	nop
}

static void sleepOut()
{
	uint16_t command = 0b00010001;
	writeCommand(command);
     98c:	81 e1       	ldi	r24, 0x11	; 17
     98e:	35 de       	rcall	.-918    	; 0x5fa <writeCommand>
	RST_PORT|= bit<<RST_BIT;
	_delay_ms(130);
	
	sleepOut();
	// Display on
	displayOn();
     990:	44 de       	rcall	.-888    	; 0x61a <displayOn>
}

static void memoryAccessControl(uint8_t parameter)
{
	uint16_t command = 0b00110110;
	writeCommand(command);
     992:	86 e3       	ldi	r24, 0x36	; 54
     994:	32 de       	rcall	.-924    	; 0x5fa <writeCommand>
	writeData((uint16_t)parameter);
     996:	88 e0       	ldi	r24, 0x08	; 8
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	35 de       	rcall	.-918    	; 0x606 <writeData>
}

static void interfacePixelFormat(uint8_t parameter)
{
	uint16_t command = 0b00111010;
	writeCommand(command);
     99c:	8a e3       	ldi	r24, 0x3A	; 58
     99e:	2d de       	rcall	.-934    	; 0x5fa <writeCommand>
	writeData((uint16_t)parameter);
     9a0:	85 e0       	ldi	r24, 0x05	; 5
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	30 de       	rcall	.-928    	; 0x606 <writeData>
     9a6:	86 e0       	ldi	r24, 0x06	; 6
	// Set bit BGR (scanning direction)
	memoryAccessControl(0b00001000);
	// 16 bits (2 bytes) per pixel
	interfacePixelFormat(0b00000101);
	
	memset(&myCursor,0,sizeof(myCursor));
     9a8:	e3 e7       	ldi	r30, 0x73	; 115
     9aa:	f2 e0       	ldi	r31, 0x02	; 2
     9ac:	df 01       	movw	r26, r30
     9ae:	1d 92       	st	X+, r1
     9b0:	8a 95       	dec	r24
     9b2:	e9 f7       	brne	.-6      	; 0x9ae <lcdDriver_getDriver+0x6c>
     9b4:	e1 e6       	ldi	r30, 0x61	; 97
lcdDriverInterface_t* lcdDriver_getDriver()
{
	if(!initialized)
	{
		driverInit();
		myInterface.displayON = displayOn;
     9b6:	f2 e0       	ldi	r31, 0x02	; 2
     9b8:	8d e0       	ldi	r24, 0x0D	; 13
     9ba:	93 e0       	ldi	r25, 0x03	; 3
     9bc:	91 83       	std	Z+1, r25	; 0x01
     9be:	80 83       	st	Z, r24
     9c0:	8a e0       	ldi	r24, 0x0A	; 10
		myInterface.displayOFF = displayOff;
     9c2:	93 e0       	ldi	r25, 0x03	; 3
     9c4:	93 83       	std	Z+3, r25	; 0x03
     9c6:	82 83       	std	Z+2, r24	; 0x02
     9c8:	86 e4       	ldi	r24, 0x46	; 70
		myInterface.setBackgroundColor = setBackgroundColor;
     9ca:	93 e0       	ldi	r25, 0x03	; 3
     9cc:	95 83       	std	Z+5, r25	; 0x05
     9ce:	84 83       	std	Z+4, r24	; 0x04
     9d0:	8b e4       	ldi	r24, 0x4B	; 75
		myInterface.setCursorColor = setCursorColor;
     9d2:	93 e0       	ldi	r25, 0x03	; 3
     9d4:	97 83       	std	Z+7, r25	; 0x07
     9d6:	86 83       	std	Z+6, r24	; 0x06
     9d8:	80 e5       	ldi	r24, 0x50	; 80
		myInterface.setCursor = setCursor;
     9da:	93 e0       	ldi	r25, 0x03	; 3
     9dc:	91 87       	std	Z+9, r25	; 0x09
     9de:	80 87       	std	Z+8, r24	; 0x08
     9e0:	87 e5       	ldi	r24, 0x57	; 87
		myInterface.drawRectangle = drawRectangle;
     9e2:	93 e0       	ldi	r25, 0x03	; 3
     9e4:	93 87       	std	Z+11, r25	; 0x0b
     9e6:	82 87       	std	Z+10, r24	; 0x0a
     9e8:	84 ea       	ldi	r24, 0xA4	; 164
		myInterface.printString = printString;
     9ea:	93 e0       	ldi	r25, 0x03	; 3
     9ec:	95 87       	std	Z+13, r25	; 0x0d
     9ee:	84 87       	std	Z+12, r24	; 0x0c
     9f0:	8c e4       	ldi	r24, 0x4C	; 76
		myInterface.printInteger = printInteger;
     9f2:	94 e0       	ldi	r25, 0x04	; 4
     9f4:	97 87       	std	Z+15, r25	; 0x0f
     9f6:	86 87       	std	Z+14, r24	; 0x0e
     9f8:	87 e6       	ldi	r24, 0x67	; 103
		myInterface.printFloat = printFloat;
     9fa:	94 e0       	ldi	r25, 0x04	; 4
     9fc:	91 8b       	std	Z+17, r25	; 0x11
     9fe:	80 8b       	std	Z+16, r24	; 0x10
     a00:	8f ef       	ldi	r24, 0xFF	; 255
		
		backgroundColor = WHITE;
     a02:	9f ef       	ldi	r25, 0xFF	; 255
     a04:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
     a08:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     a0c:	81 e0       	ldi	r24, 0x01	; 1
		initialized = true;
     a0e:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <__data_end>
     a12:	81 e6       	ldi	r24, 0x61	; 97
	}
	return &myInterface;
}
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	08 95       	ret

00000a18 <rgb3byteToInt>:
	uint16_t colorInt = 0;
	colorInt |= ((uint16_t)(red>>3)) << 11;
	colorInt |= ((uint16_t)(green>>2)) << 5;
	colorInt |= ((uint16_t)(blue>>3));
	
	return colorInt;
     a18:	66 95       	lsr	r22
     a1a:	66 95       	lsr	r22
     a1c:	90 e2       	ldi	r25, 0x20	; 32
     a1e:	69 9f       	mul	r22, r25
     a20:	b0 01       	movw	r22, r0
     a22:	11 24       	eor	r1, r1
     a24:	46 95       	lsr	r20
     a26:	46 95       	lsr	r20
     a28:	46 95       	lsr	r20
     a2a:	64 2b       	or	r22, r20
     a2c:	86 95       	lsr	r24
     a2e:	86 95       	lsr	r24
     a30:	86 95       	lsr	r24
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	98 2f       	mov	r25, r24
     a36:	88 27       	eor	r24, r24
     a38:	99 0f       	add	r25, r25
     a3a:	99 0f       	add	r25, r25
     a3c:	99 0f       	add	r25, r25
     a3e:	86 2b       	or	r24, r22
     a40:	97 2b       	or	r25, r23
     a42:	08 95       	ret

00000a44 <getTripDistance>:
}

static float getTripDistance(void)  //WORKS TESTED 
{ 
	float KMD = ((revLength*milestoneCount)/1000)+kmCount; //Total KM distance driven
	return KMD;
     a44:	60 91 8d 02 	lds	r22, 0x028D	; 0x80028d <milestoneCount>
     a48:	70 91 8e 02 	lds	r23, 0x028E	; 0x80028e <milestoneCount+0x1>
     a4c:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <milestoneCount+0x2>
     a50:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <milestoneCount+0x3>
     a54:	d8 d5       	rcall	.+2992   	; 0x1606 <__floatunsisf>
     a56:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <revLength>
     a5a:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <revLength+0x1>
     a5e:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <revLength+0x2>
     a62:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <revLength+0x3>
     a66:	81 d6       	rcall	.+3330   	; 0x176a <__mulsf3>
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	4a e7       	ldi	r20, 0x7A	; 122
     a6e:	54 e4       	ldi	r21, 0x44	; 68
     a70:	36 d5       	rcall	.+2668   	; 0x14de <__divsf3>
     a72:	20 91 89 02 	lds	r18, 0x0289	; 0x800289 <kmCount>
     a76:	30 91 8a 02 	lds	r19, 0x028A	; 0x80028a <kmCount+0x1>
     a7a:	40 91 8b 02 	lds	r20, 0x028B	; 0x80028b <kmCount+0x2>
     a7e:	50 91 8c 02 	lds	r21, 0x028C	; 0x80028c <kmCount+0x3>
     a82:	c5 c4       	rjmp	.+2442   	; 0x140e <__addsf3>
}
     a84:	08 95       	ret

00000a86 <updateMilestoneCount>:

static void updateMilestoneCount()
{
	milestoneCount += 1;
     a86:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <milestoneCount>
     a8a:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <milestoneCount+0x1>
     a8e:	a0 91 8f 02 	lds	r26, 0x028F	; 0x80028f <milestoneCount+0x2>
     a92:	b0 91 90 02 	lds	r27, 0x0290	; 0x800290 <milestoneCount+0x3>
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	a1 1d       	adc	r26, r1
     a9a:	b1 1d       	adc	r27, r1
     a9c:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <milestoneCount>
     aa0:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <milestoneCount+0x1>
     aa4:	a0 93 8f 02 	sts	0x028F, r26	; 0x80028f <milestoneCount+0x2>
     aa8:	b0 93 90 02 	sts	0x0290, r27	; 0x800290 <milestoneCount+0x3>
     aac:	08 95       	ret

00000aae <updateRevolutionCount>:
}

static void updateRevolutionCount(uint8_t revs)
{
	static uint8_t cnt = 0;
	revPerSec[cnt] = revs;
     aae:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <cnt.1943>
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	f9 01       	movw	r30, r18
     ab6:	ef 56       	subi	r30, 0x6F	; 111
     ab8:	fd 4f       	sbci	r31, 0xFD	; 253
     aba:	80 83       	st	Z, r24
	cnt = (cnt+1) % 4;
     abc:	c9 01       	movw	r24, r18
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	83 70       	andi	r24, 0x03	; 3
     ac2:	90 78       	andi	r25, 0x80	; 128
     ac4:	99 23       	and	r25, r25
     ac6:	24 f4       	brge	.+8      	; 0xad0 <updateRevolutionCount+0x22>
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	8c 6f       	ori	r24, 0xFC	; 252
     acc:	9f 6f       	ori	r25, 0xFF	; 255
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <cnt.1943>
     ad4:	08 95       	ret

00000ad6 <getSpeedKMH>:
{
	uint16_t retVal = 0;
	uint8_t i = 0;
	for (i = 0; i<4; i++)
	{
		retVal += revPerSec[i];
     ad6:	e1 e9       	ldi	r30, 0x91	; 145
     ad8:	f2 e0       	ldi	r31, 0x02	; 2
     ada:	80 81       	ld	r24, Z
     adc:	61 81       	ldd	r22, Z+1	; 0x01
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	68 0f       	add	r22, r24
     ae2:	71 1d       	adc	r23, r1
     ae4:	82 81       	ldd	r24, Z+2	; 0x02
     ae6:	68 0f       	add	r22, r24
     ae8:	71 1d       	adc	r23, r1
{
	//char buffer[10];
	
	float KMH = ((float)sumRevolutions()/4)*revLength*3.6; // Revolutions per second times revolution length = m/s. time 3.6 = km/h
	
	return KMH; 
     aea:	83 81       	ldd	r24, Z+3	; 0x03
     aec:	68 0f       	add	r22, r24
     aee:	71 1d       	adc	r23, r1
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	88 d5       	rcall	.+2832   	; 0x1606 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 e8       	ldi	r20, 0x80	; 128
     afc:	5e e3       	ldi	r21, 0x3E	; 62
     afe:	35 d6       	rcall	.+3178   	; 0x176a <__mulsf3>
     b00:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <revLength>
     b04:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <revLength+0x1>
     b08:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <revLength+0x2>
     b0c:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <revLength+0x3>
     b10:	2c d6       	rcall	.+3160   	; 0x176a <__mulsf3>
     b12:	26 e6       	ldi	r18, 0x66	; 102
     b14:	36 e6       	ldi	r19, 0x66	; 102
     b16:	46 e6       	ldi	r20, 0x66	; 102
     b18:	50 e4       	ldi	r21, 0x40	; 64
     b1a:	27 c6       	rjmp	.+3150   	; 0x176a <__mulsf3>
}
     b1c:	08 95       	ret

00000b1e <eepromSave>:
}


static void eepromSave(void)
{
	eeprom_write_float(0,getTripDistance());
     b1e:	92 df       	rcall	.-220    	; 0xa44 <getTripDistance>
     b20:	ab 01       	movw	r20, r22
     b22:	bc 01       	movw	r22, r24
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	f1 c6       	rjmp	.+3554   	; 0x190c <eeprom_write_dword>
     b2a:	08 95       	ret

00000b2c <speedSensor_getDriver>:
static float getSpeedKMH(void);
static float getTripDistance(void);

speedSensorInterface_t* speedSensor_getDriver(float wheelDiameter)
{
	if (!initialized)
     b2c:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <initialized>
     b30:	21 11       	cpse	r18, r1
     b32:	59 c0       	rjmp	.+178    	; 0xbe6 <speedSensor_getDriver+0xba>
}

static void initSpeedSensor(float wheelDiameter)
{
	float wheelD=(wheelDiameter/200); //Calculations to meters centered ( /100 & /2)
	revLength=(wheelD*3.1415); //One revolution gives meters
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	48 e4       	ldi	r20, 0x48	; 72
     b3a:	53 e4       	ldi	r21, 0x43	; 67
     b3c:	d0 d4       	rcall	.+2464   	; 0x14de <__divsf3>
     b3e:	26 e5       	ldi	r18, 0x56	; 86
     b40:	3e e0       	ldi	r19, 0x0E	; 14
     b42:	49 e4       	ldi	r20, 0x49	; 73
     b44:	50 e4       	ldi	r21, 0x40	; 64
     b46:	11 d6       	rcall	.+3106   	; 0x176a <__mulsf3>
     b48:	60 93 7a 02 	sts	0x027A, r22	; 0x80027a <revLength>
     b4c:	70 93 7b 02 	sts	0x027B, r23	; 0x80027b <revLength+0x1>
     b50:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <revLength+0x2>
     b54:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <revLength+0x3>
	kmCount = eeprom_read_float(0);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	d2 d6       	rcall	.+3492   	; 0x1902 <eeprom_read_dword>
     b5e:	60 93 89 02 	sts	0x0289, r22	; 0x800289 <kmCount>
     b62:	70 93 8a 02 	sts	0x028A, r23	; 0x80028a <kmCount+0x1>
     b66:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <kmCount+0x2>
     b6a:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <kmCount+0x3>
	if (milestoneCount == 0xFFFFFFFF)
     b6e:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <milestoneCount>
     b72:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <milestoneCount+0x1>
     b76:	a0 91 8f 02 	lds	r26, 0x028F	; 0x80028f <milestoneCount+0x2>
     b7a:	b0 91 90 02 	lds	r27, 0x0290	; 0x800290 <milestoneCount+0x3>
     b7e:	8f 3f       	cpi	r24, 0xFF	; 255
     b80:	9f 4f       	sbci	r25, 0xFF	; 255
     b82:	af 4f       	sbci	r26, 0xFF	; 255
     b84:	bf 4f       	sbci	r27, 0xFF	; 255
     b86:	41 f4       	brne	.+16     	; 0xb98 <speedSensor_getDriver+0x6c>
	{
		milestoneCount = 0;
     b88:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <milestoneCount>
     b8c:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <milestoneCount+0x1>
     b90:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <milestoneCount+0x2>
     b94:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <milestoneCount+0x3>
	}
	//Timer2 is used for keeping time of rpm measurement.
	// Timer2: Normal mode, No prescaling
	TCCR2A = 0b00000000;
     b98:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	TCCR2B = 0b00000001;
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
	// Timer2 overflow interrupt enable
	TIMSK2 |= 0b00000001;
     ba2:	e0 e7       	ldi	r30, 0x70	; 112
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	81 60       	ori	r24, 0x01	; 1
     baa:	80 83       	st	Z, r24
	
	// INT3:Rising edge
	EICRA = 0b11000000;
     bac:	80 ec       	ldi	r24, 0xC0	; 192
     bae:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	// Enable extern interrupts INT3 
	EIMSK |= 0b00001000;
     bb2:	eb 9a       	sbi	0x1d, 3	; 29
	
	// Global interrupt enable
	sei();
     bb4:	78 94       	sei
speedSensorInterface_t* speedSensor_getDriver(float wheelDiameter)
{
	if (!initialized)
	{
		initSpeedSensor(wheelDiameter);
		myInterface.getSpeedInKmh = getSpeedKMH;
     bb6:	ef e7       	ldi	r30, 0x7F	; 127
     bb8:	f2 e0       	ldi	r31, 0x02	; 2
     bba:	2b e6       	ldi	r18, 0x6B	; 107
     bbc:	35 e0       	ldi	r19, 0x05	; 5
     bbe:	37 83       	std	Z+7, r19	; 0x07
     bc0:	26 83       	std	Z+6, r18	; 0x06
		myInterface.getTripDistance = getTripDistance;
     bc2:	22 e2       	ldi	r18, 0x22	; 34
     bc4:	35 e0       	ldi	r19, 0x05	; 5
     bc6:	31 87       	std	Z+9, r19	; 0x09
     bc8:	20 87       	std	Z+8, r18	; 0x08
		myInterface.saveMilestoneCount = eepromSave;
     bca:	2f e8       	ldi	r18, 0x8F	; 143
     bcc:	35 e0       	ldi	r19, 0x05	; 5
     bce:	35 83       	std	Z+5, r19	; 0x05
     bd0:	24 83       	std	Z+4, r18	; 0x04
		myInterface.updateMilestoneCount = updateMilestoneCount;
     bd2:	23 e4       	ldi	r18, 0x43	; 67
     bd4:	35 e0       	ldi	r19, 0x05	; 5
     bd6:	33 83       	std	Z+3, r19	; 0x03
     bd8:	22 83       	std	Z+2, r18	; 0x02
		myInterface.updateRevolutionCount = updateRevolutionCount;
     bda:	27 e5       	ldi	r18, 0x57	; 87
     bdc:	35 e0       	ldi	r19, 0x05	; 5
     bde:	31 83       	std	Z+1, r19	; 0x01
     be0:	20 83       	st	Z, r18
		initialized = true;
     be2:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <initialized>
	}
	return &myInterface;
}
     be6:	8f e7       	ldi	r24, 0x7F	; 127
     be8:	92 e0       	ldi	r25, 0x02	; 2
     bea:	08 95       	ret

00000bec <CLK>:
}

static void CLK()
{
	uint8_t bit = 0b00000001;
	TOUCH_CLK_PORT |= bit<<TOUCH_CLK_BIT;
     bec:	e2 e0       	ldi	r30, 0x02	; 2
     bee:	f1 e0       	ldi	r31, 0x01	; 1
     bf0:	80 81       	ld	r24, Z
     bf2:	88 60       	ori	r24, 0x08	; 8
     bf4:	80 83       	st	Z, r24
	...
	_NOP();
	_NOP();
	_NOP();
	_NOP();
	
	TOUCH_CLK_PORT &= ~(bit<<TOUCH_CLK_BIT);
     bfe:	80 81       	ld	r24, Z
     c00:	87 7f       	andi	r24, 0xF7	; 247
     c02:	80 83       	st	Z, r24
	...
	_NOP();
	_NOP();
	_NOP();
	_NOP();
     c0c:	08 95       	ret

00000c0e <getData>:
	DDRE &= ~(bit<<TOUCH_DOUT_BIT);
	DDRE &= ~(bit<<TOUCH_IRQ_BIT);
}

static uint16_t getData(uint8_t command)
{
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t bit = 0b00000001;
	uint16_t data = 0;
	
	TOUCH_CS_PORT |= bit<<TOUCH_CS_BIT;
     c1a:	73 9a       	sbi	0x0e, 3	; 14
	TOUCH_CLK_PORT &= ~(bit<<TOUCH_CLK_BIT);
     c1c:	e2 e0       	ldi	r30, 0x02	; 2
     c1e:	f1 e0       	ldi	r31, 0x01	; 1
     c20:	90 81       	ld	r25, Z
     c22:	97 7f       	andi	r25, 0xF7	; 247
     c24:	90 83       	st	Z, r25
	
	/* Start sending command */
	TOUCH_CS_PORT &= ~(bit<<TOUCH_CS_BIT);
     c26:	73 98       	cbi	0x0e, 3	; 14
	_NOP();
     c28:	00 00       	nop
	_NOP();
     c2a:	00 00       	nop
     c2c:	c7 e0       	ldi	r28, 0x07	; 7
     c2e:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (i = 0; i<8; i++)
	{
		if (command&(bit<<(7-i)))
     c30:	ee 24       	eor	r14, r14
     c32:	e3 94       	inc	r14
     c34:	f1 2c       	mov	r15, r1
     c36:	08 2f       	mov	r16, r24
     c38:	10 e0       	ldi	r17, 0x00	; 0
     c3a:	97 01       	movw	r18, r14
     c3c:	0c 2e       	mov	r0, r28
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <getData+0x36>
     c40:	22 0f       	add	r18, r18
     c42:	33 1f       	adc	r19, r19
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <getData+0x32>
     c48:	20 23       	and	r18, r16
     c4a:	31 23       	and	r19, r17
     c4c:	23 2b       	or	r18, r19
     c4e:	11 f0       	breq	.+4      	; 0xc54 <getData+0x46>
		{
			TOUCH_DIN_PORT |= bit<<TOUCH_DIN_BIT;
     c50:	a5 9a       	sbi	0x14, 5	; 20
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <getData+0x48>
		} 
		else
		{
			TOUCH_DIN_PORT  &= ~(bit<<TOUCH_DIN_BIT);
     c54:	a5 98       	cbi	0x14, 5	; 20
		}
		CLK();
     c56:	ca df       	rcall	.-108    	; 0xbec <CLK>
     c58:	21 97       	sbiw	r28, 0x01	; 1
     c5a:	78 f7       	brcc	.-34     	; 0xc3a <getData+0x2c>
	}
	i = 0;
	TOUCH_DIN_PORT  &= ~(bit<<TOUCH_DIN_BIT);
     c5c:	a5 98       	cbi	0x14, 5	; 20
     c5e:	cf e0       	ldi	r28, 0x0F	; 15
     c60:	d0 e0       	ldi	r29, 0x00	; 0

static uint16_t getData(uint8_t command)
{
	uint8_t i = 0;
	uint8_t bit = 0b00000001;
	uint16_t data = 0;
     c62:	00 e0       	ldi	r16, 0x00	; 0
     c64:	10 e0       	ldi	r17, 0x00	; 0
	for (i = 0; i<16; i++)
	{
		CLK();
		if (TOUCH_DOUT_PIN&(bit<<TOUCH_DOUT_BIT))
		{
			data |= bit<<(15-i);
     c66:	ee 24       	eor	r14, r14
     c68:	e3 94       	inc	r14
	}
	i = 0;
	TOUCH_DIN_PORT  &= ~(bit<<TOUCH_DIN_BIT);
	for (i = 0; i<16; i++)
	{
		CLK();
     c6a:	f1 2c       	mov	r15, r1
     c6c:	bf df       	rcall	.-130    	; 0xbec <CLK>
		if (TOUCH_DOUT_PIN&(bit<<TOUCH_DOUT_BIT))
     c6e:	65 9b       	sbis	0x0c, 5	; 12
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <getData+0x76>
		{
			data |= bit<<(15-i);
     c72:	c7 01       	movw	r24, r14
     c74:	0c 2e       	mov	r0, r28
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <getData+0x6e>
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	0a 94       	dec	r0
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <getData+0x6a>
     c80:	08 2b       	or	r16, r24
     c82:	19 2b       	or	r17, r25
     c84:	21 97       	sbiw	r28, 0x01	; 1
     c86:	90 f7       	brcc	.-28     	; 0xc6c <getData+0x5e>
		}
	}
	TOUCH_CS_PORT |= bit<<TOUCH_CS_BIT;
     c88:	73 9a       	sbi	0x0e, 3	; 14
	
	return (data>>4);
}
     c8a:	c8 01       	movw	r24, r16
     c8c:	92 95       	swap	r25
     c8e:	82 95       	swap	r24
     c90:	8f 70       	andi	r24, 0x0F	; 15
     c92:	89 27       	eor	r24, r25
     c94:	9f 70       	andi	r25, 0x0F	; 15
     c96:	89 27       	eor	r24, r25
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	ef 90       	pop	r14
     ca4:	08 95       	ret

00000ca6 <getThouchX>:
	
}

static uint16_t getThouchX(void)
{
	return getData(READ_X_POSITION);	
     ca6:	89 e9       	ldi	r24, 0x99	; 153
     ca8:	b2 cf       	rjmp	.-156    	; 0xc0e <getData>
}
     caa:	08 95       	ret

00000cac <getThouchY>:
static uint16_t getThouchY(void)
{
	return getData(READ_Y_POSITION);
     cac:	89 ed       	ldi	r24, 0xD9	; 217
     cae:	af cf       	rjmp	.-162    	; 0xc0e <getData>
}
     cb0:	08 95       	ret

00000cb2 <getPressure>:
static uint16_t getPressure(void)
{
	return getData(READ_PRESSURE);
     cb2:	89 ec       	ldi	r24, 0xC9	; 201
     cb4:	ac cf       	rjmp	.-168    	; 0xc0e <getData>
     cb6:	08 95       	ret

00000cb8 <touchDriver_getDriver>:
static void driverInit()
{
	uint8_t bit = 0b00000001;
	
	/* Set CLK, CS and DIN as outputs, DIN refers to DIN of touch controller*/
	DDRH |= (bit<<TOUCH_CLK_BIT);
     cb8:	e1 e0       	ldi	r30, 0x01	; 1
     cba:	f1 e0       	ldi	r31, 0x01	; 1
     cbc:	80 81       	ld	r24, Z
     cbe:	88 60       	ori	r24, 0x08	; 8
     cc0:	80 83       	st	Z, r24
	DDRE |= (bit<<TOUCH_CS_BIT);
     cc2:	6b 9a       	sbi	0x0d, 3	; 13
	DDRG |= (bit<<TOUCH_DIN_BIT);
     cc4:	9d 9a       	sbi	0x13, 5	; 19
	
	
	/* Set DOUT of touch controller to be input in arduino*/
	DDRE &= ~(bit<<TOUCH_DOUT_BIT);
     cc6:	6d 98       	cbi	0x0d, 5	; 13
	DDRE &= ~(bit<<TOUCH_IRQ_BIT);
     cc8:	6c 98       	cbi	0x0d, 4	; 13
touchDriverInterface_t* touchDriver_getDriver()
{
	if(!initialized)
	{
		driverInit();
		myInterface.readPressure = getPressure;
     cca:	e5 e9       	ldi	r30, 0x95	; 149
     ccc:	f2 e0       	ldi	r31, 0x02	; 2
     cce:	89 e5       	ldi	r24, 0x59	; 89
     cd0:	96 e0       	ldi	r25, 0x06	; 6
     cd2:	95 83       	std	Z+5, r25	; 0x05
     cd4:	84 83       	std	Z+4, r24	; 0x04
		myInterface.readTouchX = getThouchX;
     cd6:	83 e5       	ldi	r24, 0x53	; 83
     cd8:	96 e0       	ldi	r25, 0x06	; 6
     cda:	91 83       	std	Z+1, r25	; 0x01
     cdc:	80 83       	st	Z, r24
		myInterface.readTouchY = getThouchY;
     cde:	86 e5       	ldi	r24, 0x56	; 86
     ce0:	96 e0       	ldi	r25, 0x06	; 6
     ce2:	93 83       	std	Z+3, r25	; 0x03
     ce4:	82 83       	std	Z+2, r24	; 0x02
	}
	return &myInterface;
}
     ce6:	cf 01       	movw	r24, r30
     ce8:	08 95       	ret

00000cea <main>:
	}
}

static void setUpGUIColors(void)
{
	GUIstateColors[BACKGROUND_COLOR][ALL] = rgb3byteToInt(181,230,29);
     cea:	4d e1       	ldi	r20, 0x1D	; 29
     cec:	66 ee       	ldi	r22, 0xE6	; 230
     cee:	85 eb       	ldi	r24, 0xB5	; 181
     cf0:	93 de       	rcall	.-730    	; 0xa18 <rgb3byteToInt>
     cf2:	cf e9       	ldi	r28, 0x9F	; 159
     cf4:	d2 e0       	ldi	r29, 0x02	; 2
     cf6:	99 83       	std	Y+1, r25	; 0x01
     cf8:	88 83       	st	Y, r24
	GUIstateColors[FONT_COLOR][ALL] = rgb3byteToInt(8,4,8);
     cfa:	48 e0       	ldi	r20, 0x08	; 8
     cfc:	64 e0       	ldi	r22, 0x04	; 4
     cfe:	88 e0       	ldi	r24, 0x08	; 8
     d00:	8b de       	rcall	.-746    	; 0xa18 <rgb3byteToInt>
     d02:	9b 87       	std	Y+11, r25	; 0x0b
     d04:	8a 87       	std	Y+10, r24	; 0x0a
	
	GUIstateColors[BACKGROUND_COLOR][MILESTONE] = rgb3byteToInt(112,146,190);
     d06:	4e eb       	ldi	r20, 0xBE	; 190
     d08:	62 e9       	ldi	r22, 0x92	; 146
     d0a:	80 e7       	ldi	r24, 0x70	; 112
     d0c:	85 de       	rcall	.-758    	; 0xa18 <rgb3byteToInt>
     d0e:	9b 83       	std	Y+3, r25	; 0x03
     d10:	8a 83       	std	Y+2, r24	; 0x02
	GUIstateColors[FONT_COLOR][MILESTONE] = rgb3byteToInt(255,255,255);
     d12:	4f ef       	ldi	r20, 0xFF	; 255
     d14:	6f ef       	ldi	r22, 0xFF	; 255
     d16:	8f ef       	ldi	r24, 0xFF	; 255
     d18:	7f de       	rcall	.-770    	; 0xa18 <rgb3byteToInt>
     d1a:	9d 87       	std	Y+13, r25	; 0x0d
     d1c:	8c 87       	std	Y+12, r24	; 0x0c
	
	GUIstateColors[BACKGROUND_COLOR][TEMPERATURE] = rgb3byteToInt(254,254,254);
     d1e:	4e ef       	ldi	r20, 0xFE	; 254
     d20:	6e ef       	ldi	r22, 0xFE	; 254
     d22:	8e ef       	ldi	r24, 0xFE	; 254
     d24:	79 de       	rcall	.-782    	; 0xa18 <rgb3byteToInt>
     d26:	9d 83       	std	Y+5, r25	; 0x05
     d28:	8c 83       	std	Y+4, r24	; 0x04
	GUIstateColors[FONT_COLOR][TEMPERATURE] = rgb3byteToInt(255,127,39);
     d2a:	47 e2       	ldi	r20, 0x27	; 39
     d2c:	6f e7       	ldi	r22, 0x7F	; 127
     d2e:	8f ef       	ldi	r24, 0xFF	; 255
     d30:	73 de       	rcall	.-794    	; 0xa18 <rgb3byteToInt>
     d32:	9f 87       	std	Y+15, r25	; 0x0f
     d34:	8e 87       	std	Y+14, r24	; 0x0e
	
	GUIstateColors[BACKGROUND_COLOR][VELOCITY] = rgb3byteToInt(200,192,231);
     d36:	47 ee       	ldi	r20, 0xE7	; 231
     d38:	60 ec       	ldi	r22, 0xC0	; 192
     d3a:	88 ec       	ldi	r24, 0xC8	; 200
     d3c:	6d de       	rcall	.-806    	; 0xa18 <rgb3byteToInt>
     d3e:	9f 83       	std	Y+7, r25	; 0x07
     d40:	8e 83       	std	Y+6, r24	; 0x06
	GUIstateColors[FONT_COLOR][VELOCITY] = rgb3byteToInt(253,240,9);
     d42:	49 e0       	ldi	r20, 0x09	; 9
     d44:	60 ef       	ldi	r22, 0xF0	; 240
     d46:	8d ef       	ldi	r24, 0xFD	; 253
     d48:	67 de       	rcall	.-818    	; 0xa18 <rgb3byteToInt>
     d4a:	99 8b       	std	Y+17, r25	; 0x11
     d4c:	88 8b       	std	Y+16, r24	; 0x10
	
	GUIstateColors[BACKGROUND_COLOR][STEEPNESS] = rgb3byteToInt(163,73,164);
     d4e:	44 ea       	ldi	r20, 0xA4	; 164
     d50:	69 e4       	ldi	r22, 0x49	; 73
     d52:	83 ea       	ldi	r24, 0xA3	; 163
     d54:	61 de       	rcall	.-830    	; 0xa18 <rgb3byteToInt>
     d56:	99 87       	std	Y+9, r25	; 0x09
	GUIstateColors[FONT_COLOR][STEEPNESS] = rgb3byteToInt(253,200,14);
     d58:	88 87       	std	Y+8, r24	; 0x08
     d5a:	4e e0       	ldi	r20, 0x0E	; 14
     d5c:	68 ec       	ldi	r22, 0xC8	; 200
     d5e:	8d ef       	ldi	r24, 0xFD	; 253
     d60:	5b de       	rcall	.-842    	; 0xa18 <rgb3byteToInt>
     d62:	9b 8b       	std	Y+19, r25	; 0x13
static void drawGrid(void);

int main(void)
{
	setUpGUIColors();
	screen = lcdDriver_getDriver();
     d64:	8a 8b       	std	Y+18, r24	; 0x12
     d66:	ed dd       	rcall	.-1062   	; 0x942 <lcdDriver_getDriver>
     d68:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <screen+0x1>
     d6c:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <screen>
	touch = touchDriver_getDriver();
     d70:	a3 df       	rcall	.-186    	; 0xcb8 <touchDriver_getDriver>
     d72:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <touch+0x1>
     d76:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <touch>
	speedSensor = speedSensor_getDriver(65);
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	82 e8       	ldi	r24, 0x82	; 130
     d80:	92 e4       	ldi	r25, 0x42	; 66
     d82:	d4 de       	rcall	.-600    	; 0xb2c <speedSensor_getDriver>
     d84:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <speedSensor+0x1>
     d88:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <speedSensor>
     d8c:	c5 e0       	ldi	r28, 0x05	; 5
			lcnt = 0;
			rcnt++;
			_delay_ms(5);
			if(rcnt>10)
			{
				currentState = (currentState+1) % NUMBER_OF_STATES;
     d8e:	d0 e0       	ldi	r29, 0x00	; 0
     d90:	04 e0       	ldi	r16, 0x04	; 4
			rcnt = 0;
			lcnt++;
			_delay_ms(5);
			if(lcnt>10)
			{
				currentState = (currentState == ALL) ? (NUMBER_OF_STATES-1) : currentState-1;
     d92:	12 e0       	ldi	r17, 0x02	; 2
			screen->printString("   STEP     ");
			break;
			
			
			default:
			currentState = TEMPERATURE;
     d94:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <touch>
	screen = lcdDriver_getDriver();
	touch = touchDriver_getDriver();
	speedSensor = speedSensor_getDriver(65);
    while (1) 
    {
		uint16_t val = touch->readTouchX();
     d98:	f0 91 b6 02 	lds	r31, 0x02B6	; 0x8002b6 <touch+0x1>
     d9c:	01 90       	ld	r0, Z+
     d9e:	f0 81       	ld	r31, Z
     da0:	e0 2d       	mov	r30, r0
     da2:	19 95       	eicall
     da4:	9c 01       	movw	r18, r24
		
		if ((val < 2000) && (val > 1))
     da6:	22 50       	subi	r18, 0x02	; 2
     da8:	31 09       	sbc	r19, r1
     daa:	2e 3c       	cpi	r18, 0xCE	; 206
     dac:	37 40       	sbci	r19, 0x07	; 7
     dae:	38 f5       	brcc	.+78     	; 0xdfe <main+0x114>
     db0:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <lcnt+0x1>
		{	
			lcnt = 0;
     db4:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <lcnt>
     db8:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <rcnt>
			rcnt++;
     dbc:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <rcnt+0x1>
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <rcnt+0x1>
     dc6:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <rcnt>
     dca:	8f e1       	ldi	r24, 0x1F	; 31
     dcc:	9e e4       	ldi	r25, 0x4E	; 78
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	f1 f7       	brne	.-4      	; 0xdce <main+0xe4>
     dd2:	00 c0       	rjmp	.+0      	; 0xdd4 <main+0xea>
     dd4:	00 00       	nop
			_delay_ms(5);
			if(rcnt>10)
     dd6:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <rcnt>
     dda:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <rcnt+0x1>
     dde:	0b 97       	sbiw	r24, 0x0b	; 11
     de0:	08 f4       	brcc	.+2      	; 0xde4 <main+0xfa>
     de2:	41 c0       	rjmp	.+130    	; 0xe66 <main+0x17c>
			{
				currentState = (currentState+1) % NUMBER_OF_STATES;
     de4:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <currentState>
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	be 01       	movw	r22, r28
     dee:	20 d5       	rcall	.+2624   	; 0x1830 <__divmodhi4>
     df0:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <currentState>
     df4:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <rcnt+0x1>
				rcnt = 0;
     df8:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <rcnt>
     dfc:	34 c0       	rjmp	.+104    	; 0xe66 <main+0x17c>
     dfe:	89 5b       	subi	r24, 0xB9	; 185
			}
		}
		
		else if ((val > 3000) && (val < 4000))
     e00:	9b 40       	sbci	r25, 0x0B	; 11
     e02:	87 3e       	cpi	r24, 0xE7	; 231
     e04:	93 40       	sbci	r25, 0x03	; 3
     e06:	38 f5       	brcc	.+78     	; 0xe56 <main+0x16c>
     e08:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <rcnt+0x1>
		{
			rcnt = 0;
     e0c:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <rcnt>
     e10:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <lcnt>
			lcnt++;
     e14:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <lcnt+0x1>
     e18:	01 96       	adiw	r24, 0x01	; 1
     e1a:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <lcnt+0x1>
     e1e:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <lcnt>
     e22:	8f e1       	ldi	r24, 0x1F	; 31
     e24:	9e e4       	ldi	r25, 0x4E	; 78
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	f1 f7       	brne	.-4      	; 0xe26 <main+0x13c>
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <main+0x142>
     e2c:	00 00       	nop
     e2e:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <lcnt>
			_delay_ms(5);
			if(lcnt>10)
     e32:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <lcnt+0x1>
     e36:	0b 97       	sbiw	r24, 0x0b	; 11
     e38:	b0 f0       	brcs	.+44     	; 0xe66 <main+0x17c>
     e3a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <currentState>
			{
				currentState = (currentState == ALL) ? (NUMBER_OF_STATES-1) : currentState-1;
     e3e:	88 23       	and	r24, r24
     e40:	11 f0       	breq	.+4      	; 0xe46 <main+0x15c>
     e42:	81 50       	subi	r24, 0x01	; 1
     e44:	01 c0       	rjmp	.+2      	; 0xe48 <main+0x15e>
     e46:	80 2f       	mov	r24, r16
     e48:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <currentState>
     e4c:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <lcnt+0x1>
				lcnt = 0;
     e50:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <lcnt>
     e54:	08 c0       	rjmp	.+16     	; 0xe66 <main+0x17c>
     e56:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <rcnt+0x1>
			}
		}
		else
		{
			rcnt = 0;
     e5a:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <rcnt>
     e5e:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <lcnt+0x1>
			lcnt = 0;
     e62:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <lcnt>
     e66:	a0 91 03 02 	lds	r26, 0x0203	; 0x800203 <currentState>

}

static void GUI_sm()
{
	if (previousState != currentState)
     e6a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <previousState>
     e6e:	8a 17       	cp	r24, r26
     e70:	09 f4       	brne	.+2      	; 0xe74 <main+0x18a>
     e72:	90 cf       	rjmp	.-224    	; 0xd94 <main+0xaa>
     e74:	b0 e0       	ldi	r27, 0x00	; 0
	{
		screen->setCursorColor(GUIstateColors[BACKGROUND_COLOR][currentState]);
     e76:	aa 0f       	add	r26, r26
     e78:	bb 1f       	adc	r27, r27
     e7a:	a1 56       	subi	r26, 0x61	; 97
     e7c:	bd 4f       	sbci	r27, 0xFD	; 253
     e7e:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
     e82:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
     e86:	06 80       	ldd	r0, Z+6	; 0x06
     e88:	f7 81       	ldd	r31, Z+7	; 0x07
     e8a:	e0 2d       	mov	r30, r0
     e8c:	8d 91       	ld	r24, X+
     e8e:	9c 91       	ld	r25, X
     e90:	19 95       	eicall
     e92:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
		screen->setCursor(0,0);
     e96:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
     e9a:	00 84       	ldd	r0, Z+8	; 0x08
     e9c:	f1 85       	ldd	r31, Z+9	; 0x09
     e9e:	e0 2d       	mov	r30, r0
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	19 95       	eicall
     eaa:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
		screen->drawRectangle(319,239);
     eae:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
     eb2:	02 84       	ldd	r0, Z+10	; 0x0a
     eb4:	f3 85       	ldd	r31, Z+11	; 0x0b
     eb6:	e0 2d       	mov	r30, r0
     eb8:	6f ee       	ldi	r22, 0xEF	; 239
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	8f e3       	ldi	r24, 0x3F	; 63
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	19 95       	eicall
     ec2:	a0 91 03 02 	lds	r26, 0x0203	; 0x800203 <currentState>
		screen->setCursorColor(GUIstateColors[FONT_COLOR][currentState]);
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	aa 0f       	add	r26, r26
     eca:	bb 1f       	adc	r27, r27
     ecc:	a7 55       	subi	r26, 0x57	; 87
     ece:	bd 4f       	sbci	r27, 0xFD	; 253
     ed0:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
     ed4:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
     ed8:	06 80       	ldd	r0, Z+6	; 0x06
     eda:	f7 81       	ldd	r31, Z+7	; 0x07
     edc:	e0 2d       	mov	r30, r0
     ede:	8d 91       	ld	r24, X+
     ee0:	9c 91       	ld	r25, X
     ee2:	19 95       	eicall
     ee4:	a0 91 03 02 	lds	r26, 0x0203	; 0x800203 <currentState>
		screen->setBackgroundColor(GUIstateColors[BACKGROUND_COLOR][currentState]);
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	aa 0f       	add	r26, r26
     eec:	bb 1f       	adc	r27, r27
     eee:	a1 56       	subi	r26, 0x61	; 97
     ef0:	bd 4f       	sbci	r27, 0xFD	; 253
     ef2:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
     ef6:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
     efa:	04 80       	ldd	r0, Z+4	; 0x04
     efc:	f5 81       	ldd	r31, Z+5	; 0x05
     efe:	e0 2d       	mov	r30, r0
     f00:	8d 91       	ld	r24, X+
     f02:	9c 91       	ld	r25, X
     f04:	19 95       	eicall
     f06:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <currentState>
		
		switch(currentState)
     f0a:	82 30       	cpi	r24, 0x02	; 2
     f0c:	09 f4       	brne	.+2      	; 0xf10 <main+0x226>
     f0e:	a0 c1       	rjmp	.+832    	; 0x1250 <main+0x566>
     f10:	30 f4       	brcc	.+12     	; 0xf1e <main+0x234>
     f12:	88 23       	and	r24, r24
     f14:	59 f0       	breq	.+22     	; 0xf2c <main+0x242>
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	09 f4       	brne	.+2      	; 0xf1c <main+0x232>
     f1a:	83 c1       	rjmp	.+774    	; 0x1222 <main+0x538>
     f1c:	de c1       	rjmp	.+956    	; 0x12da <main+0x5f0>
     f1e:	83 30       	cpi	r24, 0x03	; 3
     f20:	09 f4       	brne	.+2      	; 0xf24 <main+0x23a>
     f22:	ad c1       	rjmp	.+858    	; 0x127e <main+0x594>
     f24:	84 30       	cpi	r24, 0x04	; 4
     f26:	09 f4       	brne	.+2      	; 0xf2a <main+0x240>
     f28:	c1 c1       	rjmp	.+898    	; 0x12ac <main+0x5c2>
     f2a:	d7 c1       	rjmp	.+942    	; 0x12da <main+0x5f0>
     f2c:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
	GUIstateColors[FONT_COLOR][STEEPNESS] = rgb3byteToInt(253,200,14);
}

static void drawGrid(void)
{
	screen->setCursor(0,0);
     f30:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
     f34:	00 84       	ldd	r0, Z+8	; 0x08
     f36:	f1 85       	ldd	r31, Z+9	; 0x09
     f38:	e0 2d       	mov	r30, r0
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	19 95       	eicall
     f44:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
	screen->drawRectangle(319,239);
     f48:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
     f4c:	02 84       	ldd	r0, Z+10	; 0x0a
     f4e:	f3 85       	ldd	r31, Z+11	; 0x0b
     f50:	e0 2d       	mov	r30, r0
     f52:	6f ee       	ldi	r22, 0xEF	; 239
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	8f e3       	ldi	r24, 0x3F	; 63
     f58:	91 e0       	ldi	r25, 0x01	; 1
     f5a:	19 95       	eicall
     f5c:	a0 91 03 02 	lds	r26, 0x0203	; 0x800203 <currentState>
	screen->setCursorColor(GUIstateColors[BACKGROUND_COLOR][currentState]);
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	aa 0f       	add	r26, r26
     f64:	bb 1f       	adc	r27, r27
     f66:	a1 56       	subi	r26, 0x61	; 97
     f68:	bd 4f       	sbci	r27, 0xFD	; 253
     f6a:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
     f6e:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
     f72:	06 80       	ldd	r0, Z+6	; 0x06
     f74:	f7 81       	ldd	r31, Z+7	; 0x07
     f76:	e0 2d       	mov	r30, r0
     f78:	8d 91       	ld	r24, X+
     f7a:	9c 91       	ld	r25, X
     f7c:	19 95       	eicall
     f7e:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
	screen->setCursor(3,3);
     f82:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
     f86:	00 84       	ldd	r0, Z+8	; 0x08
     f88:	f1 85       	ldd	r31, Z+9	; 0x09
     f8a:	e0 2d       	mov	r30, r0
     f8c:	63 e0       	ldi	r22, 0x03	; 3
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	83 e0       	ldi	r24, 0x03	; 3
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	19 95       	eicall
     f96:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
	screen->drawRectangle(154,74);
     f9a:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
     f9e:	02 84       	ldd	r0, Z+10	; 0x0a
     fa0:	f3 85       	ldd	r31, Z+11	; 0x0b
     fa2:	e0 2d       	mov	r30, r0
     fa4:	6a e4       	ldi	r22, 0x4A	; 74
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	8a e9       	ldi	r24, 0x9A	; 154
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	19 95       	eicall
     fae:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
	screen->setCursor(160,3);
     fb2:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
     fb6:	00 84       	ldd	r0, Z+8	; 0x08
     fb8:	f1 85       	ldd	r31, Z+9	; 0x09
     fba:	e0 2d       	mov	r30, r0
     fbc:	63 e0       	ldi	r22, 0x03	; 3
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	80 ea       	ldi	r24, 0xA0	; 160
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	19 95       	eicall
     fc6:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
	screen->drawRectangle(154,74);
     fca:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
     fce:	02 84       	ldd	r0, Z+10	; 0x0a
     fd0:	f3 85       	ldd	r31, Z+11	; 0x0b
     fd2:	e0 2d       	mov	r30, r0
     fd4:	6a e4       	ldi	r22, 0x4A	; 74
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	8a e9       	ldi	r24, 0x9A	; 154
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	19 95       	eicall
     fde:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
	screen->setCursor(3,80);
     fe2:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
     fe6:	00 84       	ldd	r0, Z+8	; 0x08
     fe8:	f1 85       	ldd	r31, Z+9	; 0x09
     fea:	e0 2d       	mov	r30, r0
     fec:	60 e5       	ldi	r22, 0x50	; 80
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	83 e0       	ldi	r24, 0x03	; 3
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	19 95       	eicall
     ff6:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
	screen->drawRectangle(154,74);
     ffa:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
     ffe:	02 84       	ldd	r0, Z+10	; 0x0a
    1000:	f3 85       	ldd	r31, Z+11	; 0x0b
    1002:	e0 2d       	mov	r30, r0
    1004:	6a e4       	ldi	r22, 0x4A	; 74
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	8a e9       	ldi	r24, 0x9A	; 154
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	19 95       	eicall
    100e:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
	screen->setCursor(160,80);
    1012:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    1016:	00 84       	ldd	r0, Z+8	; 0x08
    1018:	f1 85       	ldd	r31, Z+9	; 0x09
    101a:	e0 2d       	mov	r30, r0
    101c:	60 e5       	ldi	r22, 0x50	; 80
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	80 ea       	ldi	r24, 0xA0	; 160
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	19 95       	eicall
    1026:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
	screen->drawRectangle(154,74);
    102a:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    102e:	02 84       	ldd	r0, Z+10	; 0x0a
    1030:	f3 85       	ldd	r31, Z+11	; 0x0b
    1032:	e0 2d       	mov	r30, r0
    1034:	6a e4       	ldi	r22, 0x4A	; 74
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	8a e9       	ldi	r24, 0x9A	; 154
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	19 95       	eicall
    103e:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
	screen->setCursor(3,160);
    1042:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    1046:	00 84       	ldd	r0, Z+8	; 0x08
    1048:	f1 85       	ldd	r31, Z+9	; 0x09
    104a:	e0 2d       	mov	r30, r0
    104c:	60 ea       	ldi	r22, 0xA0	; 160
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	83 e0       	ldi	r24, 0x03	; 3
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	19 95       	eicall
    1056:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
	screen->drawRectangle(311,74);
    105a:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    105e:	02 84       	ldd	r0, Z+10	; 0x0a
    1060:	f3 85       	ldd	r31, Z+11	; 0x0b
    1062:	e0 2d       	mov	r30, r0
    1064:	6a e4       	ldi	r22, 0x4A	; 74
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	87 e3       	ldi	r24, 0x37	; 55
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	19 95       	eicall
    106e:	a0 91 03 02 	lds	r26, 0x0203	; 0x800203 <currentState>
	screen->setCursorColor(GUIstateColors[FONT_COLOR][currentState]);
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	aa 0f       	add	r26, r26
    1076:	bb 1f       	adc	r27, r27
    1078:	a7 55       	subi	r26, 0x57	; 87
    107a:	bd 4f       	sbci	r27, 0xFD	; 253
    107c:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
    1080:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    1084:	06 80       	ldd	r0, Z+6	; 0x06
    1086:	f7 81       	ldd	r31, Z+7	; 0x07
    1088:	e0 2d       	mov	r30, r0
    108a:	8d 91       	ld	r24, X+
    108c:	9c 91       	ld	r25, X
    108e:	19 95       	eicall
    1090:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
		switch(currentState)
		{
			case ALL:
			
			drawGrid();
			screen->setCursor(35,20);
    1094:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    1098:	00 84       	ldd	r0, Z+8	; 0x08
    109a:	f1 85       	ldd	r31, Z+9	; 0x09
    109c:	e0 2d       	mov	r30, r0
    109e:	64 e1       	ldi	r22, 0x14	; 20
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	83 e2       	ldi	r24, 0x23	; 35
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	19 95       	eicall
    10a8:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			screen->printString("Date");
    10ac:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    10b0:	04 84       	ldd	r0, Z+12	; 0x0c
    10b2:	f5 85       	ldd	r31, Z+13	; 0x0d
    10b4:	e0 2d       	mov	r30, r0
    10b6:	84 e0       	ldi	r24, 0x04	; 4
    10b8:	92 e0       	ldi	r25, 0x02	; 2
    10ba:	19 95       	eicall
    10bc:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			screen->setCursor(35,50);
    10c0:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    10c4:	00 84       	ldd	r0, Z+8	; 0x08
    10c6:	f1 85       	ldd	r31, Z+9	; 0x09
    10c8:	e0 2d       	mov	r30, r0
    10ca:	62 e3       	ldi	r22, 0x32	; 50
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	83 e2       	ldi	r24, 0x23	; 35
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	19 95       	eicall
    10d4:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			screen->printString("14-05-20");
    10d8:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    10dc:	04 84       	ldd	r0, Z+12	; 0x0c
    10de:	f5 85       	ldd	r31, Z+13	; 0x0d
    10e0:	e0 2d       	mov	r30, r0
    10e2:	89 e0       	ldi	r24, 0x09	; 9
    10e4:	92 e0       	ldi	r25, 0x02	; 2
    10e6:	19 95       	eicall
    10e8:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			
			screen->setCursor(210,20);
    10ec:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    10f0:	00 84       	ldd	r0, Z+8	; 0x08
    10f2:	f1 85       	ldd	r31, Z+9	; 0x09
    10f4:	e0 2d       	mov	r30, r0
    10f6:	64 e1       	ldi	r22, 0x14	; 20
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	82 ed       	ldi	r24, 0xD2	; 210
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	19 95       	eicall
    1100:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			screen->printString("km/t");
    1104:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    1108:	04 84       	ldd	r0, Z+12	; 0x0c
    110a:	f5 85       	ldd	r31, Z+13	; 0x0d
    110c:	e0 2d       	mov	r30, r0
    110e:	82 e1       	ldi	r24, 0x12	; 18
    1110:	92 e0       	ldi	r25, 0x02	; 2
    1112:	19 95       	eicall
    1114:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			screen->setCursor(210,50);
    1118:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    111c:	00 84       	ldd	r0, Z+8	; 0x08
    111e:	f1 85       	ldd	r31, Z+9	; 0x09
    1120:	e0 2d       	mov	r30, r0
    1122:	62 e3       	ldi	r22, 0x32	; 50
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	82 ed       	ldi	r24, 0xD2	; 210
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	19 95       	eicall
    112c:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			screen->printFloat(25.87);
    1130:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    1134:	00 88       	ldd	r0, Z+16	; 0x10
    1136:	f1 89       	ldd	r31, Z+17	; 0x11
    1138:	e0 2d       	mov	r30, r0
    113a:	63 ec       	ldi	r22, 0xC3	; 195
    113c:	75 ef       	ldi	r23, 0xF5	; 245
    113e:	8e ec       	ldi	r24, 0xCE	; 206
    1140:	91 e4       	ldi	r25, 0x41	; 65
    1142:	19 95       	eicall
    1144:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			
			screen->setCursor(50,100);
    1148:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    114c:	00 84       	ldd	r0, Z+8	; 0x08
    114e:	f1 85       	ldd	r31, Z+9	; 0x09
    1150:	e0 2d       	mov	r30, r0
    1152:	64 e6       	ldi	r22, 0x64	; 100
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	82 e3       	ldi	r24, 0x32	; 50
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	19 95       	eicall
    115c:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			screen->printString("Temp.");
    1160:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    1164:	04 84       	ldd	r0, Z+12	; 0x0c
    1166:	f5 85       	ldd	r31, Z+13	; 0x0d
    1168:	e0 2d       	mov	r30, r0
    116a:	87 e1       	ldi	r24, 0x17	; 23
    116c:	92 e0       	ldi	r25, 0x02	; 2
    116e:	19 95       	eicall
    1170:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			screen->setCursor(60,130);
    1174:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    1178:	00 84       	ldd	r0, Z+8	; 0x08
    117a:	f1 85       	ldd	r31, Z+9	; 0x09
    117c:	e0 2d       	mov	r30, r0
    117e:	62 e8       	ldi	r22, 0x82	; 130
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	8c e3       	ldi	r24, 0x3C	; 60
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	19 95       	eicall
    1188:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			screen->printInteger(28);
    118c:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    1190:	06 84       	ldd	r0, Z+14	; 0x0e
    1192:	f7 85       	ldd	r31, Z+15	; 0x0f
    1194:	e0 2d       	mov	r30, r0
    1196:	8c e1       	ldi	r24, 0x1C	; 28
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	19 95       	eicall
    119c:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			
			
			screen->setCursor(210,110);
    11a0:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    11a4:	00 84       	ldd	r0, Z+8	; 0x08
    11a6:	f1 85       	ldd	r31, Z+9	; 0x09
    11a8:	e0 2d       	mov	r30, r0
    11aa:	6e e6       	ldi	r22, 0x6E	; 110
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	82 ed       	ldi	r24, 0xD2	; 210
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	19 95       	eicall
    11b4:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			screen->printString("Steep");
    11b8:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    11bc:	04 84       	ldd	r0, Z+12	; 0x0c
    11be:	f5 85       	ldd	r31, Z+13	; 0x0d
    11c0:	e0 2d       	mov	r30, r0
    11c2:	8d e1       	ldi	r24, 0x1D	; 29
    11c4:	92 e0       	ldi	r25, 0x02	; 2
    11c6:	19 95       	eicall
    11c8:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			
			screen->setCursor(100,175);
    11cc:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    11d0:	00 84       	ldd	r0, Z+8	; 0x08
    11d2:	f1 85       	ldd	r31, Z+9	; 0x09
    11d4:	e0 2d       	mov	r30, r0
    11d6:	6f ea       	ldi	r22, 0xAF	; 175
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	84 e6       	ldi	r24, 0x64	; 100
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	19 95       	eicall
    11e0:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			screen->printString("Km count");
    11e4:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    11e8:	04 84       	ldd	r0, Z+12	; 0x0c
    11ea:	f5 85       	ldd	r31, Z+13	; 0x0d
    11ec:	e0 2d       	mov	r30, r0
    11ee:	83 e2       	ldi	r24, 0x23	; 35
    11f0:	92 e0       	ldi	r25, 0x02	; 2
    11f2:	19 95       	eicall
    11f4:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			screen->setCursor(130,205);
    11f8:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    11fc:	00 84       	ldd	r0, Z+8	; 0x08
    11fe:	f1 85       	ldd	r31, Z+9	; 0x09
    1200:	e0 2d       	mov	r30, r0
    1202:	6d ec       	ldi	r22, 0xCD	; 205
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	82 e8       	ldi	r24, 0x82	; 130
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	19 95       	eicall
    120c:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			screen->printInteger(100);
    1210:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    1214:	06 84       	ldd	r0, Z+14	; 0x0e
    1216:	f7 85       	ldd	r31, Z+15	; 0x0f
    1218:	e0 2d       	mov	r30, r0
    121a:	84 e6       	ldi	r24, 0x64	; 100
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	19 95       	eicall
    1220:	5e c0       	rjmp	.+188    	; 0x12de <main+0x5f4>
    1222:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			break;
			
			case MILESTONE:
			screen->setCursor(80,120);
    1226:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    122a:	00 84       	ldd	r0, Z+8	; 0x08
    122c:	f1 85       	ldd	r31, Z+9	; 0x09
    122e:	e0 2d       	mov	r30, r0
    1230:	68 e7       	ldi	r22, 0x78	; 120
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	80 e5       	ldi	r24, 0x50	; 80
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	19 95       	eicall
    123a:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			screen->printString(" MILESTONE  ");
    123e:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    1242:	04 84       	ldd	r0, Z+12	; 0x0c
    1244:	f5 85       	ldd	r31, Z+13	; 0x0d
    1246:	e0 2d       	mov	r30, r0
    1248:	8c e2       	ldi	r24, 0x2C	; 44
    124a:	92 e0       	ldi	r25, 0x02	; 2
    124c:	19 95       	eicall
    124e:	47 c0       	rjmp	.+142    	; 0x12de <main+0x5f4>
    1250:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			break;
			
			case TEMPERATURE:
			screen->setCursor(80,120);
    1254:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    1258:	00 84       	ldd	r0, Z+8	; 0x08
    125a:	f1 85       	ldd	r31, Z+9	; 0x09
    125c:	e0 2d       	mov	r30, r0
    125e:	68 e7       	ldi	r22, 0x78	; 120
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	80 e5       	ldi	r24, 0x50	; 80
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	19 95       	eicall
    1268:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			screen->printString("   TEMP     ");
    126c:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    1270:	04 84       	ldd	r0, Z+12	; 0x0c
    1272:	f5 85       	ldd	r31, Z+13	; 0x0d
    1274:	e0 2d       	mov	r30, r0
    1276:	89 e3       	ldi	r24, 0x39	; 57
    1278:	92 e0       	ldi	r25, 0x02	; 2
    127a:	19 95       	eicall
    127c:	30 c0       	rjmp	.+96     	; 0x12de <main+0x5f4>
    127e:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			break;
			
			case VELOCITY:
			screen->setCursor(80,120);
    1282:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    1286:	00 84       	ldd	r0, Z+8	; 0x08
    1288:	f1 85       	ldd	r31, Z+9	; 0x09
    128a:	e0 2d       	mov	r30, r0
    128c:	68 e7       	ldi	r22, 0x78	; 120
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	80 e5       	ldi	r24, 0x50	; 80
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	19 95       	eicall
    1296:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			screen->printString("   VELO     ");
    129a:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    129e:	04 84       	ldd	r0, Z+12	; 0x0c
    12a0:	f5 85       	ldd	r31, Z+13	; 0x0d
    12a2:	e0 2d       	mov	r30, r0
    12a4:	86 e4       	ldi	r24, 0x46	; 70
    12a6:	92 e0       	ldi	r25, 0x02	; 2
    12a8:	19 95       	eicall
    12aa:	19 c0       	rjmp	.+50     	; 0x12de <main+0x5f4>
    12ac:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			break;
			
			case STEEPNESS:
			screen->setCursor(80,120);
    12b0:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    12b4:	00 84       	ldd	r0, Z+8	; 0x08
    12b6:	f1 85       	ldd	r31, Z+9	; 0x09
    12b8:	e0 2d       	mov	r30, r0
    12ba:	68 e7       	ldi	r22, 0x78	; 120
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	80 e5       	ldi	r24, 0x50	; 80
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	19 95       	eicall
    12c4:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <screen>
			screen->printString("   STEP     ");
    12c8:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <screen+0x1>
    12cc:	04 84       	ldd	r0, Z+12	; 0x0c
    12ce:	f5 85       	ldd	r31, Z+13	; 0x0d
    12d0:	e0 2d       	mov	r30, r0
    12d2:	83 e5       	ldi	r24, 0x53	; 83
    12d4:	92 e0       	ldi	r25, 0x02	; 2
    12d6:	19 95       	eicall
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <main+0x5f4>
    12da:	10 93 03 02 	sts	0x0203, r17	; 0x800203 <currentState>
			break;
			
			
			default:
			currentState = TEMPERATURE;
    12de:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <currentState>
			break;
		}
		previousState = currentState;
    12e2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <previousState>
    12e6:	9f ef       	ldi	r25, 0xFF	; 255
    12e8:	29 e6       	ldi	r18, 0x69	; 105
    12ea:	48 e1       	ldi	r20, 0x18	; 24
    12ec:	91 50       	subi	r25, 0x01	; 1
    12ee:	20 40       	sbci	r18, 0x00	; 0
    12f0:	40 40       	sbci	r20, 0x00	; 0
    12f2:	e1 f7       	brne	.-8      	; 0x12ec <main+0x602>
    12f4:	00 c0       	rjmp	.+0      	; 0x12f6 <main+0x60c>
    12f6:	00 00       	nop
    12f8:	4d cd       	rjmp	.-1382   	; 0xd94 <main+0xaa>

000012fa <__vector_4>:
    12fa:	1f 92       	push	r1
	
	return 0;
}

ISR(INT3_vect) //PE4
{
    12fc:	0f 92       	push	r0
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	0f 92       	push	r0
    1302:	11 24       	eor	r1, r1
    1304:	0b b6       	in	r0, 0x3b	; 59
    1306:	0f 92       	push	r0
    1308:	2f 93       	push	r18
    130a:	3f 93       	push	r19
    130c:	4f 93       	push	r20
    130e:	5f 93       	push	r21
    1310:	6f 93       	push	r22
    1312:	7f 93       	push	r23
    1314:	8f 93       	push	r24
    1316:	9f 93       	push	r25
    1318:	af 93       	push	r26
    131a:	bf 93       	push	r27
    131c:	ef 93       	push	r30
    131e:	ff 93       	push	r31
	speedSensor->updateMilestoneCount();
    1320:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <speedSensor>
    1324:	f0 91 b4 02 	lds	r31, 0x02B4	; 0x8002b4 <speedSensor+0x1>
    1328:	02 80       	ldd	r0, Z+2	; 0x02
    132a:	f3 81       	ldd	r31, Z+3	; 0x03
    132c:	e0 2d       	mov	r30, r0
    132e:	19 95       	eicall
	revolutionsForCalc++; //Counts up the revolutions for speed calculation.
    1330:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <revolutionsForCalc>
    1334:	8f 5f       	subi	r24, 0xFF	; 255
    1336:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <revolutionsForCalc>
}
    133a:	ff 91       	pop	r31
    133c:	ef 91       	pop	r30
    133e:	bf 91       	pop	r27
    1340:	af 91       	pop	r26
    1342:	9f 91       	pop	r25
    1344:	8f 91       	pop	r24
    1346:	7f 91       	pop	r23
    1348:	6f 91       	pop	r22
    134a:	5f 91       	pop	r21
    134c:	4f 91       	pop	r20
    134e:	3f 91       	pop	r19
    1350:	2f 91       	pop	r18
    1352:	0f 90       	pop	r0
    1354:	0b be       	out	0x3b, r0	; 59
    1356:	0f 90       	pop	r0
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	0f 90       	pop	r0
    135c:	1f 90       	pop	r1
    135e:	18 95       	reti

00001360 <__vector_15>:


//TIMER 2 interrupts every second to measure how many revolutions the wheel has made.
ISR(TIMER2_OVF_vect)
{
    1360:	1f 92       	push	r1
    1362:	0f 92       	push	r0
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	0f 92       	push	r0
    1368:	11 24       	eor	r1, r1
    136a:	0b b6       	in	r0, 0x3b	; 59
    136c:	0f 92       	push	r0
    136e:	2f 93       	push	r18
    1370:	3f 93       	push	r19
    1372:	4f 93       	push	r20
    1374:	5f 93       	push	r21
    1376:	6f 93       	push	r22
    1378:	7f 93       	push	r23
    137a:	8f 93       	push	r24
    137c:	9f 93       	push	r25
    137e:	af 93       	push	r26
    1380:	bf 93       	push	r27
    1382:	ef 93       	push	r30
    1384:	ff 93       	push	r31
	// After 62500 interrupts overflows the timer counts another timer to get other times.
	// Because of CPU clock and prescaling 8bit timer overflows every 16.063 us. Delay=prescaler*(OCRn+1)/fcpu
	timerOverflows++;
    1386:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <timerOverflows>
    138a:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <timerOverflows+0x1>
    138e:	01 96       	adiw	r24, 0x01	; 1
    1390:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <timerOverflows+0x1>
    1394:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <timerOverflows>
	
	if (timerOverflows == 62500)	// 16.063us*62500=1.004s
    1398:	84 32       	cpi	r24, 0x24	; 36
    139a:	94 4f       	sbci	r25, 0xF4	; 244
    139c:	b1 f4       	brne	.+44     	; 0x13ca <__vector_15+0x6a>
	{
		timerOverflows = 0; //reset timer
    139e:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <timerOverflows+0x1>
    13a2:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <timerOverflows>
		PORTB |=(1<<PB5); //debug
    13a6:	2d 9a       	sbi	0x05, 5	; 5
		
		speedSensor->updateRevolutionCount(revolutionsForCalc);
    13a8:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <speedSensor>
    13ac:	f0 91 b4 02 	lds	r31, 0x02B4	; 0x8002b4 <speedSensor+0x1>
    13b0:	01 90       	ld	r0, Z+
    13b2:	f0 81       	ld	r31, Z
    13b4:	e0 2d       	mov	r30, r0
    13b6:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <revolutionsForCalc>
    13ba:	19 95       	eicall
		revolutionsForCalc = 0; //Resetting after getting value for KHM calculation
    13bc:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <revolutionsForCalc>
		timerCount=0; //Resetting before getting value.
		checkpointCnt++;
    13c0:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <checkpointCnt>
    13c4:	8f 5f       	subi	r24, 0xFF	; 255
    13c6:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <checkpointCnt>
	}
	
	if (checkpointCnt>60) //Save milestone to EEPROM every minute
    13ca:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <checkpointCnt>
    13ce:	8d 33       	cpi	r24, 0x3D	; 61
    13d0:	50 f0       	brcs	.+20     	; 0x13e6 <__vector_15+0x86>
	{
		checkpointCnt = 0;
    13d2:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <checkpointCnt>
		speedSensor->saveMilestoneCount();
    13d6:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <speedSensor>
    13da:	f0 91 b4 02 	lds	r31, 0x02B4	; 0x8002b4 <speedSensor+0x1>
    13de:	04 80       	ldd	r0, Z+4	; 0x04
    13e0:	f5 81       	ldd	r31, Z+5	; 0x05
    13e2:	e0 2d       	mov	r30, r0
    13e4:	19 95       	eicall
	}

}
    13e6:	ff 91       	pop	r31
    13e8:	ef 91       	pop	r30
    13ea:	bf 91       	pop	r27
    13ec:	af 91       	pop	r26
    13ee:	9f 91       	pop	r25
    13f0:	8f 91       	pop	r24
    13f2:	7f 91       	pop	r23
    13f4:	6f 91       	pop	r22
    13f6:	5f 91       	pop	r21
    13f8:	4f 91       	pop	r20
    13fa:	3f 91       	pop	r19
    13fc:	2f 91       	pop	r18
    13fe:	0f 90       	pop	r0
    1400:	0b be       	out	0x3b, r0	; 59
    1402:	0f 90       	pop	r0
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	0f 90       	pop	r0
    1408:	1f 90       	pop	r1
    140a:	18 95       	reti

0000140c <__subsf3>:
    140c:	50 58       	subi	r21, 0x80	; 128

0000140e <__addsf3>:
    140e:	bb 27       	eor	r27, r27
    1410:	aa 27       	eor	r26, r26
    1412:	0e d0       	rcall	.+28     	; 0x1430 <__addsf3x>
    1414:	70 c1       	rjmp	.+736    	; 0x16f6 <__fp_round>
    1416:	61 d1       	rcall	.+706    	; 0x16da <__fp_pscA>
    1418:	30 f0       	brcs	.+12     	; 0x1426 <__addsf3+0x18>
    141a:	66 d1       	rcall	.+716    	; 0x16e8 <__fp_pscB>
    141c:	20 f0       	brcs	.+8      	; 0x1426 <__addsf3+0x18>
    141e:	31 f4       	brne	.+12     	; 0x142c <__addsf3+0x1e>
    1420:	9f 3f       	cpi	r25, 0xFF	; 255
    1422:	11 f4       	brne	.+4      	; 0x1428 <__addsf3+0x1a>
    1424:	1e f4       	brtc	.+6      	; 0x142c <__addsf3+0x1e>
    1426:	56 c1       	rjmp	.+684    	; 0x16d4 <__fp_nan>
    1428:	0e f4       	brtc	.+2      	; 0x142c <__addsf3+0x1e>
    142a:	e0 95       	com	r30
    142c:	e7 fb       	bst	r30, 7
    142e:	4c c1       	rjmp	.+664    	; 0x16c8 <__fp_inf>

00001430 <__addsf3x>:
    1430:	e9 2f       	mov	r30, r25
    1432:	72 d1       	rcall	.+740    	; 0x1718 <__fp_split3>
    1434:	80 f3       	brcs	.-32     	; 0x1416 <__addsf3+0x8>
    1436:	ba 17       	cp	r27, r26
    1438:	62 07       	cpc	r22, r18
    143a:	73 07       	cpc	r23, r19
    143c:	84 07       	cpc	r24, r20
    143e:	95 07       	cpc	r25, r21
    1440:	18 f0       	brcs	.+6      	; 0x1448 <__addsf3x+0x18>
    1442:	71 f4       	brne	.+28     	; 0x1460 <__addsf3x+0x30>
    1444:	9e f5       	brtc	.+102    	; 0x14ac <__addsf3x+0x7c>
    1446:	8a c1       	rjmp	.+788    	; 0x175c <__fp_zero>
    1448:	0e f4       	brtc	.+2      	; 0x144c <__addsf3x+0x1c>
    144a:	e0 95       	com	r30
    144c:	0b 2e       	mov	r0, r27
    144e:	ba 2f       	mov	r27, r26
    1450:	a0 2d       	mov	r26, r0
    1452:	0b 01       	movw	r0, r22
    1454:	b9 01       	movw	r22, r18
    1456:	90 01       	movw	r18, r0
    1458:	0c 01       	movw	r0, r24
    145a:	ca 01       	movw	r24, r20
    145c:	a0 01       	movw	r20, r0
    145e:	11 24       	eor	r1, r1
    1460:	ff 27       	eor	r31, r31
    1462:	59 1b       	sub	r21, r25
    1464:	99 f0       	breq	.+38     	; 0x148c <__addsf3x+0x5c>
    1466:	59 3f       	cpi	r21, 0xF9	; 249
    1468:	50 f4       	brcc	.+20     	; 0x147e <__addsf3x+0x4e>
    146a:	50 3e       	cpi	r21, 0xE0	; 224
    146c:	68 f1       	brcs	.+90     	; 0x14c8 <__addsf3x+0x98>
    146e:	1a 16       	cp	r1, r26
    1470:	f0 40       	sbci	r31, 0x00	; 0
    1472:	a2 2f       	mov	r26, r18
    1474:	23 2f       	mov	r18, r19
    1476:	34 2f       	mov	r19, r20
    1478:	44 27       	eor	r20, r20
    147a:	58 5f       	subi	r21, 0xF8	; 248
    147c:	f3 cf       	rjmp	.-26     	; 0x1464 <__addsf3x+0x34>
    147e:	46 95       	lsr	r20
    1480:	37 95       	ror	r19
    1482:	27 95       	ror	r18
    1484:	a7 95       	ror	r26
    1486:	f0 40       	sbci	r31, 0x00	; 0
    1488:	53 95       	inc	r21
    148a:	c9 f7       	brne	.-14     	; 0x147e <__addsf3x+0x4e>
    148c:	7e f4       	brtc	.+30     	; 0x14ac <__addsf3x+0x7c>
    148e:	1f 16       	cp	r1, r31
    1490:	ba 0b       	sbc	r27, r26
    1492:	62 0b       	sbc	r22, r18
    1494:	73 0b       	sbc	r23, r19
    1496:	84 0b       	sbc	r24, r20
    1498:	ba f0       	brmi	.+46     	; 0x14c8 <__addsf3x+0x98>
    149a:	91 50       	subi	r25, 0x01	; 1
    149c:	a1 f0       	breq	.+40     	; 0x14c6 <__addsf3x+0x96>
    149e:	ff 0f       	add	r31, r31
    14a0:	bb 1f       	adc	r27, r27
    14a2:	66 1f       	adc	r22, r22
    14a4:	77 1f       	adc	r23, r23
    14a6:	88 1f       	adc	r24, r24
    14a8:	c2 f7       	brpl	.-16     	; 0x149a <__addsf3x+0x6a>
    14aa:	0e c0       	rjmp	.+28     	; 0x14c8 <__addsf3x+0x98>
    14ac:	ba 0f       	add	r27, r26
    14ae:	62 1f       	adc	r22, r18
    14b0:	73 1f       	adc	r23, r19
    14b2:	84 1f       	adc	r24, r20
    14b4:	48 f4       	brcc	.+18     	; 0x14c8 <__addsf3x+0x98>
    14b6:	87 95       	ror	r24
    14b8:	77 95       	ror	r23
    14ba:	67 95       	ror	r22
    14bc:	b7 95       	ror	r27
    14be:	f7 95       	ror	r31
    14c0:	9e 3f       	cpi	r25, 0xFE	; 254
    14c2:	08 f0       	brcs	.+2      	; 0x14c6 <__addsf3x+0x96>
    14c4:	b3 cf       	rjmp	.-154    	; 0x142c <__addsf3+0x1e>
    14c6:	93 95       	inc	r25
    14c8:	88 0f       	add	r24, r24
    14ca:	08 f0       	brcs	.+2      	; 0x14ce <__addsf3x+0x9e>
    14cc:	99 27       	eor	r25, r25
    14ce:	ee 0f       	add	r30, r30
    14d0:	97 95       	ror	r25
    14d2:	87 95       	ror	r24
    14d4:	08 95       	ret

000014d6 <__cmpsf2>:
    14d6:	d4 d0       	rcall	.+424    	; 0x1680 <__fp_cmp>
    14d8:	08 f4       	brcc	.+2      	; 0x14dc <__cmpsf2+0x6>
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	08 95       	ret

000014de <__divsf3>:
    14de:	0c d0       	rcall	.+24     	; 0x14f8 <__divsf3x>
    14e0:	0a c1       	rjmp	.+532    	; 0x16f6 <__fp_round>
    14e2:	02 d1       	rcall	.+516    	; 0x16e8 <__fp_pscB>
    14e4:	40 f0       	brcs	.+16     	; 0x14f6 <__divsf3+0x18>
    14e6:	f9 d0       	rcall	.+498    	; 0x16da <__fp_pscA>
    14e8:	30 f0       	brcs	.+12     	; 0x14f6 <__divsf3+0x18>
    14ea:	21 f4       	brne	.+8      	; 0x14f4 <__divsf3+0x16>
    14ec:	5f 3f       	cpi	r21, 0xFF	; 255
    14ee:	19 f0       	breq	.+6      	; 0x14f6 <__divsf3+0x18>
    14f0:	eb c0       	rjmp	.+470    	; 0x16c8 <__fp_inf>
    14f2:	51 11       	cpse	r21, r1
    14f4:	34 c1       	rjmp	.+616    	; 0x175e <__fp_szero>
    14f6:	ee c0       	rjmp	.+476    	; 0x16d4 <__fp_nan>

000014f8 <__divsf3x>:
    14f8:	0f d1       	rcall	.+542    	; 0x1718 <__fp_split3>
    14fa:	98 f3       	brcs	.-26     	; 0x14e2 <__divsf3+0x4>

000014fc <__divsf3_pse>:
    14fc:	99 23       	and	r25, r25
    14fe:	c9 f3       	breq	.-14     	; 0x14f2 <__divsf3+0x14>
    1500:	55 23       	and	r21, r21
    1502:	b1 f3       	breq	.-20     	; 0x14f0 <__divsf3+0x12>
    1504:	95 1b       	sub	r25, r21
    1506:	55 0b       	sbc	r21, r21
    1508:	bb 27       	eor	r27, r27
    150a:	aa 27       	eor	r26, r26
    150c:	62 17       	cp	r22, r18
    150e:	73 07       	cpc	r23, r19
    1510:	84 07       	cpc	r24, r20
    1512:	38 f0       	brcs	.+14     	; 0x1522 <__divsf3_pse+0x26>
    1514:	9f 5f       	subi	r25, 0xFF	; 255
    1516:	5f 4f       	sbci	r21, 0xFF	; 255
    1518:	22 0f       	add	r18, r18
    151a:	33 1f       	adc	r19, r19
    151c:	44 1f       	adc	r20, r20
    151e:	aa 1f       	adc	r26, r26
    1520:	a9 f3       	breq	.-22     	; 0x150c <__divsf3_pse+0x10>
    1522:	33 d0       	rcall	.+102    	; 0x158a <__divsf3_pse+0x8e>
    1524:	0e 2e       	mov	r0, r30
    1526:	3a f0       	brmi	.+14     	; 0x1536 <__divsf3_pse+0x3a>
    1528:	e0 e8       	ldi	r30, 0x80	; 128
    152a:	30 d0       	rcall	.+96     	; 0x158c <__divsf3_pse+0x90>
    152c:	91 50       	subi	r25, 0x01	; 1
    152e:	50 40       	sbci	r21, 0x00	; 0
    1530:	e6 95       	lsr	r30
    1532:	00 1c       	adc	r0, r0
    1534:	ca f7       	brpl	.-14     	; 0x1528 <__divsf3_pse+0x2c>
    1536:	29 d0       	rcall	.+82     	; 0x158a <__divsf3_pse+0x8e>
    1538:	fe 2f       	mov	r31, r30
    153a:	27 d0       	rcall	.+78     	; 0x158a <__divsf3_pse+0x8e>
    153c:	66 0f       	add	r22, r22
    153e:	77 1f       	adc	r23, r23
    1540:	88 1f       	adc	r24, r24
    1542:	bb 1f       	adc	r27, r27
    1544:	26 17       	cp	r18, r22
    1546:	37 07       	cpc	r19, r23
    1548:	48 07       	cpc	r20, r24
    154a:	ab 07       	cpc	r26, r27
    154c:	b0 e8       	ldi	r27, 0x80	; 128
    154e:	09 f0       	breq	.+2      	; 0x1552 <__divsf3_pse+0x56>
    1550:	bb 0b       	sbc	r27, r27
    1552:	80 2d       	mov	r24, r0
    1554:	bf 01       	movw	r22, r30
    1556:	ff 27       	eor	r31, r31
    1558:	93 58       	subi	r25, 0x83	; 131
    155a:	5f 4f       	sbci	r21, 0xFF	; 255
    155c:	2a f0       	brmi	.+10     	; 0x1568 <__divsf3_pse+0x6c>
    155e:	9e 3f       	cpi	r25, 0xFE	; 254
    1560:	51 05       	cpc	r21, r1
    1562:	68 f0       	brcs	.+26     	; 0x157e <__divsf3_pse+0x82>
    1564:	b1 c0       	rjmp	.+354    	; 0x16c8 <__fp_inf>
    1566:	fb c0       	rjmp	.+502    	; 0x175e <__fp_szero>
    1568:	5f 3f       	cpi	r21, 0xFF	; 255
    156a:	ec f3       	brlt	.-6      	; 0x1566 <__divsf3_pse+0x6a>
    156c:	98 3e       	cpi	r25, 0xE8	; 232
    156e:	dc f3       	brlt	.-10     	; 0x1566 <__divsf3_pse+0x6a>
    1570:	86 95       	lsr	r24
    1572:	77 95       	ror	r23
    1574:	67 95       	ror	r22
    1576:	b7 95       	ror	r27
    1578:	f7 95       	ror	r31
    157a:	9f 5f       	subi	r25, 0xFF	; 255
    157c:	c9 f7       	brne	.-14     	; 0x1570 <__divsf3_pse+0x74>
    157e:	88 0f       	add	r24, r24
    1580:	91 1d       	adc	r25, r1
    1582:	96 95       	lsr	r25
    1584:	87 95       	ror	r24
    1586:	97 f9       	bld	r25, 7
    1588:	08 95       	ret
    158a:	e1 e0       	ldi	r30, 0x01	; 1
    158c:	66 0f       	add	r22, r22
    158e:	77 1f       	adc	r23, r23
    1590:	88 1f       	adc	r24, r24
    1592:	bb 1f       	adc	r27, r27
    1594:	62 17       	cp	r22, r18
    1596:	73 07       	cpc	r23, r19
    1598:	84 07       	cpc	r24, r20
    159a:	ba 07       	cpc	r27, r26
    159c:	20 f0       	brcs	.+8      	; 0x15a6 <__divsf3_pse+0xaa>
    159e:	62 1b       	sub	r22, r18
    15a0:	73 0b       	sbc	r23, r19
    15a2:	84 0b       	sbc	r24, r20
    15a4:	ba 0b       	sbc	r27, r26
    15a6:	ee 1f       	adc	r30, r30
    15a8:	88 f7       	brcc	.-30     	; 0x158c <__divsf3_pse+0x90>
    15aa:	e0 95       	com	r30
    15ac:	08 95       	ret

000015ae <__fixunssfsi>:
    15ae:	bc d0       	rcall	.+376    	; 0x1728 <__fp_splitA>
    15b0:	88 f0       	brcs	.+34     	; 0x15d4 <__fixunssfsi+0x26>
    15b2:	9f 57       	subi	r25, 0x7F	; 127
    15b4:	90 f0       	brcs	.+36     	; 0x15da <__fixunssfsi+0x2c>
    15b6:	b9 2f       	mov	r27, r25
    15b8:	99 27       	eor	r25, r25
    15ba:	b7 51       	subi	r27, 0x17	; 23
    15bc:	a0 f0       	brcs	.+40     	; 0x15e6 <__fixunssfsi+0x38>
    15be:	d1 f0       	breq	.+52     	; 0x15f4 <__fixunssfsi+0x46>
    15c0:	66 0f       	add	r22, r22
    15c2:	77 1f       	adc	r23, r23
    15c4:	88 1f       	adc	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	1a f0       	brmi	.+6      	; 0x15d0 <__fixunssfsi+0x22>
    15ca:	ba 95       	dec	r27
    15cc:	c9 f7       	brne	.-14     	; 0x15c0 <__fixunssfsi+0x12>
    15ce:	12 c0       	rjmp	.+36     	; 0x15f4 <__fixunssfsi+0x46>
    15d0:	b1 30       	cpi	r27, 0x01	; 1
    15d2:	81 f0       	breq	.+32     	; 0x15f4 <__fixunssfsi+0x46>
    15d4:	c3 d0       	rcall	.+390    	; 0x175c <__fp_zero>
    15d6:	b1 e0       	ldi	r27, 0x01	; 1
    15d8:	08 95       	ret
    15da:	c0 c0       	rjmp	.+384    	; 0x175c <__fp_zero>
    15dc:	67 2f       	mov	r22, r23
    15de:	78 2f       	mov	r23, r24
    15e0:	88 27       	eor	r24, r24
    15e2:	b8 5f       	subi	r27, 0xF8	; 248
    15e4:	39 f0       	breq	.+14     	; 0x15f4 <__fixunssfsi+0x46>
    15e6:	b9 3f       	cpi	r27, 0xF9	; 249
    15e8:	cc f3       	brlt	.-14     	; 0x15dc <__fixunssfsi+0x2e>
    15ea:	86 95       	lsr	r24
    15ec:	77 95       	ror	r23
    15ee:	67 95       	ror	r22
    15f0:	b3 95       	inc	r27
    15f2:	d9 f7       	brne	.-10     	; 0x15ea <__fixunssfsi+0x3c>
    15f4:	3e f4       	brtc	.+14     	; 0x1604 <__fixunssfsi+0x56>
    15f6:	90 95       	com	r25
    15f8:	80 95       	com	r24
    15fa:	70 95       	com	r23
    15fc:	61 95       	neg	r22
    15fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1600:	8f 4f       	sbci	r24, 0xFF	; 255
    1602:	9f 4f       	sbci	r25, 0xFF	; 255
    1604:	08 95       	ret

00001606 <__floatunsisf>:
    1606:	e8 94       	clt
    1608:	09 c0       	rjmp	.+18     	; 0x161c <__floatsisf+0x12>

0000160a <__floatsisf>:
    160a:	97 fb       	bst	r25, 7
    160c:	3e f4       	brtc	.+14     	; 0x161c <__floatsisf+0x12>
    160e:	90 95       	com	r25
    1610:	80 95       	com	r24
    1612:	70 95       	com	r23
    1614:	61 95       	neg	r22
    1616:	7f 4f       	sbci	r23, 0xFF	; 255
    1618:	8f 4f       	sbci	r24, 0xFF	; 255
    161a:	9f 4f       	sbci	r25, 0xFF	; 255
    161c:	99 23       	and	r25, r25
    161e:	a9 f0       	breq	.+42     	; 0x164a <__floatsisf+0x40>
    1620:	f9 2f       	mov	r31, r25
    1622:	96 e9       	ldi	r25, 0x96	; 150
    1624:	bb 27       	eor	r27, r27
    1626:	93 95       	inc	r25
    1628:	f6 95       	lsr	r31
    162a:	87 95       	ror	r24
    162c:	77 95       	ror	r23
    162e:	67 95       	ror	r22
    1630:	b7 95       	ror	r27
    1632:	f1 11       	cpse	r31, r1
    1634:	f8 cf       	rjmp	.-16     	; 0x1626 <__floatsisf+0x1c>
    1636:	fa f4       	brpl	.+62     	; 0x1676 <__floatsisf+0x6c>
    1638:	bb 0f       	add	r27, r27
    163a:	11 f4       	brne	.+4      	; 0x1640 <__floatsisf+0x36>
    163c:	60 ff       	sbrs	r22, 0
    163e:	1b c0       	rjmp	.+54     	; 0x1676 <__floatsisf+0x6c>
    1640:	6f 5f       	subi	r22, 0xFF	; 255
    1642:	7f 4f       	sbci	r23, 0xFF	; 255
    1644:	8f 4f       	sbci	r24, 0xFF	; 255
    1646:	9f 4f       	sbci	r25, 0xFF	; 255
    1648:	16 c0       	rjmp	.+44     	; 0x1676 <__floatsisf+0x6c>
    164a:	88 23       	and	r24, r24
    164c:	11 f0       	breq	.+4      	; 0x1652 <__floatsisf+0x48>
    164e:	96 e9       	ldi	r25, 0x96	; 150
    1650:	11 c0       	rjmp	.+34     	; 0x1674 <__floatsisf+0x6a>
    1652:	77 23       	and	r23, r23
    1654:	21 f0       	breq	.+8      	; 0x165e <__floatsisf+0x54>
    1656:	9e e8       	ldi	r25, 0x8E	; 142
    1658:	87 2f       	mov	r24, r23
    165a:	76 2f       	mov	r23, r22
    165c:	05 c0       	rjmp	.+10     	; 0x1668 <__floatsisf+0x5e>
    165e:	66 23       	and	r22, r22
    1660:	71 f0       	breq	.+28     	; 0x167e <__floatsisf+0x74>
    1662:	96 e8       	ldi	r25, 0x86	; 134
    1664:	86 2f       	mov	r24, r22
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	2a f0       	brmi	.+10     	; 0x1676 <__floatsisf+0x6c>
    166c:	9a 95       	dec	r25
    166e:	66 0f       	add	r22, r22
    1670:	77 1f       	adc	r23, r23
    1672:	88 1f       	adc	r24, r24
    1674:	da f7       	brpl	.-10     	; 0x166c <__floatsisf+0x62>
    1676:	88 0f       	add	r24, r24
    1678:	96 95       	lsr	r25
    167a:	87 95       	ror	r24
    167c:	97 f9       	bld	r25, 7
    167e:	08 95       	ret

00001680 <__fp_cmp>:
    1680:	99 0f       	add	r25, r25
    1682:	00 08       	sbc	r0, r0
    1684:	55 0f       	add	r21, r21
    1686:	aa 0b       	sbc	r26, r26
    1688:	e0 e8       	ldi	r30, 0x80	; 128
    168a:	fe ef       	ldi	r31, 0xFE	; 254
    168c:	16 16       	cp	r1, r22
    168e:	17 06       	cpc	r1, r23
    1690:	e8 07       	cpc	r30, r24
    1692:	f9 07       	cpc	r31, r25
    1694:	c0 f0       	brcs	.+48     	; 0x16c6 <__fp_cmp+0x46>
    1696:	12 16       	cp	r1, r18
    1698:	13 06       	cpc	r1, r19
    169a:	e4 07       	cpc	r30, r20
    169c:	f5 07       	cpc	r31, r21
    169e:	98 f0       	brcs	.+38     	; 0x16c6 <__fp_cmp+0x46>
    16a0:	62 1b       	sub	r22, r18
    16a2:	73 0b       	sbc	r23, r19
    16a4:	84 0b       	sbc	r24, r20
    16a6:	95 0b       	sbc	r25, r21
    16a8:	39 f4       	brne	.+14     	; 0x16b8 <__fp_cmp+0x38>
    16aa:	0a 26       	eor	r0, r26
    16ac:	61 f0       	breq	.+24     	; 0x16c6 <__fp_cmp+0x46>
    16ae:	23 2b       	or	r18, r19
    16b0:	24 2b       	or	r18, r20
    16b2:	25 2b       	or	r18, r21
    16b4:	21 f4       	brne	.+8      	; 0x16be <__fp_cmp+0x3e>
    16b6:	08 95       	ret
    16b8:	0a 26       	eor	r0, r26
    16ba:	09 f4       	brne	.+2      	; 0x16be <__fp_cmp+0x3e>
    16bc:	a1 40       	sbci	r26, 0x01	; 1
    16be:	a6 95       	lsr	r26
    16c0:	8f ef       	ldi	r24, 0xFF	; 255
    16c2:	81 1d       	adc	r24, r1
    16c4:	81 1d       	adc	r24, r1
    16c6:	08 95       	ret

000016c8 <__fp_inf>:
    16c8:	97 f9       	bld	r25, 7
    16ca:	9f 67       	ori	r25, 0x7F	; 127
    16cc:	80 e8       	ldi	r24, 0x80	; 128
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	08 95       	ret

000016d4 <__fp_nan>:
    16d4:	9f ef       	ldi	r25, 0xFF	; 255
    16d6:	80 ec       	ldi	r24, 0xC0	; 192
    16d8:	08 95       	ret

000016da <__fp_pscA>:
    16da:	00 24       	eor	r0, r0
    16dc:	0a 94       	dec	r0
    16de:	16 16       	cp	r1, r22
    16e0:	17 06       	cpc	r1, r23
    16e2:	18 06       	cpc	r1, r24
    16e4:	09 06       	cpc	r0, r25
    16e6:	08 95       	ret

000016e8 <__fp_pscB>:
    16e8:	00 24       	eor	r0, r0
    16ea:	0a 94       	dec	r0
    16ec:	12 16       	cp	r1, r18
    16ee:	13 06       	cpc	r1, r19
    16f0:	14 06       	cpc	r1, r20
    16f2:	05 06       	cpc	r0, r21
    16f4:	08 95       	ret

000016f6 <__fp_round>:
    16f6:	09 2e       	mov	r0, r25
    16f8:	03 94       	inc	r0
    16fa:	00 0c       	add	r0, r0
    16fc:	11 f4       	brne	.+4      	; 0x1702 <__fp_round+0xc>
    16fe:	88 23       	and	r24, r24
    1700:	52 f0       	brmi	.+20     	; 0x1716 <__fp_round+0x20>
    1702:	bb 0f       	add	r27, r27
    1704:	40 f4       	brcc	.+16     	; 0x1716 <__fp_round+0x20>
    1706:	bf 2b       	or	r27, r31
    1708:	11 f4       	brne	.+4      	; 0x170e <__fp_round+0x18>
    170a:	60 ff       	sbrs	r22, 0
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <__fp_round+0x20>
    170e:	6f 5f       	subi	r22, 0xFF	; 255
    1710:	7f 4f       	sbci	r23, 0xFF	; 255
    1712:	8f 4f       	sbci	r24, 0xFF	; 255
    1714:	9f 4f       	sbci	r25, 0xFF	; 255
    1716:	08 95       	ret

00001718 <__fp_split3>:
    1718:	57 fd       	sbrc	r21, 7
    171a:	90 58       	subi	r25, 0x80	; 128
    171c:	44 0f       	add	r20, r20
    171e:	55 1f       	adc	r21, r21
    1720:	59 f0       	breq	.+22     	; 0x1738 <__fp_splitA+0x10>
    1722:	5f 3f       	cpi	r21, 0xFF	; 255
    1724:	71 f0       	breq	.+28     	; 0x1742 <__fp_splitA+0x1a>
    1726:	47 95       	ror	r20

00001728 <__fp_splitA>:
    1728:	88 0f       	add	r24, r24
    172a:	97 fb       	bst	r25, 7
    172c:	99 1f       	adc	r25, r25
    172e:	61 f0       	breq	.+24     	; 0x1748 <__fp_splitA+0x20>
    1730:	9f 3f       	cpi	r25, 0xFF	; 255
    1732:	79 f0       	breq	.+30     	; 0x1752 <__fp_splitA+0x2a>
    1734:	87 95       	ror	r24
    1736:	08 95       	ret
    1738:	12 16       	cp	r1, r18
    173a:	13 06       	cpc	r1, r19
    173c:	14 06       	cpc	r1, r20
    173e:	55 1f       	adc	r21, r21
    1740:	f2 cf       	rjmp	.-28     	; 0x1726 <__fp_split3+0xe>
    1742:	46 95       	lsr	r20
    1744:	f1 df       	rcall	.-30     	; 0x1728 <__fp_splitA>
    1746:	08 c0       	rjmp	.+16     	; 0x1758 <__fp_splitA+0x30>
    1748:	16 16       	cp	r1, r22
    174a:	17 06       	cpc	r1, r23
    174c:	18 06       	cpc	r1, r24
    174e:	99 1f       	adc	r25, r25
    1750:	f1 cf       	rjmp	.-30     	; 0x1734 <__fp_splitA+0xc>
    1752:	86 95       	lsr	r24
    1754:	71 05       	cpc	r23, r1
    1756:	61 05       	cpc	r22, r1
    1758:	08 94       	sec
    175a:	08 95       	ret

0000175c <__fp_zero>:
    175c:	e8 94       	clt

0000175e <__fp_szero>:
    175e:	bb 27       	eor	r27, r27
    1760:	66 27       	eor	r22, r22
    1762:	77 27       	eor	r23, r23
    1764:	cb 01       	movw	r24, r22
    1766:	97 f9       	bld	r25, 7
    1768:	08 95       	ret

0000176a <__mulsf3>:
    176a:	0b d0       	rcall	.+22     	; 0x1782 <__mulsf3x>
    176c:	c4 cf       	rjmp	.-120    	; 0x16f6 <__fp_round>
    176e:	b5 df       	rcall	.-150    	; 0x16da <__fp_pscA>
    1770:	28 f0       	brcs	.+10     	; 0x177c <__mulsf3+0x12>
    1772:	ba df       	rcall	.-140    	; 0x16e8 <__fp_pscB>
    1774:	18 f0       	brcs	.+6      	; 0x177c <__mulsf3+0x12>
    1776:	95 23       	and	r25, r21
    1778:	09 f0       	breq	.+2      	; 0x177c <__mulsf3+0x12>
    177a:	a6 cf       	rjmp	.-180    	; 0x16c8 <__fp_inf>
    177c:	ab cf       	rjmp	.-170    	; 0x16d4 <__fp_nan>
    177e:	11 24       	eor	r1, r1
    1780:	ee cf       	rjmp	.-36     	; 0x175e <__fp_szero>

00001782 <__mulsf3x>:
    1782:	ca df       	rcall	.-108    	; 0x1718 <__fp_split3>
    1784:	a0 f3       	brcs	.-24     	; 0x176e <__mulsf3+0x4>

00001786 <__mulsf3_pse>:
    1786:	95 9f       	mul	r25, r21
    1788:	d1 f3       	breq	.-12     	; 0x177e <__mulsf3+0x14>
    178a:	95 0f       	add	r25, r21
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	55 1f       	adc	r21, r21
    1790:	62 9f       	mul	r22, r18
    1792:	f0 01       	movw	r30, r0
    1794:	72 9f       	mul	r23, r18
    1796:	bb 27       	eor	r27, r27
    1798:	f0 0d       	add	r31, r0
    179a:	b1 1d       	adc	r27, r1
    179c:	63 9f       	mul	r22, r19
    179e:	aa 27       	eor	r26, r26
    17a0:	f0 0d       	add	r31, r0
    17a2:	b1 1d       	adc	r27, r1
    17a4:	aa 1f       	adc	r26, r26
    17a6:	64 9f       	mul	r22, r20
    17a8:	66 27       	eor	r22, r22
    17aa:	b0 0d       	add	r27, r0
    17ac:	a1 1d       	adc	r26, r1
    17ae:	66 1f       	adc	r22, r22
    17b0:	82 9f       	mul	r24, r18
    17b2:	22 27       	eor	r18, r18
    17b4:	b0 0d       	add	r27, r0
    17b6:	a1 1d       	adc	r26, r1
    17b8:	62 1f       	adc	r22, r18
    17ba:	73 9f       	mul	r23, r19
    17bc:	b0 0d       	add	r27, r0
    17be:	a1 1d       	adc	r26, r1
    17c0:	62 1f       	adc	r22, r18
    17c2:	83 9f       	mul	r24, r19
    17c4:	a0 0d       	add	r26, r0
    17c6:	61 1d       	adc	r22, r1
    17c8:	22 1f       	adc	r18, r18
    17ca:	74 9f       	mul	r23, r20
    17cc:	33 27       	eor	r19, r19
    17ce:	a0 0d       	add	r26, r0
    17d0:	61 1d       	adc	r22, r1
    17d2:	23 1f       	adc	r18, r19
    17d4:	84 9f       	mul	r24, r20
    17d6:	60 0d       	add	r22, r0
    17d8:	21 1d       	adc	r18, r1
    17da:	82 2f       	mov	r24, r18
    17dc:	76 2f       	mov	r23, r22
    17de:	6a 2f       	mov	r22, r26
    17e0:	11 24       	eor	r1, r1
    17e2:	9f 57       	subi	r25, 0x7F	; 127
    17e4:	50 40       	sbci	r21, 0x00	; 0
    17e6:	8a f0       	brmi	.+34     	; 0x180a <__mulsf3_pse+0x84>
    17e8:	e1 f0       	breq	.+56     	; 0x1822 <__mulsf3_pse+0x9c>
    17ea:	88 23       	and	r24, r24
    17ec:	4a f0       	brmi	.+18     	; 0x1800 <__mulsf3_pse+0x7a>
    17ee:	ee 0f       	add	r30, r30
    17f0:	ff 1f       	adc	r31, r31
    17f2:	bb 1f       	adc	r27, r27
    17f4:	66 1f       	adc	r22, r22
    17f6:	77 1f       	adc	r23, r23
    17f8:	88 1f       	adc	r24, r24
    17fa:	91 50       	subi	r25, 0x01	; 1
    17fc:	50 40       	sbci	r21, 0x00	; 0
    17fe:	a9 f7       	brne	.-22     	; 0x17ea <__mulsf3_pse+0x64>
    1800:	9e 3f       	cpi	r25, 0xFE	; 254
    1802:	51 05       	cpc	r21, r1
    1804:	70 f0       	brcs	.+28     	; 0x1822 <__mulsf3_pse+0x9c>
    1806:	60 cf       	rjmp	.-320    	; 0x16c8 <__fp_inf>
    1808:	aa cf       	rjmp	.-172    	; 0x175e <__fp_szero>
    180a:	5f 3f       	cpi	r21, 0xFF	; 255
    180c:	ec f3       	brlt	.-6      	; 0x1808 <__mulsf3_pse+0x82>
    180e:	98 3e       	cpi	r25, 0xE8	; 232
    1810:	dc f3       	brlt	.-10     	; 0x1808 <__mulsf3_pse+0x82>
    1812:	86 95       	lsr	r24
    1814:	77 95       	ror	r23
    1816:	67 95       	ror	r22
    1818:	b7 95       	ror	r27
    181a:	f7 95       	ror	r31
    181c:	e7 95       	ror	r30
    181e:	9f 5f       	subi	r25, 0xFF	; 255
    1820:	c1 f7       	brne	.-16     	; 0x1812 <__mulsf3_pse+0x8c>
    1822:	fe 2b       	or	r31, r30
    1824:	88 0f       	add	r24, r24
    1826:	91 1d       	adc	r25, r1
    1828:	96 95       	lsr	r25
    182a:	87 95       	ror	r24
    182c:	97 f9       	bld	r25, 7
    182e:	08 95       	ret

00001830 <__divmodhi4>:
    1830:	97 fb       	bst	r25, 7
    1832:	07 2e       	mov	r0, r23
    1834:	16 f4       	brtc	.+4      	; 0x183a <__divmodhi4+0xa>
    1836:	00 94       	com	r0
    1838:	06 d0       	rcall	.+12     	; 0x1846 <__divmodhi4_neg1>
    183a:	77 fd       	sbrc	r23, 7
    183c:	08 d0       	rcall	.+16     	; 0x184e <__divmodhi4_neg2>
    183e:	1a d0       	rcall	.+52     	; 0x1874 <__udivmodhi4>
    1840:	07 fc       	sbrc	r0, 7
    1842:	05 d0       	rcall	.+10     	; 0x184e <__divmodhi4_neg2>
    1844:	3e f4       	brtc	.+14     	; 0x1854 <__divmodhi4_exit>

00001846 <__divmodhi4_neg1>:
    1846:	90 95       	com	r25
    1848:	81 95       	neg	r24
    184a:	9f 4f       	sbci	r25, 0xFF	; 255
    184c:	08 95       	ret

0000184e <__divmodhi4_neg2>:
    184e:	70 95       	com	r23
    1850:	61 95       	neg	r22
    1852:	7f 4f       	sbci	r23, 0xFF	; 255

00001854 <__divmodhi4_exit>:
    1854:	08 95       	ret

00001856 <__umulhisi3>:
    1856:	a2 9f       	mul	r26, r18
    1858:	b0 01       	movw	r22, r0
    185a:	b3 9f       	mul	r27, r19
    185c:	c0 01       	movw	r24, r0
    185e:	a3 9f       	mul	r26, r19
    1860:	70 0d       	add	r23, r0
    1862:	81 1d       	adc	r24, r1
    1864:	11 24       	eor	r1, r1
    1866:	91 1d       	adc	r25, r1
    1868:	b2 9f       	mul	r27, r18
    186a:	70 0d       	add	r23, r0
    186c:	81 1d       	adc	r24, r1
    186e:	11 24       	eor	r1, r1
    1870:	91 1d       	adc	r25, r1
    1872:	08 95       	ret

00001874 <__udivmodhi4>:
    1874:	aa 1b       	sub	r26, r26
    1876:	bb 1b       	sub	r27, r27
    1878:	51 e1       	ldi	r21, 0x11	; 17
    187a:	07 c0       	rjmp	.+14     	; 0x188a <__udivmodhi4_ep>

0000187c <__udivmodhi4_loop>:
    187c:	aa 1f       	adc	r26, r26
    187e:	bb 1f       	adc	r27, r27
    1880:	a6 17       	cp	r26, r22
    1882:	b7 07       	cpc	r27, r23
    1884:	10 f0       	brcs	.+4      	; 0x188a <__udivmodhi4_ep>
    1886:	a6 1b       	sub	r26, r22
    1888:	b7 0b       	sbc	r27, r23

0000188a <__udivmodhi4_ep>:
    188a:	88 1f       	adc	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	5a 95       	dec	r21
    1890:	a9 f7       	brne	.-22     	; 0x187c <__udivmodhi4_loop>
    1892:	80 95       	com	r24
    1894:	90 95       	com	r25
    1896:	bc 01       	movw	r22, r24
    1898:	cd 01       	movw	r24, r26
    189a:	08 95       	ret

0000189c <__itoa_ncheck>:
    189c:	bb 27       	eor	r27, r27
    189e:	4a 30       	cpi	r20, 0x0A	; 10
    18a0:	31 f4       	brne	.+12     	; 0x18ae <__itoa_ncheck+0x12>
    18a2:	99 23       	and	r25, r25
    18a4:	22 f4       	brpl	.+8      	; 0x18ae <__itoa_ncheck+0x12>
    18a6:	bd e2       	ldi	r27, 0x2D	; 45
    18a8:	90 95       	com	r25
    18aa:	81 95       	neg	r24
    18ac:	9f 4f       	sbci	r25, 0xFF	; 255
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <__utoa_common>

000018b0 <__utoa_ncheck>:
    18b0:	bb 27       	eor	r27, r27

000018b2 <__utoa_common>:
    18b2:	fb 01       	movw	r30, r22
    18b4:	55 27       	eor	r21, r21
    18b6:	aa 27       	eor	r26, r26
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	aa 1f       	adc	r26, r26
    18be:	a4 17       	cp	r26, r20
    18c0:	10 f0       	brcs	.+4      	; 0x18c6 <__utoa_common+0x14>
    18c2:	a4 1b       	sub	r26, r20
    18c4:	83 95       	inc	r24
    18c6:	50 51       	subi	r21, 0x10	; 16
    18c8:	b9 f7       	brne	.-18     	; 0x18b8 <__utoa_common+0x6>
    18ca:	a0 5d       	subi	r26, 0xD0	; 208
    18cc:	aa 33       	cpi	r26, 0x3A	; 58
    18ce:	08 f0       	brcs	.+2      	; 0x18d2 <__utoa_common+0x20>
    18d0:	a9 5d       	subi	r26, 0xD9	; 217
    18d2:	a1 93       	st	Z+, r26
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	79 f7       	brne	.-34     	; 0x18b6 <__utoa_common+0x4>
    18d8:	b1 11       	cpse	r27, r1
    18da:	b1 93       	st	Z+, r27
    18dc:	11 92       	st	Z+, r1
    18de:	cb 01       	movw	r24, r22
    18e0:	00 c0       	rjmp	.+0      	; 0x18e2 <strrev>

000018e2 <strrev>:
    18e2:	dc 01       	movw	r26, r24
    18e4:	fc 01       	movw	r30, r24
    18e6:	67 2f       	mov	r22, r23
    18e8:	71 91       	ld	r23, Z+
    18ea:	77 23       	and	r23, r23
    18ec:	e1 f7       	brne	.-8      	; 0x18e6 <strrev+0x4>
    18ee:	32 97       	sbiw	r30, 0x02	; 2
    18f0:	04 c0       	rjmp	.+8      	; 0x18fa <strrev+0x18>
    18f2:	7c 91       	ld	r23, X
    18f4:	6d 93       	st	X+, r22
    18f6:	70 83       	st	Z, r23
    18f8:	62 91       	ld	r22, -Z
    18fa:	ae 17       	cp	r26, r30
    18fc:	bf 07       	cpc	r27, r31
    18fe:	c8 f3       	brcs	.-14     	; 0x18f2 <strrev+0x10>
    1900:	08 95       	ret

00001902 <eeprom_read_dword>:
    1902:	a6 e1       	ldi	r26, 0x16	; 22
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	44 e0       	ldi	r20, 0x04	; 4
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	0a c0       	rjmp	.+20     	; 0x1920 <eeprom_read_blraw>

0000190c <eeprom_write_dword>:
    190c:	24 2f       	mov	r18, r20
    190e:	17 d0       	rcall	.+46     	; 0x193e <eeprom_write_r18>
    1910:	25 2f       	mov	r18, r21
    1912:	15 d0       	rcall	.+42     	; 0x193e <eeprom_write_r18>
    1914:	00 c0       	rjmp	.+0      	; 0x1916 <eeprom_write_word>

00001916 <eeprom_write_word>:
    1916:	12 d0       	rcall	.+36     	; 0x193c <eeprom_write_byte>
    1918:	27 2f       	mov	r18, r23
    191a:	11 c0       	rjmp	.+34     	; 0x193e <eeprom_write_r18>

0000191c <eeprom_read_block>:
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22

00001920 <eeprom_read_blraw>:
    1920:	fc 01       	movw	r30, r24
    1922:	f9 99       	sbic	0x1f, 1	; 31
    1924:	fe cf       	rjmp	.-4      	; 0x1922 <eeprom_read_blraw+0x2>
    1926:	06 c0       	rjmp	.+12     	; 0x1934 <eeprom_read_blraw+0x14>
    1928:	f2 bd       	out	0x22, r31	; 34
    192a:	e1 bd       	out	0x21, r30	; 33
    192c:	f8 9a       	sbi	0x1f, 0	; 31
    192e:	31 96       	adiw	r30, 0x01	; 1
    1930:	00 b4       	in	r0, 0x20	; 32
    1932:	0d 92       	st	X+, r0
    1934:	41 50       	subi	r20, 0x01	; 1
    1936:	50 40       	sbci	r21, 0x00	; 0
    1938:	b8 f7       	brcc	.-18     	; 0x1928 <eeprom_read_blraw+0x8>
    193a:	08 95       	ret

0000193c <eeprom_write_byte>:
    193c:	26 2f       	mov	r18, r22

0000193e <eeprom_write_r18>:
    193e:	f9 99       	sbic	0x1f, 1	; 31
    1940:	fe cf       	rjmp	.-4      	; 0x193e <eeprom_write_r18>
    1942:	1f ba       	out	0x1f, r1	; 31
    1944:	92 bd       	out	0x22, r25	; 34
    1946:	81 bd       	out	0x21, r24	; 33
    1948:	20 bd       	out	0x20, r18	; 32
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	fa 9a       	sbi	0x1f, 2	; 31
    1950:	f9 9a       	sbi	0x1f, 1	; 31
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	08 95       	ret

00001958 <_exit>:
    1958:	f8 94       	cli

0000195a <__stop_program>:
    195a:	ff cf       	rjmp	.-2      	; 0x195a <__stop_program>
