
LCD_GrafiskDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  000005d2  00000666  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080020a  0080020a  00000670  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001905  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff3  00000000  00000000  00002095  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f0  00000000  00000000  00003088  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00003878  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000803  00000000  00000000  000039cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000461  00000000  00000000  000041cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00004630  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ed       	ldi	r30, 0xD2	; 210
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e0       	ldi	r26, 0x0A	; 10
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 32       	cpi	r26, 0x20	; 32
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	2c d1       	rcall	.+600    	; 0x378 <main>
 120:	56 c2       	rjmp	.+1196   	; 0x5ce <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <writeCommand>:
// ILI 9341 data sheet, page 238
static void writeCommand(uint8_t command)
{
	uint8_t bit = 0b00000001;
	
	DATA_PORT_LOW =command;
 124:	88 b9       	out	0x08, r24	; 8
	
	DC_PORT &= ~(bit<<DC_BIT); //Trigger falling edge, no waiting because other controller is faster than us.
 126:	5f 98       	cbi	0x0b, 7	; 11
	CS_PORT &= ~(bit<<CS_BIT);
 128:	a1 98       	cbi	0x14, 1	; 20
	
	//Write pulse
	WR_PORT &= ~(bit<<WR_BIT); //WRX low
 12a:	a2 98       	cbi	0x14, 2	; 20
	WR_PORT |= bit<<WR_BIT; //WRX high triggers read signal
 12c:	a2 9a       	sbi	0x14, 2	; 20
 12e:	08 95       	ret

00000130 <writeData>:
static void writeData(uint16_t data)
{
	uint8_t bit = 0b00000001;
	
	//Set data
	DATA_PORT_HIGH = (uint8_t)(data>>8);
 130:	92 b9       	out	0x02, r25	; 2
	DATA_PORT_LOW = (uint8_t)(data&(0x00FF));
 132:	88 b9       	out	0x08, r24	; 8
	
	DC_PORT |= bit<<DC_BIT; //Trigger rising edge, no waiting because other controller is faster than us.
 134:	5f 9a       	sbi	0x0b, 7	; 11
	CS_PORT &= ~(bit<<CS_BIT); // Chip select active low, trigger falling edge
 136:	a1 98       	cbi	0x14, 1	; 20
	
	//Write pulse
	WR_PORT &= ~(bit<<WR_BIT);
 138:	a2 98       	cbi	0x14, 2	; 20
	WR_PORT |= bit<<WR_BIT;
 13a:	a2 9a       	sbi	0x14, 2	; 20
 13c:	08 95       	ret

0000013e <displayOff>:
}

static void displayOff()
{
	uint16_t command = 0b00101000;
	writeCommand(command);
 13e:	88 e2       	ldi	r24, 0x28	; 40
 140:	f1 cf       	rjmp	.-30     	; 0x124 <writeCommand>
 142:	08 95       	ret

00000144 <displayOn>:
}

static void displayOn()
{
	uint16_t command = 0b00101001;
	writeCommand(command);
 144:	89 e2       	ldi	r24, 0x29	; 41
 146:	ee cf       	rjmp	.-36     	; 0x124 <writeCommand>
 148:	08 95       	ret

0000014a <setCursor>:
	writeData((End));
}

static void setCursor(uint16_t x_pos, uint16_t y_pos)
{
	myCursor.x_position = x_pos;
 14a:	e4 e1       	ldi	r30, 0x14	; 20
 14c:	f2 e0       	ldi	r31, 0x02	; 2
 14e:	94 83       	std	Z+4, r25	; 0x04
 150:	83 83       	std	Z+3, r24	; 0x03
	myCursor.y_position = y_pos;
 152:	76 83       	std	Z+6, r23	; 0x06
 154:	65 83       	std	Z+5, r22	; 0x05
 156:	08 95       	ret

00000158 <setCursorColor>:
}

static void setCursorColor(rgb_t* color)
{
	myCursor.color = *color;
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	91 81       	ldd	r25, Z+1	; 0x01
 15e:	a2 81       	ldd	r26, Z+2	; 0x02
 160:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <myCursor>
 164:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <myCursor+0x1>
 168:	a0 93 16 02 	sts	0x0216, r26	; 0x800216 <myCursor+0x2>
 16c:	08 95       	ret

0000016e <drawRectangle>:
}


static void drawRectangle(uint16_t Width, uint16_t Height)
{
 16e:	8f 92       	push	r8
 170:	9f 92       	push	r9
 172:	af 92       	push	r10
 174:	bf 92       	push	r11
 176:	cf 92       	push	r12
 178:	df 92       	push	r13
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	5c 01       	movw	r10, r24
 184:	6b 01       	movw	r12, r22
	uint32_t i = 0;
	setPageAddress(myCursor.x_position,(myCursor.x_position+Width));
 186:	c4 e1       	ldi	r28, 0x14	; 20
 188:	d2 e0       	ldi	r29, 0x02	; 2
 18a:	eb 80       	ldd	r14, Y+3	; 0x03
 18c:	fc 80       	ldd	r15, Y+4	; 0x04
 18e:	47 01       	movw	r8, r14
 190:	88 0e       	add	r8, r24
 192:	99 1e       	adc	r9, r25

// Set Page Address (0-319), Start > End
static void setPageAddress(uint16_t Start, uint16_t End)
{
	uint16_t command = 0b00101011;
	writeCommand(command);
 194:	8b e2       	ldi	r24, 0x2B	; 43
 196:	c6 df       	rcall	.-116    	; 0x124 <writeCommand>
	writeData((Start>>8));
 198:	8f 2d       	mov	r24, r15
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	c9 df       	rcall	.-110    	; 0x130 <writeData>
	writeData((Start));
 19e:	c7 01       	movw	r24, r14
 1a0:	c7 df       	rcall	.-114    	; 0x130 <writeData>
	writeData((End>>8));
 1a2:	89 2d       	mov	r24, r9
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	c4 df       	rcall	.-120    	; 0x130 <writeData>
	writeData((End));
 1a8:	c4 01       	movw	r24, r8
 1aa:	c2 df       	rcall	.-124    	; 0x130 <writeData>
 1ac:	ed 80       	ldd	r14, Y+5	; 0x05

static void drawRectangle(uint16_t Width, uint16_t Height)
{
	uint32_t i = 0;
	setPageAddress(myCursor.x_position,(myCursor.x_position+Width));
	setColumnAddress(myCursor.y_position,(myCursor.y_position+Height));
 1ae:	fe 80       	ldd	r15, Y+6	; 0x06
 1b0:	47 01       	movw	r8, r14
 1b2:	8c 0c       	add	r8, r12
 1b4:	9d 1c       	adc	r9, r13
}

static void setColumnAddress(uint16_t Start, uint16_t End)
{
	uint16_t command = 0b00101010;
	writeCommand(command);
 1b6:	8a e2       	ldi	r24, 0x2A	; 42
 1b8:	b5 df       	rcall	.-150    	; 0x124 <writeCommand>
	writeData((Start>>8));
 1ba:	8f 2d       	mov	r24, r15
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	b8 df       	rcall	.-144    	; 0x130 <writeData>
	writeData((Start));
 1c0:	c7 01       	movw	r24, r14
 1c2:	b6 df       	rcall	.-148    	; 0x130 <writeData>
	writeData((End>>8));
 1c4:	89 2d       	mov	r24, r9
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	b3 df       	rcall	.-154    	; 0x130 <writeData>
	writeData((End));
 1ca:	c4 01       	movw	r24, r8
 1cc:	b1 df       	rcall	.-158    	; 0x130 <writeData>
 1ce:	8c e2       	ldi	r24, 0x2C	; 44
}

static void memoryWrite()
{
	uint16_t command = 0b00101100;
	writeCommand(command);
 1d0:	a9 df       	rcall	.-174    	; 0x124 <writeCommand>
 1d2:	95 01       	movw	r18, r10
 1d4:	d6 01       	movw	r26, r12
	uint32_t i = 0;
	setPageAddress(myCursor.x_position,(myCursor.x_position+Width));
	setColumnAddress(myCursor.y_position,(myCursor.y_position+Height));
	memoryWrite();
	
	for(i = 0; i<((uint32_t)Width*(uint32_t)Height); i++)
 1d6:	49 d1       	rcall	.+658    	; 0x46a <__umulhisi3>
 1d8:	4b 01       	movw	r8, r22
 1da:	5c 01       	movw	r10, r24
 1dc:	67 2b       	or	r22, r23
 1de:	68 2b       	or	r22, r24
 1e0:	69 2b       	or	r22, r25
 1e2:	b1 f0       	breq	.+44     	; 0x210 <drawRectangle+0xa2>
 1e4:	c1 2c       	mov	r12, r1
 1e6:	d1 2c       	mov	r13, r1
 1e8:	76 01       	movw	r14, r12
	writeCommand(command);
}

static void writePixel(rgb_t *color)
{
	if(rgb565IsColorValid(color))
 1ea:	84 e1       	ldi	r24, 0x14	; 20
 1ec:	92 e0       	ldi	r25, 0x02	; 2
 1ee:	99 d0       	rcall	.+306    	; 0x322 <rgb565IsColorValid>
 1f0:	88 23       	and	r24, r24
 1f2:	21 f0       	breq	.+8      	; 0x1fc <drawRectangle+0x8e>
 1f4:	84 e1       	ldi	r24, 0x14	; 20
	{
		writeData(rgb565ToInt(color));
 1f6:	92 e0       	ldi	r25, 0x02	; 2
 1f8:	65 d0       	rcall	.+202    	; 0x2c4 <rgb565ToInt>
 1fa:	9a df       	rcall	.-204    	; 0x130 <writeData>
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	c8 1a       	sub	r12, r24
	uint32_t i = 0;
	setPageAddress(myCursor.x_position,(myCursor.x_position+Width));
	setColumnAddress(myCursor.y_position,(myCursor.y_position+Height));
	memoryWrite();
	
	for(i = 0; i<((uint32_t)Width*(uint32_t)Height); i++)
 200:	d8 0a       	sbc	r13, r24
 202:	e8 0a       	sbc	r14, r24
 204:	f8 0a       	sbc	r15, r24
 206:	c8 14       	cp	r12, r8
 208:	d9 04       	cpc	r13, r9
 20a:	ea 04       	cpc	r14, r10
 20c:	fb 04       	cpc	r15, r11
 20e:	69 f7       	brne	.-38     	; 0x1ea <drawRectangle+0x7c>
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	88 df       	rcall	.-240    	; 0x124 <writeCommand>
	{
		writePixel(&myCursor.color);
	}
	writeCommand(0);
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	ff 90       	pop	r15
 21a:	ef 90       	pop	r14
 21c:	df 90       	pop	r13
 21e:	cf 90       	pop	r12
 220:	bf 90       	pop	r11
 222:	af 90       	pop	r10
 224:	9f 90       	pop	r9
 226:	8f 90       	pop	r8
 228:	08 95       	ret

0000022a <lcdDriver_getDriver>:
 22a:	83 b3       	in	r24, 0x13	; 19
 22c:	87 60       	ori	r24, 0x07	; 7
 22e:	83 bb       	out	0x13, r24	; 19
{
	uint8_t bit = 0b00000001;
	
	//Set control bits to output
	DDRG |= (bit<<CS_BIT)|(bit<<RST_BIT)|(bit<<WR_BIT);
	DDRD |= (bit<<DC_BIT);
 230:	57 9a       	sbi	0x0a, 7	; 10
	
	//Set data ports to output
	DDRA |= 0xFF;
 232:	81 b1       	in	r24, 0x01	; 1
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	81 b9       	out	0x01, r24	; 1
	DDRC |= 0xFF;
 238:	97 b1       	in	r25, 0x07	; 7
 23a:	87 b9       	out	0x07, r24	; 7
	
	// set control pins start position high
	DC_PORT |= bit<<DC_BIT;
 23c:	5f 9a       	sbi	0x0b, 7	; 11
	WR_PORT |= bit<<WR_BIT;
 23e:	a2 9a       	sbi	0x14, 2	; 20
	CS_PORT	|= bit<<CS_BIT;
 240:	a1 9a       	sbi	0x14, 1	; 20
	RST_PORT|= bit<<RST_BIT;
 242:	a0 9a       	sbi	0x14, 0	; 20
	
	//Reset grafik display
	RST_PORT &= ~(bit<<RST_BIT);
 244:	a0 98       	cbi	0x14, 0	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 246:	2f ef       	ldi	r18, 0xFF	; 255
 248:	89 e6       	ldi	r24, 0x69	; 105
 24a:	98 e1       	ldi	r25, 0x18	; 24
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	80 40       	sbci	r24, 0x00	; 0
 250:	90 40       	sbci	r25, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <lcdDriver_getDriver+0x22>
 254:	00 c0       	rjmp	.+0      	; 0x256 <lcdDriver_getDriver+0x2c>
 256:	00 00       	nop
	_delay_ms(500);
	RST_PORT|= bit<<RST_BIT;
 258:	a0 9a       	sbi	0x14, 0	; 20
 25a:	af ef       	ldi	r26, 0xFF	; 255
 25c:	b8 e5       	ldi	r27, 0x58	; 88
 25e:	26 e0       	ldi	r18, 0x06	; 6
 260:	a1 50       	subi	r26, 0x01	; 1
 262:	b0 40       	sbci	r27, 0x00	; 0
 264:	20 40       	sbci	r18, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <lcdDriver_getDriver+0x36>
 268:	00 c0       	rjmp	.+0      	; 0x26a <lcdDriver_getDriver+0x40>
 26a:	00 00       	nop
}

static void sleepOut()
{
	uint16_t command = 0b00010001;
	writeCommand(command);
 26c:	81 e1       	ldi	r24, 0x11	; 17
 26e:	5a df       	rcall	.-332    	; 0x124 <writeCommand>
	RST_PORT|= bit<<RST_BIT;
	_delay_ms(130);
	
	sleepOut();
	// Display on
	displayOn();
 270:	69 df       	rcall	.-302    	; 0x144 <displayOn>
}

static void memoryAccessControl(uint8_t parameter)
{
	uint16_t command = 0b00110110;
	writeCommand(command);
 272:	86 e3       	ldi	r24, 0x36	; 54
 274:	57 df       	rcall	.-338    	; 0x124 <writeCommand>
	writeData((uint16_t)parameter);
 276:	88 e0       	ldi	r24, 0x08	; 8
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	5a df       	rcall	.-332    	; 0x130 <writeData>
}

static void interfacePixelFormat(uint8_t parameter)
{
	uint16_t command = 0b00111010;
	writeCommand(command);
 27c:	8a e3       	ldi	r24, 0x3A	; 58
 27e:	52 df       	rcall	.-348    	; 0x124 <writeCommand>
	writeData((uint16_t)parameter);
 280:	85 e0       	ldi	r24, 0x05	; 5
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	55 df       	rcall	.-342    	; 0x130 <writeData>
 286:	87 e0       	ldi	r24, 0x07	; 7
	// Set bit BGR (scanning direction)
	memoryAccessControl(0b00001000);
	// 16 bits (2 bytes) per pixel
	interfacePixelFormat(0b00000101);
	
	memset(&myCursor,0,sizeof(myCursor));
 288:	e4 e1       	ldi	r30, 0x14	; 20
 28a:	f2 e0       	ldi	r31, 0x02	; 2
 28c:	df 01       	movw	r26, r30
 28e:	1d 92       	st	X+, r1
 290:	8a 95       	dec	r24
 292:	e9 f7       	brne	.-6      	; 0x28e <lcdDriver_getDriver+0x64>
 294:	ea e0       	ldi	r30, 0x0A	; 10
lcdDriverInterface_t* lcdDriver_getDriver()
{
	if(!initialized)
	{
		driverInit();
		myInterface.displayON = displayOn;
 296:	f2 e0       	ldi	r31, 0x02	; 2
 298:	82 ea       	ldi	r24, 0xA2	; 162
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	91 83       	std	Z+1, r25	; 0x01
 29e:	80 83       	st	Z, r24
 2a0:	8f e9       	ldi	r24, 0x9F	; 159
		myInterface.displayOFF = displayOff;
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	93 83       	std	Z+3, r25	; 0x03
 2a6:	82 83       	std	Z+2, r24	; 0x02
 2a8:	8c ea       	ldi	r24, 0xAC	; 172
		myInterface.setCursorColor = setCursorColor;
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	95 83       	std	Z+5, r25	; 0x05
 2ae:	84 83       	std	Z+4, r24	; 0x04
 2b0:	85 ea       	ldi	r24, 0xA5	; 165
		myInterface.setCursor = setCursor;
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	97 83       	std	Z+7, r25	; 0x07
 2b6:	86 83       	std	Z+6, r24	; 0x06
 2b8:	87 eb       	ldi	r24, 0xB7	; 183
		myInterface.drawRectangle = drawRectangle;
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	91 87       	std	Z+9, r25	; 0x09
 2be:	80 87       	std	Z+8, r24	; 0x08
 2c0:	cf 01       	movw	r24, r30
	}
	return &myInterface;
}
 2c2:	08 95       	ret

000002c4 <rgb565ToInt>:
#include <string.h>

static rgb_t rgbColor;

uint16_t rgb565ToInt(rgb_t *color)
{
 2c4:	fc 01       	movw	r30, r24
	uint16_t colorInt = 0;
	colorInt |= ((uint16_t)color->red) << 11;
	colorInt |= ((uint16_t)color->green) << 5;
 2c6:	20 81       	ld	r18, Z
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	32 2f       	mov	r19, r18
 2cc:	22 27       	eor	r18, r18
 2ce:	33 0f       	add	r19, r19
 2d0:	33 0f       	add	r19, r19
 2d2:	33 0f       	add	r19, r19
 2d4:	41 81       	ldd	r20, Z+1	; 0x01
 2d6:	80 e2       	ldi	r24, 0x20	; 32
 2d8:	48 9f       	mul	r20, r24
 2da:	a0 01       	movw	r20, r0
 2dc:	11 24       	eor	r1, r1
 2de:	24 2b       	or	r18, r20
 2e0:	35 2b       	or	r19, r21
	colorInt |= (uint16_t)color->blue;
		
	return colorInt;
 2e2:	82 81       	ldd	r24, Z+2	; 0x02
}
 2e4:	a9 01       	movw	r20, r18
 2e6:	48 2b       	or	r20, r24
 2e8:	ca 01       	movw	r24, r20
 2ea:	08 95       	ret

000002ec <rgb565FromInt>:

rgb_t* rgb565FromInt(uint16_t color)
{
	memset(&rgbColor,0,sizeof(rgbColor));
 2ec:	eb e1       	ldi	r30, 0x1B	; 27
 2ee:	f2 e0       	ldi	r31, 0x02	; 2
 2f0:	23 e0       	ldi	r18, 0x03	; 3
 2f2:	df 01       	movw	r26, r30
 2f4:	1d 92       	st	X+, r1
 2f6:	2a 95       	dec	r18
 2f8:	e9 f7       	brne	.-6      	; 0x2f4 <rgb565FromInt+0x8>
	rgbColor.red = (uint8_t)(color>>11);
 2fa:	29 2f       	mov	r18, r25
 2fc:	26 95       	lsr	r18
 2fe:	26 95       	lsr	r18
 300:	26 95       	lsr	r18
 302:	20 83       	st	Z, r18
	rgbColor.green = (uint8_t)((color&0x07FF)>>5);
 304:	9c 01       	movw	r18, r24
 306:	37 70       	andi	r19, 0x07	; 7
 308:	36 95       	lsr	r19
 30a:	27 95       	ror	r18
 30c:	32 95       	swap	r19
 30e:	22 95       	swap	r18
 310:	2f 70       	andi	r18, 0x0F	; 15
 312:	23 27       	eor	r18, r19
 314:	3f 70       	andi	r19, 0x0F	; 15
 316:	23 27       	eor	r18, r19
 318:	21 83       	std	Z+1, r18	; 0x01
	rgbColor.blue = (uint8_t)(color&0x1F);
 31a:	8f 71       	andi	r24, 0x1F	; 31
 31c:	82 83       	std	Z+2, r24	; 0x02
	
	return &rgbColor;
}
 31e:	cf 01       	movw	r24, r30
 320:	08 95       	ret

00000322 <rgb565IsColorValid>:

bool rgb565IsColorValid(rgb_t *color)
{
	return ((color->red < 32) && (color->blue < 32) && (color->green < 64));
 322:	fc 01       	movw	r30, r24
 324:	20 81       	ld	r18, Z
 326:	20 32       	cpi	r18, 0x20	; 32
 328:	50 f4       	brcc	.+20     	; 0x33e <rgb565IsColorValid+0x1c>
 32a:	22 81       	ldd	r18, Z+2	; 0x02
 32c:	20 32       	cpi	r18, 0x20	; 32
 32e:	48 f4       	brcc	.+18     	; 0x342 <rgb565IsColorValid+0x20>
 330:	21 e0       	ldi	r18, 0x01	; 1
 332:	81 81       	ldd	r24, Z+1	; 0x01
 334:	80 34       	cpi	r24, 0x40	; 64
 336:	08 f0       	brcs	.+2      	; 0x33a <rgb565IsColorValid+0x18>
 338:	20 e0       	ldi	r18, 0x00	; 0
 33a:	82 2f       	mov	r24, r18
 33c:	03 c0       	rjmp	.+6      	; 0x344 <rgb565IsColorValid+0x22>
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	01 c0       	rjmp	.+2      	; 0x344 <rgb565IsColorValid+0x22>
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	81 70       	andi	r24, 0x01	; 1
 346:	08 95       	ret

00000348 <rand_lim>:
		screen->drawRectangle(40,40);
    }
}

uint16_t rand_lim(uint16_t limit) 
{
 348:	0f 93       	push	r16
 34a:	1f 93       	push	r17
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	ec 01       	movw	r28, r24
/* return a random number between 0 and limit inclusive.
 */

    uint16_t divisor = (uint16_t)(RAND_MAX/(limit+1));
 352:	bc 01       	movw	r22, r24
 354:	6f 5f       	subi	r22, 0xFF	; 255
 356:	7f 4f       	sbci	r23, 0xFF	; 255
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	9f e7       	ldi	r25, 0x7F	; 127
 35c:	72 d0       	rcall	.+228    	; 0x442 <__udivmodhi4>
 35e:	8b 01       	movw	r16, r22
    uint16_t retval;

    do { 
        retval = (uint16_t)rand() / divisor;
 360:	da d0       	rcall	.+436    	; 0x516 <rand>
 362:	b8 01       	movw	r22, r16
 364:	6e d0       	rcall	.+220    	; 0x442 <__udivmodhi4>
 366:	c6 17       	cp	r28, r22
    } while (retval > limit);
 368:	d7 07       	cpc	r29, r23
 36a:	d0 f3       	brcs	.-12     	; 0x360 <rand_lim+0x18>
 36c:	cb 01       	movw	r24, r22

    return retval;
}
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	1f 91       	pop	r17
 374:	0f 91       	pop	r16
 376:	08 95       	ret

00000378 <main>:
 378:	58 df       	rcall	.-336    	; 0x22a <lcdDriver_getDriver>

uint16_t rand_lim(uint16_t limit);

int main(void)
{
    screen = lcdDriver_getDriver();
 37a:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <screen+0x1>
 37e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <screen>
	
	screen->setCursorColor(rgb565FromInt(WHITE));
 382:	fc 01       	movw	r30, r24
 384:	c4 81       	ldd	r28, Z+4	; 0x04
 386:	d5 81       	ldd	r29, Z+5	; 0x05
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	9f ef       	ldi	r25, 0xFF	; 255
 38c:	af df       	rcall	.-162    	; 0x2ec <rgb565FromInt>
 38e:	fe 01       	movw	r30, r28
 390:	19 95       	eicall
	screen->drawRectangle(319,239);
 392:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <screen>
 396:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <screen+0x1>
 39a:	00 84       	ldd	r0, Z+8	; 0x08
 39c:	f1 85       	ldd	r31, Z+9	; 0x09
 39e:	e0 2d       	mov	r30, r0
 3a0:	6f ee       	ldi	r22, 0xEF	; 239
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	8f e3       	ldi	r24, 0x3F	; 63
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	19 95       	eicall
	screen->setCursorColor(rgb565FromInt(RED));
 3aa:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <screen>
 3ae:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <screen+0x1>
 3b2:	c4 81       	ldd	r28, Z+4	; 0x04
 3b4:	d5 81       	ldd	r29, Z+5	; 0x05
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	98 ef       	ldi	r25, 0xF8	; 248
 3ba:	98 df       	rcall	.-208    	; 0x2ec <rgb565FromInt>
 3bc:	fe 01       	movw	r30, r28
 3be:	19 95       	eicall
	screen->displayON();
 3c0:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <screen>
 3c4:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <screen+0x1>
 3c8:	01 90       	ld	r0, Z+
 3ca:	f0 81       	ld	r31, Z
 3cc:	e0 2d       	mov	r30, r0
 3ce:	19 95       	eicall
 3d0:	ff ef       	ldi	r31, 0xFF	; 255
 3d2:	25 ea       	ldi	r18, 0xA5	; 165
 3d4:	8e e0       	ldi	r24, 0x0E	; 14
 3d6:	f1 50       	subi	r31, 0x01	; 1
 3d8:	20 40       	sbci	r18, 0x00	; 0
 3da:	80 40       	sbci	r24, 0x00	; 0
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0x5e>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <main+0x68>
 3e0:	00 00       	nop
	
	
    while (1) 
    {
		_delay_ms(300);
		screen->setCursor(rand_lim(319-40),rand_lim(239-40));
 3e2:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <screen>
 3e6:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <screen+0x1>
 3ea:	c6 81       	ldd	r28, Z+6	; 0x06
 3ec:	d7 81       	ldd	r29, Z+7	; 0x07
 3ee:	87 ec       	ldi	r24, 0xC7	; 199
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	aa df       	rcall	.-172    	; 0x348 <rand_lim>
 3f4:	8c 01       	movw	r16, r24
 3f6:	87 e1       	ldi	r24, 0x17	; 23
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	a6 df       	rcall	.-180    	; 0x348 <rand_lim>
 3fc:	b8 01       	movw	r22, r16
 3fe:	fe 01       	movw	r30, r28
 400:	19 95       	eicall
		screen->setCursorColor(rgb565FromInt(colors[rand_lim(2)]));
 402:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <screen>
 406:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <screen+0x1>
 40a:	c4 81       	ldd	r28, Z+4	; 0x04
 40c:	d5 81       	ldd	r29, Z+5	; 0x05
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	9a df       	rcall	.-204    	; 0x348 <rand_lim>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	fc 01       	movw	r30, r24
 41a:	ec 5f       	subi	r30, 0xFC	; 252
 41c:	fd 4f       	sbci	r31, 0xFD	; 253
 41e:	80 81       	ld	r24, Z
 420:	91 81       	ldd	r25, Z+1	; 0x01
 422:	64 df       	rcall	.-312    	; 0x2ec <rgb565FromInt>
 424:	fe 01       	movw	r30, r28
 426:	19 95       	eicall
		screen->drawRectangle(40,40);
 428:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <screen>
 42c:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <screen+0x1>
 430:	00 84       	ldd	r0, Z+8	; 0x08
 432:	f1 85       	ldd	r31, Z+9	; 0x09
 434:	e0 2d       	mov	r30, r0
 436:	68 e2       	ldi	r22, 0x28	; 40
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	88 e2       	ldi	r24, 0x28	; 40
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	19 95       	eicall
 440:	c7 cf       	rjmp	.-114    	; 0x3d0 <main+0x58>

00000442 <__udivmodhi4>:
 442:	aa 1b       	sub	r26, r26
 444:	bb 1b       	sub	r27, r27
 446:	51 e1       	ldi	r21, 0x11	; 17
 448:	07 c0       	rjmp	.+14     	; 0x458 <__udivmodhi4_ep>

0000044a <__udivmodhi4_loop>:
 44a:	aa 1f       	adc	r26, r26
 44c:	bb 1f       	adc	r27, r27
 44e:	a6 17       	cp	r26, r22
 450:	b7 07       	cpc	r27, r23
 452:	10 f0       	brcs	.+4      	; 0x458 <__udivmodhi4_ep>
 454:	a6 1b       	sub	r26, r22
 456:	b7 0b       	sbc	r27, r23

00000458 <__udivmodhi4_ep>:
 458:	88 1f       	adc	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	5a 95       	dec	r21
 45e:	a9 f7       	brne	.-22     	; 0x44a <__udivmodhi4_loop>
 460:	80 95       	com	r24
 462:	90 95       	com	r25
 464:	bc 01       	movw	r22, r24
 466:	cd 01       	movw	r24, r26
 468:	08 95       	ret

0000046a <__umulhisi3>:
 46a:	a2 9f       	mul	r26, r18
 46c:	b0 01       	movw	r22, r0
 46e:	b3 9f       	mul	r27, r19
 470:	c0 01       	movw	r24, r0
 472:	a3 9f       	mul	r26, r19
 474:	70 0d       	add	r23, r0
 476:	81 1d       	adc	r24, r1
 478:	11 24       	eor	r1, r1
 47a:	91 1d       	adc	r25, r1
 47c:	b2 9f       	mul	r27, r18
 47e:	70 0d       	add	r23, r0
 480:	81 1d       	adc	r24, r1
 482:	11 24       	eor	r1, r1
 484:	91 1d       	adc	r25, r1
 486:	08 95       	ret

00000488 <do_rand>:
 488:	8f 92       	push	r8
 48a:	9f 92       	push	r9
 48c:	af 92       	push	r10
 48e:	bf 92       	push	r11
 490:	cf 92       	push	r12
 492:	df 92       	push	r13
 494:	ef 92       	push	r14
 496:	ff 92       	push	r15
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	ec 01       	movw	r28, r24
 49e:	68 81       	ld	r22, Y
 4a0:	79 81       	ldd	r23, Y+1	; 0x01
 4a2:	8a 81       	ldd	r24, Y+2	; 0x02
 4a4:	9b 81       	ldd	r25, Y+3	; 0x03
 4a6:	61 15       	cp	r22, r1
 4a8:	71 05       	cpc	r23, r1
 4aa:	81 05       	cpc	r24, r1
 4ac:	91 05       	cpc	r25, r1
 4ae:	21 f4       	brne	.+8      	; 0x4b8 <do_rand+0x30>
 4b0:	64 e2       	ldi	r22, 0x24	; 36
 4b2:	79 ed       	ldi	r23, 0xD9	; 217
 4b4:	8b e5       	ldi	r24, 0x5B	; 91
 4b6:	97 e0       	ldi	r25, 0x07	; 7
 4b8:	2d e1       	ldi	r18, 0x1D	; 29
 4ba:	33 ef       	ldi	r19, 0xF3	; 243
 4bc:	41 e0       	ldi	r20, 0x01	; 1
 4be:	50 e0       	ldi	r21, 0x00	; 0
 4c0:	38 d0       	rcall	.+112    	; 0x532 <__divmodsi4>
 4c2:	49 01       	movw	r8, r18
 4c4:	5a 01       	movw	r10, r20
 4c6:	9b 01       	movw	r18, r22
 4c8:	ac 01       	movw	r20, r24
 4ca:	a7 ea       	ldi	r26, 0xA7	; 167
 4cc:	b1 e4       	ldi	r27, 0x41	; 65
 4ce:	4d d0       	rcall	.+154    	; 0x56a <__muluhisi3>
 4d0:	6b 01       	movw	r12, r22
 4d2:	7c 01       	movw	r14, r24
 4d4:	ac ee       	ldi	r26, 0xEC	; 236
 4d6:	b4 ef       	ldi	r27, 0xF4	; 244
 4d8:	a5 01       	movw	r20, r10
 4da:	94 01       	movw	r18, r8
 4dc:	52 d0       	rcall	.+164    	; 0x582 <__mulohisi3>
 4de:	dc 01       	movw	r26, r24
 4e0:	cb 01       	movw	r24, r22
 4e2:	8c 0d       	add	r24, r12
 4e4:	9d 1d       	adc	r25, r13
 4e6:	ae 1d       	adc	r26, r14
 4e8:	bf 1d       	adc	r27, r15
 4ea:	b7 ff       	sbrs	r27, 7
 4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <do_rand+0x6c>
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	a1 09       	sbc	r26, r1
 4f2:	b0 48       	sbci	r27, 0x80	; 128
 4f4:	88 83       	st	Y, r24
 4f6:	99 83       	std	Y+1, r25	; 0x01
 4f8:	aa 83       	std	Y+2, r26	; 0x02
 4fa:	bb 83       	std	Y+3, r27	; 0x03
 4fc:	9f 77       	andi	r25, 0x7F	; 127
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	ff 90       	pop	r15
 504:	ef 90       	pop	r14
 506:	df 90       	pop	r13
 508:	cf 90       	pop	r12
 50a:	bf 90       	pop	r11
 50c:	af 90       	pop	r10
 50e:	9f 90       	pop	r9
 510:	8f 90       	pop	r8
 512:	08 95       	ret

00000514 <rand_r>:
 514:	b9 cf       	rjmp	.-142    	; 0x488 <do_rand>

00000516 <rand>:
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	92 e0       	ldi	r25, 0x02	; 2
 51a:	b6 cf       	rjmp	.-148    	; 0x488 <do_rand>

0000051c <srand>:
 51c:	a0 e0       	ldi	r26, 0x00	; 0
 51e:	b0 e0       	ldi	r27, 0x00	; 0
 520:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 524:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
 528:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
 52c:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
 530:	08 95       	ret

00000532 <__divmodsi4>:
 532:	05 2e       	mov	r0, r21
 534:	97 fb       	bst	r25, 7
 536:	16 f4       	brtc	.+4      	; 0x53c <__divmodsi4+0xa>
 538:	00 94       	com	r0
 53a:	0f d0       	rcall	.+30     	; 0x55a <__negsi2>
 53c:	57 fd       	sbrc	r21, 7
 53e:	05 d0       	rcall	.+10     	; 0x54a <__divmodsi4_neg2>
 540:	24 d0       	rcall	.+72     	; 0x58a <__udivmodsi4>
 542:	07 fc       	sbrc	r0, 7
 544:	02 d0       	rcall	.+4      	; 0x54a <__divmodsi4_neg2>
 546:	46 f4       	brtc	.+16     	; 0x558 <__divmodsi4_exit>
 548:	08 c0       	rjmp	.+16     	; 0x55a <__negsi2>

0000054a <__divmodsi4_neg2>:
 54a:	50 95       	com	r21
 54c:	40 95       	com	r20
 54e:	30 95       	com	r19
 550:	21 95       	neg	r18
 552:	3f 4f       	sbci	r19, 0xFF	; 255
 554:	4f 4f       	sbci	r20, 0xFF	; 255
 556:	5f 4f       	sbci	r21, 0xFF	; 255

00000558 <__divmodsi4_exit>:
 558:	08 95       	ret

0000055a <__negsi2>:
 55a:	90 95       	com	r25
 55c:	80 95       	com	r24
 55e:	70 95       	com	r23
 560:	61 95       	neg	r22
 562:	7f 4f       	sbci	r23, 0xFF	; 255
 564:	8f 4f       	sbci	r24, 0xFF	; 255
 566:	9f 4f       	sbci	r25, 0xFF	; 255
 568:	08 95       	ret

0000056a <__muluhisi3>:
 56a:	7f df       	rcall	.-258    	; 0x46a <__umulhisi3>
 56c:	a5 9f       	mul	r26, r21
 56e:	90 0d       	add	r25, r0
 570:	b4 9f       	mul	r27, r20
 572:	90 0d       	add	r25, r0
 574:	a4 9f       	mul	r26, r20
 576:	80 0d       	add	r24, r0
 578:	91 1d       	adc	r25, r1
 57a:	11 24       	eor	r1, r1
 57c:	08 95       	ret

0000057e <__mulshisi3>:
 57e:	b7 ff       	sbrs	r27, 7
 580:	f4 cf       	rjmp	.-24     	; 0x56a <__muluhisi3>

00000582 <__mulohisi3>:
 582:	f3 df       	rcall	.-26     	; 0x56a <__muluhisi3>
 584:	82 1b       	sub	r24, r18
 586:	93 0b       	sbc	r25, r19
 588:	08 95       	ret

0000058a <__udivmodsi4>:
 58a:	a1 e2       	ldi	r26, 0x21	; 33
 58c:	1a 2e       	mov	r1, r26
 58e:	aa 1b       	sub	r26, r26
 590:	bb 1b       	sub	r27, r27
 592:	fd 01       	movw	r30, r26
 594:	0d c0       	rjmp	.+26     	; 0x5b0 <__udivmodsi4_ep>

00000596 <__udivmodsi4_loop>:
 596:	aa 1f       	adc	r26, r26
 598:	bb 1f       	adc	r27, r27
 59a:	ee 1f       	adc	r30, r30
 59c:	ff 1f       	adc	r31, r31
 59e:	a2 17       	cp	r26, r18
 5a0:	b3 07       	cpc	r27, r19
 5a2:	e4 07       	cpc	r30, r20
 5a4:	f5 07       	cpc	r31, r21
 5a6:	20 f0       	brcs	.+8      	; 0x5b0 <__udivmodsi4_ep>
 5a8:	a2 1b       	sub	r26, r18
 5aa:	b3 0b       	sbc	r27, r19
 5ac:	e4 0b       	sbc	r30, r20
 5ae:	f5 0b       	sbc	r31, r21

000005b0 <__udivmodsi4_ep>:
 5b0:	66 1f       	adc	r22, r22
 5b2:	77 1f       	adc	r23, r23
 5b4:	88 1f       	adc	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	1a 94       	dec	r1
 5ba:	69 f7       	brne	.-38     	; 0x596 <__udivmodsi4_loop>
 5bc:	60 95       	com	r22
 5be:	70 95       	com	r23
 5c0:	80 95       	com	r24
 5c2:	90 95       	com	r25
 5c4:	9b 01       	movw	r18, r22
 5c6:	ac 01       	movw	r20, r24
 5c8:	bd 01       	movw	r22, r26
 5ca:	cf 01       	movw	r24, r30
 5cc:	08 95       	ret

000005ce <_exit>:
 5ce:	f8 94       	cli

000005d0 <__stop_program>:
 5d0:	ff cf       	rjmp	.-2      	; 0x5d0 <__stop_program>
