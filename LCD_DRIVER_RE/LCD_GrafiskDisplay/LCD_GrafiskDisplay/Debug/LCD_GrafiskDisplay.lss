
LCD_GrafiskDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000050a  00800200  00000592  00000626  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000592  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080070a  0080070a  00000b30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000194e  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fb8  00000000  00000000  000025b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000820  00000000  00000000  0000356e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00003d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000824  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000065b  00000000  00000000  000047b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004e0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	17 e0       	ldi	r17, 0x07	; 7
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e9       	ldi	r30, 0x92	; 146
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	27 e0       	ldi	r18, 0x07	; 7
 110:	aa e0       	ldi	r26, 0x0A	; 10
 112:	b7 e0       	ldi	r27, 0x07	; 7
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 32       	cpi	r26, 0x25	; 37
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	e7 d1       	rcall	.+974    	; 0x4ee <main>
 120:	36 c2       	rjmp	.+1132   	; 0x58e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <writeCommand>:
// ILI 9341 data sheet, page 238
static void writeCommand(uint8_t command)
{
	uint8_t bit = 0b00000001;
	
	DATA_PORT_LOW =command;
 124:	88 b9       	out	0x08, r24	; 8
	
	DC_PORT &= ~(bit<<DC_BIT); //Trigger falling edge, no waiting because other controller is faster than us.
 126:	5f 98       	cbi	0x0b, 7	; 11
	CS_PORT &= ~(bit<<CS_BIT);
 128:	a1 98       	cbi	0x14, 1	; 20
	
	//Write pulse
	WR_PORT &= ~(bit<<WR_BIT); //WRX low
 12a:	a2 98       	cbi	0x14, 2	; 20
	WR_PORT |= bit<<WR_BIT; //WRX high triggers read signal
 12c:	a2 9a       	sbi	0x14, 2	; 20
 12e:	08 95       	ret

00000130 <writeData>:
static void writeData(uint16_t data)
{
	uint8_t bit = 0b00000001;
	
	//Set data
	DATA_PORT_HIGH = (uint8_t)(data>>8);
 130:	92 b9       	out	0x02, r25	; 2
	DATA_PORT_LOW = (uint8_t)(data&(0x00FF));
 132:	88 b9       	out	0x08, r24	; 8
	
	DC_PORT |= bit<<DC_BIT; //Trigger rising edge, no waiting because other controller is faster than us.
 134:	5f 9a       	sbi	0x0b, 7	; 11
	CS_PORT &= ~(bit<<CS_BIT); // Chip select active low, trigger falling edge
 136:	a1 98       	cbi	0x14, 1	; 20
	
	//Write pulse
	WR_PORT &= ~(bit<<WR_BIT);
 138:	a2 98       	cbi	0x14, 2	; 20
	WR_PORT |= bit<<WR_BIT;
 13a:	a2 9a       	sbi	0x14, 2	; 20
 13c:	08 95       	ret

0000013e <displayOff>:
}

static void displayOff()
{
	uint16_t command = 0b00101000;
	writeCommand(command);
 13e:	88 e2       	ldi	r24, 0x28	; 40
 140:	f1 cf       	rjmp	.-30     	; 0x124 <writeCommand>
 142:	08 95       	ret

00000144 <displayOn>:
}

static void displayOn()
{
	uint16_t command = 0b00101001;
	writeCommand(command);
 144:	89 e2       	ldi	r24, 0x29	; 41
 146:	ee cf       	rjmp	.-36     	; 0x124 <writeCommand>
 148:	08 95       	ret

0000014a <setColumnAddress>:
		writeData(rgb565ToInt(color));
	}
}

static void setColumnAddress(uint16_t Start, uint16_t End)
{
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	08 2f       	mov	r16, r24
 154:	d9 2f       	mov	r29, r25
 156:	16 2f       	mov	r17, r22
 158:	c7 2f       	mov	r28, r23
	uint16_t command = 0b00101010;
	writeCommand(command);
 15a:	8a e2       	ldi	r24, 0x2A	; 42
 15c:	e3 df       	rcall	.-58     	; 0x124 <writeCommand>
	writeData((Start>>8));
 15e:	8d 2f       	mov	r24, r29
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	e6 df       	rcall	.-52     	; 0x130 <writeData>
	writeData((Start));
 164:	80 2f       	mov	r24, r16
 166:	9d 2f       	mov	r25, r29
 168:	e3 df       	rcall	.-58     	; 0x130 <writeData>
	writeData((End>>8));
 16a:	8c 2f       	mov	r24, r28
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	e0 df       	rcall	.-64     	; 0x130 <writeData>
	writeData((End));
 170:	81 2f       	mov	r24, r17
 172:	9c 2f       	mov	r25, r28
 174:	dd df       	rcall	.-70     	; 0x130 <writeData>
 176:	df 91       	pop	r29
}
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	0f 91       	pop	r16
 17e:	08 95       	ret

00000180 <setPageAddress>:
 180:	0f 93       	push	r16

// Set Page Address (0-319), Start > End
static void setPageAddress(uint16_t Start, uint16_t End)
{
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	08 2f       	mov	r16, r24
 18a:	d9 2f       	mov	r29, r25
 18c:	16 2f       	mov	r17, r22
 18e:	c7 2f       	mov	r28, r23
	uint16_t command = 0b00101011;
	writeCommand(command);
 190:	8b e2       	ldi	r24, 0x2B	; 43
 192:	c8 df       	rcall	.-112    	; 0x124 <writeCommand>
	writeData((Start>>8));
 194:	8d 2f       	mov	r24, r29
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	cb df       	rcall	.-106    	; 0x130 <writeData>
	writeData((Start));
 19a:	80 2f       	mov	r24, r16
 19c:	9d 2f       	mov	r25, r29
 19e:	c8 df       	rcall	.-112    	; 0x130 <writeData>
	writeData((End>>8));
 1a0:	8c 2f       	mov	r24, r28
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	c5 df       	rcall	.-118    	; 0x130 <writeData>
	writeData((End));
 1a6:	81 2f       	mov	r24, r17
 1a8:	9c 2f       	mov	r25, r28
 1aa:	c2 df       	rcall	.-124    	; 0x130 <writeData>
 1ac:	df 91       	pop	r29
}
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	08 95       	ret

000001b6 <setCursor>:
 1b6:	e9 e1       	ldi	r30, 0x19	; 25

static void setCursor(uint16_t x_pos, uint16_t y_pos)
{
	myCursor.x_position = x_pos;
 1b8:	f7 e0       	ldi	r31, 0x07	; 7
 1ba:	94 83       	std	Z+4, r25	; 0x04
 1bc:	83 83       	std	Z+3, r24	; 0x03
	myCursor.y_position = y_pos;
 1be:	76 83       	std	Z+6, r23	; 0x06
 1c0:	65 83       	std	Z+5, r22	; 0x05
 1c2:	08 95       	ret

000001c4 <setCursorColor>:
}

static void setCursorColor(rgb_t* color)
{
	myCursor.color = *color;
 1c4:	fc 01       	movw	r30, r24
 1c6:	80 81       	ld	r24, Z
 1c8:	91 81       	ldd	r25, Z+1	; 0x01
 1ca:	a2 81       	ldd	r26, Z+2	; 0x02
 1cc:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <myCursor>
 1d0:	90 93 1a 07 	sts	0x071A, r25	; 0x80071a <myCursor+0x1>
 1d4:	a0 93 1b 07 	sts	0x071B, r26	; 0x80071b <myCursor+0x2>
 1d8:	08 95       	ret

000001da <writePixel>:
	uint16_t command = 0b00101100;
	writeCommand(command);
}

static void writePixel(rgb_t *color)
{
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	ec 01       	movw	r28, r24
	if(rgb565IsColorValid(color))
 1e0:	73 d1       	rcall	.+742    	; 0x4c8 <rgb565IsColorValid>
 1e2:	88 23       	and	r24, r24
 1e4:	19 f0       	breq	.+6      	; 0x1ec <writePixel+0x12>
	{
		writeData(rgb565ToInt(color));
 1e6:	ce 01       	movw	r24, r28
 1e8:	40 d1       	rcall	.+640    	; 0x46a <rgb565ToInt>
 1ea:	a2 df       	rcall	.-188    	; 0x130 <writeData>
	}
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <printTest>:
	}
	writeCommand(0);
}

static void printTest()
{
 1f2:	2f 92       	push	r2
 1f4:	3f 92       	push	r3
 1f6:	4f 92       	push	r4
 1f8:	5f 92       	push	r5
 1fa:	6f 92       	push	r6
 1fc:	7f 92       	push	r7
 1fe:	8f 92       	push	r8
 200:	9f 92       	push	r9
 202:	af 92       	push	r10
 204:	bf 92       	push	r11
 206:	cf 92       	push	r12
 208:	df 92       	push	r13
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	0f 2e       	mov	r0, r31
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	4f 2e       	mov	r4, r31
 21c:	f2 e0       	ldi	r31, 0x02	; 2
 21e:	5f 2e       	mov	r5, r31
 220:	f0 2d       	mov	r31, r0
 222:	0f 2e       	mov	r0, r31
 224:	f5 e3       	ldi	r31, 0x35	; 53
 226:	2f 2e       	mov	r2, r31
 228:	f2 e0       	ldi	r31, 0x02	; 2
 22a:	3f 2e       	mov	r3, r31
 22c:	f0 2d       	mov	r31, r0
	}
}

static void printCharById(uint8_t char_id)
{
	setPageAddress(myCursor.x_position,(myCursor.x_position+8));
 22e:	0f 2e       	mov	r0, r31
 230:	f9 e1       	ldi	r31, 0x19	; 25
 232:	ef 2e       	mov	r14, r31
 234:	f7 e0       	ldi	r31, 0x07	; 7
 236:	ff 2e       	mov	r15, r31
 238:	f0 2d       	mov	r31, r0
	uint8_t j = 0;
	for(i = 0; i<8; i++)
	{
		for (j = 0; j<13; j++)
		{
			if(letters[char_id][12-j]&(bit>>i))
 23a:	68 94       	set
 23c:	aa 24       	eor	r10, r10
 23e:	a7 f8       	bld	r10, 7
 240:	b1 2c       	mov	r11, r1
static void printString(char str[])
{
	uint8_t i = 0;
	for(i = 0; i<strlen(str); i++)
	{
		printCharById(((uint8_t)str[i])-32);
 242:	f2 01       	movw	r30, r4
 244:	01 91       	ld	r16, Z+
 246:	2f 01       	movw	r4, r30
	}
}

static void printCharById(uint8_t char_id)
{
	setPageAddress(myCursor.x_position,(myCursor.x_position+8));
 248:	f7 01       	movw	r30, r14
 24a:	83 81       	ldd	r24, Z+3	; 0x03
 24c:	94 81       	ldd	r25, Z+4	; 0x04
 24e:	bc 01       	movw	r22, r24
 250:	68 5f       	subi	r22, 0xF8	; 248
 252:	7f 4f       	sbci	r23, 0xFF	; 255
 254:	95 df       	rcall	.-214    	; 0x180 <setPageAddress>
	setColumnAddress(myCursor.y_position,(myCursor.y_position+12));
 256:	f7 01       	movw	r30, r14
 258:	85 81       	ldd	r24, Z+5	; 0x05
 25a:	96 81       	ldd	r25, Z+6	; 0x06
 25c:	bc 01       	movw	r22, r24
 25e:	64 5f       	subi	r22, 0xF4	; 244
 260:	7f 4f       	sbci	r23, 0xFF	; 255
 262:	73 df       	rcall	.-282    	; 0x14a <setColumnAddress>
}

static void memoryWrite()
{
	uint16_t command = 0b00101100;
	writeCommand(command);
 264:	8c e2       	ldi	r24, 0x2C	; 44
 266:	5e df       	rcall	.-324    	; 0x124 <writeCommand>
static void printCharById(uint8_t char_id)
{
	setPageAddress(myCursor.x_position,(myCursor.x_position+8));
	setColumnAddress(myCursor.y_position,(myCursor.y_position+12));
	memoryWrite();
	backgroundColor = *rgb565FromInt(WHITE);
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	9f ef       	ldi	r25, 0xFF	; 255
 26c:	12 d1       	rcall	.+548    	; 0x492 <rgb565FromInt>
 26e:	fc 01       	movw	r30, r24
 270:	80 81       	ld	r24, Z
 272:	91 81       	ldd	r25, Z+1	; 0x01
 274:	a2 81       	ldd	r26, Z+2	; 0x02
 276:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <backgroundColor>
 27a:	90 93 17 07 	sts	0x0717, r25	; 0x800717 <backgroundColor+0x1>
 27e:	a0 93 18 07 	sts	0x0718, r26	; 0x800718 <backgroundColor+0x2>
 282:	00 52       	subi	r16, 0x20	; 32
 284:	fd e0       	ldi	r31, 0x0D	; 13
 286:	f0 9f       	mul	r31, r16
 288:	80 01       	movw	r16, r0
 28a:	11 24       	eor	r1, r1
 28c:	c8 01       	movw	r24, r16
 28e:	8d 5b       	subi	r24, 0xBD	; 189
 290:	9d 4f       	sbci	r25, 0xFD	; 253
 292:	3c 01       	movw	r6, r24
 294:	0a 5c       	subi	r16, 0xCA	; 202
 296:	1d 4f       	sbci	r17, 0xFD	; 253
 298:	c1 2c       	mov	r12, r1
 29a:	d1 2c       	mov	r13, r1
 29c:	18 c0       	rjmp	.+48     	; 0x2ce <printTest+0xdc>
 29e:	f4 01       	movw	r30, r8
	uint8_t j = 0;
	for(i = 0; i<8; i++)
	{
		for (j = 0; j<13; j++)
		{
			if(letters[char_id][12-j]&(bit>>i))
 2a0:	82 91       	ld	r24, -Z
 2a2:	4f 01       	movw	r8, r30
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	8c 23       	and	r24, r28
 2a8:	9d 23       	and	r25, r29
 2aa:	89 2b       	or	r24, r25
 2ac:	19 f0       	breq	.+6      	; 0x2b4 <printTest+0xc2>
			{
				writePixel(&myCursor.color);
 2ae:	c7 01       	movw	r24, r14
 2b0:	94 df       	rcall	.-216    	; 0x1da <writePixel>
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <printTest+0xc8>
			}
			else
			{
				writePixel(&backgroundColor);
 2b4:	86 e1       	ldi	r24, 0x16	; 22
 2b6:	97 e0       	ldi	r25, 0x07	; 7
 2b8:	90 df       	rcall	.-224    	; 0x1da <writePixel>
 2ba:	80 16       	cp	r8, r16
	uint8_t bit = 0b10000000;
	uint8_t i = 0;
	uint8_t j = 0;
	for(i = 0; i<8; i++)
	{
		for (j = 0; j<13; j++)
 2bc:	91 06       	cpc	r9, r17
 2be:	79 f7       	brne	.-34     	; 0x29e <printTest+0xac>
 2c0:	ff ef       	ldi	r31, 0xFF	; 255
 2c2:	cf 1a       	sub	r12, r31
 2c4:	df 0a       	sbc	r13, r31
 2c6:	28 e0       	ldi	r18, 0x08	; 8
	backgroundColor = *rgb565FromInt(WHITE);

	uint8_t bit = 0b10000000;
	uint8_t i = 0;
	uint8_t j = 0;
	for(i = 0; i<8; i++)
 2c8:	c2 16       	cp	r12, r18
 2ca:	d1 04       	cpc	r13, r1
 2cc:	49 f0       	breq	.+18     	; 0x2e0 <printTest+0xee>
 2ce:	e5 01       	movw	r28, r10
	{
		for (j = 0; j<13; j++)
		{
			if(letters[char_id][12-j]&(bit>>i))
 2d0:	0c 2c       	mov	r0, r12
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <printTest+0xe6>
 2d4:	d5 95       	asr	r29
 2d6:	c7 95       	ror	r28
 2d8:	0a 94       	dec	r0
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <printTest+0xe2>
 2dc:	43 01       	movw	r8, r6
 2de:	df cf       	rjmp	.-66     	; 0x29e <printTest+0xac>
				writePixel(&backgroundColor);
			}
		}
		j = 0;
	}
	writeCommand(0);
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	20 df       	rcall	.-448    	; 0x124 <writeCommand>
 2e4:	f7 01       	movw	r30, r14
{
	uint8_t i = 0;
	for(i = 0; i<strlen(str); i++)
	{
		printCharById(((uint8_t)str[i])-32);
		if(myCursor.x_position < 280)
 2e6:	83 81       	ldd	r24, Z+3	; 0x03
 2e8:	94 81       	ldd	r25, Z+4	; 0x04
 2ea:	88 31       	cpi	r24, 0x18	; 24
 2ec:	f1 e0       	ldi	r31, 0x01	; 1
 2ee:	9f 07       	cpc	r25, r31
 2f0:	28 f4       	brcc	.+10     	; 0x2fc <printTest+0x10a>
 2f2:	0d 96       	adiw	r24, 0x0d	; 13
		{
			myCursor.x_position += 13;
 2f4:	f7 01       	movw	r30, r14
 2f6:	94 83       	std	Z+4, r25	; 0x04
 2f8:	83 83       	std	Z+3, r24	; 0x03
 2fa:	0d c0       	rjmp	.+26     	; 0x316 <printTest+0x124>
 2fc:	f7 01       	movw	r30, r14
		}
		else if (myCursor.y_position < 210)
 2fe:	85 81       	ldd	r24, Z+5	; 0x05
 300:	96 81       	ldd	r25, Z+6	; 0x06
 302:	82 3d       	cpi	r24, 0xD2	; 210
 304:	91 05       	cpc	r25, r1
 306:	38 f4       	brcc	.+14     	; 0x316 <printTest+0x124>
 308:	0d 96       	adiw	r24, 0x0d	; 13
		{
			myCursor.y_position +=13;
 30a:	96 83       	std	Z+6, r25	; 0x06
 30c:	85 83       	std	Z+5, r24	; 0x05
 30e:	8a e0       	ldi	r24, 0x0A	; 10
			myCursor.x_position = 10;
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	94 83       	std	Z+4, r25	; 0x04
 314:	83 83       	std	Z+3, r24	; 0x03
 316:	42 14       	cp	r4, r2
}

static void printString(char str[])
{
	uint8_t i = 0;
	for(i = 0; i<strlen(str); i++)
 318:	53 04       	cpc	r5, r3
 31a:	09 f0       	breq	.+2      	; 0x31e <printTest+0x12c>
 31c:	92 cf       	rjmp	.-220    	; 0x242 <printTest+0x50>
 31e:	df 91       	pop	r29
}

static void printTest()
{
	printString("Now this is some fancy shit, we gonna be rich boyz!!!");
}
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	ff 90       	pop	r15
 328:	ef 90       	pop	r14
 32a:	df 90       	pop	r13
 32c:	cf 90       	pop	r12
 32e:	bf 90       	pop	r11
 330:	af 90       	pop	r10
 332:	9f 90       	pop	r9
 334:	8f 90       	pop	r8
 336:	7f 90       	pop	r7
 338:	6f 90       	pop	r6
 33a:	5f 90       	pop	r5
 33c:	4f 90       	pop	r4
 33e:	3f 90       	pop	r3
 340:	2f 90       	pop	r2
 342:	08 95       	ret

00000344 <drawRectangle>:
 344:	8f 92       	push	r8
	myCursor.color = *color;
}


static void drawRectangle(uint16_t Width, uint16_t Height)
{
 346:	9f 92       	push	r9
 348:	af 92       	push	r10
 34a:	bf 92       	push	r11
 34c:	cf 92       	push	r12
 34e:	df 92       	push	r13
 350:	ef 92       	push	r14
 352:	ff 92       	push	r15
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	6c 01       	movw	r12, r24
 35a:	7b 01       	movw	r14, r22
	uint32_t i = 0;
	setPageAddress(myCursor.x_position,(myCursor.x_position+Width));
 35c:	c9 e1       	ldi	r28, 0x19	; 25
 35e:	d7 e0       	ldi	r29, 0x07	; 7
 360:	8b 81       	ldd	r24, Y+3	; 0x03
 362:	9c 81       	ldd	r25, Y+4	; 0x04
 364:	bc 01       	movw	r22, r24
 366:	6c 0d       	add	r22, r12
 368:	7d 1d       	adc	r23, r13
 36a:	0a df       	rcall	.-492    	; 0x180 <setPageAddress>
	setColumnAddress(myCursor.y_position,(myCursor.y_position+Height));
 36c:	8d 81       	ldd	r24, Y+5	; 0x05
 36e:	9e 81       	ldd	r25, Y+6	; 0x06
 370:	bc 01       	movw	r22, r24
 372:	6e 0d       	add	r22, r14
 374:	7f 1d       	adc	r23, r15
 376:	e9 de       	rcall	.-558    	; 0x14a <setColumnAddress>
}

static void memoryWrite()
{
	uint16_t command = 0b00101100;
	writeCommand(command);
 378:	8c e2       	ldi	r24, 0x2C	; 44
 37a:	d4 de       	rcall	.-600    	; 0x124 <writeCommand>
	uint32_t i = 0;
	setPageAddress(myCursor.x_position,(myCursor.x_position+Width));
	setColumnAddress(myCursor.y_position,(myCursor.y_position+Height));
	memoryWrite();
	
	for(i = 0; i<((uint32_t)Width*(uint32_t)Height); i++)
 37c:	96 01       	movw	r18, r12
 37e:	d7 01       	movw	r26, r14
 380:	f7 d0       	rcall	.+494    	; 0x570 <__umulhisi3>
 382:	4b 01       	movw	r8, r22
 384:	5c 01       	movw	r10, r24
 386:	67 2b       	or	r22, r23
 388:	68 2b       	or	r22, r24
 38a:	69 2b       	or	r22, r25
 38c:	81 f0       	breq	.+32     	; 0x3ae <drawRectangle+0x6a>
 38e:	c1 2c       	mov	r12, r1
 390:	d1 2c       	mov	r13, r1
 392:	76 01       	movw	r14, r12
	{
		writePixel(&myCursor.color);
 394:	89 e1       	ldi	r24, 0x19	; 25
 396:	97 e0       	ldi	r25, 0x07	; 7
 398:	20 df       	rcall	.-448    	; 0x1da <writePixel>
 39a:	8f ef       	ldi	r24, 0xFF	; 255
	uint32_t i = 0;
	setPageAddress(myCursor.x_position,(myCursor.x_position+Width));
	setColumnAddress(myCursor.y_position,(myCursor.y_position+Height));
	memoryWrite();
	
	for(i = 0; i<((uint32_t)Width*(uint32_t)Height); i++)
 39c:	c8 1a       	sub	r12, r24
 39e:	d8 0a       	sbc	r13, r24
 3a0:	e8 0a       	sbc	r14, r24
 3a2:	f8 0a       	sbc	r15, r24
 3a4:	c8 14       	cp	r12, r8
 3a6:	d9 04       	cpc	r13, r9
 3a8:	ea 04       	cpc	r14, r10
 3aa:	fb 04       	cpc	r15, r11
 3ac:	99 f7       	brne	.-26     	; 0x394 <drawRectangle+0x50>
	{
		writePixel(&myCursor.color);
	}
	writeCommand(0);
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	b9 de       	rcall	.-654    	; 0x124 <writeCommand>
 3b2:	df 91       	pop	r29
}
 3b4:	cf 91       	pop	r28
 3b6:	ff 90       	pop	r15
 3b8:	ef 90       	pop	r14
 3ba:	df 90       	pop	r13
 3bc:	cf 90       	pop	r12
 3be:	bf 90       	pop	r11
 3c0:	af 90       	pop	r10
 3c2:	9f 90       	pop	r9
 3c4:	8f 90       	pop	r8
 3c6:	08 95       	ret

000003c8 <lcdDriver_getDriver>:
 3c8:	83 b3       	in	r24, 0x13	; 19
static void driverInit()
{
	uint8_t bit = 0b00000001;
	
	//Set control bits to output
	DDRG |= (bit<<CS_BIT)|(bit<<RST_BIT)|(bit<<WR_BIT);
 3ca:	87 60       	ori	r24, 0x07	; 7
 3cc:	83 bb       	out	0x13, r24	; 19
	DDRD |= (bit<<DC_BIT);
 3ce:	57 9a       	sbi	0x0a, 7	; 10
	
	//Set data ports to output
	DDRA |= 0xFF;
 3d0:	81 b1       	in	r24, 0x01	; 1
 3d2:	8f ef       	ldi	r24, 0xFF	; 255
 3d4:	81 b9       	out	0x01, r24	; 1
	DDRC |= 0xFF;
 3d6:	97 b1       	in	r25, 0x07	; 7
 3d8:	87 b9       	out	0x07, r24	; 7
	
	// set control pins start position high
	DC_PORT |= bit<<DC_BIT;
 3da:	5f 9a       	sbi	0x0b, 7	; 11
	WR_PORT |= bit<<WR_BIT;
 3dc:	a2 9a       	sbi	0x14, 2	; 20
	CS_PORT	|= bit<<CS_BIT;
 3de:	a1 9a       	sbi	0x14, 1	; 20
	RST_PORT|= bit<<RST_BIT;
 3e0:	a0 9a       	sbi	0x14, 0	; 20
	
	//Reset grafik display
	RST_PORT &= ~(bit<<RST_BIT);
 3e2:	a0 98       	cbi	0x14, 0	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e4:	2f ef       	ldi	r18, 0xFF	; 255
 3e6:	89 e6       	ldi	r24, 0x69	; 105
 3e8:	98 e1       	ldi	r25, 0x18	; 24
 3ea:	21 50       	subi	r18, 0x01	; 1
 3ec:	80 40       	sbci	r24, 0x00	; 0
 3ee:	90 40       	sbci	r25, 0x00	; 0
 3f0:	e1 f7       	brne	.-8      	; 0x3ea <lcdDriver_getDriver+0x22>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <lcdDriver_getDriver+0x2c>
 3f4:	00 00       	nop
	_delay_ms(500);
	RST_PORT|= bit<<RST_BIT;
 3f6:	a0 9a       	sbi	0x14, 0	; 20
 3f8:	af ef       	ldi	r26, 0xFF	; 255
 3fa:	b8 e5       	ldi	r27, 0x58	; 88
 3fc:	26 e0       	ldi	r18, 0x06	; 6
 3fe:	a1 50       	subi	r26, 0x01	; 1
 400:	b0 40       	sbci	r27, 0x00	; 0
 402:	20 40       	sbci	r18, 0x00	; 0
 404:	e1 f7       	brne	.-8      	; 0x3fe <lcdDriver_getDriver+0x36>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 408:	00 00       	nop
}

static void sleepOut()
{
	uint16_t command = 0b00010001;
	writeCommand(command);
 40a:	81 e1       	ldi	r24, 0x11	; 17
 40c:	8b de       	rcall	.-746    	; 0x124 <writeCommand>
	RST_PORT|= bit<<RST_BIT;
	_delay_ms(130);
	
	sleepOut();
	// Display on
	displayOn();
 40e:	9a de       	rcall	.-716    	; 0x144 <displayOn>
}

static void memoryAccessControl(uint8_t parameter)
{
	uint16_t command = 0b00110110;
	writeCommand(command);
 410:	86 e3       	ldi	r24, 0x36	; 54
 412:	88 de       	rcall	.-752    	; 0x124 <writeCommand>
	writeData((uint16_t)parameter);
 414:	88 e0       	ldi	r24, 0x08	; 8
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	8b de       	rcall	.-746    	; 0x130 <writeData>
}

static void interfacePixelFormat(uint8_t parameter)
{
	uint16_t command = 0b00111010;
	writeCommand(command);
 41a:	8a e3       	ldi	r24, 0x3A	; 58
 41c:	83 de       	rcall	.-762    	; 0x124 <writeCommand>
	writeData((uint16_t)parameter);
 41e:	85 e0       	ldi	r24, 0x05	; 5
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	86 de       	rcall	.-756    	; 0x130 <writeData>
 424:	87 e0       	ldi	r24, 0x07	; 7
	// Set bit BGR (scanning direction)
	memoryAccessControl(0b00001000);
	// 16 bits (2 bytes) per pixel
	interfacePixelFormat(0b00000101);
	
	memset(&myCursor,0,sizeof(myCursor));
 426:	e9 e1       	ldi	r30, 0x19	; 25
 428:	f7 e0       	ldi	r31, 0x07	; 7
 42a:	df 01       	movw	r26, r30
 42c:	1d 92       	st	X+, r1
 42e:	8a 95       	dec	r24
 430:	e9 f7       	brne	.-6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 432:	ea e0       	ldi	r30, 0x0A	; 10
lcdDriverInterface_t* lcdDriver_getDriver()
{
	if(!initialized)
	{
		driverInit();
		myInterface.displayON = displayOn;
 434:	f7 e0       	ldi	r31, 0x07	; 7
 436:	82 ea       	ldi	r24, 0xA2	; 162
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	91 83       	std	Z+1, r25	; 0x01
 43c:	80 83       	st	Z, r24
 43e:	8f e9       	ldi	r24, 0x9F	; 159
		myInterface.displayOFF = displayOff;
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	93 83       	std	Z+3, r25	; 0x03
 444:	82 83       	std	Z+2, r24	; 0x02
 446:	82 ee       	ldi	r24, 0xE2	; 226
		myInterface.setCursorColor = setCursorColor;
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	95 83       	std	Z+5, r25	; 0x05
 44c:	84 83       	std	Z+4, r24	; 0x04
 44e:	8b ed       	ldi	r24, 0xDB	; 219
		myInterface.setCursor = setCursor;
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	97 83       	std	Z+7, r25	; 0x07
 454:	86 83       	std	Z+6, r24	; 0x06
 456:	82 ea       	ldi	r24, 0xA2	; 162
		myInterface.drawRectangle = drawRectangle;
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	91 87       	std	Z+9, r25	; 0x09
 45c:	80 87       	std	Z+8, r24	; 0x08
 45e:	89 ef       	ldi	r24, 0xF9	; 249
		myInterface.printTest = printTest;
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	93 87       	std	Z+11, r25	; 0x0b
 464:	82 87       	std	Z+10, r24	; 0x0a
 466:	cf 01       	movw	r24, r30
	}
	return &myInterface;
}
 468:	08 95       	ret

0000046a <rgb565ToInt>:
#include <string.h>

static rgb_t rgbColor;

uint16_t rgb565ToInt(rgb_t *color)
{
 46a:	fc 01       	movw	r30, r24
	uint16_t colorInt = 0;
	colorInt |= ((uint16_t)color->red) << 11;
	colorInt |= ((uint16_t)color->green) << 5;
 46c:	20 81       	ld	r18, Z
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	32 2f       	mov	r19, r18
 472:	22 27       	eor	r18, r18
 474:	33 0f       	add	r19, r19
 476:	33 0f       	add	r19, r19
 478:	33 0f       	add	r19, r19
 47a:	41 81       	ldd	r20, Z+1	; 0x01
 47c:	80 e2       	ldi	r24, 0x20	; 32
 47e:	48 9f       	mul	r20, r24
 480:	a0 01       	movw	r20, r0
 482:	11 24       	eor	r1, r1
 484:	24 2b       	or	r18, r20
 486:	35 2b       	or	r19, r21
	colorInt |= (uint16_t)color->blue;
		
	return colorInt;
 488:	82 81       	ldd	r24, Z+2	; 0x02
}
 48a:	a9 01       	movw	r20, r18
 48c:	48 2b       	or	r20, r24
 48e:	ca 01       	movw	r24, r20
 490:	08 95       	ret

00000492 <rgb565FromInt>:

rgb_t* rgb565FromInt(uint16_t color)
{
	memset(&rgbColor,0,sizeof(rgbColor));
 492:	e0 e2       	ldi	r30, 0x20	; 32
 494:	f7 e0       	ldi	r31, 0x07	; 7
 496:	23 e0       	ldi	r18, 0x03	; 3
 498:	df 01       	movw	r26, r30
 49a:	1d 92       	st	X+, r1
 49c:	2a 95       	dec	r18
 49e:	e9 f7       	brne	.-6      	; 0x49a <rgb565FromInt+0x8>
	rgbColor.red = (uint8_t)(color>>11);
 4a0:	29 2f       	mov	r18, r25
 4a2:	26 95       	lsr	r18
 4a4:	26 95       	lsr	r18
 4a6:	26 95       	lsr	r18
 4a8:	20 83       	st	Z, r18
	rgbColor.green = (uint8_t)((color&0x07FF)>>5);
 4aa:	9c 01       	movw	r18, r24
 4ac:	37 70       	andi	r19, 0x07	; 7
 4ae:	36 95       	lsr	r19
 4b0:	27 95       	ror	r18
 4b2:	32 95       	swap	r19
 4b4:	22 95       	swap	r18
 4b6:	2f 70       	andi	r18, 0x0F	; 15
 4b8:	23 27       	eor	r18, r19
 4ba:	3f 70       	andi	r19, 0x0F	; 15
 4bc:	23 27       	eor	r18, r19
 4be:	21 83       	std	Z+1, r18	; 0x01
	rgbColor.blue = (uint8_t)(color&0x1F);
 4c0:	8f 71       	andi	r24, 0x1F	; 31
 4c2:	82 83       	std	Z+2, r24	; 0x02
	
	return &rgbColor;
}
 4c4:	cf 01       	movw	r24, r30
 4c6:	08 95       	ret

000004c8 <rgb565IsColorValid>:

bool rgb565IsColorValid(rgb_t *color)
{
	return ((color->red < 32) && (color->blue < 32) && (color->green < 64));
 4c8:	fc 01       	movw	r30, r24
 4ca:	20 81       	ld	r18, Z
 4cc:	20 32       	cpi	r18, 0x20	; 32
 4ce:	50 f4       	brcc	.+20     	; 0x4e4 <rgb565IsColorValid+0x1c>
 4d0:	22 81       	ldd	r18, Z+2	; 0x02
 4d2:	20 32       	cpi	r18, 0x20	; 32
 4d4:	48 f4       	brcc	.+18     	; 0x4e8 <rgb565IsColorValid+0x20>
 4d6:	21 e0       	ldi	r18, 0x01	; 1
 4d8:	81 81       	ldd	r24, Z+1	; 0x01
 4da:	80 34       	cpi	r24, 0x40	; 64
 4dc:	08 f0       	brcs	.+2      	; 0x4e0 <rgb565IsColorValid+0x18>
 4de:	20 e0       	ldi	r18, 0x00	; 0
 4e0:	82 2f       	mov	r24, r18
 4e2:	03 c0       	rjmp	.+6      	; 0x4ea <rgb565IsColorValid+0x22>
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	01 c0       	rjmp	.+2      	; 0x4ea <rgb565IsColorValid+0x22>
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	81 70       	andi	r24, 0x01	; 1
 4ec:	08 95       	ret

000004ee <main>:

uint16_t rand_lim(uint16_t limit);

int main(void)
{
    screen = lcdDriver_getDriver();
 4ee:	6c df       	rcall	.-296    	; 0x3c8 <lcdDriver_getDriver>
 4f0:	90 93 24 07 	sts	0x0724, r25	; 0x800724 <screen+0x1>
 4f4:	80 93 23 07 	sts	0x0723, r24	; 0x800723 <screen>
	
	screen->setCursorColor(rgb565FromInt(WHITE));
 4f8:	fc 01       	movw	r30, r24
 4fa:	c4 81       	ldd	r28, Z+4	; 0x04
 4fc:	d5 81       	ldd	r29, Z+5	; 0x05
 4fe:	8f ef       	ldi	r24, 0xFF	; 255
 500:	9f ef       	ldi	r25, 0xFF	; 255
 502:	c7 df       	rcall	.-114    	; 0x492 <rgb565FromInt>
 504:	fe 01       	movw	r30, r28
 506:	19 95       	eicall
	screen->drawRectangle(319,239);
 508:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <screen>
 50c:	f0 91 24 07 	lds	r31, 0x0724	; 0x800724 <screen+0x1>
 510:	00 84       	ldd	r0, Z+8	; 0x08
 512:	f1 85       	ldd	r31, Z+9	; 0x09
 514:	e0 2d       	mov	r30, r0
 516:	6f ee       	ldi	r22, 0xEF	; 239
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	8f e3       	ldi	r24, 0x3F	; 63
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	19 95       	eicall
	screen->setCursorColor(rgb565FromInt(BLACK));
 520:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <screen>
 524:	f0 91 24 07 	lds	r31, 0x0724	; 0x800724 <screen+0x1>
 528:	c4 81       	ldd	r28, Z+4	; 0x04
 52a:	d5 81       	ldd	r29, Z+5	; 0x05
 52c:	81 e2       	ldi	r24, 0x21	; 33
 52e:	98 e0       	ldi	r25, 0x08	; 8
 530:	b0 df       	rcall	.-160    	; 0x492 <rgb565FromInt>
 532:	fe 01       	movw	r30, r28
 534:	19 95       	eicall
	screen->setCursor(50,50);
 536:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <screen>
 53a:	f0 91 24 07 	lds	r31, 0x0724	; 0x800724 <screen+0x1>
 53e:	06 80       	ldd	r0, Z+6	; 0x06
 540:	f7 81       	ldd	r31, Z+7	; 0x07
 542:	e0 2d       	mov	r30, r0
 544:	62 e3       	ldi	r22, 0x32	; 50
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	82 e3       	ldi	r24, 0x32	; 50
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	19 95       	eicall
	screen->printTest();
 54e:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <screen>
 552:	f0 91 24 07 	lds	r31, 0x0724	; 0x800724 <screen+0x1>
 556:	02 84       	ldd	r0, Z+10	; 0x0a
 558:	f3 85       	ldd	r31, Z+11	; 0x0b
 55a:	e0 2d       	mov	r30, r0
 55c:	19 95       	eicall
	screen->displayON();
 55e:	e0 91 23 07 	lds	r30, 0x0723	; 0x800723 <screen>
 562:	f0 91 24 07 	lds	r31, 0x0724	; 0x800724 <screen+0x1>
 566:	01 90       	ld	r0, Z+
 568:	f0 81       	ld	r31, Z
 56a:	e0 2d       	mov	r30, r0
 56c:	19 95       	eicall
 56e:	ff cf       	rjmp	.-2      	; 0x56e <main+0x80>

00000570 <__umulhisi3>:
 570:	a2 9f       	mul	r26, r18
 572:	b0 01       	movw	r22, r0
 574:	b3 9f       	mul	r27, r19
 576:	c0 01       	movw	r24, r0
 578:	a3 9f       	mul	r26, r19
 57a:	70 0d       	add	r23, r0
 57c:	81 1d       	adc	r24, r1
 57e:	11 24       	eor	r1, r1
 580:	91 1d       	adc	r25, r1
 582:	b2 9f       	mul	r27, r18
 584:	70 0d       	add	r23, r0
 586:	81 1d       	adc	r24, r1
 588:	11 24       	eor	r1, r1
 58a:	91 1d       	adc	r25, r1
 58c:	08 95       	ret

0000058e <_exit>:
 58e:	f8 94       	cli

00000590 <__stop_program>:
 590:	ff cf       	rjmp	.-2      	; 0x590 <__stop_program>
