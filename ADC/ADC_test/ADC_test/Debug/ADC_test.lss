
ADC_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  0000079c  00000830  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000079c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800210  00800210  00000840  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000189e  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000111b  00000000  00000000  0000221e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008cb  00000000  00000000  00003339  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00003c04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000856  00000000  00000000  00003d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ed  00000000  00000000  000045ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004bb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e9       	ldi	r30, 0x9C	; 156
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e1       	ldi	r26, 0x10	; 16
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 32       	cpi	r26, 0x26	; 38
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	93 d1       	rcall	.+806    	; 0x446 <main>
 120:	3b c3       	rjmp	.+1654   	; 0x798 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <s_init>:
	return &LightSensorInterface;	 
 }
 
 static void s_init(uint8_t p_pin_no, uint16_t p_threshold)
 {
	light_threshold		=	p_threshold;
 124:	70 93 25 02 	sts	0x0225, r23	; 0x800225 <light_threshold+0x1>
 128:	60 93 24 02 	sts	0x0224, r22	; 0x800224 <light_threshold>
	pin_no				=	p_pin_no;
 12c:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <__data_end>
 130:	08 95       	ret

00000132 <s_getLightStatus>:
 
 }
 
 static bool s_getLightStatus(void)
 {
	if(ADC_interface->getADC_mV(pin_no)>=light_threshold)
 132:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <ADC_interface>
 136:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <ADC_interface+0x1>
 13a:	04 80       	ldd	r0, Z+4	; 0x04
 13c:	f5 81       	ldd	r31, Z+5	; 0x05
 13e:	e0 2d       	mov	r30, r0
 140:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__data_end>
 144:	19 95       	eicall
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <light_threshold>
 14c:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <light_threshold+0x1>
 150:	84 17       	cp	r24, r20
 152:	95 07       	cpc	r25, r21
 154:	08 f0       	brcs	.+2      	; 0x158 <s_getLightStatus+0x26>
 156:	20 e0       	ldi	r18, 0x00	; 0
	}
	else
	{
	return true;
	}
 158:	82 2f       	mov	r24, r18
 15a:	08 95       	ret

0000015c <get_lightSensor_interface>:

static void s_init(uint8_t p_pin_no, uint16_t p_threshold);
static bool s_getLightStatus(void);
 
 LightSensor_t *get_lightSensor_interface(ADC_t * p_ADC_Interface)
 {
 15c:	9c 01       	movw	r18, r24
	if (!initialized)
 15e:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <initialized>
 162:	91 11       	cpse	r25, r1
 164:	11 c0       	rjmp	.+34     	; 0x188 <get_lightSensor_interface+0x2c>
	{	ADC_interface								=	p_ADC_Interface;
 166:	30 93 13 02 	sts	0x0213, r19	; 0x800213 <ADC_interface+0x1>
 16a:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <ADC_interface>
		
		LightSensorInterface.init					=	s_init;
 16e:	e4 e1       	ldi	r30, 0x14	; 20
 170:	f2 e0       	ldi	r31, 0x02	; 2
 172:	82 e9       	ldi	r24, 0x92	; 146
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	91 83       	std	Z+1, r25	; 0x01
 178:	80 83       	st	Z, r24
		LightSensorInterface.getLightStatus			=	s_getLightStatus;
 17a:	89 e9       	ldi	r24, 0x99	; 153
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	93 83       	std	Z+3, r25	; 0x03
 180:	82 83       	std	Z+2, r24	; 0x02
		
		initialized									=	true;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <initialized>
	}
	return &LightSensorInterface;	 
 }
 188:	84 e1       	ldi	r24, 0x14	; 20
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	08 95       	ret

0000018e <InitUART>:
  // Wait for new character received
  while ( (UCSRnA & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDRn;
}
 18e:	0f 93       	push	r16
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	ec 01       	movw	r28, r24
 196:	db 01       	movw	r26, r22
 198:	ca 01       	movw	r24, r20
 19a:	8c 52       	subi	r24, 0x2C	; 44
 19c:	91 40       	sbci	r25, 0x01	; 1
 19e:	a1 09       	sbc	r26, r1
 1a0:	b1 09       	sbc	r27, r1
 1a2:	85 3d       	cpi	r24, 0xD5	; 213
 1a4:	90 4c       	sbci	r25, 0xC0	; 192
 1a6:	a1 40       	sbci	r26, 0x01	; 1
 1a8:	b1 05       	cpc	r27, r1
 1aa:	08 f0       	brcs	.+2      	; 0x1ae <InitUART+0x20>
 1ac:	3f c0       	rjmp	.+126    	; 0x22c <InitUART+0x9e>
 1ae:	25 50       	subi	r18, 0x05	; 5
 1b0:	24 30       	cpi	r18, 0x04	; 4
 1b2:	e0 f5       	brcc	.+120    	; 0x22c <InitUART+0x9e>
 1b4:	80 e2       	ldi	r24, 0x20	; 32
 1b6:	88 83       	st	Y, r24
 1b8:	88 e1       	ldi	r24, 0x18	; 24
 1ba:	89 83       	std	Y+1, r24	; 0x01
 1bc:	22 0f       	add	r18, r18
 1be:	2a 83       	std	Y+2, r18	; 0x02
 1c0:	05 34       	cpi	r16, 0x45	; 69
 1c2:	21 f4       	brne	.+8      	; 0x1cc <InitUART+0x3e>
 1c4:	8a 81       	ldd	r24, Y+2	; 0x02
 1c6:	80 62       	ori	r24, 0x20	; 32
 1c8:	8a 83       	std	Y+2, r24	; 0x02
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <InitUART+0x48>
 1cc:	0f 34       	cpi	r16, 0x4F	; 79
 1ce:	19 f4       	brne	.+6      	; 0x1d6 <InitUART+0x48>
 1d0:	8a 81       	ldd	r24, Y+2	; 0x02
 1d2:	80 63       	ori	r24, 0x30	; 48
 1d4:	8a 83       	std	Y+2, r24	; 0x02
 1d6:	db 01       	movw	r26, r22
 1d8:	ca 01       	movw	r24, r20
 1da:	80 58       	subi	r24, 0x80	; 128
 1dc:	9b 47       	sbci	r25, 0x7B	; 123
 1de:	a1 4e       	sbci	r26, 0xE1	; 225
 1e0:	bf 4f       	sbci	r27, 0xFF	; 255
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	aa 1f       	adc	r26, r26
 1e8:	bb 1f       	adc	r27, r27
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	aa 1f       	adc	r26, r26
 1f0:	bb 1f       	adc	r27, r27
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	aa 1f       	adc	r26, r26
 1f8:	bb 1f       	adc	r27, r27
 1fa:	44 0f       	add	r20, r20
 1fc:	55 1f       	adc	r21, r21
 1fe:	66 1f       	adc	r22, r22
 200:	77 1f       	adc	r23, r23
 202:	44 0f       	add	r20, r20
 204:	55 1f       	adc	r21, r21
 206:	66 1f       	adc	r22, r22
 208:	77 1f       	adc	r23, r23
 20a:	9a 01       	movw	r18, r20
 20c:	ab 01       	movw	r20, r22
 20e:	22 0f       	add	r18, r18
 210:	33 1f       	adc	r19, r19
 212:	44 1f       	adc	r20, r20
 214:	55 1f       	adc	r21, r21
 216:	22 0f       	add	r18, r18
 218:	33 1f       	adc	r19, r19
 21a:	44 1f       	adc	r20, r20
 21c:	55 1f       	adc	r21, r21
 21e:	bc 01       	movw	r22, r24
 220:	cd 01       	movw	r24, r26
 222:	65 d2       	rcall	.+1226   	; 0x6ee <__udivmodsi4>
 224:	21 50       	subi	r18, 0x01	; 1
 226:	31 09       	sbc	r19, r1
 228:	3d 83       	std	Y+5, r19	; 0x05
 22a:	2c 83       	std	Y+4, r18	; 0x04
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	0f 91       	pop	r16
 232:	08 95       	ret

00000234 <SendChar>:
Then send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(unsigned int UART_adr, char Tegn)
{
 234:	fc 01       	movw	r30, r24
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRnA & (1<<5)) == 0 )
 236:	90 81       	ld	r25, Z
 238:	95 ff       	sbrs	r25, 5
 23a:	fd cf       	rjmp	.-6      	; 0x236 <SendChar+0x2>
  {}
  // Then send the character
  UDRn = Tegn;
 23c:	66 83       	std	Z+6, r22	; 0x06
 23e:	08 95       	ret

00000240 <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	eb 01       	movw	r28, r22
  // Repeat until zero-termination
  while (*Streng != 0)
 24a:	68 81       	ld	r22, Y
 24c:	66 23       	and	r22, r22
 24e:	39 f0       	breq	.+14     	; 0x25e <SendString+0x1e>
 250:	8c 01       	movw	r16, r24
 252:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
 254:	c8 01       	movw	r24, r16
 256:	ee df       	rcall	.-36     	; 0x234 <SendChar>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 258:	69 91       	ld	r22, Y+
 25a:	61 11       	cpse	r22, r1
 25c:	fb cf       	rjmp	.-10     	; 0x254 <SendString+0x14>
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	08 95       	ret

00000268 <SendInteger>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(unsigned int UART_adr, int Tal)
{
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	27 97       	sbiw	r28, 0x07	; 7
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
 280:	8c 01       	movw	r16, r24
 282:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 284:	4a e0       	ldi	r20, 0x0A	; 10
 286:	be 01       	movw	r22, r28
 288:	6f 5f       	subi	r22, 0xFF	; 255
 28a:	7f 4f       	sbci	r23, 0xFF	; 255
 28c:	52 d2       	rcall	.+1188   	; 0x732 <__itoa_ncheck>
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Tal, array, 10);
  // - then send the string
  SendString(UART_adr, array);
 28e:	be 01       	movw	r22, r28
 290:	6f 5f       	subi	r22, 0xFF	; 255
 292:	7f 4f       	sbci	r23, 0xFF	; 255
 294:	c8 01       	movw	r24, r16
 296:	d4 df       	rcall	.-88     	; 0x240 <SendString>
}
 298:	27 96       	adiw	r28, 0x07	; 7
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	08 95       	ret

000002ae <s_initADC>:
	return &ADC_interface;
}

static void s_initADC(ADC_REF p_reff_vol, float p_aRef)
{
	PRR0=PRR0 & ~(1<<PRADC);//enable ADC
 2ae:	e4 e6       	ldi	r30, 0x64	; 100
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	90 81       	ld	r25, Z
 2b4:	9e 7f       	andi	r25, 0xFE	; 254
 2b6:	90 83       	st	Z, r25
	
	ADMUX=0b00000000; //reset ADC registers
 2b8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA=0b00000000;
 2bc:	ea e7       	ldi	r30, 0x7A	; 122
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	10 82       	st	Z, r1
	ADCSRB=0b00000000;
 2c2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	//ADMUX|=1<<ADLAR; // set to left adjust
	ADCSRA|=0b00000111; //set prescaler 128	
 2c6:	90 81       	ld	r25, Z
 2c8:	97 60       	ori	r25, 0x07	; 7
 2ca:	90 83       	st	Z, r25
	ADCSRA|=1<<ADEN;
 2cc:	90 81       	ld	r25, Z
 2ce:	90 68       	ori	r25, 0x80	; 128
 2d0:	90 83       	st	Z, r25
	
	//ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
	//selecting ref
	ref_type=p_reff_vol;
 2d2:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <ref_type>
	switch (ref_type) {
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	a1 f0       	breq	.+40     	; 0x302 <s_initADC+0x54>
 2da:	28 f0       	brcs	.+10     	; 0x2e6 <s_initADC+0x38>
 2dc:	82 30       	cpi	r24, 0x02	; 2
 2de:	d1 f0       	breq	.+52     	; 0x314 <s_initADC+0x66>
 2e0:	83 30       	cpi	r24, 0x03	; 3
 2e2:	09 f1       	breq	.+66     	; 0x326 <s_initADC+0x78>
 2e4:	08 95       	ret
		case AREF:
		ADMUX&=0b00111111;
 2e6:	ec e7       	ldi	r30, 0x7C	; 124
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	8f 73       	andi	r24, 0x3F	; 63
 2ee:	80 83       	st	Z, r24
		Ref_V=p_aRef;
 2f0:	40 93 18 02 	sts	0x0218, r20	; 0x800218 <Ref_V>
 2f4:	50 93 19 02 	sts	0x0219, r21	; 0x800219 <Ref_V+0x1>
 2f8:	60 93 1a 02 	sts	0x021A, r22	; 0x80021a <Ref_V+0x2>
 2fc:	70 93 1b 02 	sts	0x021B, r23	; 0x80021b <Ref_V+0x3>
		break;
 300:	08 95       	ret

		case AVCC:
		ADMUX&=0b01111111;
 302:	ec e7       	ldi	r30, 0x7C	; 124
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	8f 77       	andi	r24, 0x7F	; 127
 30a:	80 83       	st	Z, r24
		ADMUX|=0b01000000;
 30c:	80 81       	ld	r24, Z
 30e:	80 64       	ori	r24, 0x40	; 64
 310:	80 83       	st	Z, r24
		break;
 312:	08 95       	ret

		case INTERNAL_1V1:
		ADMUX&=0b10111111;
 314:	ec e7       	ldi	r30, 0x7C	; 124
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	8f 7b       	andi	r24, 0xBF	; 191
 31c:	80 83       	st	Z, r24
		ADMUX|=0b10000000;
 31e:	80 81       	ld	r24, Z
 320:	80 68       	ori	r24, 0x80	; 128
 322:	80 83       	st	Z, r24
		break;
 324:	08 95       	ret

		case INTERNAL_2V56:
		ADMUX|=0b11000000;
 326:	ec e7       	ldi	r30, 0x7C	; 124
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	80 6c       	ori	r24, 0xC0	; 192
 32e:	80 83       	st	Z, r24
 330:	08 95       	ret

00000332 <s_getFullADC>:


static void s_setADCPin(uint8_t p_pin_no)
{
// inputchannel ADC 0-15 single ended;
if(p_pin_no<8)
 332:	88 30       	cpi	r24, 0x08	; 8
 334:	30 f4       	brcc	.+12     	; 0x342 <s_getFullADC+0x10>
{
	ADMUX|=p_pin_no;		//set mux0-4
 336:	ec e7       	ldi	r30, 0x7C	; 124
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	90 81       	ld	r25, Z
 33c:	89 2b       	or	r24, r25
 33e:	80 83       	st	Z, r24
 340:	0d c0       	rjmp	.+26     	; 0x35c <s_getFullADC+0x2a>
}
else if ((p_pin_no>7) && (p_pin_no<16))
 342:	88 50       	subi	r24, 0x08	; 8
 344:	88 30       	cpi	r24, 0x08	; 8
 346:	50 f4       	brcc	.+20     	; 0x35c <s_getFullADC+0x2a>
{
	ADCSRB|=1<<MUX5;		//set mux5
 348:	eb e7       	ldi	r30, 0x7B	; 123
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	90 81       	ld	r25, Z
 34e:	98 60       	ori	r25, 0x08	; 8
 350:	90 83       	st	Z, r25
	ADMUX|=(p_pin_no-8);	//set mux0-4
 352:	ec e7       	ldi	r30, 0x7C	; 124
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	90 81       	ld	r25, Z
 358:	89 2b       	or	r24, r25
 35a:	80 83       	st	Z, r24
}

static void s_startADC(void)
{
	//start	
	ADCSRA|=1<<ADSC;
 35c:	ea e7       	ldi	r30, 0x7A	; 122
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	80 64       	ori	r24, 0x40	; 64
 364:	80 83       	st	Z, r24
static uint16_t s_getFullADC(uint8_t p_pin_no)
{
	s_setADCPin(p_pin_no);
	s_startADC();
	
	while ((ADCSRA & (1<<ADSC) )!=0)
 366:	80 81       	ld	r24, Z
 368:	86 fd       	sbrc	r24, 6
 36a:	fd cf       	rjmp	.-6      	; 0x366 <s_getFullADC+0x34>
}


static uint8_t s_get_ADCL()
{
	return (uint8_t) ADCL;
 36c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
}

static uint8_t s_get_ADCH()
{
	return (uint8_t) ADCH;
 370:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		//de nada
	}
	uint16_t	LSB =  s_get_ADCL();
	uint16_t	MSB =  s_get_ADCH()& 0b00000011;
	uint16_t retVal	  = (MSB<<8|LSB);
	return retVal;
 374:	23 70       	andi	r18, 0x03	; 3
 376:	90 e0       	ldi	r25, 0x00	; 0
}
 378:	92 2b       	or	r25, r18
 37a:	08 95       	ret

0000037c <s_getADC_mV>:

static int16_t s_getADC_mV(uint8_t p_pin_no)
 {
	 uint16_t temp,out_f;
	 temp= (uint16_t)((s_getFullADC(p_pin_no)/1024.0)*1000);  // 10 BIT res and scale to mV
 37c:	da df       	rcall	.-76     	; 0x332 <s_getFullADC>
 37e:	bc 01       	movw	r22, r24
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	c3 d0       	rcall	.+390    	; 0x50c <__floatunsisf>
 386:	20 e0       	ldi	r18, 0x00	; 0
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	40 e8       	ldi	r20, 0x80	; 128
 38c:	5a e3       	ldi	r21, 0x3A	; 58
 38e:	24 d1       	rcall	.+584    	; 0x5d8 <__mulsf3>
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	4a e7       	ldi	r20, 0x7A	; 122
 396:	54 e4       	ldi	r21, 0x44	; 68
 398:	1f d1       	rcall	.+574    	; 0x5d8 <__mulsf3>
 39a:	8c d0       	rcall	.+280    	; 0x4b4 <__fixunssfsi>
	 
	 switch (ref_type) {
 39c:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <ref_type>
 3a0:	21 30       	cpi	r18, 0x01	; 1
 3a2:	a9 f0       	breq	.+42     	; 0x3ce <s_getADC_mV+0x52>
 3a4:	28 f0       	brcs	.+10     	; 0x3b0 <s_getADC_mV+0x34>
 3a6:	22 30       	cpi	r18, 0x02	; 2
 3a8:	e9 f0       	breq	.+58     	; 0x3e4 <s_getADC_mV+0x68>
 3aa:	23 30       	cpi	r18, 0x03	; 3
 3ac:	31 f1       	breq	.+76     	; 0x3fa <s_getADC_mV+0x7e>
		 case AREF:
		 out_f= temp*Ref_V;
 3ae:	30 c0       	rjmp	.+96     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	ab d0       	rcall	.+342    	; 0x50c <__floatunsisf>
 3b6:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <Ref_V>
 3ba:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <Ref_V+0x1>
 3be:	40 91 1a 02 	lds	r20, 0x021A	; 0x80021a <Ref_V+0x2>
 3c2:	50 91 1b 02 	lds	r21, 0x021B	; 0x80021b <Ref_V+0x3>
 3c6:	08 d1       	rcall	.+528    	; 0x5d8 <__mulsf3>
 3c8:	75 d0       	rcall	.+234    	; 0x4b4 <__fixunssfsi>
		 break;

		 case AVCC:
		 out_f= temp*5.0;
 3ca:	cb 01       	movw	r24, r22
 3cc:	08 95       	ret
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	9c d0       	rcall	.+312    	; 0x50c <__floatunsisf>
 3d4:	20 e0       	ldi	r18, 0x00	; 0
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	40 ea       	ldi	r20, 0xA0	; 160
 3da:	50 e4       	ldi	r21, 0x40	; 64
 3dc:	fd d0       	rcall	.+506    	; 0x5d8 <__mulsf3>
		 break;
 3de:	6a d0       	rcall	.+212    	; 0x4b4 <__fixunssfsi>

		 case INTERNAL_1V1:
		 out_f= temp*1.1;
 3e0:	cb 01       	movw	r24, r22
 3e2:	08 95       	ret
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	91 d0       	rcall	.+290    	; 0x50c <__floatunsisf>
 3ea:	2d ec       	ldi	r18, 0xCD	; 205
 3ec:	3c ec       	ldi	r19, 0xCC	; 204
 3ee:	4c e8       	ldi	r20, 0x8C	; 140
 3f0:	5f e3       	ldi	r21, 0x3F	; 63
 3f2:	f2 d0       	rcall	.+484    	; 0x5d8 <__mulsf3>
		 break;
 3f4:	5f d0       	rcall	.+190    	; 0x4b4 <__fixunssfsi>

		 case INTERNAL_2V56:
		 out_f= temp*2.56;
 3f6:	cb 01       	movw	r24, r22
 3f8:	08 95       	ret
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	86 d0       	rcall	.+268    	; 0x50c <__floatunsisf>
 400:	2a e0       	ldi	r18, 0x0A	; 10
 402:	37 ed       	ldi	r19, 0xD7	; 215
 404:	43 e2       	ldi	r20, 0x23	; 35
 406:	50 e4       	ldi	r21, 0x40	; 64
 408:	e7 d0       	rcall	.+462    	; 0x5d8 <__mulsf3>
 40a:	54 d0       	rcall	.+168    	; 0x4b4 <__fixunssfsi>
 40c:	cb 01       	movw	r24, r22
 40e:	08 95       	ret
		 break;
 410:	80 e0       	ldi	r24, 0x00	; 0

		 default:
		 out_f=0;
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	08 95       	ret

00000416 <get_ADC_interface>:
		 break;
	 }
	return (int16_t)out_f;
 416:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <initialized>
static int16_t s_getADC_mV(uint8_t p_pin_no);


ADC_t* get_ADC_interface()
{
	if (!initialized)
 41a:	81 11       	cpse	r24, r1
 41c:	11 c0       	rjmp	.+34     	; 0x440 <get_ADC_interface+0x2a>
	{
		ADC_interface.initADC				=	s_initADC;
 41e:	ee e1       	ldi	r30, 0x1E	; 30
 420:	f2 e0       	ldi	r31, 0x02	; 2
 422:	87 e5       	ldi	r24, 0x57	; 87
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	91 83       	std	Z+1, r25	; 0x01
 428:	80 83       	st	Z, r24
		ADC_interface.getFullADC			=	s_getFullADC;
 42a:	89 e9       	ldi	r24, 0x99	; 153
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	93 83       	std	Z+3, r25	; 0x03
 430:	82 83       	std	Z+2, r24	; 0x02
		ADC_interface.getADC_mV				=	s_getADC_mV;
 432:	8e eb       	ldi	r24, 0xBE	; 190
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	95 83       	std	Z+5, r25	; 0x05
 438:	84 83       	std	Z+4, r24	; 0x04
		initialized							=	true;	
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <initialized>
	}
	return &ADC_interface;
}
 440:	8e e1       	ldi	r24, 0x1E	; 30
 442:	92 e0       	ldi	r25, 0x02	; 2
 444:	08 95       	ret

00000446 <main>:

int main(void)
{
	ADC_t * ADC_Interface;
	LightSensor_t * LS_interface;
	ADC_Interface	=	get_ADC_interface();
 446:	e7 df       	rcall	.-50     	; 0x416 <get_ADC_interface>
 448:	8c 01       	movw	r16, r24
	LS_interface	=	get_lightSensor_interface(ADC_Interface);
 44a:	88 de       	rcall	.-752    	; 0x15c <get_lightSensor_interface>
 44c:	ec 01       	movw	r28, r24
 44e:	d8 01       	movw	r26, r16

	//init
	ADC_Interface->initADC(INTERNAL_1V1,0);
 450:	ed 91       	ld	r30, X+
 452:	fc 91       	ld	r31, X
 454:	40 e0       	ldi	r20, 0x00	; 0
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	ba 01       	movw	r22, r20
 45a:	82 e0       	ldi	r24, 0x02	; 2
 45c:	19 95       	eicall
 45e:	e8 81       	ld	r30, Y
	LS_interface->init(0,LS_THRESHOLD);
 460:	f9 81       	ldd	r31, Y+1	; 0x01
 462:	64 eb       	ldi	r22, 0xB4	; 180
 464:	70 e0       	ldi	r23, 0x00	; 0
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	19 95       	eicall
 46a:	00 e0       	ldi	r16, 0x00	; 0
	InitUART(UART0, 9600, 8,0);
 46c:	28 e0       	ldi	r18, 0x08	; 8
 46e:	40 e8       	ldi	r20, 0x80	; 128
 470:	55 e2       	ldi	r21, 0x25	; 37
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	80 ec       	ldi	r24, 0xC0	; 192
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	89 de       	rcall	.-750    	; 0x18e <InitUART>
 47c:	60 e0       	ldi	r22, 0x00	; 0
	SendString(UART0,"UART started \n");
 47e:	72 e0       	ldi	r23, 0x02	; 2
 480:	80 ec       	ldi	r24, 0xC0	; 192
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	dd de       	rcall	.-582    	; 0x240 <SendString>
 486:	bf ef       	ldi	r27, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 488:	21 ee       	ldi	r18, 0xE1	; 225
 48a:	84 e0       	ldi	r24, 0x04	; 4
 48c:	b1 50       	subi	r27, 0x01	; 1
 48e:	20 40       	sbci	r18, 0x00	; 0
 490:	80 40       	sbci	r24, 0x00	; 0
 492:	e1 f7       	brne	.-8      	; 0x48c <main+0x46>
 494:	00 c0       	rjmp	.+0      	; 0x496 <main+0x50>
 496:	00 00       	nop
 498:	6d e0       	ldi	r22, 0x0D	; 13
		
    while (1) 
    {
	_delay_ms(100);
	SendString(UART0,"\n");
 49a:	72 e0       	ldi	r23, 0x02	; 2
 49c:	80 ec       	ldi	r24, 0xC0	; 192
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	cf de       	rcall	.-610    	; 0x240 <SendString>
 4a2:	ea 81       	ldd	r30, Y+2	; 0x02
	SendInteger(UART0 , LS_interface->getLightStatus());		
 4a4:	fb 81       	ldd	r31, Y+3	; 0x03
 4a6:	19 95       	eicall
 4a8:	68 2f       	mov	r22, r24
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	80 ec       	ldi	r24, 0xC0	; 192
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	db de       	rcall	.-586    	; 0x268 <SendInteger>
 4b2:	e9 cf       	rjmp	.-46     	; 0x486 <main+0x40>

000004b4 <__fixunssfsi>:
 4b4:	70 d0       	rcall	.+224    	; 0x596 <__fp_splitA>
 4b6:	88 f0       	brcs	.+34     	; 0x4da <__fixunssfsi+0x26>
 4b8:	9f 57       	subi	r25, 0x7F	; 127
 4ba:	90 f0       	brcs	.+36     	; 0x4e0 <__fixunssfsi+0x2c>
 4bc:	b9 2f       	mov	r27, r25
 4be:	99 27       	eor	r25, r25
 4c0:	b7 51       	subi	r27, 0x17	; 23
 4c2:	a0 f0       	brcs	.+40     	; 0x4ec <__fixunssfsi+0x38>
 4c4:	d1 f0       	breq	.+52     	; 0x4fa <__fixunssfsi+0x46>
 4c6:	66 0f       	add	r22, r22
 4c8:	77 1f       	adc	r23, r23
 4ca:	88 1f       	adc	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	1a f0       	brmi	.+6      	; 0x4d6 <__fixunssfsi+0x22>
 4d0:	ba 95       	dec	r27
 4d2:	c9 f7       	brne	.-14     	; 0x4c6 <__fixunssfsi+0x12>
 4d4:	12 c0       	rjmp	.+36     	; 0x4fa <__fixunssfsi+0x46>
 4d6:	b1 30       	cpi	r27, 0x01	; 1
 4d8:	81 f0       	breq	.+32     	; 0x4fa <__fixunssfsi+0x46>
 4da:	77 d0       	rcall	.+238    	; 0x5ca <__fp_zero>
 4dc:	b1 e0       	ldi	r27, 0x01	; 1
 4de:	08 95       	ret
 4e0:	74 c0       	rjmp	.+232    	; 0x5ca <__fp_zero>
 4e2:	67 2f       	mov	r22, r23
 4e4:	78 2f       	mov	r23, r24
 4e6:	88 27       	eor	r24, r24
 4e8:	b8 5f       	subi	r27, 0xF8	; 248
 4ea:	39 f0       	breq	.+14     	; 0x4fa <__fixunssfsi+0x46>
 4ec:	b9 3f       	cpi	r27, 0xF9	; 249
 4ee:	cc f3       	brlt	.-14     	; 0x4e2 <__fixunssfsi+0x2e>
 4f0:	86 95       	lsr	r24
 4f2:	77 95       	ror	r23
 4f4:	67 95       	ror	r22
 4f6:	b3 95       	inc	r27
 4f8:	d9 f7       	brne	.-10     	; 0x4f0 <__fixunssfsi+0x3c>
 4fa:	3e f4       	brtc	.+14     	; 0x50a <__fixunssfsi+0x56>
 4fc:	90 95       	com	r25
 4fe:	80 95       	com	r24
 500:	70 95       	com	r23
 502:	61 95       	neg	r22
 504:	7f 4f       	sbci	r23, 0xFF	; 255
 506:	8f 4f       	sbci	r24, 0xFF	; 255
 508:	9f 4f       	sbci	r25, 0xFF	; 255
 50a:	08 95       	ret

0000050c <__floatunsisf>:
 50c:	e8 94       	clt
 50e:	09 c0       	rjmp	.+18     	; 0x522 <__floatsisf+0x12>

00000510 <__floatsisf>:
 510:	97 fb       	bst	r25, 7
 512:	3e f4       	brtc	.+14     	; 0x522 <__floatsisf+0x12>
 514:	90 95       	com	r25
 516:	80 95       	com	r24
 518:	70 95       	com	r23
 51a:	61 95       	neg	r22
 51c:	7f 4f       	sbci	r23, 0xFF	; 255
 51e:	8f 4f       	sbci	r24, 0xFF	; 255
 520:	9f 4f       	sbci	r25, 0xFF	; 255
 522:	99 23       	and	r25, r25
 524:	a9 f0       	breq	.+42     	; 0x550 <__floatsisf+0x40>
 526:	f9 2f       	mov	r31, r25
 528:	96 e9       	ldi	r25, 0x96	; 150
 52a:	bb 27       	eor	r27, r27
 52c:	93 95       	inc	r25
 52e:	f6 95       	lsr	r31
 530:	87 95       	ror	r24
 532:	77 95       	ror	r23
 534:	67 95       	ror	r22
 536:	b7 95       	ror	r27
 538:	f1 11       	cpse	r31, r1
 53a:	f8 cf       	rjmp	.-16     	; 0x52c <__floatsisf+0x1c>
 53c:	fa f4       	brpl	.+62     	; 0x57c <__floatsisf+0x6c>
 53e:	bb 0f       	add	r27, r27
 540:	11 f4       	brne	.+4      	; 0x546 <__floatsisf+0x36>
 542:	60 ff       	sbrs	r22, 0
 544:	1b c0       	rjmp	.+54     	; 0x57c <__floatsisf+0x6c>
 546:	6f 5f       	subi	r22, 0xFF	; 255
 548:	7f 4f       	sbci	r23, 0xFF	; 255
 54a:	8f 4f       	sbci	r24, 0xFF	; 255
 54c:	9f 4f       	sbci	r25, 0xFF	; 255
 54e:	16 c0       	rjmp	.+44     	; 0x57c <__floatsisf+0x6c>
 550:	88 23       	and	r24, r24
 552:	11 f0       	breq	.+4      	; 0x558 <__floatsisf+0x48>
 554:	96 e9       	ldi	r25, 0x96	; 150
 556:	11 c0       	rjmp	.+34     	; 0x57a <__floatsisf+0x6a>
 558:	77 23       	and	r23, r23
 55a:	21 f0       	breq	.+8      	; 0x564 <__floatsisf+0x54>
 55c:	9e e8       	ldi	r25, 0x8E	; 142
 55e:	87 2f       	mov	r24, r23
 560:	76 2f       	mov	r23, r22
 562:	05 c0       	rjmp	.+10     	; 0x56e <__floatsisf+0x5e>
 564:	66 23       	and	r22, r22
 566:	71 f0       	breq	.+28     	; 0x584 <__floatsisf+0x74>
 568:	96 e8       	ldi	r25, 0x86	; 134
 56a:	86 2f       	mov	r24, r22
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	2a f0       	brmi	.+10     	; 0x57c <__floatsisf+0x6c>
 572:	9a 95       	dec	r25
 574:	66 0f       	add	r22, r22
 576:	77 1f       	adc	r23, r23
 578:	88 1f       	adc	r24, r24
 57a:	da f7       	brpl	.-10     	; 0x572 <__floatsisf+0x62>
 57c:	88 0f       	add	r24, r24
 57e:	96 95       	lsr	r25
 580:	87 95       	ror	r24
 582:	97 f9       	bld	r25, 7
 584:	08 95       	ret

00000586 <__fp_split3>:
 586:	57 fd       	sbrc	r21, 7
 588:	90 58       	subi	r25, 0x80	; 128
 58a:	44 0f       	add	r20, r20
 58c:	55 1f       	adc	r21, r21
 58e:	59 f0       	breq	.+22     	; 0x5a6 <__fp_splitA+0x10>
 590:	5f 3f       	cpi	r21, 0xFF	; 255
 592:	71 f0       	breq	.+28     	; 0x5b0 <__fp_splitA+0x1a>
 594:	47 95       	ror	r20

00000596 <__fp_splitA>:
 596:	88 0f       	add	r24, r24
 598:	97 fb       	bst	r25, 7
 59a:	99 1f       	adc	r25, r25
 59c:	61 f0       	breq	.+24     	; 0x5b6 <__fp_splitA+0x20>
 59e:	9f 3f       	cpi	r25, 0xFF	; 255
 5a0:	79 f0       	breq	.+30     	; 0x5c0 <__fp_splitA+0x2a>
 5a2:	87 95       	ror	r24
 5a4:	08 95       	ret
 5a6:	12 16       	cp	r1, r18
 5a8:	13 06       	cpc	r1, r19
 5aa:	14 06       	cpc	r1, r20
 5ac:	55 1f       	adc	r21, r21
 5ae:	f2 cf       	rjmp	.-28     	; 0x594 <__fp_split3+0xe>
 5b0:	46 95       	lsr	r20
 5b2:	f1 df       	rcall	.-30     	; 0x596 <__fp_splitA>
 5b4:	08 c0       	rjmp	.+16     	; 0x5c6 <__fp_splitA+0x30>
 5b6:	16 16       	cp	r1, r22
 5b8:	17 06       	cpc	r1, r23
 5ba:	18 06       	cpc	r1, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	f1 cf       	rjmp	.-30     	; 0x5a2 <__fp_splitA+0xc>
 5c0:	86 95       	lsr	r24
 5c2:	71 05       	cpc	r23, r1
 5c4:	61 05       	cpc	r22, r1
 5c6:	08 94       	sec
 5c8:	08 95       	ret

000005ca <__fp_zero>:
 5ca:	e8 94       	clt

000005cc <__fp_szero>:
 5cc:	bb 27       	eor	r27, r27
 5ce:	66 27       	eor	r22, r22
 5d0:	77 27       	eor	r23, r23
 5d2:	cb 01       	movw	r24, r22
 5d4:	97 f9       	bld	r25, 7
 5d6:	08 95       	ret

000005d8 <__mulsf3>:
 5d8:	0b d0       	rcall	.+22     	; 0x5f0 <__mulsf3x>
 5da:	78 c0       	rjmp	.+240    	; 0x6cc <__fp_round>
 5dc:	69 d0       	rcall	.+210    	; 0x6b0 <__fp_pscA>
 5de:	28 f0       	brcs	.+10     	; 0x5ea <__mulsf3+0x12>
 5e0:	6e d0       	rcall	.+220    	; 0x6be <__fp_pscB>
 5e2:	18 f0       	brcs	.+6      	; 0x5ea <__mulsf3+0x12>
 5e4:	95 23       	and	r25, r21
 5e6:	09 f0       	breq	.+2      	; 0x5ea <__mulsf3+0x12>
 5e8:	5a c0       	rjmp	.+180    	; 0x69e <__fp_inf>
 5ea:	5f c0       	rjmp	.+190    	; 0x6aa <__fp_nan>
 5ec:	11 24       	eor	r1, r1
 5ee:	ee cf       	rjmp	.-36     	; 0x5cc <__fp_szero>

000005f0 <__mulsf3x>:
 5f0:	ca df       	rcall	.-108    	; 0x586 <__fp_split3>
 5f2:	a0 f3       	brcs	.-24     	; 0x5dc <__mulsf3+0x4>

000005f4 <__mulsf3_pse>:
 5f4:	95 9f       	mul	r25, r21
 5f6:	d1 f3       	breq	.-12     	; 0x5ec <__mulsf3+0x14>
 5f8:	95 0f       	add	r25, r21
 5fa:	50 e0       	ldi	r21, 0x00	; 0
 5fc:	55 1f       	adc	r21, r21
 5fe:	62 9f       	mul	r22, r18
 600:	f0 01       	movw	r30, r0
 602:	72 9f       	mul	r23, r18
 604:	bb 27       	eor	r27, r27
 606:	f0 0d       	add	r31, r0
 608:	b1 1d       	adc	r27, r1
 60a:	63 9f       	mul	r22, r19
 60c:	aa 27       	eor	r26, r26
 60e:	f0 0d       	add	r31, r0
 610:	b1 1d       	adc	r27, r1
 612:	aa 1f       	adc	r26, r26
 614:	64 9f       	mul	r22, r20
 616:	66 27       	eor	r22, r22
 618:	b0 0d       	add	r27, r0
 61a:	a1 1d       	adc	r26, r1
 61c:	66 1f       	adc	r22, r22
 61e:	82 9f       	mul	r24, r18
 620:	22 27       	eor	r18, r18
 622:	b0 0d       	add	r27, r0
 624:	a1 1d       	adc	r26, r1
 626:	62 1f       	adc	r22, r18
 628:	73 9f       	mul	r23, r19
 62a:	b0 0d       	add	r27, r0
 62c:	a1 1d       	adc	r26, r1
 62e:	62 1f       	adc	r22, r18
 630:	83 9f       	mul	r24, r19
 632:	a0 0d       	add	r26, r0
 634:	61 1d       	adc	r22, r1
 636:	22 1f       	adc	r18, r18
 638:	74 9f       	mul	r23, r20
 63a:	33 27       	eor	r19, r19
 63c:	a0 0d       	add	r26, r0
 63e:	61 1d       	adc	r22, r1
 640:	23 1f       	adc	r18, r19
 642:	84 9f       	mul	r24, r20
 644:	60 0d       	add	r22, r0
 646:	21 1d       	adc	r18, r1
 648:	82 2f       	mov	r24, r18
 64a:	76 2f       	mov	r23, r22
 64c:	6a 2f       	mov	r22, r26
 64e:	11 24       	eor	r1, r1
 650:	9f 57       	subi	r25, 0x7F	; 127
 652:	50 40       	sbci	r21, 0x00	; 0
 654:	8a f0       	brmi	.+34     	; 0x678 <__mulsf3_pse+0x84>
 656:	e1 f0       	breq	.+56     	; 0x690 <__mulsf3_pse+0x9c>
 658:	88 23       	and	r24, r24
 65a:	4a f0       	brmi	.+18     	; 0x66e <__mulsf3_pse+0x7a>
 65c:	ee 0f       	add	r30, r30
 65e:	ff 1f       	adc	r31, r31
 660:	bb 1f       	adc	r27, r27
 662:	66 1f       	adc	r22, r22
 664:	77 1f       	adc	r23, r23
 666:	88 1f       	adc	r24, r24
 668:	91 50       	subi	r25, 0x01	; 1
 66a:	50 40       	sbci	r21, 0x00	; 0
 66c:	a9 f7       	brne	.-22     	; 0x658 <__mulsf3_pse+0x64>
 66e:	9e 3f       	cpi	r25, 0xFE	; 254
 670:	51 05       	cpc	r21, r1
 672:	70 f0       	brcs	.+28     	; 0x690 <__mulsf3_pse+0x9c>
 674:	14 c0       	rjmp	.+40     	; 0x69e <__fp_inf>
 676:	aa cf       	rjmp	.-172    	; 0x5cc <__fp_szero>
 678:	5f 3f       	cpi	r21, 0xFF	; 255
 67a:	ec f3       	brlt	.-6      	; 0x676 <__mulsf3_pse+0x82>
 67c:	98 3e       	cpi	r25, 0xE8	; 232
 67e:	dc f3       	brlt	.-10     	; 0x676 <__mulsf3_pse+0x82>
 680:	86 95       	lsr	r24
 682:	77 95       	ror	r23
 684:	67 95       	ror	r22
 686:	b7 95       	ror	r27
 688:	f7 95       	ror	r31
 68a:	e7 95       	ror	r30
 68c:	9f 5f       	subi	r25, 0xFF	; 255
 68e:	c1 f7       	brne	.-16     	; 0x680 <__mulsf3_pse+0x8c>
 690:	fe 2b       	or	r31, r30
 692:	88 0f       	add	r24, r24
 694:	91 1d       	adc	r25, r1
 696:	96 95       	lsr	r25
 698:	87 95       	ror	r24
 69a:	97 f9       	bld	r25, 7
 69c:	08 95       	ret

0000069e <__fp_inf>:
 69e:	97 f9       	bld	r25, 7
 6a0:	9f 67       	ori	r25, 0x7F	; 127
 6a2:	80 e8       	ldi	r24, 0x80	; 128
 6a4:	70 e0       	ldi	r23, 0x00	; 0
 6a6:	60 e0       	ldi	r22, 0x00	; 0
 6a8:	08 95       	ret

000006aa <__fp_nan>:
 6aa:	9f ef       	ldi	r25, 0xFF	; 255
 6ac:	80 ec       	ldi	r24, 0xC0	; 192
 6ae:	08 95       	ret

000006b0 <__fp_pscA>:
 6b0:	00 24       	eor	r0, r0
 6b2:	0a 94       	dec	r0
 6b4:	16 16       	cp	r1, r22
 6b6:	17 06       	cpc	r1, r23
 6b8:	18 06       	cpc	r1, r24
 6ba:	09 06       	cpc	r0, r25
 6bc:	08 95       	ret

000006be <__fp_pscB>:
 6be:	00 24       	eor	r0, r0
 6c0:	0a 94       	dec	r0
 6c2:	12 16       	cp	r1, r18
 6c4:	13 06       	cpc	r1, r19
 6c6:	14 06       	cpc	r1, r20
 6c8:	05 06       	cpc	r0, r21
 6ca:	08 95       	ret

000006cc <__fp_round>:
 6cc:	09 2e       	mov	r0, r25
 6ce:	03 94       	inc	r0
 6d0:	00 0c       	add	r0, r0
 6d2:	11 f4       	brne	.+4      	; 0x6d8 <__fp_round+0xc>
 6d4:	88 23       	and	r24, r24
 6d6:	52 f0       	brmi	.+20     	; 0x6ec <__fp_round+0x20>
 6d8:	bb 0f       	add	r27, r27
 6da:	40 f4       	brcc	.+16     	; 0x6ec <__fp_round+0x20>
 6dc:	bf 2b       	or	r27, r31
 6de:	11 f4       	brne	.+4      	; 0x6e4 <__fp_round+0x18>
 6e0:	60 ff       	sbrs	r22, 0
 6e2:	04 c0       	rjmp	.+8      	; 0x6ec <__fp_round+0x20>
 6e4:	6f 5f       	subi	r22, 0xFF	; 255
 6e6:	7f 4f       	sbci	r23, 0xFF	; 255
 6e8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ea:	9f 4f       	sbci	r25, 0xFF	; 255
 6ec:	08 95       	ret

000006ee <__udivmodsi4>:
 6ee:	a1 e2       	ldi	r26, 0x21	; 33
 6f0:	1a 2e       	mov	r1, r26
 6f2:	aa 1b       	sub	r26, r26
 6f4:	bb 1b       	sub	r27, r27
 6f6:	fd 01       	movw	r30, r26
 6f8:	0d c0       	rjmp	.+26     	; 0x714 <__udivmodsi4_ep>

000006fa <__udivmodsi4_loop>:
 6fa:	aa 1f       	adc	r26, r26
 6fc:	bb 1f       	adc	r27, r27
 6fe:	ee 1f       	adc	r30, r30
 700:	ff 1f       	adc	r31, r31
 702:	a2 17       	cp	r26, r18
 704:	b3 07       	cpc	r27, r19
 706:	e4 07       	cpc	r30, r20
 708:	f5 07       	cpc	r31, r21
 70a:	20 f0       	brcs	.+8      	; 0x714 <__udivmodsi4_ep>
 70c:	a2 1b       	sub	r26, r18
 70e:	b3 0b       	sbc	r27, r19
 710:	e4 0b       	sbc	r30, r20
 712:	f5 0b       	sbc	r31, r21

00000714 <__udivmodsi4_ep>:
 714:	66 1f       	adc	r22, r22
 716:	77 1f       	adc	r23, r23
 718:	88 1f       	adc	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	1a 94       	dec	r1
 71e:	69 f7       	brne	.-38     	; 0x6fa <__udivmodsi4_loop>
 720:	60 95       	com	r22
 722:	70 95       	com	r23
 724:	80 95       	com	r24
 726:	90 95       	com	r25
 728:	9b 01       	movw	r18, r22
 72a:	ac 01       	movw	r20, r24
 72c:	bd 01       	movw	r22, r26
 72e:	cf 01       	movw	r24, r30
 730:	08 95       	ret

00000732 <__itoa_ncheck>:
 732:	bb 27       	eor	r27, r27
 734:	4a 30       	cpi	r20, 0x0A	; 10
 736:	31 f4       	brne	.+12     	; 0x744 <__itoa_ncheck+0x12>
 738:	99 23       	and	r25, r25
 73a:	22 f4       	brpl	.+8      	; 0x744 <__itoa_ncheck+0x12>
 73c:	bd e2       	ldi	r27, 0x2D	; 45
 73e:	90 95       	com	r25
 740:	81 95       	neg	r24
 742:	9f 4f       	sbci	r25, 0xFF	; 255
 744:	01 c0       	rjmp	.+2      	; 0x748 <__utoa_common>

00000746 <__utoa_ncheck>:
 746:	bb 27       	eor	r27, r27

00000748 <__utoa_common>:
 748:	fb 01       	movw	r30, r22
 74a:	55 27       	eor	r21, r21
 74c:	aa 27       	eor	r26, r26
 74e:	88 0f       	add	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	aa 1f       	adc	r26, r26
 754:	a4 17       	cp	r26, r20
 756:	10 f0       	brcs	.+4      	; 0x75c <__utoa_common+0x14>
 758:	a4 1b       	sub	r26, r20
 75a:	83 95       	inc	r24
 75c:	50 51       	subi	r21, 0x10	; 16
 75e:	b9 f7       	brne	.-18     	; 0x74e <__utoa_common+0x6>
 760:	a0 5d       	subi	r26, 0xD0	; 208
 762:	aa 33       	cpi	r26, 0x3A	; 58
 764:	08 f0       	brcs	.+2      	; 0x768 <__utoa_common+0x20>
 766:	a9 5d       	subi	r26, 0xD9	; 217
 768:	a1 93       	st	Z+, r26
 76a:	00 97       	sbiw	r24, 0x00	; 0
 76c:	79 f7       	brne	.-34     	; 0x74c <__utoa_common+0x4>
 76e:	b1 11       	cpse	r27, r1
 770:	b1 93       	st	Z+, r27
 772:	11 92       	st	Z+, r1
 774:	cb 01       	movw	r24, r22
 776:	00 c0       	rjmp	.+0      	; 0x778 <strrev>

00000778 <strrev>:
 778:	dc 01       	movw	r26, r24
 77a:	fc 01       	movw	r30, r24
 77c:	67 2f       	mov	r22, r23
 77e:	71 91       	ld	r23, Z+
 780:	77 23       	and	r23, r23
 782:	e1 f7       	brne	.-8      	; 0x77c <strrev+0x4>
 784:	32 97       	sbiw	r30, 0x02	; 2
 786:	04 c0       	rjmp	.+8      	; 0x790 <strrev+0x18>
 788:	7c 91       	ld	r23, X
 78a:	6d 93       	st	X+, r22
 78c:	70 83       	st	Z, r23
 78e:	62 91       	ld	r22, -Z
 790:	ae 17       	cp	r26, r30
 792:	bf 07       	cpc	r27, r31
 794:	c8 f3       	brcs	.-14     	; 0x788 <strrev+0x10>
 796:	08 95       	ret

00000798 <_exit>:
 798:	f8 94       	cli

0000079a <__stop_program>:
 79a:	ff cf       	rjmp	.-2      	; 0x79a <__stop_program>
