
GA_test_prog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800200  00001246  000012da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001246  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  0080024a  0080024a  00001324  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002452  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001221  00000000  00000000  0000394e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d89  00000000  00000000  00004b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  000058f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000afe  00000000  00000000  00005c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000953  00000000  00000000  0000675a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000070ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	96 c0       	rjmp	.+300    	; 0x12e <__ctors_end>
       2:	00 00       	nop
       4:	b4 c0       	rjmp	.+360    	; 0x16e <__bad_interrupt>
       6:	00 00       	nop
       8:	b2 c0       	rjmp	.+356    	; 0x16e <__bad_interrupt>
       a:	00 00       	nop
       c:	b0 c0       	rjmp	.+352    	; 0x16e <__bad_interrupt>
       e:	00 00       	nop
      10:	ae c0       	rjmp	.+348    	; 0x16e <__bad_interrupt>
      12:	00 00       	nop
      14:	ac c0       	rjmp	.+344    	; 0x16e <__bad_interrupt>
      16:	00 00       	nop
      18:	aa c0       	rjmp	.+340    	; 0x16e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a8 c0       	rjmp	.+336    	; 0x16e <__bad_interrupt>
      1e:	00 00       	nop
      20:	a6 c0       	rjmp	.+332    	; 0x16e <__bad_interrupt>
      22:	00 00       	nop
      24:	a4 c0       	rjmp	.+328    	; 0x16e <__bad_interrupt>
      26:	00 00       	nop
      28:	a2 c0       	rjmp	.+324    	; 0x16e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a0 c0       	rjmp	.+320    	; 0x16e <__bad_interrupt>
      2e:	00 00       	nop
      30:	9e c0       	rjmp	.+316    	; 0x16e <__bad_interrupt>
      32:	00 00       	nop
      34:	9c c0       	rjmp	.+312    	; 0x16e <__bad_interrupt>
      36:	00 00       	nop
      38:	9a c0       	rjmp	.+308    	; 0x16e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	98 c0       	rjmp	.+304    	; 0x16e <__bad_interrupt>
      3e:	00 00       	nop
      40:	96 c0       	rjmp	.+300    	; 0x16e <__bad_interrupt>
      42:	00 00       	nop
      44:	94 c0       	rjmp	.+296    	; 0x16e <__bad_interrupt>
      46:	00 00       	nop
      48:	92 c0       	rjmp	.+292    	; 0x16e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	90 c0       	rjmp	.+288    	; 0x16e <__bad_interrupt>
      4e:	00 00       	nop
      50:	8e c0       	rjmp	.+284    	; 0x16e <__bad_interrupt>
      52:	00 00       	nop
      54:	8c c0       	rjmp	.+280    	; 0x16e <__bad_interrupt>
      56:	00 00       	nop
      58:	8a c0       	rjmp	.+276    	; 0x16e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	88 c0       	rjmp	.+272    	; 0x16e <__bad_interrupt>
      5e:	00 00       	nop
      60:	86 c0       	rjmp	.+268    	; 0x16e <__bad_interrupt>
      62:	00 00       	nop
      64:	84 c0       	rjmp	.+264    	; 0x16e <__bad_interrupt>
      66:	00 00       	nop
      68:	82 c0       	rjmp	.+260    	; 0x16e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	80 c0       	rjmp	.+256    	; 0x16e <__bad_interrupt>
      6e:	00 00       	nop
      70:	7e c0       	rjmp	.+252    	; 0x16e <__bad_interrupt>
      72:	00 00       	nop
      74:	7c c0       	rjmp	.+248    	; 0x16e <__bad_interrupt>
      76:	00 00       	nop
      78:	7a c0       	rjmp	.+244    	; 0x16e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	78 c0       	rjmp	.+240    	; 0x16e <__bad_interrupt>
      7e:	00 00       	nop
      80:	76 c0       	rjmp	.+236    	; 0x16e <__bad_interrupt>
      82:	00 00       	nop
      84:	74 c0       	rjmp	.+232    	; 0x16e <__bad_interrupt>
      86:	00 00       	nop
      88:	72 c0       	rjmp	.+228    	; 0x16e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	70 c0       	rjmp	.+224    	; 0x16e <__bad_interrupt>
      8e:	00 00       	nop
      90:	6e c0       	rjmp	.+220    	; 0x16e <__bad_interrupt>
      92:	00 00       	nop
      94:	6c c0       	rjmp	.+216    	; 0x16e <__bad_interrupt>
      96:	00 00       	nop
      98:	6a c0       	rjmp	.+212    	; 0x16e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	68 c0       	rjmp	.+208    	; 0x16e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	66 c0       	rjmp	.+204    	; 0x16e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	64 c0       	rjmp	.+200    	; 0x16e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	62 c0       	rjmp	.+196    	; 0x16e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	60 c0       	rjmp	.+192    	; 0x16e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5e c0       	rjmp	.+188    	; 0x16e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5c c0       	rjmp	.+184    	; 0x16e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5a c0       	rjmp	.+180    	; 0x16e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	58 c0       	rjmp	.+176    	; 0x16e <__bad_interrupt>
      be:	00 00       	nop
      c0:	56 c0       	rjmp	.+172    	; 0x16e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	54 c0       	rjmp	.+168    	; 0x16e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	52 c0       	rjmp	.+164    	; 0x16e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	50 c0       	rjmp	.+160    	; 0x16e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	4e c0       	rjmp	.+156    	; 0x16e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4c c0       	rjmp	.+152    	; 0x16e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4a c0       	rjmp	.+148    	; 0x16e <__bad_interrupt>
      da:	00 00       	nop
      dc:	48 c0       	rjmp	.+144    	; 0x16e <__bad_interrupt>
      de:	00 00       	nop
      e0:	46 c0       	rjmp	.+140    	; 0x16e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	2d 03       	fmul	r18, r21
      e6:	32 03       	mulsu	r19, r18
      e8:	3b 03       	fmul	r19, r19
      ea:	40 03       	mulsu	r20, r16
      ec:	49 03       	fmul	r20, r17
      ee:	4e 03       	fmul	r20, r22
      f0:	57 03       	mulsu	r21, r23
      f2:	5c 03       	fmul	r21, r20
      f4:	65 03       	mulsu	r22, r21
      f6:	6a 03       	fmul	r22, r18
      f8:	73 03       	mulsu	r23, r19
      fa:	78 03       	fmul	r23, r16
      fc:	81 03       	fmuls	r16, r17
      fe:	86 03       	fmuls	r16, r22
     100:	08 4a       	sbci	r16, 0xA8	; 168
     102:	d7 3b       	cpi	r29, 0xB7	; 183
     104:	3b ce       	rjmp	.-906    	; 0xfffffd7c <__eeprom_end+0xff7efd7c>
     106:	01 6e       	ori	r16, 0xE1	; 225
     108:	84 bc       	out	0x24, r8	; 36
     10a:	bf fd       	.word	0xfdbf	; ????
     10c:	c1 2f       	mov	r28, r17
     10e:	3d 6c       	ori	r19, 0xCD	; 205
     110:	74 31       	cpi	r23, 0x14	; 20
     112:	9a bd       	out	0x2a, r25	; 42
     114:	56 83       	std	Z+6, r21	; 0x06
     116:	3d da       	rcall	.-2950   	; 0xfffff592 <__eeprom_end+0xff7ef592>
     118:	3d 00       	.word	0x003d	; ????
     11a:	c7 7f       	andi	r28, 0xF7	; 247
     11c:	11 be       	out	0x31, r1	; 49
     11e:	d9 e4       	ldi	r29, 0x49	; 73
     120:	bb 4c       	sbci	r27, 0xCB	; 203
     122:	3e 91       	ld	r19, -X
     124:	6b aa       	std	Y+51, r6	; 0x33
     126:	aa be       	out	0x3a, r10	; 58
     128:	00 00       	nop
     12a:	00 80       	ld	r0, Z
     12c:	3f 00       	.word	0x003f	; ????

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d1 e2       	ldi	r29, 0x21	; 33
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61
     13a:	00 e0       	ldi	r16, 0x00	; 0
     13c:	0c bf       	out	0x3c, r16	; 60

0000013e <__do_copy_data>:
     13e:	12 e0       	ldi	r17, 0x02	; 2
     140:	a0 e0       	ldi	r26, 0x00	; 0
     142:	b2 e0       	ldi	r27, 0x02	; 2
     144:	e6 e4       	ldi	r30, 0x46	; 70
     146:	f2 e1       	ldi	r31, 0x12	; 18
     148:	00 e0       	ldi	r16, 0x00	; 0
     14a:	0b bf       	out	0x3b, r16	; 59
     14c:	02 c0       	rjmp	.+4      	; 0x152 <__do_copy_data+0x14>
     14e:	07 90       	elpm	r0, Z+
     150:	0d 92       	st	X+, r0
     152:	aa 34       	cpi	r26, 0x4A	; 74
     154:	b1 07       	cpc	r27, r17
     156:	d9 f7       	brne	.-10     	; 0x14e <__do_copy_data+0x10>

00000158 <__do_clear_bss>:
     158:	22 e0       	ldi	r18, 0x02	; 2
     15a:	aa e4       	ldi	r26, 0x4A	; 74
     15c:	b2 e0       	ldi	r27, 0x02	; 2
     15e:	01 c0       	rjmp	.+2      	; 0x162 <.do_clear_bss_start>

00000160 <.do_clear_bss_loop>:
     160:	1d 92       	st	X+, r1

00000162 <.do_clear_bss_start>:
     162:	ae 39       	cpi	r26, 0x9E	; 158
     164:	b2 07       	cpc	r27, r18
     166:	e1 f7       	brne	.-8      	; 0x160 <.do_clear_bss_loop>
     168:	6d d4       	rcall	.+2266   	; 0xa44 <main>
     16a:	0c 94 21 09 	jmp	0x1242	; 0x1242 <_exit>

0000016e <__bad_interrupt>:
     16e:	48 cf       	rjmp	.-368    	; 0x0 <__vectors>

00000170 <init_s>:
**/
static uint16_t init_s(uint32_t SCL_f ,bool enable_interrupt) //freq is given in Hz
{
	
	//no internal pull up implemented so far
if (SCL_f <= 400000)
     170:	61 38       	cpi	r22, 0x81	; 129
     172:	2a e1       	ldi	r18, 0x1A	; 26
     174:	72 07       	cpc	r23, r18
     176:	26 e0       	ldi	r18, 0x06	; 6
     178:	82 07       	cpc	r24, r18
     17a:	91 05       	cpc	r25, r1
     17c:	08 f0       	brcs	.+2      	; 0x180 <init_s+0x10>
     17e:	4c c0       	rjmp	.+152    	; 0x218 <init_s+0xa8>
	{
		//enable TWI clock module 
	PRR0&=~(1<<PRTWI);
     180:	e4 e6       	ldi	r30, 0x64	; 100
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	20 81       	ld	r18, Z
     186:	2f 77       	andi	r18, 0x7F	; 127
     188:	20 83       	st	Z, r18
	
	//enable TWI
	TWCR|=(1<<TWEN);	
     18a:	ec eb       	ldi	r30, 0xBC	; 188
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	20 81       	ld	r18, Z
     190:	24 60       	ori	r18, 0x04	; 4
     192:	20 83       	st	Z, r18
	
	//enable interrupt
	int_is_enabled=enable_interrupt;
     194:	40 93 4c 02 	sts	0x024C, r20	; 0x80024c <int_is_enabled>
	if (int_is_enabled)
     198:	44 23       	and	r20, r20
     19a:	19 f0       	breq	.+6      	; 0x1a2 <init_s+0x32>
	{
		TWCR|=(1<<TWIE);
     19c:	20 81       	ld	r18, Z
     19e:	21 60       	ori	r18, 0x01	; 1
     1a0:	20 83       	st	Z, r18
	
	//constants pre calculated from mathcad 
	uint16_t TWBR_1=1;
	
	
	if(SCL_f==400000)
     1a2:	60 38       	cpi	r22, 0x80	; 128
     1a4:	2a e1       	ldi	r18, 0x1A	; 26
     1a6:	72 07       	cpc	r23, r18
     1a8:	26 e0       	ldi	r18, 0x06	; 6
     1aa:	82 07       	cpc	r24, r18
     1ac:	91 05       	cpc	r25, r1
     1ae:	d9 f0       	breq	.+54     	; 0x1e6 <init_s+0x76>
	{
		TWBR_1= 3;
	}
	else if(SCL_f>=333333)
     1b0:	65 31       	cpi	r22, 0x15	; 21
     1b2:	26 e1       	ldi	r18, 0x16	; 22
     1b4:	72 07       	cpc	r23, r18
     1b6:	25 e0       	ldi	r18, 0x05	; 5
     1b8:	82 07       	cpc	r24, r18
     1ba:	91 05       	cpc	r25, r1
     1bc:	b8 f4       	brcc	.+46     	; 0x1ec <init_s+0x7c>
	{
		TWBR_1= 4;
	}
	else if(SCL_f>=5000)
     1be:	68 38       	cpi	r22, 0x88	; 136
     1c0:	23 e1       	ldi	r18, 0x13	; 19
     1c2:	72 07       	cpc	r23, r18
     1c4:	81 05       	cpc	r24, r1
     1c6:	91 05       	cpc	r25, r1
     1c8:	a0 f4       	brcc	.+40     	; 0x1f2 <init_s+0x82>
	{
		TWBR_1= 398;
	}
	else if(SCL_f>=2000)
     1ca:	60 3d       	cpi	r22, 0xD0	; 208
     1cc:	27 e0       	ldi	r18, 0x07	; 7
     1ce:	72 07       	cpc	r23, r18
     1d0:	81 05       	cpc	r24, r1
     1d2:	91 05       	cpc	r25, r1
     1d4:	88 f4       	brcc	.+34     	; 0x1f8 <init_s+0x88>
	{
		TWBR_1= 1998;
	}
	else if(SCL_f>=1000)
     1d6:	68 3e       	cpi	r22, 0xE8	; 232
     1d8:	73 40       	sbci	r23, 0x03	; 3
     1da:	81 05       	cpc	r24, r1
     1dc:	91 05       	cpc	r25, r1
     1de:	78 f0       	brcs	.+30     	; 0x1fe <init_s+0x8e>
	{
		TWBR_1= 998;
     1e0:	86 ee       	ldi	r24, 0xE6	; 230
     1e2:	93 e0       	ldi	r25, 0x03	; 3
     1e4:	0e c0       	rjmp	.+28     	; 0x202 <init_s+0x92>
	uint16_t TWBR_1=1;
	
	
	if(SCL_f==400000)
	{
		TWBR_1= 3;
     1e6:	83 e0       	ldi	r24, 0x03	; 3
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	0b c0       	rjmp	.+22     	; 0x202 <init_s+0x92>
	}
	else if(SCL_f>=333333)
	{
		TWBR_1= 4;
     1ec:	84 e0       	ldi	r24, 0x04	; 4
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	08 c0       	rjmp	.+16     	; 0x202 <init_s+0x92>
	}
	else if(SCL_f>=5000)
	{
		TWBR_1= 398;
     1f2:	8e e8       	ldi	r24, 0x8E	; 142
     1f4:	91 e0       	ldi	r25, 0x01	; 1
     1f6:	05 c0       	rjmp	.+10     	; 0x202 <init_s+0x92>
	}
	else if(SCL_f>=2000)
	{
		TWBR_1= 1998;
     1f8:	8e ec       	ldi	r24, 0xCE	; 206
     1fa:	97 e0       	ldi	r25, 0x07	; 7
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <init_s+0x92>
	{
		TWCR|=(1<<TWIE);
	}
	
	//constants pre calculated from mathcad 
	uint16_t TWBR_1=1;
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
	else if(SCL_f>=1000)
	{
		TWBR_1= 998;
	}

	TWSR&=~(1<<TWPS0);
     202:	e9 eb       	ldi	r30, 0xB9	; 185
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	20 81       	ld	r18, Z
     208:	2e 7f       	andi	r18, 0xFE	; 254
     20a:	20 83       	st	Z, r18
	TWSR&=~(1<<TWPS1);
     20c:	20 81       	ld	r18, Z
     20e:	2d 7f       	andi	r18, 0xFD	; 253
     210:	20 83       	st	Z, r18
	
	
	TWBR = TWBR_1;
     212:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
	return TWBR_1;
     216:	08 95       	ret
	}
else
	{
	return 69;
     218:	85 e4       	ldi	r24, 0x45	; 69
     21a:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     21c:	08 95       	ret

0000021e <disable_s>:
----------------description-----------------------------------------------------------------
Disables any i2c activity, activity, 'init_s()' does not need to be followed before starting new transfer
-------------function description end-------------------------------------------------------
**/
static void disable_s(void)
{
     21e:	08 95       	ret

00000220 <start_s>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static void start_s(void)
{
	TWCR=0;
     220:	ec eb       	ldi	r30, 0xBC	; 188
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	10 82       	st	Z, r1
	TWCR |= (1<<TWSTA)|(1<<TWEN)|(1<<TWINT); //TWSTA sends start bit 
     226:	80 81       	ld	r24, Z
     228:	84 6a       	ori	r24, 0xA4	; 164
     22a:	80 83       	st	Z, r24

	if (!int_is_enabled)
     22c:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <int_is_enabled>
     230:	81 11       	cpse	r24, r1
     232:	03 c0       	rjmp	.+6      	; 0x23a <start_s+0x1a>
	{
		while ((TWCR & (1<<TWINT)) == 0)
     234:	80 81       	ld	r24, Z
     236:	88 23       	and	r24, r24
     238:	ec f7       	brge	.-6      	; 0x234 <start_s+0x14>
     23a:	08 95       	ret

0000023c <stop_s>:
stops i2c, no polling needed
-------------function description end-------------------------------------------------------
**/
static void stop_s()
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     23c:	84 e9       	ldi	r24, 0x94	; 148
     23e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     242:	08 95       	ret

00000244 <selectMode_s>:
-------------function description end-------------------------------------------------------
**/
static void selectMode_s(uint8_t SLA_addr,I2C_MODE_t p_mode) //SLA_x is SLA+R/W
{
	//must send address now
	if(p_mode==I2C_WRITE_MODE)
     244:	61 11       	cpse	r22, r1
     246:	04 c0       	rjmp	.+8      	; 0x250 <selectMode_s+0xc>
	{
		TWDR=((SLA_addr<<1)&(~0b1));
     248:	88 0f       	add	r24, r24
     24a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     24e:	06 c0       	rjmp	.+12     	; 0x25c <selectMode_s+0x18>
	}
	else if(p_mode==I2C_READ_MODE)
     250:	61 30       	cpi	r22, 0x01	; 1
     252:	21 f4       	brne	.+8      	; 0x25c <selectMode_s+0x18>
	{
		TWDR=((SLA_addr<<1)|(0b1));
     254:	88 0f       	add	r24, r24
     256:	81 60       	ori	r24, 0x01	; 1
     258:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	}
	TWCR |= (1<<TWINT);
     25c:	ec eb       	ldi	r30, 0xBC	; 188
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	80 68       	ori	r24, 0x80	; 128
     264:	80 83       	st	Z, r24
	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     266:	80 81       	ld	r24, Z
     268:	84 6a       	ori	r24, 0xA4	; 164
     26a:	80 83       	st	Z, r24
	if (!int_is_enabled)
     26c:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <int_is_enabled>
     270:	81 11       	cpse	r24, r1
     272:	03 c0       	rjmp	.+6      	; 0x27a <selectMode_s+0x36>
	{
	  while ((TWCR & (1<<TWINT)) == 0) //poll
     274:	80 81       	ld	r24, Z
     276:	88 23       	and	r24, r24
     278:	ec f7       	brge	.-6      	; 0x274 <selectMode_s+0x30>
     27a:	08 95       	ret

0000027c <write_s>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static void write_s(uint8_t data)
{
	TWDR = data;
     27c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT)|(1<<TWEN);
     280:	84 e8       	ldi	r24, 0x84	; 132
     282:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	if (!int_is_enabled)
     286:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <int_is_enabled>
     28a:	81 11       	cpse	r24, r1
     28c:	05 c0       	rjmp	.+10     	; 0x298 <write_s+0x1c>
	{
		while ((TWCR & (1<<TWINT)) == 0)
     28e:	ec eb       	ldi	r30, 0xBC	; 188
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	80 81       	ld	r24, Z
     294:	88 23       	and	r24, r24
     296:	ec f7       	brge	.-6      	; 0x292 <write_s+0x16>
     298:	08 95       	ret

0000029a <read_s>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static uint8_t read_s (bool isLast)
{
	if (!isLast ) //If we want to read more than 1 byte
     29a:	81 11       	cpse	r24, r1
     29c:	04 c0       	rjmp	.+8      	; 0x2a6 <read_s+0xc>
	{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     29e:	84 ec       	ldi	r24, 0xC4	; 196
     2a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     2a4:	03 c0       	rjmp	.+6      	; 0x2ac <read_s+0x12>
	}

	else             //If we want to read only one byte
	{
		TWCR = (1<<TWINT) | (1<<TWEN);
     2a6:	84 e8       	ldi	r24, 0x84	; 132
     2a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	}
	
	if (!int_is_enabled)
     2ac:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <int_is_enabled>
     2b0:	81 11       	cpse	r24, r1
     2b2:	08 c0       	rjmp	.+16     	; 0x2c4 <read_s+0x2a>
	{
	  while ((TWCR & (1<<TWINT)) == 0)
     2b4:	ec eb       	ldi	r30, 0xBC	; 188
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	80 81       	ld	r24, Z
     2ba:	88 23       	and	r24, r24
     2bc:	ec f7       	brge	.-6      	; 0x2b8 <read_s+0x1e>
	  {}
	{}
	return TWDR;
     2be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     2c2:	08 95       	ret
	}

	return 0;
     2c4:	80 e0       	ldi	r24, 0x00	; 0
}
     2c6:	08 95       	ret

000002c8 <setBusy_s>:

static bool setBusy_s(bool status)
{	
	busy_flag=status;
     2c8:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <__data_end>
	return  busy_flag;
}
     2cc:	08 95       	ret

000002ce <getBusy_s>:


static bool getBusy_s(void)
{
	return busy_flag;
}
     2ce:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__data_end>
     2d2:	08 95       	ret

000002d4 <getStatus_s>:

static uint8_t getStatus_s(void)
{
	return (TWSR)&(0b11111000);
     2d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     2d8:	88 7f       	andi	r24, 0xF8	; 248
     2da:	08 95       	ret

000002dc <get_i2c_interface>:
-------------function description end-------------------------------------------------------
**/
i2c_t* get_i2c_interface(void)
{
	
 if (!initialized)
     2dc:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <initialized>
     2e0:	81 11       	cpse	r24, r1
     2e2:	2d c0       	rjmp	.+90     	; 0x33e <get_i2c_interface+0x62>
 {
	i2c_interface.init				=	init_s;
     2e4:	ed e4       	ldi	r30, 0x4D	; 77
     2e6:	f2 e0       	ldi	r31, 0x02	; 2
     2e8:	88 eb       	ldi	r24, 0xB8	; 184
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	80 83       	st	Z, r24
	i2c_interface.disable			=	disable_s;
     2f0:	8f e0       	ldi	r24, 0x0F	; 15
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
	i2c_interface.start				=	start_s;
     2f8:	80 e1       	ldi	r24, 0x10	; 16
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	95 83       	std	Z+5, r25	; 0x05
     2fe:	84 83       	std	Z+4, r24	; 0x04
	i2c_interface.stop				=	stop_s;
     300:	8e e1       	ldi	r24, 0x1E	; 30
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	97 83       	std	Z+7, r25	; 0x07
     306:	86 83       	std	Z+6, r24	; 0x06
	i2c_interface.selectmode		=	selectMode_s;
     308:	82 e2       	ldi	r24, 0x22	; 34
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	91 87       	std	Z+9, r25	; 0x09
     30e:	80 87       	std	Z+8, r24	; 0x08
	i2c_interface.write				=	write_s;
     310:	8e e3       	ldi	r24, 0x3E	; 62
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	93 87       	std	Z+11, r25	; 0x0b
     316:	82 87       	std	Z+10, r24	; 0x0a
	i2c_interface.read				=	read_s;
     318:	8d e4       	ldi	r24, 0x4D	; 77
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	95 87       	std	Z+13, r25	; 0x0d
     31e:	84 87       	std	Z+12, r24	; 0x0c
	i2c_interface.setBusy			=	setBusy_s;
     320:	84 e6       	ldi	r24, 0x64	; 100
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	97 87       	std	Z+15, r25	; 0x0f
     326:	86 87       	std	Z+14, r24	; 0x0e
	i2c_interface.getBusy			=	getBusy_s;
     328:	87 e6       	ldi	r24, 0x67	; 103
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	91 8b       	std	Z+17, r25	; 0x11
     32e:	80 8b       	std	Z+16, r24	; 0x10
	i2c_interface.getStatus			=	getStatus_s;
     330:	8a e6       	ldi	r24, 0x6A	; 106
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	93 8b       	std	Z+19, r25	; 0x13
     336:	82 8b       	std	Z+18, r24	; 0x12
	initialized=true;
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <initialized>
	
 }
	return &i2c_interface;
}
     33e:	8d e4       	ldi	r24, 0x4D	; 77
     340:	92 e0       	ldi	r25, 0x02	; 2
     342:	08 95       	ret

00000344 <InitUART>:
  // Wait for new character received
  while ( (UCSRnA & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDRn;
}
     344:	0f 93       	push	r16
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	ec 01       	movw	r28, r24
     34c:	db 01       	movw	r26, r22
     34e:	ca 01       	movw	r24, r20
     350:	8c 52       	subi	r24, 0x2C	; 44
     352:	91 40       	sbci	r25, 0x01	; 1
     354:	a1 09       	sbc	r26, r1
     356:	b1 09       	sbc	r27, r1
     358:	85 3d       	cpi	r24, 0xD5	; 213
     35a:	90 4c       	sbci	r25, 0xC0	; 192
     35c:	a1 40       	sbci	r26, 0x01	; 1
     35e:	b1 05       	cpc	r27, r1
     360:	08 f0       	brcs	.+2      	; 0x364 <InitUART+0x20>
     362:	3f c0       	rjmp	.+126    	; 0x3e2 <InitUART+0x9e>
     364:	25 50       	subi	r18, 0x05	; 5
     366:	24 30       	cpi	r18, 0x04	; 4
     368:	e0 f5       	brcc	.+120    	; 0x3e2 <InitUART+0x9e>
     36a:	80 e2       	ldi	r24, 0x20	; 32
     36c:	88 83       	st	Y, r24
     36e:	88 e1       	ldi	r24, 0x18	; 24
     370:	89 83       	std	Y+1, r24	; 0x01
     372:	22 0f       	add	r18, r18
     374:	2a 83       	std	Y+2, r18	; 0x02
     376:	05 34       	cpi	r16, 0x45	; 69
     378:	21 f4       	brne	.+8      	; 0x382 <InitUART+0x3e>
     37a:	8a 81       	ldd	r24, Y+2	; 0x02
     37c:	80 62       	ori	r24, 0x20	; 32
     37e:	8a 83       	std	Y+2, r24	; 0x02
     380:	05 c0       	rjmp	.+10     	; 0x38c <InitUART+0x48>
     382:	0f 34       	cpi	r16, 0x4F	; 79
     384:	19 f4       	brne	.+6      	; 0x38c <InitUART+0x48>
     386:	8a 81       	ldd	r24, Y+2	; 0x02
     388:	80 63       	ori	r24, 0x30	; 48
     38a:	8a 83       	std	Y+2, r24	; 0x02
     38c:	db 01       	movw	r26, r22
     38e:	ca 01       	movw	r24, r20
     390:	80 58       	subi	r24, 0x80	; 128
     392:	9b 47       	sbci	r25, 0x7B	; 123
     394:	a1 4e       	sbci	r26, 0xE1	; 225
     396:	bf 4f       	sbci	r27, 0xFF	; 255
     398:	88 0f       	add	r24, r24
     39a:	99 1f       	adc	r25, r25
     39c:	aa 1f       	adc	r26, r26
     39e:	bb 1f       	adc	r27, r27
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	aa 1f       	adc	r26, r26
     3a6:	bb 1f       	adc	r27, r27
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	aa 1f       	adc	r26, r26
     3ae:	bb 1f       	adc	r27, r27
     3b0:	44 0f       	add	r20, r20
     3b2:	55 1f       	adc	r21, r21
     3b4:	66 1f       	adc	r22, r22
     3b6:	77 1f       	adc	r23, r23
     3b8:	44 0f       	add	r20, r20
     3ba:	55 1f       	adc	r21, r21
     3bc:	66 1f       	adc	r22, r22
     3be:	77 1f       	adc	r23, r23
     3c0:	9a 01       	movw	r18, r20
     3c2:	ab 01       	movw	r20, r22
     3c4:	22 0f       	add	r18, r18
     3c6:	33 1f       	adc	r19, r19
     3c8:	44 1f       	adc	r20, r20
     3ca:	55 1f       	adc	r21, r21
     3cc:	22 0f       	add	r18, r18
     3ce:	33 1f       	adc	r19, r19
     3d0:	44 1f       	adc	r20, r20
     3d2:	55 1f       	adc	r21, r21
     3d4:	bc 01       	movw	r22, r24
     3d6:	cd 01       	movw	r24, r26
     3d8:	d7 d6       	rcall	.+3502   	; 0x1188 <__udivmodsi4>
     3da:	21 50       	subi	r18, 0x01	; 1
     3dc:	31 09       	sbc	r19, r1
     3de:	3d 83       	std	Y+5, r19	; 0x05
     3e0:	2c 83       	std	Y+4, r18	; 0x04
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	0f 91       	pop	r16
     3e8:	08 95       	ret

000003ea <SendChar>:
Then send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(unsigned int UART_adr, char Tegn)
{
     3ea:	fc 01       	movw	r30, r24
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRnA & (1<<5)) == 0 )
     3ec:	90 81       	ld	r25, Z
     3ee:	95 ff       	sbrs	r25, 5
     3f0:	fd cf       	rjmp	.-6      	; 0x3ec <SendChar+0x2>
  {}
  // Then send the character
  UDRn = Tegn;
     3f2:	66 83       	std	Z+6, r22	; 0x06
     3f4:	08 95       	ret

000003f6 <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	eb 01       	movw	r28, r22
  // Repeat until zero-termination
  while (*Streng != 0)
     400:	68 81       	ld	r22, Y
     402:	66 23       	and	r22, r22
     404:	39 f0       	breq	.+14     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     406:	8c 01       	movw	r16, r24
     408:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
     40a:	c8 01       	movw	r24, r16
     40c:	ee df       	rcall	.-36     	; 0x3ea <SendChar>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
     40e:	69 91       	ld	r22, Y+
     410:	61 11       	cpse	r22, r1
     412:	fb cf       	rjmp	.-10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
    // Advance the pointer one step
    Streng++;
  }
}
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	1f 91       	pop	r17
     41a:	0f 91       	pop	r16
     41c:	08 95       	ret

0000041e <SendInteger>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(unsigned int UART_adr, int Tal)
{
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
     42a:	27 97       	sbiw	r28, 0x07	; 7
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
     436:	8c 01       	movw	r16, r24
     438:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     43a:	4a e0       	ldi	r20, 0x0A	; 10
     43c:	be 01       	movw	r22, r28
     43e:	6f 5f       	subi	r22, 0xFF	; 255
     440:	7f 4f       	sbci	r23, 0xFF	; 255
     442:	cc d6       	rcall	.+3480   	; 0x11dc <__itoa_ncheck>
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Tal, array, 10);
  // - then send the string
  SendString(UART_adr, array);
     444:	be 01       	movw	r22, r28
     446:	6f 5f       	subi	r22, 0xFF	; 255
     448:	7f 4f       	sbci	r23, 0xFF	; 255
     44a:	c8 01       	movw	r24, r16
     44c:	d4 df       	rcall	.-88     	; 0x3f6 <SendString>
}
     44e:	27 96       	adiw	r28, 0x07	; 7
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	f8 94       	cli
     454:	de bf       	out	0x3e, r29	; 62
     456:	0f be       	out	0x3f, r0	; 63
     458:	cd bf       	out	0x3d, r28	; 61
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	08 95       	ret

00000464 <s_start>:
}


static uint8_t s_start(void)
{
	i2c->start();
     464:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <i2c>
     468:	f0 91 99 02 	lds	r31, 0x0299	; 0x800299 <i2c+0x1>
     46c:	04 80       	ldd	r0, Z+4	; 0x04
     46e:	f5 81       	ldd	r31, Z+5	; 0x05
     470:	e0 2d       	mov	r30, r0
     472:	19 95       	eicall
	return 1;

}
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	08 95       	ret

00000478 <s_stop>:
static void s_stop(void)
{
	i2c->stop();
     478:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <i2c>
     47c:	f0 91 99 02 	lds	r31, 0x0299	; 0x800299 <i2c+0x1>
     480:	06 80       	ldd	r0, Z+6	; 0x06
     482:	f7 81       	ldd	r31, Z+7	; 0x07
     484:	e0 2d       	mov	r30, r0
     486:	19 95       	eicall
     488:	08 95       	ret

0000048a <s_enterWrite>:
}
static void s_enterWrite(void)
{
	
	i2c->selectmode(ADDR_0,I2C_WRITE_MODE);
     48a:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <i2c>
     48e:	f0 91 99 02 	lds	r31, 0x0299	; 0x800299 <i2c+0x1>
     492:	00 84       	ldd	r0, Z+8	; 0x08
     494:	f1 85       	ldd	r31, Z+9	; 0x09
     496:	e0 2d       	mov	r30, r0
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	88 e6       	ldi	r24, 0x68	; 104
     49c:	19 95       	eicall
     49e:	08 95       	ret

000004a0 <s_enterRead>:
	
}
static void s_enterRead(void)
{

	i2c->selectmode(ADDR_0,I2C_READ_MODE);
     4a0:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <i2c>
     4a4:	f0 91 99 02 	lds	r31, 0x0299	; 0x800299 <i2c+0x1>
     4a8:	00 84       	ldd	r0, Z+8	; 0x08
     4aa:	f1 85       	ldd	r31, Z+9	; 0x09
     4ac:	e0 2d       	mov	r30, r0
     4ae:	61 e0       	ldi	r22, 0x01	; 1
     4b0:	88 e6       	ldi	r24, 0x68	; 104
     4b2:	19 95       	eicall
     4b4:	08 95       	ret

000004b6 <s_selectRegister>:
	
}
static void s_selectRegister(reg_addr_t reg_addr)
{
	currentAddr=reg_addr;
     4b6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	i2c->write(reg_addr);
     4ba:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <i2c>
     4be:	f0 91 99 02 	lds	r31, 0x0299	; 0x800299 <i2c+0x1>
     4c2:	02 84       	ldd	r0, Z+10	; 0x0a
     4c4:	f3 85       	ldd	r31, Z+11	; 0x0b
     4c6:	e0 2d       	mov	r30, r0
     4c8:	19 95       	eicall
     4ca:	08 95       	ret

000004cc <s_write>:
}
static void s_write(uint8_t data)
{
	i2c->write(data);
     4cc:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <i2c>
     4d0:	f0 91 99 02 	lds	r31, 0x0299	; 0x800299 <i2c+0x1>
     4d4:	02 84       	ldd	r0, Z+10	; 0x0a
     4d6:	f3 85       	ldd	r31, Z+11	; 0x0b
     4d8:	e0 2d       	mov	r30, r0
     4da:	19 95       	eicall
     4dc:	08 95       	ret

000004de <s_reset>:



static void s_reset(void)
{
	s_start();
     4de:	c2 df       	rcall	.-124    	; 0x464 <s_start>
	s_enterWrite();
     4e0:	d4 df       	rcall	.-88     	; 0x48a <s_enterWrite>
	s_selectRegister(0x6B);
     4e2:	8b e6       	ldi	r24, 0x6B	; 107
     4e4:	e8 df       	rcall	.-48     	; 0x4b6 <s_selectRegister>
	s_write(0x00);
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	f1 df       	rcall	.-30     	; 0x4cc <s_write>
     4ea:	c6 cf       	rjmp	.-116    	; 0x478 <s_stop>
	s_stop();
     4ec:	08 95       	ret

000004ee <s_accerelSettings>:
     4ee:	84 30       	cpi	r24, 0x04	; 4
     4f0:	08 f0       	brcs	.+2      	; 0x4f4 <s_accerelSettings+0x6>
}

static void s_accerelSettings(uint8_t p_range)
{
//4g right now
	if (p_range<=3)
     4f2:	4a c0       	rjmp	.+148    	; 0x588 <s_accerelSettings+0x9a>
	{
		s_accelRange = p_range;
     4f4:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <s_accelRange>
		s_start();
     4f8:	b5 df       	rcall	.-150    	; 0x464 <s_start>
		s_enterWrite();
     4fa:	c7 df       	rcall	.-114    	; 0x48a <s_enterWrite>
		s_selectRegister(ACCEL_SETTING_REG);
     4fc:	8c e1       	ldi	r24, 0x1C	; 28
     4fe:	db df       	rcall	.-74     	; 0x4b6 <s_selectRegister>
     500:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <s_accelRange>
		s_write(s_accelRange<<3);
     504:	88 0f       	add	r24, r24
     506:	88 0f       	add	r24, r24
     508:	88 0f       	add	r24, r24
     50a:	e0 df       	rcall	.-64     	; 0x4cc <s_write>
		s_stop();
     50c:	b5 df       	rcall	.-150    	; 0x478 <s_stop>
     50e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <s_accelRange>
		
	switch (s_accelRange)
     512:	81 30       	cpi	r24, 0x01	; 1
     514:	99 f0       	breq	.+38     	; 0x53c <s_accerelSettings+0x4e>
     516:	28 f0       	brcs	.+10     	; 0x522 <s_accerelSettings+0x34>
     518:	82 30       	cpi	r24, 0x02	; 2
     51a:	e9 f0       	breq	.+58     	; 0x556 <s_accerelSettings+0x68>
     51c:	83 30       	cpi	r24, 0x03	; 3
     51e:	41 f1       	breq	.+80     	; 0x570 <s_accerelSettings+0x82>
     520:	08 95       	ret
     522:	80 e0       	ldi	r24, 0x00	; 0
	{
		case 0:
		s_scalefact_accel = 16384.0;
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	a0 e8       	ldi	r26, 0x80	; 128
     528:	b6 e4       	ldi	r27, 0x46	; 70
     52a:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <s_scalefact_accel>
     52e:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <s_scalefact_accel+0x1>
     532:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <s_scalefact_accel+0x2>
     536:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <s_scalefact_accel+0x3>
     53a:	08 95       	ret
		break;
     53c:	80 e0       	ldi	r24, 0x00	; 0
		case 1:
		s_scalefact_accel = 8192.0;
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	a0 e0       	ldi	r26, 0x00	; 0
     542:	b6 e4       	ldi	r27, 0x46	; 70
     544:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <s_scalefact_accel>
     548:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <s_scalefact_accel+0x1>
     54c:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <s_scalefact_accel+0x2>
     550:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <s_scalefact_accel+0x3>
     554:	08 95       	ret
		break;
     556:	80 e0       	ldi	r24, 0x00	; 0
		case 2:
		s_scalefact_accel = 4096.0;
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	a0 e8       	ldi	r26, 0x80	; 128
     55c:	b5 e4       	ldi	r27, 0x45	; 69
     55e:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <s_scalefact_accel>
     562:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <s_scalefact_accel+0x1>
     566:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <s_scalefact_accel+0x2>
     56a:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <s_scalefact_accel+0x3>
     56e:	08 95       	ret
		break;
     570:	80 e0       	ldi	r24, 0x00	; 0
		case 3:
		s_scalefact_accel = 2048.0;
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	a0 e0       	ldi	r26, 0x00	; 0
     576:	b5 e4       	ldi	r27, 0x45	; 69
     578:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <s_scalefact_accel>
     57c:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <s_scalefact_accel+0x1>
     580:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <s_scalefact_accel+0x2>
     584:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <s_scalefact_accel+0x3>
     588:	08 95       	ret

0000058a <s_gyroSettings>:
     58a:	84 30       	cpi	r24, 0x04	; 4
	s_stop();
}

static void s_gyroSettings(uint8_t p_range)
{
	if (p_range<=3)
     58c:	08 f0       	brcs	.+2      	; 0x590 <s_gyroSettings+0x6>
     58e:	4a c0       	rjmp	.+148    	; 0x624 <s_gyroSettings+0x9a>
	{
		s_gyroRange = p_range;
     590:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <s_gyroRange>
		s_start();
     594:	67 df       	rcall	.-306    	; 0x464 <s_start>
		s_enterWrite();
     596:	79 df       	rcall	.-270    	; 0x48a <s_enterWrite>
		s_selectRegister(GYRO_SETTING_REG);
     598:	8b e1       	ldi	r24, 0x1B	; 27
     59a:	8d df       	rcall	.-230    	; 0x4b6 <s_selectRegister>
     59c:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <s_gyroRange>
		s_write(s_gyroRange<<3);
     5a0:	88 0f       	add	r24, r24
     5a2:	88 0f       	add	r24, r24
     5a4:	88 0f       	add	r24, r24
     5a6:	92 df       	rcall	.-220    	; 0x4cc <s_write>
		s_stop();
     5a8:	67 df       	rcall	.-306    	; 0x478 <s_stop>
     5aa:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <s_gyroRange>
		
		switch (s_gyroRange)
     5ae:	81 30       	cpi	r24, 0x01	; 1
     5b0:	99 f0       	breq	.+38     	; 0x5d8 <s_gyroSettings+0x4e>
     5b2:	28 f0       	brcs	.+10     	; 0x5be <s_gyroSettings+0x34>
     5b4:	82 30       	cpi	r24, 0x02	; 2
     5b6:	e9 f0       	breq	.+58     	; 0x5f2 <s_gyroSettings+0x68>
     5b8:	83 30       	cpi	r24, 0x03	; 3
     5ba:	41 f1       	breq	.+80     	; 0x60c <s_gyroSettings+0x82>
     5bc:	08 95       	ret
     5be:	80 e0       	ldi	r24, 0x00	; 0
		{
		case 0:
			s_scalefact_gyro = 131.0;	
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	a3 e0       	ldi	r26, 0x03	; 3
     5c4:	b3 e4       	ldi	r27, 0x43	; 67
     5c6:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <s_scalefact_gyro>
     5ca:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <s_scalefact_gyro+0x1>
     5ce:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <s_scalefact_gyro+0x2>
     5d2:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <s_scalefact_gyro+0x3>
     5d6:	08 95       	ret
		break;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
		case 1:
			s_scalefact_gyro = 65.5;	
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	a3 e8       	ldi	r26, 0x83	; 131
     5de:	b2 e4       	ldi	r27, 0x42	; 66
     5e0:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <s_scalefact_gyro>
     5e4:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <s_scalefact_gyro+0x1>
     5e8:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <s_scalefact_gyro+0x2>
     5ec:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <s_scalefact_gyro+0x3>
     5f0:	08 95       	ret
		break;
     5f2:	83 e3       	ldi	r24, 0x33	; 51
		case 2:
			s_scalefact_gyro = 32.8;	
     5f4:	93 e3       	ldi	r25, 0x33	; 51
     5f6:	a3 e0       	ldi	r26, 0x03	; 3
     5f8:	b2 e4       	ldi	r27, 0x42	; 66
     5fa:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <s_scalefact_gyro>
     5fe:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <s_scalefact_gyro+0x1>
     602:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <s_scalefact_gyro+0x2>
     606:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <s_scalefact_gyro+0x3>
     60a:	08 95       	ret
		break;
     60c:	83 e3       	ldi	r24, 0x33	; 51
		case 3:
			s_scalefact_gyro = 16.4;
     60e:	93 e3       	ldi	r25, 0x33	; 51
     610:	a3 e8       	ldi	r26, 0x83	; 131
     612:	b1 e4       	ldi	r27, 0x41	; 65
     614:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <s_scalefact_gyro>
     618:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <s_scalefact_gyro+0x1>
     61c:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <s_scalefact_gyro+0x2>
     620:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <s_scalefact_gyro+0x3>
     624:	08 95       	ret

00000626 <s_read>:
     626:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <i2c>
{
	i2c->write(data);
}
static uint8_t s_read(bool is_last)
{
	int16_t temp=i2c->read(is_last);
     62a:	f0 91 99 02 	lds	r31, 0x0299	; 0x800299 <i2c+0x1>
     62e:	04 84       	ldd	r0, Z+12	; 0x0c
     630:	f5 85       	ldd	r31, Z+13	; 0x0d
     632:	e0 2d       	mov	r30, r0
     634:	19 95       	eicall
     636:	28 2f       	mov	r18, r24
     638:	a8 2f       	mov	r26, r24
     63a:	b0 e0       	ldi	r27, 0x00	; 0
	
	switch (currentAddr)
     63c:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     640:	49 2f       	mov	r20, r25
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	fa 01       	movw	r30, r20
     646:	fb 97       	sbiw	r30, 0x3b	; 59
     648:	ee 30       	cpi	r30, 0x0E	; 14
     64a:	f1 05       	cpc	r31, r1
     64c:	08 f0       	brcs	.+2      	; 0x650 <s_read+0x2a>
     64e:	66 c0       	rjmp	.+204    	; 0x71c <s_read+0xf6>
     650:	88 27       	eor	r24, r24
     652:	ee 58       	subi	r30, 0x8E	; 142
     654:	ff 4f       	sbci	r31, 0xFF	; 255
     656:	8f 4f       	sbci	r24, 0xFF	; 255
     658:	b9 c5       	rjmp	.+2930   	; 0x11cc <__tablejump2__>
	{
		//accelerometer
		case ACCEL_XOUT_H:
			data_struct.accel_x=temp<<8;
     65a:	ea e8       	ldi	r30, 0x8A	; 138
     65c:	f2 e0       	ldi	r31, 0x02	; 2
     65e:	10 82       	st	Z, r1
     660:	21 83       	std	Z+1, r18	; 0x01
		break;
     662:	5c c0       	rjmp	.+184    	; 0x71c <s_read+0xf6>
		
		case ACCEL_XOUT_L:
		data_struct.accel_x|=temp;
     664:	ea e8       	ldi	r30, 0x8A	; 138
     666:	f2 e0       	ldi	r31, 0x02	; 2
     668:	40 81       	ld	r20, Z
     66a:	51 81       	ldd	r21, Z+1	; 0x01
     66c:	a4 2b       	or	r26, r20
     66e:	b5 2b       	or	r27, r21
     670:	b1 83       	std	Z+1, r27	; 0x01
     672:	a0 83       	st	Z, r26
		break;
     674:	53 c0       	rjmp	.+166    	; 0x71c <s_read+0xf6>
		
		case ACCEL_YOUT_H:
			data_struct.accel_y=temp<<8;
     676:	ea e8       	ldi	r30, 0x8A	; 138
     678:	f2 e0       	ldi	r31, 0x02	; 2
     67a:	12 82       	std	Z+2, r1	; 0x02
     67c:	23 83       	std	Z+3, r18	; 0x03
		break;
     67e:	4e c0       	rjmp	.+156    	; 0x71c <s_read+0xf6>
		
		case ACCEL_YOUT_L:
			data_struct.accel_y|=temp;
     680:	ea e8       	ldi	r30, 0x8A	; 138
     682:	f2 e0       	ldi	r31, 0x02	; 2
     684:	42 81       	ldd	r20, Z+2	; 0x02
     686:	53 81       	ldd	r21, Z+3	; 0x03
     688:	a4 2b       	or	r26, r20
     68a:	b5 2b       	or	r27, r21
     68c:	b3 83       	std	Z+3, r27	; 0x03
     68e:	a2 83       	std	Z+2, r26	; 0x02
		break;
     690:	45 c0       	rjmp	.+138    	; 0x71c <s_read+0xf6>
		
		case ACCEL_ZOUT_H:
			data_struct.accel_z=temp<<8;
     692:	ea e8       	ldi	r30, 0x8A	; 138
     694:	f2 e0       	ldi	r31, 0x02	; 2
     696:	14 82       	std	Z+4, r1	; 0x04
     698:	25 83       	std	Z+5, r18	; 0x05
		break;
     69a:	40 c0       	rjmp	.+128    	; 0x71c <s_read+0xf6>
		
		case ACCEL_ZOUT_L:
			data_struct.accel_z|=temp;
     69c:	ea e8       	ldi	r30, 0x8A	; 138
     69e:	f2 e0       	ldi	r31, 0x02	; 2
     6a0:	44 81       	ldd	r20, Z+4	; 0x04
     6a2:	55 81       	ldd	r21, Z+5	; 0x05
     6a4:	a4 2b       	or	r26, r20
     6a6:	b5 2b       	or	r27, r21
     6a8:	b5 83       	std	Z+5, r27	; 0x05
     6aa:	a4 83       	std	Z+4, r26	; 0x04
		break;
     6ac:	37 c0       	rjmp	.+110    	; 0x71c <s_read+0xf6>
		
		//temperature
		case TEMP_OUT_H:
			data_struct.temp=temp<<8;
     6ae:	ea e8       	ldi	r30, 0x8A	; 138
     6b0:	f2 e0       	ldi	r31, 0x02	; 2
     6b2:	16 82       	std	Z+6, r1	; 0x06
     6b4:	27 83       	std	Z+7, r18	; 0x07
		break;
     6b6:	32 c0       	rjmp	.+100    	; 0x71c <s_read+0xf6>
		
		case TEMP_OUT_L:
			data_struct.temp|=temp;
     6b8:	ea e8       	ldi	r30, 0x8A	; 138
     6ba:	f2 e0       	ldi	r31, 0x02	; 2
     6bc:	46 81       	ldd	r20, Z+6	; 0x06
     6be:	57 81       	ldd	r21, Z+7	; 0x07
     6c0:	a4 2b       	or	r26, r20
     6c2:	b5 2b       	or	r27, r21
     6c4:	b7 83       	std	Z+7, r27	; 0x07
     6c6:	a6 83       	std	Z+6, r26	; 0x06
		break;
     6c8:	29 c0       	rjmp	.+82     	; 0x71c <s_read+0xf6>
		
		//Gyro
		case GYRO_XOUT_H:
			data_struct.gyro_x=temp<<8;
     6ca:	ea e8       	ldi	r30, 0x8A	; 138
     6cc:	f2 e0       	ldi	r31, 0x02	; 2
     6ce:	10 86       	std	Z+8, r1	; 0x08
     6d0:	21 87       	std	Z+9, r18	; 0x09
		break;
     6d2:	24 c0       	rjmp	.+72     	; 0x71c <s_read+0xf6>
		
		case GYRO_XOUT_L:
			data_struct.gyro_x|=temp;
     6d4:	ea e8       	ldi	r30, 0x8A	; 138
     6d6:	f2 e0       	ldi	r31, 0x02	; 2
     6d8:	40 85       	ldd	r20, Z+8	; 0x08
     6da:	51 85       	ldd	r21, Z+9	; 0x09
     6dc:	a4 2b       	or	r26, r20
     6de:	b5 2b       	or	r27, r21
     6e0:	b1 87       	std	Z+9, r27	; 0x09
     6e2:	a0 87       	std	Z+8, r26	; 0x08
		break;
     6e4:	1b c0       	rjmp	.+54     	; 0x71c <s_read+0xf6>
		
		case GYRO_YOUT_H:
			data_struct.gyro_y=temp<<8;
     6e6:	ea e8       	ldi	r30, 0x8A	; 138
     6e8:	f2 e0       	ldi	r31, 0x02	; 2
     6ea:	12 86       	std	Z+10, r1	; 0x0a
     6ec:	23 87       	std	Z+11, r18	; 0x0b
		break;
     6ee:	16 c0       	rjmp	.+44     	; 0x71c <s_read+0xf6>
		
		case GYRO_YOUT_L:
			data_struct.gyro_y|=temp;
     6f0:	ea e8       	ldi	r30, 0x8A	; 138
     6f2:	f2 e0       	ldi	r31, 0x02	; 2
     6f4:	42 85       	ldd	r20, Z+10	; 0x0a
     6f6:	53 85       	ldd	r21, Z+11	; 0x0b
     6f8:	a4 2b       	or	r26, r20
     6fa:	b5 2b       	or	r27, r21
     6fc:	b3 87       	std	Z+11, r27	; 0x0b
     6fe:	a2 87       	std	Z+10, r26	; 0x0a
		break;
     700:	0d c0       	rjmp	.+26     	; 0x71c <s_read+0xf6>
			
		case GYRO_ZOUT_H:
			data_struct.gyro_z=temp<<8;
     702:	ea e8       	ldi	r30, 0x8A	; 138
     704:	f2 e0       	ldi	r31, 0x02	; 2
     706:	14 86       	std	Z+12, r1	; 0x0c
     708:	25 87       	std	Z+13, r18	; 0x0d
		break;
     70a:	08 c0       	rjmp	.+16     	; 0x71c <s_read+0xf6>
				
		case GYRO_ZOUT_L:
			data_struct.gyro_z|=temp;
     70c:	ea e8       	ldi	r30, 0x8A	; 138
     70e:	f2 e0       	ldi	r31, 0x02	; 2
     710:	44 85       	ldd	r20, Z+12	; 0x0c
     712:	55 85       	ldd	r21, Z+13	; 0x0d
     714:	a4 2b       	or	r26, r20
     716:	b5 2b       	or	r27, r21
     718:	b5 87       	std	Z+13, r27	; 0x0d
     71a:	a4 87       	std	Z+12, r26	; 0x0c
		default:
		//de nada
		break;
	}
	
	currentAddr++;
     71c:	9f 5f       	subi	r25, 0xFF	; 255
     71e:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
	//SendInteger(UART0,currentAddr);
	//SendString(UART0,"\n");
return temp;
}
     722:	82 2f       	mov	r24, r18
     724:	08 95       	ret

00000726 <s_gatherData>:
	}
	return &GA_interface; 
}

static void s_gatherData(void)
{
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
	int i=0;
	s_start();
     72a:	9c de       	rcall	.-712    	; 0x464 <s_start>
	s_enterWrite();
     72c:	ae de       	rcall	.-676    	; 0x48a <s_enterWrite>
	s_selectRegister(ACCEL_XOUT_H);
     72e:	8b e3       	ldi	r24, 0x3B	; 59
	s_start();
     730:	c2 de       	rcall	.-636    	; 0x4b6 <s_selectRegister>
     732:	98 de       	rcall	.-720    	; 0x464 <s_start>
	s_enterRead();
     734:	b5 de       	rcall	.-662    	; 0x4a0 <s_enterRead>
     736:	cd e0       	ldi	r28, 0x0D	; 13
     738:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(i=0;i<14;++i)
	{
		if(i==13)
		{
			s_read(true);
     73a:	04 c0       	rjmp	.+8      	; 0x744 <s_gatherData+0x1e>
     73c:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			s_read(false);
		}
	}
	s_stop();
     73e:	73 df       	rcall	.-282    	; 0x626 <s_read>
     740:	9b de       	rcall	.-714    	; 0x478 <s_stop>
}
     742:	05 c0       	rjmp	.+10     	; 0x74e <s_gatherData+0x28>
		{
			s_read(true);
		}
		else
		{
			s_read(false);
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	6f df       	rcall	.-290    	; 0x626 <s_read>
     748:	21 97       	sbiw	r28, 0x01	; 1
     74a:	e1 f7       	brne	.-8      	; 0x744 <s_gatherData+0x1e>
	s_start();
	s_enterRead();
	
	for(i=0;i<14;++i)
	{
		if(i==13)
     74c:	f7 cf       	rjmp	.-18     	; 0x73c <s_gatherData+0x16>
     74e:	df 91       	pop	r29
		{
			s_read(false);
		}
	}
	s_stop();
}
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <s_getAccelXYZ>:
     754:	cf 92       	push	r12
	//SendString(UART0,"\n");
return temp;
}

static void s_getAccelXYZ(int32_t* XYZ)
{
     756:	df 92       	push	r13
     758:	ef 92       	push	r14
     75a:	ff 92       	push	r15
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	ec 01       	movw	r28, r24
	//return mG
	XYZ[0]=(int32_t)((data_struct.accel_x)/(s_scalefact_accel/1000.0));
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	4a e7       	ldi	r20, 0x7A	; 122
     76c:	54 e4       	ldi	r21, 0x44	; 68
     76e:	60 91 65 02 	lds	r22, 0x0265	; 0x800265 <s_scalefact_accel>
     772:	70 91 66 02 	lds	r23, 0x0266	; 0x800266 <s_scalefact_accel+0x1>
     776:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <s_scalefact_accel+0x2>
     77a:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <s_scalefact_accel+0x3>
     77e:	f4 d2       	rcall	.+1512   	; 0xd68 <__divsf3>
     780:	6b 01       	movw	r12, r22
     782:	7c 01       	movw	r14, r24
     784:	0a e8       	ldi	r16, 0x8A	; 138
     786:	12 e0       	ldi	r17, 0x02	; 2
     788:	f8 01       	movw	r30, r16
     78a:	60 81       	ld	r22, Z
     78c:	71 81       	ldd	r23, Z+1	; 0x01
     78e:	07 2e       	mov	r0, r23
     790:	00 0c       	add	r0, r0
     792:	88 0b       	sbc	r24, r24
     794:	99 0b       	sbc	r25, r25
     796:	83 d3       	rcall	.+1798   	; 0xe9e <__floatsisf>
     798:	a7 01       	movw	r20, r14
     79a:	96 01       	movw	r18, r12
     79c:	e5 d2       	rcall	.+1482   	; 0xd68 <__divsf3>
     79e:	4c d3       	rcall	.+1688   	; 0xe38 <__fixsfsi>
     7a0:	68 83       	st	Y, r22
     7a2:	79 83       	std	Y+1, r23	; 0x01
     7a4:	8a 83       	std	Y+2, r24	; 0x02
     7a6:	9b 83       	std	Y+3, r25	; 0x03
	XYZ[1]=(int32_t)((data_struct.accel_y)/(s_scalefact_accel/1000.0));
     7a8:	f8 01       	movw	r30, r16
     7aa:	62 81       	ldd	r22, Z+2	; 0x02
     7ac:	73 81       	ldd	r23, Z+3	; 0x03
     7ae:	07 2e       	mov	r0, r23
     7b0:	00 0c       	add	r0, r0
     7b2:	88 0b       	sbc	r24, r24
     7b4:	99 0b       	sbc	r25, r25
     7b6:	73 d3       	rcall	.+1766   	; 0xe9e <__floatsisf>
     7b8:	a7 01       	movw	r20, r14
     7ba:	96 01       	movw	r18, r12
     7bc:	d5 d2       	rcall	.+1450   	; 0xd68 <__divsf3>
     7be:	3c d3       	rcall	.+1656   	; 0xe38 <__fixsfsi>
     7c0:	6c 83       	std	Y+4, r22	; 0x04
     7c2:	7d 83       	std	Y+5, r23	; 0x05
     7c4:	8e 83       	std	Y+6, r24	; 0x06
     7c6:	9f 83       	std	Y+7, r25	; 0x07
	XYZ[2]=(int32_t)((data_struct.accel_z)/(s_scalefact_accel/1000.0));
     7c8:	f8 01       	movw	r30, r16
     7ca:	64 81       	ldd	r22, Z+4	; 0x04
     7cc:	75 81       	ldd	r23, Z+5	; 0x05
     7ce:	07 2e       	mov	r0, r23
     7d0:	00 0c       	add	r0, r0
     7d2:	88 0b       	sbc	r24, r24
     7d4:	99 0b       	sbc	r25, r25
     7d6:	63 d3       	rcall	.+1734   	; 0xe9e <__floatsisf>
     7d8:	a7 01       	movw	r20, r14
     7da:	96 01       	movw	r18, r12
     7dc:	c5 d2       	rcall	.+1418   	; 0xd68 <__divsf3>
     7de:	2c d3       	rcall	.+1624   	; 0xe38 <__fixsfsi>
     7e0:	68 87       	std	Y+8, r22	; 0x08
     7e2:	79 87       	std	Y+9, r23	; 0x09
     7e4:	8a 87       	std	Y+10, r24	; 0x0a
     7e6:	9b 87       	std	Y+11, r25	; 0x0b
	
	////return mm/s^2
	//XYZ[0]=(int32_t)(MS_SQR*(data_struct.accel_x)/(s_scalefact_accel/1000.0));
	//XYZ[1]=(int32_t)(MS_SQR*(data_struct.accel_y)/(s_scalefact_accel/1000.0));
	//XYZ[2]=(int32_t)(MS_SQR*(data_struct.accel_z)/(s_scalefact_accel/1000.0));
}
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	1f 91       	pop	r17
     7ee:	0f 91       	pop	r16
     7f0:	ff 90       	pop	r15
     7f2:	ef 90       	pop	r14
     7f4:	df 90       	pop	r13
     7f6:	cf 90       	pop	r12
     7f8:	08 95       	ret

000007fa <s_getGyroXYZ>:

static void s_getGyroXYZ(int32_t* XYZ)
{
     7fa:	cf 92       	push	r12
     7fc:	df 92       	push	r13
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	ec 01       	movw	r28, r24
	//return in deg/s
	XYZ[0]=(int32_t)((data_struct.gyro_x)/(s_scalefact_gyro));
     80c:	c0 90 61 02 	lds	r12, 0x0261	; 0x800261 <s_scalefact_gyro>
     810:	d0 90 62 02 	lds	r13, 0x0262	; 0x800262 <s_scalefact_gyro+0x1>
     814:	e0 90 63 02 	lds	r14, 0x0263	; 0x800263 <s_scalefact_gyro+0x2>
     818:	f0 90 64 02 	lds	r15, 0x0264	; 0x800264 <s_scalefact_gyro+0x3>
     81c:	0a e8       	ldi	r16, 0x8A	; 138
     81e:	12 e0       	ldi	r17, 0x02	; 2
     820:	f8 01       	movw	r30, r16
     822:	60 85       	ldd	r22, Z+8	; 0x08
     824:	71 85       	ldd	r23, Z+9	; 0x09
     826:	07 2e       	mov	r0, r23
     828:	00 0c       	add	r0, r0
     82a:	88 0b       	sbc	r24, r24
     82c:	99 0b       	sbc	r25, r25
     82e:	37 d3       	rcall	.+1646   	; 0xe9e <__floatsisf>
     830:	a7 01       	movw	r20, r14
     832:	96 01       	movw	r18, r12
     834:	99 d2       	rcall	.+1330   	; 0xd68 <__divsf3>
     836:	00 d3       	rcall	.+1536   	; 0xe38 <__fixsfsi>
     838:	68 83       	st	Y, r22
     83a:	79 83       	std	Y+1, r23	; 0x01
     83c:	8a 83       	std	Y+2, r24	; 0x02
     83e:	9b 83       	std	Y+3, r25	; 0x03
	XYZ[1]=(int32_t)((data_struct.gyro_y)/(s_scalefact_gyro));
     840:	f8 01       	movw	r30, r16
     842:	62 85       	ldd	r22, Z+10	; 0x0a
     844:	73 85       	ldd	r23, Z+11	; 0x0b
     846:	07 2e       	mov	r0, r23
     848:	00 0c       	add	r0, r0
     84a:	88 0b       	sbc	r24, r24
     84c:	99 0b       	sbc	r25, r25
     84e:	27 d3       	rcall	.+1614   	; 0xe9e <__floatsisf>
     850:	a7 01       	movw	r20, r14
     852:	96 01       	movw	r18, r12
     854:	89 d2       	rcall	.+1298   	; 0xd68 <__divsf3>
     856:	f0 d2       	rcall	.+1504   	; 0xe38 <__fixsfsi>
     858:	6c 83       	std	Y+4, r22	; 0x04
     85a:	7d 83       	std	Y+5, r23	; 0x05
     85c:	8e 83       	std	Y+6, r24	; 0x06
     85e:	9f 83       	std	Y+7, r25	; 0x07
	XYZ[2]=(int32_t)((data_struct.gyro_z)/(s_scalefact_gyro));
     860:	f8 01       	movw	r30, r16
     862:	64 85       	ldd	r22, Z+12	; 0x0c
     864:	75 85       	ldd	r23, Z+13	; 0x0d
     866:	07 2e       	mov	r0, r23
     868:	00 0c       	add	r0, r0
     86a:	88 0b       	sbc	r24, r24
     86c:	99 0b       	sbc	r25, r25
     86e:	17 d3       	rcall	.+1582   	; 0xe9e <__floatsisf>
     870:	a7 01       	movw	r20, r14
     872:	96 01       	movw	r18, r12
     874:	79 d2       	rcall	.+1266   	; 0xd68 <__divsf3>
     876:	e0 d2       	rcall	.+1472   	; 0xe38 <__fixsfsi>
     878:	68 87       	std	Y+8, r22	; 0x08
     87a:	79 87       	std	Y+9, r23	; 0x09
     87c:	8a 87       	std	Y+10, r24	; 0x0a
     87e:	9b 87       	std	Y+11, r25	; 0x0b
}
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	08 95       	ret

00000892 <s_getPitchRoll>:

static void s_getPitchRoll(int16_t *pitchRoll)
{	
     892:	4f 92       	push	r4
     894:	5f 92       	push	r5
     896:	6f 92       	push	r6
     898:	7f 92       	push	r7
     89a:	8f 92       	push	r8
     89c:	9f 92       	push	r9
     89e:	af 92       	push	r10
     8a0:	bf 92       	push	r11
     8a2:	cf 92       	push	r12
     8a4:	df 92       	push	r13
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	00 d0       	rcall	.+0      	; 0x8b4 <s_getPitchRoll+0x22>
     8b4:	1f 92       	push	r1
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
     8ba:	8c 01       	movw	r16, r24
	pitchRoll[0] = (int16_t)((atan2(((data_struct.accel_y)/s_scalefact_accel),((data_struct.accel_z)/s_scalefact_accel)))*PI_DIV_180);
     8bc:	40 90 65 02 	lds	r4, 0x0265	; 0x800265 <s_scalefact_accel>
     8c0:	50 90 66 02 	lds	r5, 0x0266	; 0x800266 <s_scalefact_accel+0x1>
     8c4:	60 90 67 02 	lds	r6, 0x0267	; 0x800267 <s_scalefact_accel+0x2>
     8c8:	70 90 68 02 	lds	r7, 0x0268	; 0x800268 <s_scalefact_accel+0x3>
     8cc:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <data_struct+0x4>
     8d0:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <data_struct+0x5>
     8d4:	07 2e       	mov	r0, r23
     8d6:	00 0c       	add	r0, r0
     8d8:	88 0b       	sbc	r24, r24
     8da:	99 0b       	sbc	r25, r25
     8dc:	e0 d2       	rcall	.+1472   	; 0xe9e <__floatsisf>
     8de:	a3 01       	movw	r20, r6
     8e0:	92 01       	movw	r18, r4
     8e2:	42 d2       	rcall	.+1156   	; 0xd68 <__divsf3>
     8e4:	6b 01       	movw	r12, r22
     8e6:	7c 01       	movw	r14, r24
     8e8:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <data_struct+0x2>
     8ec:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <data_struct+0x3>
     8f0:	07 2e       	mov	r0, r23
     8f2:	00 0c       	add	r0, r0
     8f4:	88 0b       	sbc	r24, r24
     8f6:	99 0b       	sbc	r25, r25
     8f8:	d2 d2       	rcall	.+1444   	; 0xe9e <__floatsisf>
     8fa:	a3 01       	movw	r20, r6
     8fc:	92 01       	movw	r18, r4
     8fe:	34 d2       	rcall	.+1128   	; 0xd68 <__divsf3>
     900:	4b 01       	movw	r8, r22
     902:	5c 01       	movw	r10, r24
     904:	a7 01       	movw	r20, r14
     906:	96 01       	movw	r18, r12
     908:	dc d1       	rcall	.+952    	; 0xcc2 <atan2>
     90a:	21 ee       	ldi	r18, 0xE1	; 225
     90c:	3e e2       	ldi	r19, 0x2E	; 46
     90e:	45 e6       	ldi	r20, 0x65	; 101
     910:	52 e4       	ldi	r21, 0x42	; 66
     912:	7d d3       	rcall	.+1786   	; 0x100e <__mulsf3>
     914:	91 d2       	rcall	.+1314   	; 0xe38 <__fixsfsi>
     916:	f8 01       	movw	r30, r16
     918:	71 83       	std	Z+1, r23	; 0x01
     91a:	60 83       	st	Z, r22
	pitchRoll[1] = (int16_t)((atan2((-1.0 * (data_struct.accel_x)/s_scalefact_accel) , sqrt(((data_struct.accel_y)/s_scalefact_accel) * ((data_struct.accel_y)/s_scalefact_accel) 
     91c:	a5 01       	movw	r20, r10
     91e:	94 01       	movw	r18, r8
     920:	c5 01       	movw	r24, r10
     922:	b4 01       	movw	r22, r8
     924:	74 d3       	rcall	.+1768   	; 0x100e <__mulsf3>
     926:	69 83       	std	Y+1, r22	; 0x01
     928:	7a 83       	std	Y+2, r23	; 0x02
     92a:	8b 83       	std	Y+3, r24	; 0x03
     92c:	9c 83       	std	Y+4, r25	; 0x04
     92e:	a5 01       	movw	r20, r10
     930:	94 01       	movw	r18, r8
     932:	c5 01       	movw	r24, r10
     934:	b4 01       	movw	r22, r8
     936:	6b d3       	rcall	.+1750   	; 0x100e <__mulsf3>
     938:	4b 01       	movw	r8, r22
     93a:	5c 01       	movw	r10, r24
     93c:	a7 01       	movw	r20, r14
     93e:	96 01       	movw	r18, r12
     940:	c7 01       	movw	r24, r14
     942:	b6 01       	movw	r22, r12
     944:	64 d3       	rcall	.+1736   	; 0x100e <__mulsf3>
     946:	9b 01       	movw	r18, r22
     948:	ac 01       	movw	r20, r24
     94a:	c5 01       	movw	r24, r10
     94c:	b4 01       	movw	r22, r8
     94e:	46 d1       	rcall	.+652    	; 0xbdc <__addsf3>
     950:	c5 d3       	rcall	.+1930   	; 0x10dc <sqrt>
     952:	6b 01       	movw	r12, r22
     954:	7c 01       	movw	r14, r24
     956:	ea e8       	ldi	r30, 0x8A	; 138
     958:	f2 e0       	ldi	r31, 0x02	; 2
     95a:	60 81       	ld	r22, Z
     95c:	71 81       	ldd	r23, Z+1	; 0x01
     95e:	07 2e       	mov	r0, r23
     960:	00 0c       	add	r0, r0
     962:	88 0b       	sbc	r24, r24
     964:	99 0b       	sbc	r25, r25
     966:	9b d2       	rcall	.+1334   	; 0xe9e <__floatsisf>
     968:	90 58       	subi	r25, 0x80	; 128
     96a:	a3 01       	movw	r20, r6
     96c:	92 01       	movw	r18, r4
     96e:	fc d1       	rcall	.+1016   	; 0xd68 <__divsf3>
     970:	a7 01       	movw	r20, r14
     972:	96 01       	movw	r18, r12
     974:	a6 d1       	rcall	.+844    	; 0xcc2 <atan2>
     976:	21 ee       	ldi	r18, 0xE1	; 225
     978:	3e e2       	ldi	r19, 0x2E	; 46
     97a:	45 e6       	ldi	r20, 0x65	; 101
     97c:	52 e4       	ldi	r21, 0x42	; 66
     97e:	47 d3       	rcall	.+1678   	; 0x100e <__mulsf3>
     980:	5b d2       	rcall	.+1206   	; 0xe38 <__fixsfsi>
     982:	f8 01       	movw	r30, r16
     984:	73 83       	std	Z+3, r23	; 0x03
     986:	62 83       	std	Z+2, r22	; 0x02
     988:	0f 90       	pop	r0
					+ ((data_struct.accel_z)/s_scalefact_accel) * ((data_struct.accel_z)/s_scalefact_accel))))*PI_DIV_180);



}
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	ff 90       	pop	r15
     99a:	ef 90       	pop	r14
     99c:	df 90       	pop	r13
     99e:	cf 90       	pop	r12
     9a0:	bf 90       	pop	r11
     9a2:	af 90       	pop	r10
     9a4:	9f 90       	pop	r9
     9a6:	8f 90       	pop	r8
     9a8:	7f 90       	pop	r7
     9aa:	6f 90       	pop	r6
     9ac:	5f 90       	pop	r5
     9ae:	4f 90       	pop	r4
     9b0:	08 95       	ret

000009b2 <get_GA_interface>:
     9b2:	9c 01       	movw	r18, r24
static void		s_reset(void);

GA_t* get_GA_interface(i2c_t* i2c_interface)
{
	
	if (!initialized)
     9b4:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <initialized>
     9b8:	91 11       	cpse	r25, r1
     9ba:	41 c0       	rjmp	.+130    	; 0xa3e <get_GA_interface+0x8c>
	{
		i2c=i2c_interface;
     9bc:	30 93 99 02 	sts	0x0299, r19	; 0x800299 <i2c+0x1>
     9c0:	20 93 98 02 	sts	0x0298, r18	; 0x800298 <i2c>
		
			GA_interface.start					=	s_start;
     9c4:	ec e6       	ldi	r30, 0x6C	; 108
     9c6:	f2 e0       	ldi	r31, 0x02	; 2
     9c8:	82 e3       	ldi	r24, 0x32	; 50
     9ca:	92 e0       	ldi	r25, 0x02	; 2
     9cc:	91 83       	std	Z+1, r25	; 0x01
     9ce:	80 83       	st	Z, r24
			GA_interface.stop					=	s_stop;
     9d0:	8c e3       	ldi	r24, 0x3C	; 60
     9d2:	92 e0       	ldi	r25, 0x02	; 2
     9d4:	93 83       	std	Z+3, r25	; 0x03
     9d6:	82 83       	std	Z+2, r24	; 0x02
			GA_interface.enterWrite				=	s_enterWrite;
     9d8:	85 e4       	ldi	r24, 0x45	; 69
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	95 83       	std	Z+5, r25	; 0x05
     9de:	84 83       	std	Z+4, r24	; 0x04
			GA_interface.enterRead				=	s_enterRead;
     9e0:	80 e5       	ldi	r24, 0x50	; 80
     9e2:	92 e0       	ldi	r25, 0x02	; 2
     9e4:	97 83       	std	Z+7, r25	; 0x07
     9e6:	86 83       	std	Z+6, r24	; 0x06
			GA_interface.selectRegister			=	s_selectRegister;
     9e8:	8b e5       	ldi	r24, 0x5B	; 91
     9ea:	92 e0       	ldi	r25, 0x02	; 2
     9ec:	91 87       	std	Z+9, r25	; 0x09
     9ee:	80 87       	std	Z+8, r24	; 0x08
			GA_interface.write					=	s_write;
     9f0:	86 e6       	ldi	r24, 0x66	; 102
     9f2:	92 e0       	ldi	r25, 0x02	; 2
     9f4:	93 87       	std	Z+11, r25	; 0x0b
     9f6:	82 87       	std	Z+10, r24	; 0x0a
			GA_interface.read					=	s_read;
     9f8:	83 e1       	ldi	r24, 0x13	; 19
     9fa:	93 e0       	ldi	r25, 0x03	; 3
     9fc:	95 87       	std	Z+13, r25	; 0x0d
     9fe:	84 87       	std	Z+12, r24	; 0x0c
			GA_interface.getPitchRoll 			=	s_getPitchRoll;
     a00:	89 e4       	ldi	r24, 0x49	; 73
     a02:	94 e0       	ldi	r25, 0x04	; 4
     a04:	97 87       	std	Z+15, r25	; 0x0f
     a06:	86 87       	std	Z+14, r24	; 0x0e
			GA_interface.getAccelXYZ			=	s_getAccelXYZ;
     a08:	8a ea       	ldi	r24, 0xAA	; 170
     a0a:	93 e0       	ldi	r25, 0x03	; 3
     a0c:	91 8b       	std	Z+17, r25	; 0x11
     a0e:	80 8b       	std	Z+16, r24	; 0x10
			GA_interface.getGyroXYZ				=	s_getGyroXYZ;
     a10:	8d ef       	ldi	r24, 0xFD	; 253
     a12:	93 e0       	ldi	r25, 0x03	; 3
     a14:	93 8b       	std	Z+19, r25	; 0x13
     a16:	82 8b       	std	Z+18, r24	; 0x12
			GA_interface.gatherData				=	s_gatherData;
     a18:	83 e9       	ldi	r24, 0x93	; 147
     a1a:	93 e0       	ldi	r25, 0x03	; 3
     a1c:	95 8b       	std	Z+21, r25	; 0x15
     a1e:	84 8b       	std	Z+20, r24	; 0x14
			GA_interface.gyroSettings			=	s_gyroSettings;
     a20:	85 ec       	ldi	r24, 0xC5	; 197
     a22:	92 e0       	ldi	r25, 0x02	; 2
     a24:	97 8b       	std	Z+23, r25	; 0x17
     a26:	86 8b       	std	Z+22, r24	; 0x16
			GA_interface.accerelSettings		=	s_accerelSettings;
     a28:	87 e7       	ldi	r24, 0x77	; 119
     a2a:	92 e0       	ldi	r25, 0x02	; 2
     a2c:	91 8f       	std	Z+25, r25	; 0x19
     a2e:	80 8f       	std	Z+24, r24	; 0x18
			GA_interface.reset					=	s_reset;
     a30:	8f e6       	ldi	r24, 0x6F	; 111
     a32:	92 e0       	ldi	r25, 0x02	; 2
     a34:	93 8f       	std	Z+27, r25	; 0x1b
     a36:	82 8f       	std	Z+26, r24	; 0x1a
			initialized=true;		
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <initialized>
	}
	return &GA_interface; 
}
     a3e:	8c e6       	ldi	r24, 0x6C	; 108
     a40:	92 e0       	ldi	r25, 0x02	; 2
     a42:	08 95       	ret

00000a44 <main>:
}
**/
#define UARTADDR UART0

int main(void)
{
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
     a4c:	6c 97       	sbiw	r28, 0x1c	; 28
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	de bf       	out	0x3e, r29	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a58:	2f ef       	ldi	r18, 0xFF	; 255
     a5a:	83 ed       	ldi	r24, 0xD3	; 211
     a5c:	90 e3       	ldi	r25, 0x30	; 48
     a5e:	21 50       	subi	r18, 0x01	; 1
     a60:	80 40       	sbci	r24, 0x00	; 0
     a62:	90 40       	sbci	r25, 0x00	; 0
     a64:	e1 f7       	brne	.-8      	; 0xa5e <main+0x1a>
     a66:	00 c0       	rjmp	.+0      	; 0xa68 <main+0x24>
     a68:	00 00       	nop
     a6a:	2f ef       	ldi	r18, 0xFF	; 255
     a6c:	83 ed       	ldi	r24, 0xD3	; 211
     a6e:	90 e3       	ldi	r25, 0x30	; 48
     a70:	21 50       	subi	r18, 0x01	; 1
     a72:	80 40       	sbci	r24, 0x00	; 0
     a74:	90 40       	sbci	r25, 0x00	; 0
     a76:	e1 f7       	brne	.-8      	; 0xa70 <main+0x2c>
     a78:	00 c0       	rjmp	.+0      	; 0xa7a <main+0x36>
     a7a:	00 00       	nop
	{
		_delay_ms(1000);
	}
	
	
	InitUART(UARTADDR, 9600, 8,0);
     a7c:	00 e0       	ldi	r16, 0x00	; 0
     a7e:	28 e0       	ldi	r18, 0x08	; 8
     a80:	40 e8       	ldi	r20, 0x80	; 128
     a82:	55 e2       	ldi	r21, 0x25	; 37
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	80 ec       	ldi	r24, 0xC0	; 192
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	5b dc       	rcall	.-1866   	; 0x344 <InitUART>
	SendString(UARTADDR,"\n \n \n");
     a8e:	61 e0       	ldi	r22, 0x01	; 1
     a90:	72 e0       	ldi	r23, 0x02	; 2
     a92:	80 ec       	ldi	r24, 0xC0	; 192
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	af dc       	rcall	.-1698   	; 0x3f6 <SendString>
	SendInteger(UARTADDR,32000);
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	7d e7       	ldi	r23, 0x7D	; 125
     a9c:	80 ec       	ldi	r24, 0xC0	; 192
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	be dc       	rcall	.-1668   	; 0x41e <SendInteger>
	SendString(UARTADDR,"\n");
     aa2:	65 e0       	ldi	r22, 0x05	; 5
     aa4:	72 e0       	ldi	r23, 0x02	; 2
     aa6:	80 ec       	ldi	r24, 0xC0	; 192
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	a5 dc       	rcall	.-1718   	; 0x3f6 <SendString>
	SendString(UARTADDR,"creating objects \n");
     aac:	67 e0       	ldi	r22, 0x07	; 7
     aae:	72 e0       	ldi	r23, 0x02	; 2
     ab0:	80 ec       	ldi	r24, 0xC0	; 192
     ab2:	90 e0       	ldi	r25, 0x00	; 0
	
	i2c_obj=get_i2c_interface();
     ab4:	a0 dc       	rcall	.-1728   	; 0x3f6 <SendString>
     ab6:	12 dc       	rcall	.-2012   	; 0x2dc <get_i2c_interface>
     ab8:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <i2c_obj+0x1>
     abc:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <i2c_obj>
	
	GA_obj=get_GA_interface(i2c_obj);
     ac0:	78 df       	rcall	.-272    	; 0x9b2 <get_GA_interface>
     ac2:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <GA_obj+0x1>
     ac6:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <GA_obj>
	
	SendString(UARTADDR,"init i2c: ");
     aca:	6a e1       	ldi	r22, 0x1A	; 26
     acc:	72 e0       	ldi	r23, 0x02	; 2
     ace:	80 ec       	ldi	r24, 0xC0	; 192
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	91 dc       	rcall	.-1758   	; 0x3f6 <SendString>
	SendInteger(UARTADDR,i2c_obj->init(10000,false));
     ad4:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <i2c_obj>
     ad8:	f0 91 9d 02 	lds	r31, 0x029D	; 0x80029d <i2c_obj+0x1>
     adc:	01 90       	ld	r0, Z+
     ade:	f0 81       	ld	r31, Z
     ae0:	e0 2d       	mov	r30, r0
     ae2:	40 e0       	ldi	r20, 0x00	; 0
     ae4:	60 e1       	ldi	r22, 0x10	; 16
     ae6:	77 e2       	ldi	r23, 0x27	; 39
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	19 95       	eicall
     aee:	bc 01       	movw	r22, r24
     af0:	80 ec       	ldi	r24, 0xC0	; 192
     af2:	90 e0       	ldi	r25, 0x00	; 0
	SendString(UARTADDR,"\n");	
     af4:	94 dc       	rcall	.-1752   	; 0x41e <SendInteger>
     af6:	65 e0       	ldi	r22, 0x05	; 5
     af8:	72 e0       	ldi	r23, 0x02	; 2
     afa:	80 ec       	ldi	r24, 0xC0	; 192
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	7b dc       	rcall	.-1802   	; 0x3f6 <SendString>
	
//Set to +- 4G
	GA_obj->reset();
     b00:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <GA_obj>
     b04:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <GA_obj+0x1>
     b08:	02 8c       	ldd	r0, Z+26	; 0x1a
     b0a:	f3 8d       	ldd	r31, Z+27	; 0x1b
     b0c:	e0 2d       	mov	r30, r0
     b0e:	19 95       	eicall
	GA_obj->accerelSettings(3);
     b10:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <GA_obj>
     b14:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <GA_obj+0x1>
     b18:	00 8c       	ldd	r0, Z+24	; 0x18
     b1a:	f1 8d       	ldd	r31, Z+25	; 0x19
     b1c:	e0 2d       	mov	r30, r0
     b1e:	83 e0       	ldi	r24, 0x03	; 3
     b20:	19 95       	eicall
	GA_obj->gyroSettings(3);
     b22:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <GA_obj>
     b26:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <GA_obj+0x1>
     b2a:	06 88       	ldd	r0, Z+22	; 0x16
     b2c:	f7 89       	ldd	r31, Z+23	; 0x17
     b2e:	e0 2d       	mov	r30, r0
     b30:	83 e0       	ldi	r24, 0x03	; 3
     b32:	19 95       	eicall
     b34:	2f ef       	ldi	r18, 0xFF	; 255
     b36:	84 e3       	ldi	r24, 0x34	; 52
     b38:	9c e0       	ldi	r25, 0x0C	; 12
     b3a:	21 50       	subi	r18, 0x01	; 1
     b3c:	80 40       	sbci	r24, 0x00	; 0
     b3e:	90 40       	sbci	r25, 0x00	; 0
     b40:	e1 f7       	brne	.-8      	; 0xb3a <main+0xf6>
     b42:	00 c0       	rjmp	.+0      	; 0xb44 <main+0x100>
     b44:	00 00       	nop
	int16_t dataPR[2];
    while (1) 
    {
	_delay_ms(250);
	
	GA_obj->gatherData();
     b46:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <GA_obj>
     b4a:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <GA_obj+0x1>
     b4e:	04 88       	ldd	r0, Z+20	; 0x14
     b50:	f5 89       	ldd	r31, Z+21	; 0x15
     b52:	e0 2d       	mov	r30, r0
     b54:	19 95       	eicall
   
	//char outstring[10];
	GA_obj->getGyroXYZ(gyrodata);
     b56:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <GA_obj>
     b5a:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <GA_obj+0x1>
     b5e:	02 88       	ldd	r0, Z+18	; 0x12
     b60:	f3 89       	ldd	r31, Z+19	; 0x13
     b62:	e0 2d       	mov	r30, r0
     b64:	ce 01       	movw	r24, r28
     b66:	0d 96       	adiw	r24, 0x0d	; 13
     b68:	19 95       	eicall
	GA_obj->getAccelXYZ(acceldata);
     b6a:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <GA_obj>
     b6e:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <GA_obj+0x1>
     b72:	00 88       	ldd	r0, Z+16	; 0x10
     b74:	f1 89       	ldd	r31, Z+17	; 0x11
     b76:	e0 2d       	mov	r30, r0
     b78:	ce 01       	movw	r24, r28
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	19 95       	eicall
	GA_obj->getPitchRoll(dataPR);
     b7e:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <GA_obj>
     b82:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <GA_obj+0x1>
     b86:	06 84       	ldd	r0, Z+14	; 0x0e
     b88:	f7 85       	ldd	r31, Z+15	; 0x0f
     b8a:	e0 2d       	mov	r30, r0
     b8c:	ce 01       	movw	r24, r28
     b8e:	49 96       	adiw	r24, 0x19	; 25


SendString(UARTADDR,"GYRO X: ");
     b90:	19 95       	eicall
     b92:	65 e2       	ldi	r22, 0x25	; 37
     b94:	72 e0       	ldi	r23, 0x02	; 2
     b96:	80 ec       	ldi	r24, 0xC0	; 192
     b98:	90 e0       	ldi	r25, 0x00	; 0
SendInteger(UARTADDR, gyrodata[0]);
     b9a:	2d dc       	rcall	.-1958   	; 0x3f6 <SendString>
     b9c:	6d 85       	ldd	r22, Y+13	; 0x0d
     b9e:	7e 85       	ldd	r23, Y+14	; 0x0e
     ba0:	80 ec       	ldi	r24, 0xC0	; 192
     ba2:	90 e0       	ldi	r25, 0x00	; 0
SendString(UARTADDR,"deg/s Y: ");
     ba4:	3c dc       	rcall	.-1928   	; 0x41e <SendInteger>
     ba6:	6e e2       	ldi	r22, 0x2E	; 46
     ba8:	72 e0       	ldi	r23, 0x02	; 2
     baa:	80 ec       	ldi	r24, 0xC0	; 192
     bac:	90 e0       	ldi	r25, 0x00	; 0
SendInteger(UARTADDR, gyrodata[1]);
     bae:	23 dc       	rcall	.-1978   	; 0x3f6 <SendString>
     bb0:	69 89       	ldd	r22, Y+17	; 0x11
     bb2:	7a 89       	ldd	r23, Y+18	; 0x12
     bb4:	80 ec       	ldi	r24, 0xC0	; 192
     bb6:	90 e0       	ldi	r25, 0x00	; 0
SendString(UARTADDR,"deg/s Z: ");
     bb8:	32 dc       	rcall	.-1948   	; 0x41e <SendInteger>
     bba:	68 e3       	ldi	r22, 0x38	; 56
     bbc:	72 e0       	ldi	r23, 0x02	; 2
     bbe:	80 ec       	ldi	r24, 0xC0	; 192
     bc0:	90 e0       	ldi	r25, 0x00	; 0
SendInteger(UARTADDR, gyrodata[2]);
     bc2:	19 dc       	rcall	.-1998   	; 0x3f6 <SendString>
     bc4:	6d 89       	ldd	r22, Y+21	; 0x15
     bc6:	7e 89       	ldd	r23, Y+22	; 0x16
     bc8:	80 ec       	ldi	r24, 0xC0	; 192
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	28 dc       	rcall	.-1968   	; 0x41e <SendInteger>
SendString(UARTADDR,"deg/s \n");
     bce:	62 e4       	ldi	r22, 0x42	; 66
     bd0:	72 e0       	ldi	r23, 0x02	; 2
     bd2:	80 ec       	ldi	r24, 0xC0	; 192
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0f dc       	rcall	.-2018   	; 0x3f6 <SendString>
     bd8:	ad cf       	rjmp	.-166    	; 0xb34 <main+0xf0>

00000bda <__subsf3>:
     bda:	50 58       	subi	r21, 0x80	; 128

00000bdc <__addsf3>:
     bdc:	bb 27       	eor	r27, r27
     bde:	aa 27       	eor	r26, r26
     be0:	0e d0       	rcall	.+28     	; 0xbfe <__addsf3x>
     be2:	d4 c1       	rjmp	.+936    	; 0xf8c <__fp_round>
     be4:	c5 d1       	rcall	.+906    	; 0xf70 <__fp_pscA>
     be6:	30 f0       	brcs	.+12     	; 0xbf4 <__addsf3+0x18>
     be8:	ca d1       	rcall	.+916    	; 0xf7e <__fp_pscB>
     bea:	20 f0       	brcs	.+8      	; 0xbf4 <__addsf3+0x18>
     bec:	31 f4       	brne	.+12     	; 0xbfa <__addsf3+0x1e>
     bee:	9f 3f       	cpi	r25, 0xFF	; 255
     bf0:	11 f4       	brne	.+4      	; 0xbf6 <__addsf3+0x1a>
     bf2:	1e f4       	brtc	.+6      	; 0xbfa <__addsf3+0x1e>
     bf4:	95 c1       	rjmp	.+810    	; 0xf20 <__fp_nan>
     bf6:	0e f4       	brtc	.+2      	; 0xbfa <__addsf3+0x1e>
     bf8:	e0 95       	com	r30
     bfa:	e7 fb       	bst	r30, 7
     bfc:	8b c1       	rjmp	.+790    	; 0xf14 <__fp_inf>

00000bfe <__addsf3x>:
     bfe:	e9 2f       	mov	r30, r25
     c00:	d6 d1       	rcall	.+940    	; 0xfae <__fp_split3>
     c02:	80 f3       	brcs	.-32     	; 0xbe4 <__addsf3+0x8>
     c04:	ba 17       	cp	r27, r26
     c06:	62 07       	cpc	r22, r18
     c08:	73 07       	cpc	r23, r19
     c0a:	84 07       	cpc	r24, r20
     c0c:	95 07       	cpc	r25, r21
     c0e:	18 f0       	brcs	.+6      	; 0xc16 <__addsf3x+0x18>
     c10:	71 f4       	brne	.+28     	; 0xc2e <__addsf3x+0x30>
     c12:	9e f5       	brtc	.+102    	; 0xc7a <__addsf3x+0x7c>
     c14:	ee c1       	rjmp	.+988    	; 0xff2 <__fp_zero>
     c16:	0e f4       	brtc	.+2      	; 0xc1a <__addsf3x+0x1c>
     c18:	e0 95       	com	r30
     c1a:	0b 2e       	mov	r0, r27
     c1c:	ba 2f       	mov	r27, r26
     c1e:	a0 2d       	mov	r26, r0
     c20:	0b 01       	movw	r0, r22
     c22:	b9 01       	movw	r22, r18
     c24:	90 01       	movw	r18, r0
     c26:	0c 01       	movw	r0, r24
     c28:	ca 01       	movw	r24, r20
     c2a:	a0 01       	movw	r20, r0
     c2c:	11 24       	eor	r1, r1
     c2e:	ff 27       	eor	r31, r31
     c30:	59 1b       	sub	r21, r25
     c32:	99 f0       	breq	.+38     	; 0xc5a <__addsf3x+0x5c>
     c34:	59 3f       	cpi	r21, 0xF9	; 249
     c36:	50 f4       	brcc	.+20     	; 0xc4c <__addsf3x+0x4e>
     c38:	50 3e       	cpi	r21, 0xE0	; 224
     c3a:	68 f1       	brcs	.+90     	; 0xc96 <__addsf3x+0x98>
     c3c:	1a 16       	cp	r1, r26
     c3e:	f0 40       	sbci	r31, 0x00	; 0
     c40:	a2 2f       	mov	r26, r18
     c42:	23 2f       	mov	r18, r19
     c44:	34 2f       	mov	r19, r20
     c46:	44 27       	eor	r20, r20
     c48:	58 5f       	subi	r21, 0xF8	; 248
     c4a:	f3 cf       	rjmp	.-26     	; 0xc32 <__addsf3x+0x34>
     c4c:	46 95       	lsr	r20
     c4e:	37 95       	ror	r19
     c50:	27 95       	ror	r18
     c52:	a7 95       	ror	r26
     c54:	f0 40       	sbci	r31, 0x00	; 0
     c56:	53 95       	inc	r21
     c58:	c9 f7       	brne	.-14     	; 0xc4c <__addsf3x+0x4e>
     c5a:	7e f4       	brtc	.+30     	; 0xc7a <__addsf3x+0x7c>
     c5c:	1f 16       	cp	r1, r31
     c5e:	ba 0b       	sbc	r27, r26
     c60:	62 0b       	sbc	r22, r18
     c62:	73 0b       	sbc	r23, r19
     c64:	84 0b       	sbc	r24, r20
     c66:	ba f0       	brmi	.+46     	; 0xc96 <__addsf3x+0x98>
     c68:	91 50       	subi	r25, 0x01	; 1
     c6a:	a1 f0       	breq	.+40     	; 0xc94 <__addsf3x+0x96>
     c6c:	ff 0f       	add	r31, r31
     c6e:	bb 1f       	adc	r27, r27
     c70:	66 1f       	adc	r22, r22
     c72:	77 1f       	adc	r23, r23
     c74:	88 1f       	adc	r24, r24
     c76:	c2 f7       	brpl	.-16     	; 0xc68 <__addsf3x+0x6a>
     c78:	0e c0       	rjmp	.+28     	; 0xc96 <__addsf3x+0x98>
     c7a:	ba 0f       	add	r27, r26
     c7c:	62 1f       	adc	r22, r18
     c7e:	73 1f       	adc	r23, r19
     c80:	84 1f       	adc	r24, r20
     c82:	48 f4       	brcc	.+18     	; 0xc96 <__addsf3x+0x98>
     c84:	87 95       	ror	r24
     c86:	77 95       	ror	r23
     c88:	67 95       	ror	r22
     c8a:	b7 95       	ror	r27
     c8c:	f7 95       	ror	r31
     c8e:	9e 3f       	cpi	r25, 0xFE	; 254
     c90:	08 f0       	brcs	.+2      	; 0xc94 <__addsf3x+0x96>
     c92:	b3 cf       	rjmp	.-154    	; 0xbfa <__addsf3+0x1e>
     c94:	93 95       	inc	r25
     c96:	88 0f       	add	r24, r24
     c98:	08 f0       	brcs	.+2      	; 0xc9c <__addsf3x+0x9e>
     c9a:	99 27       	eor	r25, r25
     c9c:	ee 0f       	add	r30, r30
     c9e:	97 95       	ror	r25
     ca0:	87 95       	ror	r24
     ca2:	08 95       	ret
     ca4:	65 d1       	rcall	.+714    	; 0xf70 <__fp_pscA>
     ca6:	58 f0       	brcs	.+22     	; 0xcbe <__addsf3x+0xc0>
     ca8:	80 e8       	ldi	r24, 0x80	; 128
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	09 f4       	brne	.+2      	; 0xcb0 <__addsf3x+0xb2>
     cae:	9e ef       	ldi	r25, 0xFE	; 254
     cb0:	66 d1       	rcall	.+716    	; 0xf7e <__fp_pscB>
     cb2:	28 f0       	brcs	.+10     	; 0xcbe <__addsf3x+0xc0>
     cb4:	40 e8       	ldi	r20, 0x80	; 128
     cb6:	51 e0       	ldi	r21, 0x01	; 1
     cb8:	59 f4       	brne	.+22     	; 0xcd0 <atan2+0xe>
     cba:	5e ef       	ldi	r21, 0xFE	; 254
     cbc:	09 c0       	rjmp	.+18     	; 0xcd0 <atan2+0xe>
     cbe:	30 c1       	rjmp	.+608    	; 0xf20 <__fp_nan>
     cc0:	98 c1       	rjmp	.+816    	; 0xff2 <__fp_zero>

00000cc2 <atan2>:
     cc2:	e9 2f       	mov	r30, r25
     cc4:	e0 78       	andi	r30, 0x80	; 128
     cc6:	73 d1       	rcall	.+742    	; 0xfae <__fp_split3>
     cc8:	68 f3       	brcs	.-38     	; 0xca4 <__addsf3x+0xa6>
     cca:	09 2e       	mov	r0, r25
     ccc:	05 2a       	or	r0, r21
     cce:	c1 f3       	breq	.-16     	; 0xcc0 <__addsf3x+0xc2>
     cd0:	26 17       	cp	r18, r22
     cd2:	37 07       	cpc	r19, r23
     cd4:	48 07       	cpc	r20, r24
     cd6:	59 07       	cpc	r21, r25
     cd8:	38 f0       	brcs	.+14     	; 0xce8 <atan2+0x26>
     cda:	0e 2e       	mov	r0, r30
     cdc:	07 f8       	bld	r0, 7
     cde:	e0 25       	eor	r30, r0
     ce0:	69 f0       	breq	.+26     	; 0xcfc <atan2+0x3a>
     ce2:	e0 25       	eor	r30, r0
     ce4:	e0 64       	ori	r30, 0x40	; 64
     ce6:	0a c0       	rjmp	.+20     	; 0xcfc <atan2+0x3a>
     ce8:	ef 63       	ori	r30, 0x3F	; 63
     cea:	07 f8       	bld	r0, 7
     cec:	00 94       	com	r0
     cee:	07 fa       	bst	r0, 7
     cf0:	db 01       	movw	r26, r22
     cf2:	b9 01       	movw	r22, r18
     cf4:	9d 01       	movw	r18, r26
     cf6:	dc 01       	movw	r26, r24
     cf8:	ca 01       	movw	r24, r20
     cfa:	ad 01       	movw	r20, r26
     cfc:	ef 93       	push	r30
     cfe:	43 d0       	rcall	.+134    	; 0xd86 <__divsf3_pse>
     d00:	45 d1       	rcall	.+650    	; 0xf8c <__fp_round>
     d02:	0a d0       	rcall	.+20     	; 0xd18 <atan>
     d04:	5f 91       	pop	r21
     d06:	55 23       	and	r21, r21
     d08:	31 f0       	breq	.+12     	; 0xd16 <atan2+0x54>
     d0a:	2b ed       	ldi	r18, 0xDB	; 219
     d0c:	3f e0       	ldi	r19, 0x0F	; 15
     d0e:	49 e4       	ldi	r20, 0x49	; 73
     d10:	50 fd       	sbrc	r21, 0
     d12:	49 ec       	ldi	r20, 0xC9	; 201
     d14:	63 cf       	rjmp	.-314    	; 0xbdc <__addsf3>
     d16:	08 95       	ret

00000d18 <atan>:
     d18:	df 93       	push	r29
     d1a:	dd 27       	eor	r29, r29
     d1c:	b9 2f       	mov	r27, r25
     d1e:	bf 77       	andi	r27, 0x7F	; 127
     d20:	40 e8       	ldi	r20, 0x80	; 128
     d22:	5f e3       	ldi	r21, 0x3F	; 63
     d24:	16 16       	cp	r1, r22
     d26:	17 06       	cpc	r1, r23
     d28:	48 07       	cpc	r20, r24
     d2a:	5b 07       	cpc	r21, r27
     d2c:	10 f4       	brcc	.+4      	; 0xd32 <atan+0x1a>
     d2e:	d9 2f       	mov	r29, r25
     d30:	67 d1       	rcall	.+718    	; 0x1000 <inverse>
     d32:	9f 93       	push	r25
     d34:	8f 93       	push	r24
     d36:	7f 93       	push	r23
     d38:	6f 93       	push	r22
     d3a:	0e d2       	rcall	.+1052   	; 0x1158 <square>
     d3c:	e0 e0       	ldi	r30, 0x00	; 0
     d3e:	f1 e0       	ldi	r31, 0x01	; 1
     d40:	f2 d0       	rcall	.+484    	; 0xf26 <__fp_powser>
     d42:	24 d1       	rcall	.+584    	; 0xf8c <__fp_round>
     d44:	2f 91       	pop	r18
     d46:	3f 91       	pop	r19
     d48:	4f 91       	pop	r20
     d4a:	5f 91       	pop	r21
     d4c:	6c d1       	rcall	.+728    	; 0x1026 <__mulsf3x>
     d4e:	dd 23       	and	r29, r29
     d50:	49 f0       	breq	.+18     	; 0xd64 <atan+0x4c>
     d52:	90 58       	subi	r25, 0x80	; 128
     d54:	a2 ea       	ldi	r26, 0xA2	; 162
     d56:	2a ed       	ldi	r18, 0xDA	; 218
     d58:	3f e0       	ldi	r19, 0x0F	; 15
     d5a:	49 ec       	ldi	r20, 0xC9	; 201
     d5c:	5f e3       	ldi	r21, 0x3F	; 63
     d5e:	d0 78       	andi	r29, 0x80	; 128
     d60:	5d 27       	eor	r21, r29
     d62:	4d df       	rcall	.-358    	; 0xbfe <__addsf3x>
     d64:	df 91       	pop	r29
     d66:	12 c1       	rjmp	.+548    	; 0xf8c <__fp_round>

00000d68 <__divsf3>:
     d68:	0c d0       	rcall	.+24     	; 0xd82 <__divsf3x>
     d6a:	10 c1       	rjmp	.+544    	; 0xf8c <__fp_round>
     d6c:	08 d1       	rcall	.+528    	; 0xf7e <__fp_pscB>
     d6e:	40 f0       	brcs	.+16     	; 0xd80 <__divsf3+0x18>
     d70:	ff d0       	rcall	.+510    	; 0xf70 <__fp_pscA>
     d72:	30 f0       	brcs	.+12     	; 0xd80 <__divsf3+0x18>
     d74:	21 f4       	brne	.+8      	; 0xd7e <__divsf3+0x16>
     d76:	5f 3f       	cpi	r21, 0xFF	; 255
     d78:	19 f0       	breq	.+6      	; 0xd80 <__divsf3+0x18>
     d7a:	cc c0       	rjmp	.+408    	; 0xf14 <__fp_inf>
     d7c:	51 11       	cpse	r21, r1
     d7e:	3a c1       	rjmp	.+628    	; 0xff4 <__fp_szero>
     d80:	cf c0       	rjmp	.+414    	; 0xf20 <__fp_nan>

00000d82 <__divsf3x>:
     d82:	15 d1       	rcall	.+554    	; 0xfae <__fp_split3>
     d84:	98 f3       	brcs	.-26     	; 0xd6c <__divsf3+0x4>

00000d86 <__divsf3_pse>:
     d86:	99 23       	and	r25, r25
     d88:	c9 f3       	breq	.-14     	; 0xd7c <__divsf3+0x14>
     d8a:	55 23       	and	r21, r21
     d8c:	b1 f3       	breq	.-20     	; 0xd7a <__divsf3+0x12>
     d8e:	95 1b       	sub	r25, r21
     d90:	55 0b       	sbc	r21, r21
     d92:	bb 27       	eor	r27, r27
     d94:	aa 27       	eor	r26, r26
     d96:	62 17       	cp	r22, r18
     d98:	73 07       	cpc	r23, r19
     d9a:	84 07       	cpc	r24, r20
     d9c:	38 f0       	brcs	.+14     	; 0xdac <__divsf3_pse+0x26>
     d9e:	9f 5f       	subi	r25, 0xFF	; 255
     da0:	5f 4f       	sbci	r21, 0xFF	; 255
     da2:	22 0f       	add	r18, r18
     da4:	33 1f       	adc	r19, r19
     da6:	44 1f       	adc	r20, r20
     da8:	aa 1f       	adc	r26, r26
     daa:	a9 f3       	breq	.-22     	; 0xd96 <__divsf3_pse+0x10>
     dac:	33 d0       	rcall	.+102    	; 0xe14 <__divsf3_pse+0x8e>
     dae:	0e 2e       	mov	r0, r30
     db0:	3a f0       	brmi	.+14     	; 0xdc0 <__divsf3_pse+0x3a>
     db2:	e0 e8       	ldi	r30, 0x80	; 128
     db4:	30 d0       	rcall	.+96     	; 0xe16 <__divsf3_pse+0x90>
     db6:	91 50       	subi	r25, 0x01	; 1
     db8:	50 40       	sbci	r21, 0x00	; 0
     dba:	e6 95       	lsr	r30
     dbc:	00 1c       	adc	r0, r0
     dbe:	ca f7       	brpl	.-14     	; 0xdb2 <__divsf3_pse+0x2c>
     dc0:	29 d0       	rcall	.+82     	; 0xe14 <__divsf3_pse+0x8e>
     dc2:	fe 2f       	mov	r31, r30
     dc4:	27 d0       	rcall	.+78     	; 0xe14 <__divsf3_pse+0x8e>
     dc6:	66 0f       	add	r22, r22
     dc8:	77 1f       	adc	r23, r23
     dca:	88 1f       	adc	r24, r24
     dcc:	bb 1f       	adc	r27, r27
     dce:	26 17       	cp	r18, r22
     dd0:	37 07       	cpc	r19, r23
     dd2:	48 07       	cpc	r20, r24
     dd4:	ab 07       	cpc	r26, r27
     dd6:	b0 e8       	ldi	r27, 0x80	; 128
     dd8:	09 f0       	breq	.+2      	; 0xddc <__divsf3_pse+0x56>
     dda:	bb 0b       	sbc	r27, r27
     ddc:	80 2d       	mov	r24, r0
     dde:	bf 01       	movw	r22, r30
     de0:	ff 27       	eor	r31, r31
     de2:	93 58       	subi	r25, 0x83	; 131
     de4:	5f 4f       	sbci	r21, 0xFF	; 255
     de6:	2a f0       	brmi	.+10     	; 0xdf2 <__divsf3_pse+0x6c>
     de8:	9e 3f       	cpi	r25, 0xFE	; 254
     dea:	51 05       	cpc	r21, r1
     dec:	68 f0       	brcs	.+26     	; 0xe08 <__divsf3_pse+0x82>
     dee:	92 c0       	rjmp	.+292    	; 0xf14 <__fp_inf>
     df0:	01 c1       	rjmp	.+514    	; 0xff4 <__fp_szero>
     df2:	5f 3f       	cpi	r21, 0xFF	; 255
     df4:	ec f3       	brlt	.-6      	; 0xdf0 <__divsf3_pse+0x6a>
     df6:	98 3e       	cpi	r25, 0xE8	; 232
     df8:	dc f3       	brlt	.-10     	; 0xdf0 <__divsf3_pse+0x6a>
     dfa:	86 95       	lsr	r24
     dfc:	77 95       	ror	r23
     dfe:	67 95       	ror	r22
     e00:	b7 95       	ror	r27
     e02:	f7 95       	ror	r31
     e04:	9f 5f       	subi	r25, 0xFF	; 255
     e06:	c9 f7       	brne	.-14     	; 0xdfa <__divsf3_pse+0x74>
     e08:	88 0f       	add	r24, r24
     e0a:	91 1d       	adc	r25, r1
     e0c:	96 95       	lsr	r25
     e0e:	87 95       	ror	r24
     e10:	97 f9       	bld	r25, 7
     e12:	08 95       	ret
     e14:	e1 e0       	ldi	r30, 0x01	; 1
     e16:	66 0f       	add	r22, r22
     e18:	77 1f       	adc	r23, r23
     e1a:	88 1f       	adc	r24, r24
     e1c:	bb 1f       	adc	r27, r27
     e1e:	62 17       	cp	r22, r18
     e20:	73 07       	cpc	r23, r19
     e22:	84 07       	cpc	r24, r20
     e24:	ba 07       	cpc	r27, r26
     e26:	20 f0       	brcs	.+8      	; 0xe30 <__divsf3_pse+0xaa>
     e28:	62 1b       	sub	r22, r18
     e2a:	73 0b       	sbc	r23, r19
     e2c:	84 0b       	sbc	r24, r20
     e2e:	ba 0b       	sbc	r27, r26
     e30:	ee 1f       	adc	r30, r30
     e32:	88 f7       	brcc	.-30     	; 0xe16 <__divsf3_pse+0x90>
     e34:	e0 95       	com	r30
     e36:	08 95       	ret

00000e38 <__fixsfsi>:
     e38:	04 d0       	rcall	.+8      	; 0xe42 <__fixunssfsi>
     e3a:	68 94       	set
     e3c:	b1 11       	cpse	r27, r1
     e3e:	da c0       	rjmp	.+436    	; 0xff4 <__fp_szero>
     e40:	08 95       	ret

00000e42 <__fixunssfsi>:
     e42:	bd d0       	rcall	.+378    	; 0xfbe <__fp_splitA>
     e44:	88 f0       	brcs	.+34     	; 0xe68 <__fixunssfsi+0x26>
     e46:	9f 57       	subi	r25, 0x7F	; 127
     e48:	90 f0       	brcs	.+36     	; 0xe6e <__fixunssfsi+0x2c>
     e4a:	b9 2f       	mov	r27, r25
     e4c:	99 27       	eor	r25, r25
     e4e:	b7 51       	subi	r27, 0x17	; 23
     e50:	a0 f0       	brcs	.+40     	; 0xe7a <__fixunssfsi+0x38>
     e52:	d1 f0       	breq	.+52     	; 0xe88 <__fixunssfsi+0x46>
     e54:	66 0f       	add	r22, r22
     e56:	77 1f       	adc	r23, r23
     e58:	88 1f       	adc	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	1a f0       	brmi	.+6      	; 0xe64 <__fixunssfsi+0x22>
     e5e:	ba 95       	dec	r27
     e60:	c9 f7       	brne	.-14     	; 0xe54 <__fixunssfsi+0x12>
     e62:	12 c0       	rjmp	.+36     	; 0xe88 <__fixunssfsi+0x46>
     e64:	b1 30       	cpi	r27, 0x01	; 1
     e66:	81 f0       	breq	.+32     	; 0xe88 <__fixunssfsi+0x46>
     e68:	c4 d0       	rcall	.+392    	; 0xff2 <__fp_zero>
     e6a:	b1 e0       	ldi	r27, 0x01	; 1
     e6c:	08 95       	ret
     e6e:	c1 c0       	rjmp	.+386    	; 0xff2 <__fp_zero>
     e70:	67 2f       	mov	r22, r23
     e72:	78 2f       	mov	r23, r24
     e74:	88 27       	eor	r24, r24
     e76:	b8 5f       	subi	r27, 0xF8	; 248
     e78:	39 f0       	breq	.+14     	; 0xe88 <__fixunssfsi+0x46>
     e7a:	b9 3f       	cpi	r27, 0xF9	; 249
     e7c:	cc f3       	brlt	.-14     	; 0xe70 <__fixunssfsi+0x2e>
     e7e:	86 95       	lsr	r24
     e80:	77 95       	ror	r23
     e82:	67 95       	ror	r22
     e84:	b3 95       	inc	r27
     e86:	d9 f7       	brne	.-10     	; 0xe7e <__fixunssfsi+0x3c>
     e88:	3e f4       	brtc	.+14     	; 0xe98 <__fixunssfsi+0x56>
     e8a:	90 95       	com	r25
     e8c:	80 95       	com	r24
     e8e:	70 95       	com	r23
     e90:	61 95       	neg	r22
     e92:	7f 4f       	sbci	r23, 0xFF	; 255
     e94:	8f 4f       	sbci	r24, 0xFF	; 255
     e96:	9f 4f       	sbci	r25, 0xFF	; 255
     e98:	08 95       	ret

00000e9a <__floatunsisf>:
     e9a:	e8 94       	clt
     e9c:	09 c0       	rjmp	.+18     	; 0xeb0 <__floatsisf+0x12>

00000e9e <__floatsisf>:
     e9e:	97 fb       	bst	r25, 7
     ea0:	3e f4       	brtc	.+14     	; 0xeb0 <__floatsisf+0x12>
     ea2:	90 95       	com	r25
     ea4:	80 95       	com	r24
     ea6:	70 95       	com	r23
     ea8:	61 95       	neg	r22
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
     eac:	8f 4f       	sbci	r24, 0xFF	; 255
     eae:	9f 4f       	sbci	r25, 0xFF	; 255
     eb0:	99 23       	and	r25, r25
     eb2:	a9 f0       	breq	.+42     	; 0xede <__floatsisf+0x40>
     eb4:	f9 2f       	mov	r31, r25
     eb6:	96 e9       	ldi	r25, 0x96	; 150
     eb8:	bb 27       	eor	r27, r27
     eba:	93 95       	inc	r25
     ebc:	f6 95       	lsr	r31
     ebe:	87 95       	ror	r24
     ec0:	77 95       	ror	r23
     ec2:	67 95       	ror	r22
     ec4:	b7 95       	ror	r27
     ec6:	f1 11       	cpse	r31, r1
     ec8:	f8 cf       	rjmp	.-16     	; 0xeba <__floatsisf+0x1c>
     eca:	fa f4       	brpl	.+62     	; 0xf0a <__floatsisf+0x6c>
     ecc:	bb 0f       	add	r27, r27
     ece:	11 f4       	brne	.+4      	; 0xed4 <__floatsisf+0x36>
     ed0:	60 ff       	sbrs	r22, 0
     ed2:	1b c0       	rjmp	.+54     	; 0xf0a <__floatsisf+0x6c>
     ed4:	6f 5f       	subi	r22, 0xFF	; 255
     ed6:	7f 4f       	sbci	r23, 0xFF	; 255
     ed8:	8f 4f       	sbci	r24, 0xFF	; 255
     eda:	9f 4f       	sbci	r25, 0xFF	; 255
     edc:	16 c0       	rjmp	.+44     	; 0xf0a <__floatsisf+0x6c>
     ede:	88 23       	and	r24, r24
     ee0:	11 f0       	breq	.+4      	; 0xee6 <__floatsisf+0x48>
     ee2:	96 e9       	ldi	r25, 0x96	; 150
     ee4:	11 c0       	rjmp	.+34     	; 0xf08 <__floatsisf+0x6a>
     ee6:	77 23       	and	r23, r23
     ee8:	21 f0       	breq	.+8      	; 0xef2 <__floatsisf+0x54>
     eea:	9e e8       	ldi	r25, 0x8E	; 142
     eec:	87 2f       	mov	r24, r23
     eee:	76 2f       	mov	r23, r22
     ef0:	05 c0       	rjmp	.+10     	; 0xefc <__floatsisf+0x5e>
     ef2:	66 23       	and	r22, r22
     ef4:	71 f0       	breq	.+28     	; 0xf12 <__floatsisf+0x74>
     ef6:	96 e8       	ldi	r25, 0x86	; 134
     ef8:	86 2f       	mov	r24, r22
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	2a f0       	brmi	.+10     	; 0xf0a <__floatsisf+0x6c>
     f00:	9a 95       	dec	r25
     f02:	66 0f       	add	r22, r22
     f04:	77 1f       	adc	r23, r23
     f06:	88 1f       	adc	r24, r24
     f08:	da f7       	brpl	.-10     	; 0xf00 <__floatsisf+0x62>
     f0a:	88 0f       	add	r24, r24
     f0c:	96 95       	lsr	r25
     f0e:	87 95       	ror	r24
     f10:	97 f9       	bld	r25, 7
     f12:	08 95       	ret

00000f14 <__fp_inf>:
     f14:	97 f9       	bld	r25, 7
     f16:	9f 67       	ori	r25, 0x7F	; 127
     f18:	80 e8       	ldi	r24, 0x80	; 128
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	08 95       	ret

00000f20 <__fp_nan>:
     f20:	9f ef       	ldi	r25, 0xFF	; 255
     f22:	80 ec       	ldi	r24, 0xC0	; 192
     f24:	08 95       	ret

00000f26 <__fp_powser>:
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	1f 93       	push	r17
     f2c:	0f 93       	push	r16
     f2e:	ff 92       	push	r15
     f30:	ef 92       	push	r14
     f32:	df 92       	push	r13
     f34:	7b 01       	movw	r14, r22
     f36:	8c 01       	movw	r16, r24
     f38:	68 94       	set
     f3a:	05 c0       	rjmp	.+10     	; 0xf46 <__fp_powser+0x20>
     f3c:	da 2e       	mov	r13, r26
     f3e:	ef 01       	movw	r28, r30
     f40:	72 d0       	rcall	.+228    	; 0x1026 <__mulsf3x>
     f42:	fe 01       	movw	r30, r28
     f44:	e8 94       	clt
     f46:	a5 91       	lpm	r26, Z+
     f48:	25 91       	lpm	r18, Z+
     f4a:	35 91       	lpm	r19, Z+
     f4c:	45 91       	lpm	r20, Z+
     f4e:	55 91       	lpm	r21, Z+
     f50:	ae f3       	brts	.-22     	; 0xf3c <__fp_powser+0x16>
     f52:	ef 01       	movw	r28, r30
     f54:	54 de       	rcall	.-856    	; 0xbfe <__addsf3x>
     f56:	fe 01       	movw	r30, r28
     f58:	97 01       	movw	r18, r14
     f5a:	a8 01       	movw	r20, r16
     f5c:	da 94       	dec	r13
     f5e:	79 f7       	brne	.-34     	; 0xf3e <__fp_powser+0x18>
     f60:	df 90       	pop	r13
     f62:	ef 90       	pop	r14
     f64:	ff 90       	pop	r15
     f66:	0f 91       	pop	r16
     f68:	1f 91       	pop	r17
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <__fp_pscA>:
     f70:	00 24       	eor	r0, r0
     f72:	0a 94       	dec	r0
     f74:	16 16       	cp	r1, r22
     f76:	17 06       	cpc	r1, r23
     f78:	18 06       	cpc	r1, r24
     f7a:	09 06       	cpc	r0, r25
     f7c:	08 95       	ret

00000f7e <__fp_pscB>:
     f7e:	00 24       	eor	r0, r0
     f80:	0a 94       	dec	r0
     f82:	12 16       	cp	r1, r18
     f84:	13 06       	cpc	r1, r19
     f86:	14 06       	cpc	r1, r20
     f88:	05 06       	cpc	r0, r21
     f8a:	08 95       	ret

00000f8c <__fp_round>:
     f8c:	09 2e       	mov	r0, r25
     f8e:	03 94       	inc	r0
     f90:	00 0c       	add	r0, r0
     f92:	11 f4       	brne	.+4      	; 0xf98 <__fp_round+0xc>
     f94:	88 23       	and	r24, r24
     f96:	52 f0       	brmi	.+20     	; 0xfac <__fp_round+0x20>
     f98:	bb 0f       	add	r27, r27
     f9a:	40 f4       	brcc	.+16     	; 0xfac <__fp_round+0x20>
     f9c:	bf 2b       	or	r27, r31
     f9e:	11 f4       	brne	.+4      	; 0xfa4 <__fp_round+0x18>
     fa0:	60 ff       	sbrs	r22, 0
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <__fp_round+0x20>
     fa4:	6f 5f       	subi	r22, 0xFF	; 255
     fa6:	7f 4f       	sbci	r23, 0xFF	; 255
     fa8:	8f 4f       	sbci	r24, 0xFF	; 255
     faa:	9f 4f       	sbci	r25, 0xFF	; 255
     fac:	08 95       	ret

00000fae <__fp_split3>:
     fae:	57 fd       	sbrc	r21, 7
     fb0:	90 58       	subi	r25, 0x80	; 128
     fb2:	44 0f       	add	r20, r20
     fb4:	55 1f       	adc	r21, r21
     fb6:	59 f0       	breq	.+22     	; 0xfce <__fp_splitA+0x10>
     fb8:	5f 3f       	cpi	r21, 0xFF	; 255
     fba:	71 f0       	breq	.+28     	; 0xfd8 <__fp_splitA+0x1a>
     fbc:	47 95       	ror	r20

00000fbe <__fp_splitA>:
     fbe:	88 0f       	add	r24, r24
     fc0:	97 fb       	bst	r25, 7
     fc2:	99 1f       	adc	r25, r25
     fc4:	61 f0       	breq	.+24     	; 0xfde <__fp_splitA+0x20>
     fc6:	9f 3f       	cpi	r25, 0xFF	; 255
     fc8:	79 f0       	breq	.+30     	; 0xfe8 <__fp_splitA+0x2a>
     fca:	87 95       	ror	r24
     fcc:	08 95       	ret
     fce:	12 16       	cp	r1, r18
     fd0:	13 06       	cpc	r1, r19
     fd2:	14 06       	cpc	r1, r20
     fd4:	55 1f       	adc	r21, r21
     fd6:	f2 cf       	rjmp	.-28     	; 0xfbc <__fp_split3+0xe>
     fd8:	46 95       	lsr	r20
     fda:	f1 df       	rcall	.-30     	; 0xfbe <__fp_splitA>
     fdc:	08 c0       	rjmp	.+16     	; 0xfee <__fp_splitA+0x30>
     fde:	16 16       	cp	r1, r22
     fe0:	17 06       	cpc	r1, r23
     fe2:	18 06       	cpc	r1, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	f1 cf       	rjmp	.-30     	; 0xfca <__fp_splitA+0xc>
     fe8:	86 95       	lsr	r24
     fea:	71 05       	cpc	r23, r1
     fec:	61 05       	cpc	r22, r1
     fee:	08 94       	sec
     ff0:	08 95       	ret

00000ff2 <__fp_zero>:
     ff2:	e8 94       	clt

00000ff4 <__fp_szero>:
     ff4:	bb 27       	eor	r27, r27
     ff6:	66 27       	eor	r22, r22
     ff8:	77 27       	eor	r23, r23
     ffa:	cb 01       	movw	r24, r22
     ffc:	97 f9       	bld	r25, 7
     ffe:	08 95       	ret

00001000 <inverse>:
    1000:	9b 01       	movw	r18, r22
    1002:	ac 01       	movw	r20, r24
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	80 e8       	ldi	r24, 0x80	; 128
    100a:	9f e3       	ldi	r25, 0x3F	; 63
    100c:	ad ce       	rjmp	.-678    	; 0xd68 <__divsf3>

0000100e <__mulsf3>:
    100e:	0b d0       	rcall	.+22     	; 0x1026 <__mulsf3x>
    1010:	bd cf       	rjmp	.-134    	; 0xf8c <__fp_round>
    1012:	ae df       	rcall	.-164    	; 0xf70 <__fp_pscA>
    1014:	28 f0       	brcs	.+10     	; 0x1020 <__mulsf3+0x12>
    1016:	b3 df       	rcall	.-154    	; 0xf7e <__fp_pscB>
    1018:	18 f0       	brcs	.+6      	; 0x1020 <__mulsf3+0x12>
    101a:	95 23       	and	r25, r21
    101c:	09 f0       	breq	.+2      	; 0x1020 <__mulsf3+0x12>
    101e:	7a cf       	rjmp	.-268    	; 0xf14 <__fp_inf>
    1020:	7f cf       	rjmp	.-258    	; 0xf20 <__fp_nan>
    1022:	11 24       	eor	r1, r1
    1024:	e7 cf       	rjmp	.-50     	; 0xff4 <__fp_szero>

00001026 <__mulsf3x>:
    1026:	c3 df       	rcall	.-122    	; 0xfae <__fp_split3>
    1028:	a0 f3       	brcs	.-24     	; 0x1012 <__mulsf3+0x4>

0000102a <__mulsf3_pse>:
    102a:	95 9f       	mul	r25, r21
    102c:	d1 f3       	breq	.-12     	; 0x1022 <__mulsf3+0x14>
    102e:	95 0f       	add	r25, r21
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	55 1f       	adc	r21, r21
    1034:	62 9f       	mul	r22, r18
    1036:	f0 01       	movw	r30, r0
    1038:	72 9f       	mul	r23, r18
    103a:	bb 27       	eor	r27, r27
    103c:	f0 0d       	add	r31, r0
    103e:	b1 1d       	adc	r27, r1
    1040:	63 9f       	mul	r22, r19
    1042:	aa 27       	eor	r26, r26
    1044:	f0 0d       	add	r31, r0
    1046:	b1 1d       	adc	r27, r1
    1048:	aa 1f       	adc	r26, r26
    104a:	64 9f       	mul	r22, r20
    104c:	66 27       	eor	r22, r22
    104e:	b0 0d       	add	r27, r0
    1050:	a1 1d       	adc	r26, r1
    1052:	66 1f       	adc	r22, r22
    1054:	82 9f       	mul	r24, r18
    1056:	22 27       	eor	r18, r18
    1058:	b0 0d       	add	r27, r0
    105a:	a1 1d       	adc	r26, r1
    105c:	62 1f       	adc	r22, r18
    105e:	73 9f       	mul	r23, r19
    1060:	b0 0d       	add	r27, r0
    1062:	a1 1d       	adc	r26, r1
    1064:	62 1f       	adc	r22, r18
    1066:	83 9f       	mul	r24, r19
    1068:	a0 0d       	add	r26, r0
    106a:	61 1d       	adc	r22, r1
    106c:	22 1f       	adc	r18, r18
    106e:	74 9f       	mul	r23, r20
    1070:	33 27       	eor	r19, r19
    1072:	a0 0d       	add	r26, r0
    1074:	61 1d       	adc	r22, r1
    1076:	23 1f       	adc	r18, r19
    1078:	84 9f       	mul	r24, r20
    107a:	60 0d       	add	r22, r0
    107c:	21 1d       	adc	r18, r1
    107e:	82 2f       	mov	r24, r18
    1080:	76 2f       	mov	r23, r22
    1082:	6a 2f       	mov	r22, r26
    1084:	11 24       	eor	r1, r1
    1086:	9f 57       	subi	r25, 0x7F	; 127
    1088:	50 40       	sbci	r21, 0x00	; 0
    108a:	8a f0       	brmi	.+34     	; 0x10ae <__mulsf3_pse+0x84>
    108c:	e1 f0       	breq	.+56     	; 0x10c6 <__mulsf3_pse+0x9c>
    108e:	88 23       	and	r24, r24
    1090:	4a f0       	brmi	.+18     	; 0x10a4 <__mulsf3_pse+0x7a>
    1092:	ee 0f       	add	r30, r30
    1094:	ff 1f       	adc	r31, r31
    1096:	bb 1f       	adc	r27, r27
    1098:	66 1f       	adc	r22, r22
    109a:	77 1f       	adc	r23, r23
    109c:	88 1f       	adc	r24, r24
    109e:	91 50       	subi	r25, 0x01	; 1
    10a0:	50 40       	sbci	r21, 0x00	; 0
    10a2:	a9 f7       	brne	.-22     	; 0x108e <__mulsf3_pse+0x64>
    10a4:	9e 3f       	cpi	r25, 0xFE	; 254
    10a6:	51 05       	cpc	r21, r1
    10a8:	70 f0       	brcs	.+28     	; 0x10c6 <__mulsf3_pse+0x9c>
    10aa:	34 cf       	rjmp	.-408    	; 0xf14 <__fp_inf>
    10ac:	a3 cf       	rjmp	.-186    	; 0xff4 <__fp_szero>
    10ae:	5f 3f       	cpi	r21, 0xFF	; 255
    10b0:	ec f3       	brlt	.-6      	; 0x10ac <__mulsf3_pse+0x82>
    10b2:	98 3e       	cpi	r25, 0xE8	; 232
    10b4:	dc f3       	brlt	.-10     	; 0x10ac <__mulsf3_pse+0x82>
    10b6:	86 95       	lsr	r24
    10b8:	77 95       	ror	r23
    10ba:	67 95       	ror	r22
    10bc:	b7 95       	ror	r27
    10be:	f7 95       	ror	r31
    10c0:	e7 95       	ror	r30
    10c2:	9f 5f       	subi	r25, 0xFF	; 255
    10c4:	c1 f7       	brne	.-16     	; 0x10b6 <__mulsf3_pse+0x8c>
    10c6:	fe 2b       	or	r31, r30
    10c8:	88 0f       	add	r24, r24
    10ca:	91 1d       	adc	r25, r1
    10cc:	96 95       	lsr	r25
    10ce:	87 95       	ror	r24
    10d0:	97 f9       	bld	r25, 7
    10d2:	08 95       	ret
    10d4:	11 f4       	brne	.+4      	; 0x10da <__mulsf3_pse+0xb0>
    10d6:	0e f4       	brtc	.+2      	; 0x10da <__mulsf3_pse+0xb0>
    10d8:	23 cf       	rjmp	.-442    	; 0xf20 <__fp_nan>
    10da:	41 c0       	rjmp	.+130    	; 0x115e <__fp_mpack>

000010dc <sqrt>:
    10dc:	70 df       	rcall	.-288    	; 0xfbe <__fp_splitA>
    10de:	d0 f3       	brcs	.-12     	; 0x10d4 <__mulsf3_pse+0xaa>
    10e0:	99 23       	and	r25, r25
    10e2:	d9 f3       	breq	.-10     	; 0x10da <__mulsf3_pse+0xb0>
    10e4:	ce f3       	brts	.-14     	; 0x10d8 <__mulsf3_pse+0xae>
    10e6:	9f 57       	subi	r25, 0x7F	; 127
    10e8:	55 0b       	sbc	r21, r21
    10ea:	87 ff       	sbrs	r24, 7
    10ec:	46 d0       	rcall	.+140    	; 0x117a <__fp_norm2>
    10ee:	00 24       	eor	r0, r0
    10f0:	a0 e6       	ldi	r26, 0x60	; 96
    10f2:	40 ea       	ldi	r20, 0xA0	; 160
    10f4:	90 01       	movw	r18, r0
    10f6:	80 58       	subi	r24, 0x80	; 128
    10f8:	56 95       	lsr	r21
    10fa:	97 95       	ror	r25
    10fc:	28 f4       	brcc	.+10     	; 0x1108 <sqrt+0x2c>
    10fe:	80 5c       	subi	r24, 0xC0	; 192
    1100:	66 0f       	add	r22, r22
    1102:	77 1f       	adc	r23, r23
    1104:	88 1f       	adc	r24, r24
    1106:	20 f0       	brcs	.+8      	; 0x1110 <sqrt+0x34>
    1108:	26 17       	cp	r18, r22
    110a:	37 07       	cpc	r19, r23
    110c:	48 07       	cpc	r20, r24
    110e:	30 f4       	brcc	.+12     	; 0x111c <sqrt+0x40>
    1110:	62 1b       	sub	r22, r18
    1112:	73 0b       	sbc	r23, r19
    1114:	84 0b       	sbc	r24, r20
    1116:	20 29       	or	r18, r0
    1118:	31 29       	or	r19, r1
    111a:	4a 2b       	or	r20, r26
    111c:	a6 95       	lsr	r26
    111e:	17 94       	ror	r1
    1120:	07 94       	ror	r0
    1122:	20 25       	eor	r18, r0
    1124:	31 25       	eor	r19, r1
    1126:	4a 27       	eor	r20, r26
    1128:	58 f7       	brcc	.-42     	; 0x1100 <sqrt+0x24>
    112a:	66 0f       	add	r22, r22
    112c:	77 1f       	adc	r23, r23
    112e:	88 1f       	adc	r24, r24
    1130:	20 f0       	brcs	.+8      	; 0x113a <sqrt+0x5e>
    1132:	26 17       	cp	r18, r22
    1134:	37 07       	cpc	r19, r23
    1136:	48 07       	cpc	r20, r24
    1138:	30 f4       	brcc	.+12     	; 0x1146 <sqrt+0x6a>
    113a:	62 0b       	sbc	r22, r18
    113c:	73 0b       	sbc	r23, r19
    113e:	84 0b       	sbc	r24, r20
    1140:	20 0d       	add	r18, r0
    1142:	31 1d       	adc	r19, r1
    1144:	41 1d       	adc	r20, r1
    1146:	a0 95       	com	r26
    1148:	81 f7       	brne	.-32     	; 0x112a <sqrt+0x4e>
    114a:	b9 01       	movw	r22, r18
    114c:	84 2f       	mov	r24, r20
    114e:	91 58       	subi	r25, 0x81	; 129
    1150:	88 0f       	add	r24, r24
    1152:	96 95       	lsr	r25
    1154:	87 95       	ror	r24
    1156:	08 95       	ret

00001158 <square>:
    1158:	9b 01       	movw	r18, r22
    115a:	ac 01       	movw	r20, r24
    115c:	58 cf       	rjmp	.-336    	; 0x100e <__mulsf3>

0000115e <__fp_mpack>:
    115e:	9f 3f       	cpi	r25, 0xFF	; 255
    1160:	31 f0       	breq	.+12     	; 0x116e <__fp_mpack_finite+0xc>

00001162 <__fp_mpack_finite>:
    1162:	91 50       	subi	r25, 0x01	; 1
    1164:	20 f4       	brcc	.+8      	; 0x116e <__fp_mpack_finite+0xc>
    1166:	87 95       	ror	r24
    1168:	77 95       	ror	r23
    116a:	67 95       	ror	r22
    116c:	b7 95       	ror	r27
    116e:	88 0f       	add	r24, r24
    1170:	91 1d       	adc	r25, r1
    1172:	96 95       	lsr	r25
    1174:	87 95       	ror	r24
    1176:	97 f9       	bld	r25, 7
    1178:	08 95       	ret

0000117a <__fp_norm2>:
    117a:	91 50       	subi	r25, 0x01	; 1
    117c:	50 40       	sbci	r21, 0x00	; 0
    117e:	66 0f       	add	r22, r22
    1180:	77 1f       	adc	r23, r23
    1182:	88 1f       	adc	r24, r24
    1184:	d2 f7       	brpl	.-12     	; 0x117a <__fp_norm2>
    1186:	08 95       	ret

00001188 <__udivmodsi4>:
    1188:	a1 e2       	ldi	r26, 0x21	; 33
    118a:	1a 2e       	mov	r1, r26
    118c:	aa 1b       	sub	r26, r26
    118e:	bb 1b       	sub	r27, r27
    1190:	fd 01       	movw	r30, r26
    1192:	0d c0       	rjmp	.+26     	; 0x11ae <__udivmodsi4_ep>

00001194 <__udivmodsi4_loop>:
    1194:	aa 1f       	adc	r26, r26
    1196:	bb 1f       	adc	r27, r27
    1198:	ee 1f       	adc	r30, r30
    119a:	ff 1f       	adc	r31, r31
    119c:	a2 17       	cp	r26, r18
    119e:	b3 07       	cpc	r27, r19
    11a0:	e4 07       	cpc	r30, r20
    11a2:	f5 07       	cpc	r31, r21
    11a4:	20 f0       	brcs	.+8      	; 0x11ae <__udivmodsi4_ep>
    11a6:	a2 1b       	sub	r26, r18
    11a8:	b3 0b       	sbc	r27, r19
    11aa:	e4 0b       	sbc	r30, r20
    11ac:	f5 0b       	sbc	r31, r21

000011ae <__udivmodsi4_ep>:
    11ae:	66 1f       	adc	r22, r22
    11b0:	77 1f       	adc	r23, r23
    11b2:	88 1f       	adc	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	1a 94       	dec	r1
    11b8:	69 f7       	brne	.-38     	; 0x1194 <__udivmodsi4_loop>
    11ba:	60 95       	com	r22
    11bc:	70 95       	com	r23
    11be:	80 95       	com	r24
    11c0:	90 95       	com	r25
    11c2:	9b 01       	movw	r18, r22
    11c4:	ac 01       	movw	r20, r24
    11c6:	bd 01       	movw	r22, r26
    11c8:	cf 01       	movw	r24, r30
    11ca:	08 95       	ret

000011cc <__tablejump2__>:
    11cc:	ee 0f       	add	r30, r30
    11ce:	ff 1f       	adc	r31, r31
    11d0:	88 1f       	adc	r24, r24
    11d2:	8b bf       	out	0x3b, r24	; 59
    11d4:	07 90       	elpm	r0, Z+
    11d6:	f6 91       	elpm	r31, Z
    11d8:	e0 2d       	mov	r30, r0
    11da:	19 94       	eijmp

000011dc <__itoa_ncheck>:
    11dc:	bb 27       	eor	r27, r27
    11de:	4a 30       	cpi	r20, 0x0A	; 10
    11e0:	31 f4       	brne	.+12     	; 0x11ee <__itoa_ncheck+0x12>
    11e2:	99 23       	and	r25, r25
    11e4:	22 f4       	brpl	.+8      	; 0x11ee <__itoa_ncheck+0x12>
    11e6:	bd e2       	ldi	r27, 0x2D	; 45
    11e8:	90 95       	com	r25
    11ea:	81 95       	neg	r24
    11ec:	9f 4f       	sbci	r25, 0xFF	; 255
    11ee:	01 c0       	rjmp	.+2      	; 0x11f2 <__utoa_common>

000011f0 <__utoa_ncheck>:
    11f0:	bb 27       	eor	r27, r27

000011f2 <__utoa_common>:
    11f2:	fb 01       	movw	r30, r22
    11f4:	55 27       	eor	r21, r21
    11f6:	aa 27       	eor	r26, r26
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	aa 1f       	adc	r26, r26
    11fe:	a4 17       	cp	r26, r20
    1200:	10 f0       	brcs	.+4      	; 0x1206 <__utoa_common+0x14>
    1202:	a4 1b       	sub	r26, r20
    1204:	83 95       	inc	r24
    1206:	50 51       	subi	r21, 0x10	; 16
    1208:	b9 f7       	brne	.-18     	; 0x11f8 <__utoa_common+0x6>
    120a:	a0 5d       	subi	r26, 0xD0	; 208
    120c:	aa 33       	cpi	r26, 0x3A	; 58
    120e:	08 f0       	brcs	.+2      	; 0x1212 <__utoa_common+0x20>
    1210:	a9 5d       	subi	r26, 0xD9	; 217
    1212:	a1 93       	st	Z+, r26
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	79 f7       	brne	.-34     	; 0x11f6 <__utoa_common+0x4>
    1218:	b1 11       	cpse	r27, r1
    121a:	b1 93       	st	Z+, r27
    121c:	11 92       	st	Z+, r1
    121e:	cb 01       	movw	r24, r22
    1220:	00 c0       	rjmp	.+0      	; 0x1222 <strrev>

00001222 <strrev>:
    1222:	dc 01       	movw	r26, r24
    1224:	fc 01       	movw	r30, r24
    1226:	67 2f       	mov	r22, r23
    1228:	71 91       	ld	r23, Z+
    122a:	77 23       	and	r23, r23
    122c:	e1 f7       	brne	.-8      	; 0x1226 <strrev+0x4>
    122e:	32 97       	sbiw	r30, 0x02	; 2
    1230:	04 c0       	rjmp	.+8      	; 0x123a <strrev+0x18>
    1232:	7c 91       	ld	r23, X
    1234:	6d 93       	st	X+, r22
    1236:	70 83       	st	Z, r23
    1238:	62 91       	ld	r22, -Z
    123a:	ae 17       	cp	r26, r30
    123c:	bf 07       	cpc	r27, r31
    123e:	c8 f3       	brcs	.-14     	; 0x1232 <strrev+0x10>
    1240:	08 95       	ret

00001242 <_exit>:
    1242:	f8 94       	cli

00001244 <__stop_program>:
    1244:	ff cf       	rjmp	.-2      	; 0x1244 <__stop_program>
