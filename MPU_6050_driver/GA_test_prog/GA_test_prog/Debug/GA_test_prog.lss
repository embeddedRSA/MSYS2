
GA_test_prog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800200  000010ae  00001142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  00800242  00800242  00001184  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000238e  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000121f  00000000  00000000  000036ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d0f  00000000  00000000  00004909  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  00005618  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ab3  00000000  00000000  0000594c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008d2  00000000  00000000  000063ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00006cd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	96 c0       	rjmp	.+300    	; 0x12e <__ctors_end>
       2:	00 00       	nop
       4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	00 00       	nop
      30:	9d c0       	rjmp	.+314    	; 0x16c <__bad_interrupt>
      32:	00 00       	nop
      34:	9b c0       	rjmp	.+310    	; 0x16c <__bad_interrupt>
      36:	00 00       	nop
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	00 00       	nop
      40:	95 c0       	rjmp	.+298    	; 0x16c <__bad_interrupt>
      42:	00 00       	nop
      44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
      52:	00 00       	nop
      54:	8b c0       	rjmp	.+278    	; 0x16c <__bad_interrupt>
      56:	00 00       	nop
      58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c0       	rjmp	.+270    	; 0x16c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
      62:	00 00       	nop
      64:	83 c0       	rjmp	.+262    	; 0x16c <__bad_interrupt>
      66:	00 00       	nop
      68:	81 c0       	rjmp	.+258    	; 0x16c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
      6e:	00 00       	nop
      70:	7d c0       	rjmp	.+250    	; 0x16c <__bad_interrupt>
      72:	00 00       	nop
      74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6f c0       	rjmp	.+222    	; 0x16c <__bad_interrupt>
      8e:	00 00       	nop
      90:	6d c0       	rjmp	.+218    	; 0x16c <__bad_interrupt>
      92:	00 00       	nop
      94:	6b c0       	rjmp	.+214    	; 0x16c <__bad_interrupt>
      96:	00 00       	nop
      98:	69 c0       	rjmp	.+210    	; 0x16c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	67 c0       	rjmp	.+206    	; 0x16c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	65 c0       	rjmp	.+202    	; 0x16c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	63 c0       	rjmp	.+198    	; 0x16c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	61 c0       	rjmp	.+194    	; 0x16c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5f c0       	rjmp	.+190    	; 0x16c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5d c0       	rjmp	.+186    	; 0x16c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5b c0       	rjmp	.+182    	; 0x16c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	59 c0       	rjmp	.+178    	; 0x16c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	57 c0       	rjmp	.+174    	; 0x16c <__bad_interrupt>
      be:	00 00       	nop
      c0:	55 c0       	rjmp	.+170    	; 0x16c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	53 c0       	rjmp	.+166    	; 0x16c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	51 c0       	rjmp	.+162    	; 0x16c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	4f c0       	rjmp	.+158    	; 0x16c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	4d c0       	rjmp	.+154    	; 0x16c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4b c0       	rjmp	.+150    	; 0x16c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	49 c0       	rjmp	.+146    	; 0x16c <__bad_interrupt>
      da:	00 00       	nop
      dc:	47 c0       	rjmp	.+142    	; 0x16c <__bad_interrupt>
      de:	00 00       	nop
      e0:	45 c0       	rjmp	.+138    	; 0x16c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ae 02       	muls	r26, r30
      e6:	b3 02       	muls	r27, r19
      e8:	bc 02       	muls	r27, r28
      ea:	c1 02       	muls	r28, r17
      ec:	ca 02       	muls	r28, r26
      ee:	cf 02       	muls	r28, r31
      f0:	d8 02       	muls	r29, r24
      f2:	dd 02       	muls	r29, r29
      f4:	e6 02       	muls	r30, r22
      f6:	eb 02       	muls	r30, r27
      f8:	f4 02       	muls	r31, r20
      fa:	f9 02       	muls	r31, r25
      fc:	02 03       	mulsu	r16, r18
      fe:	07 03       	mulsu	r16, r23
     100:	08 4a       	sbci	r16, 0xA8	; 168
     102:	d7 3b       	cpi	r29, 0xB7	; 183
     104:	3b ce       	rjmp	.-906    	; 0xfffffd7c <__eeprom_end+0xff7efd7c>
     106:	01 6e       	ori	r16, 0xE1	; 225
     108:	84 bc       	out	0x24, r8	; 36
     10a:	bf fd       	.word	0xfdbf	; ????
     10c:	c1 2f       	mov	r28, r17
     10e:	3d 6c       	ori	r19, 0xCD	; 205
     110:	74 31       	cpi	r23, 0x14	; 20
     112:	9a bd       	out	0x2a, r25	; 42
     114:	56 83       	std	Z+6, r21	; 0x06
     116:	3d da       	rcall	.-2950   	; 0xfffff592 <__eeprom_end+0xff7ef592>
     118:	3d 00       	.word	0x003d	; ????
     11a:	c7 7f       	andi	r28, 0xF7	; 247
     11c:	11 be       	out	0x31, r1	; 49
     11e:	d9 e4       	ldi	r29, 0x49	; 73
     120:	bb 4c       	sbci	r27, 0xCB	; 203
     122:	3e 91       	ld	r19, -X
     124:	6b aa       	std	Y+51, r6	; 0x33
     126:	aa be       	out	0x3a, r10	; 58
     128:	00 00       	nop
     12a:	00 80       	ld	r0, Z
     12c:	3f 00       	.word	0x003f	; ????

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d1 e2       	ldi	r29, 0x21	; 33
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61
     13a:	00 e0       	ldi	r16, 0x00	; 0
     13c:	0c bf       	out	0x3c, r16	; 60

0000013e <__do_copy_data>:
     13e:	12 e0       	ldi	r17, 0x02	; 2
     140:	a0 e0       	ldi	r26, 0x00	; 0
     142:	b2 e0       	ldi	r27, 0x02	; 2
     144:	ee ea       	ldi	r30, 0xAE	; 174
     146:	f0 e1       	ldi	r31, 0x10	; 16
     148:	00 e0       	ldi	r16, 0x00	; 0
     14a:	0b bf       	out	0x3b, r16	; 59
     14c:	02 c0       	rjmp	.+4      	; 0x152 <__do_copy_data+0x14>
     14e:	07 90       	elpm	r0, Z+
     150:	0d 92       	st	X+, r0
     152:	a2 34       	cpi	r26, 0x42	; 66
     154:	b1 07       	cpc	r27, r17
     156:	d9 f7       	brne	.-10     	; 0x14e <__do_copy_data+0x10>

00000158 <__do_clear_bss>:
     158:	22 e0       	ldi	r18, 0x02	; 2
     15a:	a2 e4       	ldi	r26, 0x42	; 66
     15c:	b2 e0       	ldi	r27, 0x02	; 2
     15e:	01 c0       	rjmp	.+2      	; 0x162 <.do_clear_bss_start>

00000160 <.do_clear_bss_loop>:
     160:	1d 92       	st	X+, r1

00000162 <.do_clear_bss_start>:
     162:	ad 38       	cpi	r26, 0x8D	; 141
     164:	b2 07       	cpc	r27, r18
     166:	e1 f7       	brne	.-8      	; 0x160 <.do_clear_bss_loop>
     168:	b0 d3       	rcall	.+1888   	; 0x8ca <main>
     16a:	9f c7       	rjmp	.+3902   	; 0x10aa <_exit>

0000016c <__bad_interrupt>:
     16c:	49 cf       	rjmp	.-366    	; 0x0 <__vectors>

0000016e <init_s>:
**/
static uint16_t init_s(uint32_t SCL_f ,bool enable_interrupt) //freq is given in Hz
{
	
	//no internal pull up implemented so far
if (SCL_f <= 400000)
     16e:	61 38       	cpi	r22, 0x81	; 129
     170:	2a e1       	ldi	r18, 0x1A	; 26
     172:	72 07       	cpc	r23, r18
     174:	26 e0       	ldi	r18, 0x06	; 6
     176:	82 07       	cpc	r24, r18
     178:	91 05       	cpc	r25, r1
     17a:	08 f0       	brcs	.+2      	; 0x17e <init_s+0x10>
     17c:	4c c0       	rjmp	.+152    	; 0x216 <init_s+0xa8>
	{
		//enable TWI clock module 
	PRR0&=~(1<<PRTWI);
     17e:	e4 e6       	ldi	r30, 0x64	; 100
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	20 81       	ld	r18, Z
     184:	2f 77       	andi	r18, 0x7F	; 127
     186:	20 83       	st	Z, r18
	
	//enable TWI
	TWCR|=(1<<TWEN);	
     188:	ec eb       	ldi	r30, 0xBC	; 188
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	20 81       	ld	r18, Z
     18e:	24 60       	ori	r18, 0x04	; 4
     190:	20 83       	st	Z, r18
	
	//enable interrupt
	int_is_enabled=enable_interrupt;
     192:	40 93 44 02 	sts	0x0244, r20	; 0x800244 <int_is_enabled>
	if (int_is_enabled)
     196:	44 23       	and	r20, r20
     198:	19 f0       	breq	.+6      	; 0x1a0 <init_s+0x32>
	{
		TWCR|=(1<<TWIE);
     19a:	20 81       	ld	r18, Z
     19c:	21 60       	ori	r18, 0x01	; 1
     19e:	20 83       	st	Z, r18
	
	//constants pre calculated from mathcad 
	uint16_t TWBR_1=1;
	
	
	if(SCL_f==400000)
     1a0:	60 38       	cpi	r22, 0x80	; 128
     1a2:	2a e1       	ldi	r18, 0x1A	; 26
     1a4:	72 07       	cpc	r23, r18
     1a6:	26 e0       	ldi	r18, 0x06	; 6
     1a8:	82 07       	cpc	r24, r18
     1aa:	91 05       	cpc	r25, r1
     1ac:	d9 f0       	breq	.+54     	; 0x1e4 <init_s+0x76>
	{
		TWBR_1= 3;
	}
	else if(SCL_f>=333333)
     1ae:	65 31       	cpi	r22, 0x15	; 21
     1b0:	26 e1       	ldi	r18, 0x16	; 22
     1b2:	72 07       	cpc	r23, r18
     1b4:	25 e0       	ldi	r18, 0x05	; 5
     1b6:	82 07       	cpc	r24, r18
     1b8:	91 05       	cpc	r25, r1
     1ba:	b8 f4       	brcc	.+46     	; 0x1ea <init_s+0x7c>
	{
		TWBR_1= 4;
	}
	else if(SCL_f>=5000)
     1bc:	68 38       	cpi	r22, 0x88	; 136
     1be:	23 e1       	ldi	r18, 0x13	; 19
     1c0:	72 07       	cpc	r23, r18
     1c2:	81 05       	cpc	r24, r1
     1c4:	91 05       	cpc	r25, r1
     1c6:	a0 f4       	brcc	.+40     	; 0x1f0 <init_s+0x82>
	{
		TWBR_1= 398;
	}
	else if(SCL_f>=2000)
     1c8:	60 3d       	cpi	r22, 0xD0	; 208
     1ca:	27 e0       	ldi	r18, 0x07	; 7
     1cc:	72 07       	cpc	r23, r18
     1ce:	81 05       	cpc	r24, r1
     1d0:	91 05       	cpc	r25, r1
     1d2:	88 f4       	brcc	.+34     	; 0x1f6 <init_s+0x88>
	{
		TWBR_1= 1998;
	}
	else if(SCL_f>=1000)
     1d4:	68 3e       	cpi	r22, 0xE8	; 232
     1d6:	73 40       	sbci	r23, 0x03	; 3
     1d8:	81 05       	cpc	r24, r1
     1da:	91 05       	cpc	r25, r1
     1dc:	78 f0       	brcs	.+30     	; 0x1fc <init_s+0x8e>
	{
		TWBR_1= 998;
     1de:	86 ee       	ldi	r24, 0xE6	; 230
     1e0:	93 e0       	ldi	r25, 0x03	; 3
     1e2:	0e c0       	rjmp	.+28     	; 0x200 <init_s+0x92>
	uint16_t TWBR_1=1;
	
	
	if(SCL_f==400000)
	{
		TWBR_1= 3;
     1e4:	83 e0       	ldi	r24, 0x03	; 3
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0b c0       	rjmp	.+22     	; 0x200 <init_s+0x92>
	}
	else if(SCL_f>=333333)
	{
		TWBR_1= 4;
     1ea:	84 e0       	ldi	r24, 0x04	; 4
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	08 c0       	rjmp	.+16     	; 0x200 <init_s+0x92>
	}
	else if(SCL_f>=5000)
	{
		TWBR_1= 398;
     1f0:	8e e8       	ldi	r24, 0x8E	; 142
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	05 c0       	rjmp	.+10     	; 0x200 <init_s+0x92>
	}
	else if(SCL_f>=2000)
	{
		TWBR_1= 1998;
     1f6:	8e ec       	ldi	r24, 0xCE	; 206
     1f8:	97 e0       	ldi	r25, 0x07	; 7
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <init_s+0x92>
	{
		TWCR|=(1<<TWIE);
	}
	
	//constants pre calculated from mathcad 
	uint16_t TWBR_1=1;
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
	else if(SCL_f>=1000)
	{
		TWBR_1= 998;
	}

	TWSR&=~(1<<TWPS0);
     200:	e9 eb       	ldi	r30, 0xB9	; 185
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	20 81       	ld	r18, Z
     206:	2e 7f       	andi	r18, 0xFE	; 254
     208:	20 83       	st	Z, r18
	TWSR&=~(1<<TWPS1);
     20a:	20 81       	ld	r18, Z
     20c:	2d 7f       	andi	r18, 0xFD	; 253
     20e:	20 83       	st	Z, r18
	
	
	TWBR = TWBR_1;
     210:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
	return TWBR_1;
     214:	08 95       	ret
	}
else
	{
	return 69;
     216:	85 e4       	ldi	r24, 0x45	; 69
     218:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     21a:	08 95       	ret

0000021c <disable_s>:
----------------description-----------------------------------------------------------------
Disables any i2c activity, activity, 'init_s()' does not need to be followed before starting new transfer
-------------function description end-------------------------------------------------------
**/
static void disable_s(void)
{
     21c:	08 95       	ret

0000021e <start_s>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static void start_s(void)
{
	TWCR=0;
     21e:	ec eb       	ldi	r30, 0xBC	; 188
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	10 82       	st	Z, r1
	TWCR |= (1<<TWSTA)|(1<<TWEN)|(1<<TWINT); //TWSTA sends start bit 
     224:	80 81       	ld	r24, Z
     226:	84 6a       	ori	r24, 0xA4	; 164
     228:	80 83       	st	Z, r24

	if (!int_is_enabled)
     22a:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <int_is_enabled>
     22e:	81 11       	cpse	r24, r1
     230:	03 c0       	rjmp	.+6      	; 0x238 <start_s+0x1a>
	{
		while ((TWCR & (1<<TWINT)) == 0)
     232:	80 81       	ld	r24, Z
     234:	88 23       	and	r24, r24
     236:	ec f7       	brge	.-6      	; 0x232 <start_s+0x14>
     238:	08 95       	ret

0000023a <stop_s>:
stops i2c, no polling needed
-------------function description end-------------------------------------------------------
**/
static void stop_s()
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     23a:	84 e9       	ldi	r24, 0x94	; 148
     23c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     240:	08 95       	ret

00000242 <selectMode_s>:
-------------function description end-------------------------------------------------------
**/
static void selectMode_s(uint8_t SLA_addr,I2C_MODE_t p_mode) //SLA_x is SLA+R/W
{
	//must send address now
	if(p_mode==I2C_WRITE_MODE)
     242:	61 11       	cpse	r22, r1
     244:	04 c0       	rjmp	.+8      	; 0x24e <selectMode_s+0xc>
	{
		TWDR=((SLA_addr<<1)&(~0b1));
     246:	88 0f       	add	r24, r24
     248:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     24c:	06 c0       	rjmp	.+12     	; 0x25a <selectMode_s+0x18>
	}
	else if(p_mode==I2C_READ_MODE)
     24e:	61 30       	cpi	r22, 0x01	; 1
     250:	21 f4       	brne	.+8      	; 0x25a <selectMode_s+0x18>
	{
		TWDR=((SLA_addr<<1)|(0b1));
     252:	88 0f       	add	r24, r24
     254:	81 60       	ori	r24, 0x01	; 1
     256:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	}
	TWCR |= (1<<TWINT);
     25a:	ec eb       	ldi	r30, 0xBC	; 188
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	80 68       	ori	r24, 0x80	; 128
     262:	80 83       	st	Z, r24
	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     264:	80 81       	ld	r24, Z
     266:	84 6a       	ori	r24, 0xA4	; 164
     268:	80 83       	st	Z, r24
	if (!int_is_enabled)
     26a:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <int_is_enabled>
     26e:	81 11       	cpse	r24, r1
     270:	03 c0       	rjmp	.+6      	; 0x278 <selectMode_s+0x36>
	{
	  while ((TWCR & (1<<TWINT)) == 0) //poll
     272:	80 81       	ld	r24, Z
     274:	88 23       	and	r24, r24
     276:	ec f7       	brge	.-6      	; 0x272 <selectMode_s+0x30>
     278:	08 95       	ret

0000027a <write_s>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static void write_s(uint8_t data)
{
	TWDR = data;
     27a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT)|(1<<TWEN);
     27e:	84 e8       	ldi	r24, 0x84	; 132
     280:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	if (!int_is_enabled)
     284:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <int_is_enabled>
     288:	81 11       	cpse	r24, r1
     28a:	05 c0       	rjmp	.+10     	; 0x296 <write_s+0x1c>
	{
		while ((TWCR & (1<<TWINT)) == 0)
     28c:	ec eb       	ldi	r30, 0xBC	; 188
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	80 81       	ld	r24, Z
     292:	88 23       	and	r24, r24
     294:	ec f7       	brge	.-6      	; 0x290 <write_s+0x16>
     296:	08 95       	ret

00000298 <read_s>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static uint8_t read_s (bool isLast)
{
	if (!isLast ) //If we want to read more than 1 byte
     298:	81 11       	cpse	r24, r1
     29a:	04 c0       	rjmp	.+8      	; 0x2a4 <read_s+0xc>
	{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     29c:	84 ec       	ldi	r24, 0xC4	; 196
     29e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     2a2:	03 c0       	rjmp	.+6      	; 0x2aa <read_s+0x12>
	}

	else             //If we want to read only one byte
	{
		TWCR = (1<<TWINT) | (1<<TWEN);
     2a4:	84 e8       	ldi	r24, 0x84	; 132
     2a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	}
	
	if (!int_is_enabled)
     2aa:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <int_is_enabled>
     2ae:	81 11       	cpse	r24, r1
     2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <read_s+0x2a>
	{
	  while ((TWCR & (1<<TWINT)) == 0)
     2b2:	ec eb       	ldi	r30, 0xBC	; 188
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	88 23       	and	r24, r24
     2ba:	ec f7       	brge	.-6      	; 0x2b6 <read_s+0x1e>
	  {}
	{}
	return TWDR;
     2bc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     2c0:	08 95       	ret
	}

	return 0;
     2c2:	80 e0       	ldi	r24, 0x00	; 0
}
     2c4:	08 95       	ret

000002c6 <setBusy_s>:

static bool setBusy_s(bool status)
{	
	busy_flag=status;
     2c6:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
	return  busy_flag;
}
     2ca:	08 95       	ret

000002cc <getBusy_s>:


static bool getBusy_s(void)
{
	return busy_flag;
}
     2cc:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
     2d0:	08 95       	ret

000002d2 <getStatus_s>:

static uint8_t getStatus_s(void)
{
	return (TWSR)&(0b11111000);
     2d2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     2d6:	88 7f       	andi	r24, 0xF8	; 248
     2d8:	08 95       	ret

000002da <get_i2c_interface>:
-------------function description end-------------------------------------------------------
**/
i2c_t* get_i2c_interface(void)
{
	
 if (!initialized)
     2da:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <initialized>
     2de:	81 11       	cpse	r24, r1
     2e0:	2d c0       	rjmp	.+90     	; 0x33c <get_i2c_interface+0x62>
 {
	i2c_interface.init				=	init_s;
     2e2:	e5 e4       	ldi	r30, 0x45	; 69
     2e4:	f2 e0       	ldi	r31, 0x02	; 2
     2e6:	87 eb       	ldi	r24, 0xB7	; 183
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	91 83       	std	Z+1, r25	; 0x01
     2ec:	80 83       	st	Z, r24
	i2c_interface.disable			=	disable_s;
     2ee:	8e e0       	ldi	r24, 0x0E	; 14
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	93 83       	std	Z+3, r25	; 0x03
     2f4:	82 83       	std	Z+2, r24	; 0x02
	i2c_interface.start				=	start_s;
     2f6:	8f e0       	ldi	r24, 0x0F	; 15
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	95 83       	std	Z+5, r25	; 0x05
     2fc:	84 83       	std	Z+4, r24	; 0x04
	i2c_interface.stop				=	stop_s;
     2fe:	8d e1       	ldi	r24, 0x1D	; 29
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	97 83       	std	Z+7, r25	; 0x07
     304:	86 83       	std	Z+6, r24	; 0x06
	i2c_interface.selectmode		=	selectMode_s;
     306:	81 e2       	ldi	r24, 0x21	; 33
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	91 87       	std	Z+9, r25	; 0x09
     30c:	80 87       	std	Z+8, r24	; 0x08
	i2c_interface.write				=	write_s;
     30e:	8d e3       	ldi	r24, 0x3D	; 61
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	93 87       	std	Z+11, r25	; 0x0b
     314:	82 87       	std	Z+10, r24	; 0x0a
	i2c_interface.read				=	read_s;
     316:	8c e4       	ldi	r24, 0x4C	; 76
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	95 87       	std	Z+13, r25	; 0x0d
     31c:	84 87       	std	Z+12, r24	; 0x0c
	i2c_interface.setBusy			=	setBusy_s;
     31e:	83 e6       	ldi	r24, 0x63	; 99
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	97 87       	std	Z+15, r25	; 0x0f
     324:	86 87       	std	Z+14, r24	; 0x0e
	i2c_interface.getBusy			=	getBusy_s;
     326:	86 e6       	ldi	r24, 0x66	; 102
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	91 8b       	std	Z+17, r25	; 0x11
     32c:	80 8b       	std	Z+16, r24	; 0x10
	i2c_interface.getStatus			=	getStatus_s;
     32e:	89 e6       	ldi	r24, 0x69	; 105
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	93 8b       	std	Z+19, r25	; 0x13
     334:	82 8b       	std	Z+18, r24	; 0x12
	initialized=true;
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <initialized>
	
 }
	return &i2c_interface;
}
     33c:	85 e4       	ldi	r24, 0x45	; 69
     33e:	92 e0       	ldi	r25, 0x02	; 2
     340:	08 95       	ret

00000342 <InitUART>:
  // Wait for new character received
  while ( (UCSRnA & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDRn;
}
     342:	0f 93       	push	r16
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	ec 01       	movw	r28, r24
     34a:	db 01       	movw	r26, r22
     34c:	ca 01       	movw	r24, r20
     34e:	8c 52       	subi	r24, 0x2C	; 44
     350:	91 40       	sbci	r25, 0x01	; 1
     352:	a1 09       	sbc	r26, r1
     354:	b1 09       	sbc	r27, r1
     356:	85 3d       	cpi	r24, 0xD5	; 213
     358:	90 4c       	sbci	r25, 0xC0	; 192
     35a:	a1 40       	sbci	r26, 0x01	; 1
     35c:	b1 05       	cpc	r27, r1
     35e:	08 f0       	brcs	.+2      	; 0x362 <InitUART+0x20>
     360:	3f c0       	rjmp	.+126    	; 0x3e0 <InitUART+0x9e>
     362:	25 50       	subi	r18, 0x05	; 5
     364:	24 30       	cpi	r18, 0x04	; 4
     366:	e0 f5       	brcc	.+120    	; 0x3e0 <InitUART+0x9e>
     368:	80 e2       	ldi	r24, 0x20	; 32
     36a:	88 83       	st	Y, r24
     36c:	88 e1       	ldi	r24, 0x18	; 24
     36e:	89 83       	std	Y+1, r24	; 0x01
     370:	22 0f       	add	r18, r18
     372:	2a 83       	std	Y+2, r18	; 0x02
     374:	05 34       	cpi	r16, 0x45	; 69
     376:	21 f4       	brne	.+8      	; 0x380 <InitUART+0x3e>
     378:	8a 81       	ldd	r24, Y+2	; 0x02
     37a:	80 62       	ori	r24, 0x20	; 32
     37c:	8a 83       	std	Y+2, r24	; 0x02
     37e:	05 c0       	rjmp	.+10     	; 0x38a <InitUART+0x48>
     380:	0f 34       	cpi	r16, 0x4F	; 79
     382:	19 f4       	brne	.+6      	; 0x38a <InitUART+0x48>
     384:	8a 81       	ldd	r24, Y+2	; 0x02
     386:	80 63       	ori	r24, 0x30	; 48
     388:	8a 83       	std	Y+2, r24	; 0x02
     38a:	db 01       	movw	r26, r22
     38c:	ca 01       	movw	r24, r20
     38e:	80 58       	subi	r24, 0x80	; 128
     390:	9b 47       	sbci	r25, 0x7B	; 123
     392:	a1 4e       	sbci	r26, 0xE1	; 225
     394:	bf 4f       	sbci	r27, 0xFF	; 255
     396:	88 0f       	add	r24, r24
     398:	99 1f       	adc	r25, r25
     39a:	aa 1f       	adc	r26, r26
     39c:	bb 1f       	adc	r27, r27
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	aa 1f       	adc	r26, r26
     3a4:	bb 1f       	adc	r27, r27
     3a6:	88 0f       	add	r24, r24
     3a8:	99 1f       	adc	r25, r25
     3aa:	aa 1f       	adc	r26, r26
     3ac:	bb 1f       	adc	r27, r27
     3ae:	44 0f       	add	r20, r20
     3b0:	55 1f       	adc	r21, r21
     3b2:	66 1f       	adc	r22, r22
     3b4:	77 1f       	adc	r23, r23
     3b6:	44 0f       	add	r20, r20
     3b8:	55 1f       	adc	r21, r21
     3ba:	66 1f       	adc	r22, r22
     3bc:	77 1f       	adc	r23, r23
     3be:	9a 01       	movw	r18, r20
     3c0:	ab 01       	movw	r20, r22
     3c2:	22 0f       	add	r18, r18
     3c4:	33 1f       	adc	r19, r19
     3c6:	44 1f       	adc	r20, r20
     3c8:	55 1f       	adc	r21, r21
     3ca:	22 0f       	add	r18, r18
     3cc:	33 1f       	adc	r19, r19
     3ce:	44 1f       	adc	r20, r20
     3d0:	55 1f       	adc	r21, r21
     3d2:	bc 01       	movw	r22, r24
     3d4:	cd 01       	movw	r24, r26
     3d6:	0c d6       	rcall	.+3096   	; 0xff0 <__udivmodsi4>
     3d8:	21 50       	subi	r18, 0x01	; 1
     3da:	31 09       	sbc	r19, r1
     3dc:	3d 83       	std	Y+5, r19	; 0x05
     3de:	2c 83       	std	Y+4, r18	; 0x04
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	0f 91       	pop	r16
     3e6:	08 95       	ret

000003e8 <SendChar>:
Then send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(unsigned int UART_adr, char Tegn)
{
     3e8:	fc 01       	movw	r30, r24
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRnA & (1<<5)) == 0 )
     3ea:	90 81       	ld	r25, Z
     3ec:	95 ff       	sbrs	r25, 5
     3ee:	fd cf       	rjmp	.-6      	; 0x3ea <SendChar+0x2>
  {}
  // Then send the character
  UDRn = Tegn;
     3f0:	66 83       	std	Z+6, r22	; 0x06
     3f2:	08 95       	ret

000003f4 <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	eb 01       	movw	r28, r22
  // Repeat until zero-termination
  while (*Streng != 0)
     3fe:	68 81       	ld	r22, Y
     400:	66 23       	and	r22, r22
     402:	39 f0       	breq	.+14     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     404:	8c 01       	movw	r16, r24
     406:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
     408:	c8 01       	movw	r24, r16
     40a:	ee df       	rcall	.-36     	; 0x3e8 <SendChar>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
     40c:	69 91       	ld	r22, Y+
     40e:	61 11       	cpse	r22, r1
     410:	fb cf       	rjmp	.-10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
    // Advance the pointer one step
    Streng++;
  }
}
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	08 95       	ret

0000041c <SendInteger>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(unsigned int UART_adr, int Tal)
{
     41c:	0f 93       	push	r16
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
     428:	27 97       	sbiw	r28, 0x07	; 7
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
     434:	8c 01       	movw	r16, r24
     436:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     438:	4a e0       	ldi	r20, 0x0A	; 10
     43a:	be 01       	movw	r22, r28
     43c:	6f 5f       	subi	r22, 0xFF	; 255
     43e:	7f 4f       	sbci	r23, 0xFF	; 255
     440:	01 d6       	rcall	.+3074   	; 0x1044 <__itoa_ncheck>
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Tal, array, 10);
  // - then send the string
  SendString(UART_adr, array);
     442:	be 01       	movw	r22, r28
     444:	6f 5f       	subi	r22, 0xFF	; 255
     446:	7f 4f       	sbci	r23, 0xFF	; 255
     448:	c8 01       	movw	r24, r16
     44a:	d4 df       	rcall	.-88     	; 0x3f4 <SendString>
}
     44c:	27 96       	adiw	r28, 0x07	; 7
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	f8 94       	cli
     452:	de bf       	out	0x3e, r29	; 62
     454:	0f be       	out	0x3f, r0	; 63
     456:	cd bf       	out	0x3d, r28	; 61
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	08 95       	ret

00000462 <s_start>:
}


static uint8_t s_start(void)
{
	i2c->start();
     462:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <i2c>
     466:	f0 91 88 02 	lds	r31, 0x0288	; 0x800288 <i2c+0x1>
     46a:	04 80       	ldd	r0, Z+4	; 0x04
     46c:	f5 81       	ldd	r31, Z+5	; 0x05
     46e:	e0 2d       	mov	r30, r0
     470:	19 95       	eicall
	return 1;

}
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	08 95       	ret

00000476 <s_stop>:
static void s_stop(void)
{
	i2c->stop();
     476:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <i2c>
     47a:	f0 91 88 02 	lds	r31, 0x0288	; 0x800288 <i2c+0x1>
     47e:	06 80       	ldd	r0, Z+6	; 0x06
     480:	f7 81       	ldd	r31, Z+7	; 0x07
     482:	e0 2d       	mov	r30, r0
     484:	19 95       	eicall
     486:	08 95       	ret

00000488 <s_enterWrite>:
}
static void s_enterWrite(void)
{
	
	i2c->selectmode(ADDR_0,I2C_WRITE_MODE);
     488:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <i2c>
     48c:	f0 91 88 02 	lds	r31, 0x0288	; 0x800288 <i2c+0x1>
     490:	00 84       	ldd	r0, Z+8	; 0x08
     492:	f1 85       	ldd	r31, Z+9	; 0x09
     494:	e0 2d       	mov	r30, r0
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	88 e6       	ldi	r24, 0x68	; 104
     49a:	19 95       	eicall
     49c:	08 95       	ret

0000049e <s_enterRead>:
	
}
static void s_enterRead(void)
{

	i2c->selectmode(ADDR_0,I2C_READ_MODE);
     49e:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <i2c>
     4a2:	f0 91 88 02 	lds	r31, 0x0288	; 0x800288 <i2c+0x1>
     4a6:	00 84       	ldd	r0, Z+8	; 0x08
     4a8:	f1 85       	ldd	r31, Z+9	; 0x09
     4aa:	e0 2d       	mov	r30, r0
     4ac:	61 e0       	ldi	r22, 0x01	; 1
     4ae:	88 e6       	ldi	r24, 0x68	; 104
     4b0:	19 95       	eicall
     4b2:	08 95       	ret

000004b4 <s_selectRegister>:
	
}
static void s_selectRegister(reg_addr_t reg_addr)
{
	currentAddr=reg_addr;
     4b4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	i2c->write(reg_addr);
     4b8:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <i2c>
     4bc:	f0 91 88 02 	lds	r31, 0x0288	; 0x800288 <i2c+0x1>
     4c0:	02 84       	ldd	r0, Z+10	; 0x0a
     4c2:	f3 85       	ldd	r31, Z+11	; 0x0b
     4c4:	e0 2d       	mov	r30, r0
     4c6:	19 95       	eicall
     4c8:	08 95       	ret

000004ca <s_write>:
}
static void s_write(uint8_t data)
{
	i2c->write(data);
     4ca:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <i2c>
     4ce:	f0 91 88 02 	lds	r31, 0x0288	; 0x800288 <i2c+0x1>
     4d2:	02 84       	ldd	r0, Z+10	; 0x0a
     4d4:	f3 85       	ldd	r31, Z+11	; 0x0b
     4d6:	e0 2d       	mov	r30, r0
     4d8:	19 95       	eicall
     4da:	08 95       	ret

000004dc <s_reset>:



static void s_reset(void)
{
	s_start();
     4dc:	c2 df       	rcall	.-124    	; 0x462 <s_start>
	s_enterWrite();
     4de:	d4 df       	rcall	.-88     	; 0x488 <s_enterWrite>
	s_selectRegister(0x6B);
     4e0:	8b e6       	ldi	r24, 0x6B	; 107
     4e2:	e8 df       	rcall	.-48     	; 0x4b4 <s_selectRegister>
	s_write(0x00);
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	f1 df       	rcall	.-30     	; 0x4ca <s_write>
     4e8:	c6 cf       	rjmp	.-116    	; 0x476 <s_stop>
	s_stop();
     4ea:	08 95       	ret

000004ec <s_accerelSettings>:
     4ec:	84 30       	cpi	r24, 0x04	; 4
     4ee:	68 f4       	brcc	.+26     	; 0x50a <s_accerelSettings+0x1e>
static void s_accerelSettings(uint8_t p_range)
{
//4g right now
	if (p_range<=3)
	{
		accelRange = p_range;
     4f0:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <accelRange>
		s_start();
     4f4:	b6 df       	rcall	.-148    	; 0x462 <s_start>
		s_enterWrite();
     4f6:	c8 df       	rcall	.-112    	; 0x488 <s_enterWrite>
		s_selectRegister(28);
     4f8:	8c e1       	ldi	r24, 0x1C	; 28
     4fa:	dc df       	rcall	.-72     	; 0x4b4 <s_selectRegister>
     4fc:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <accelRange>
		s_write(accelRange<<3);
     500:	88 0f       	add	r24, r24
     502:	88 0f       	add	r24, r24
     504:	88 0f       	add	r24, r24
     506:	e1 df       	rcall	.-62     	; 0x4ca <s_write>
		s_stop();
     508:	b6 cf       	rjmp	.-148    	; 0x476 <s_stop>
     50a:	08 95       	ret

0000050c <s_gyroSettings>:
     50c:	84 30       	cpi	r24, 0x04	; 4
	s_stop();
}

static void s_gyroSettings(uint8_t p_range)
{
	if (p_range<=3)
     50e:	58 f4       	brcc	.+22     	; 0x526 <s_gyroSettings+0x1a>
	{
		gyroRange = p_range;
		s_start();
     510:	a8 df       	rcall	.-176    	; 0x462 <s_start>
		s_enterWrite();
     512:	ba df       	rcall	.-140    	; 0x488 <s_enterWrite>
		s_selectRegister(27);
     514:	8b e1       	ldi	r24, 0x1B	; 27
     516:	ce df       	rcall	.-100    	; 0x4b4 <s_selectRegister>
     518:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <accelRange>
		s_write(accelRange<<3);
     51c:	88 0f       	add	r24, r24
     51e:	88 0f       	add	r24, r24
     520:	88 0f       	add	r24, r24
     522:	d3 df       	rcall	.-90     	; 0x4ca <s_write>
		s_stop();
     524:	a8 cf       	rjmp	.-176    	; 0x476 <s_stop>
     526:	08 95       	ret

00000528 <s_read>:
     528:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <i2c>
{
	i2c->write(data);
}
static uint8_t s_read(bool is_last)
{
	int16_t temp=i2c->read(is_last);
     52c:	f0 91 88 02 	lds	r31, 0x0288	; 0x800288 <i2c+0x1>
     530:	04 84       	ldd	r0, Z+12	; 0x0c
     532:	f5 85       	ldd	r31, Z+13	; 0x0d
     534:	e0 2d       	mov	r30, r0
     536:	19 95       	eicall
     538:	28 2f       	mov	r18, r24
     53a:	a8 2f       	mov	r26, r24
     53c:	b0 e0       	ldi	r27, 0x00	; 0
	
	switch (currentAddr)
     53e:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     542:	49 2f       	mov	r20, r25
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	fa 01       	movw	r30, r20
     548:	fb 97       	sbiw	r30, 0x3b	; 59
     54a:	ee 30       	cpi	r30, 0x0E	; 14
     54c:	f1 05       	cpc	r31, r1
     54e:	08 f0       	brcs	.+2      	; 0x552 <s_read+0x2a>
     550:	66 c0       	rjmp	.+204    	; 0x61e <s_read+0xf6>
     552:	88 27       	eor	r24, r24
     554:	ee 58       	subi	r30, 0x8E	; 142
     556:	ff 4f       	sbci	r31, 0xFF	; 255
     558:	8f 4f       	sbci	r24, 0xFF	; 255
     55a:	6c c5       	rjmp	.+2776   	; 0x1034 <__tablejump2__>
	{
		//accelerometer
		case ACCEL_XOUT_H:
			data_struct.accel_x=temp<<8;
     55c:	e9 e7       	ldi	r30, 0x79	; 121
     55e:	f2 e0       	ldi	r31, 0x02	; 2
     560:	10 82       	st	Z, r1
     562:	21 83       	std	Z+1, r18	; 0x01
		break;
     564:	5c c0       	rjmp	.+184    	; 0x61e <s_read+0xf6>
		
		case ACCEL_XOUT_L:
		data_struct.accel_x|=temp;
     566:	e9 e7       	ldi	r30, 0x79	; 121
     568:	f2 e0       	ldi	r31, 0x02	; 2
     56a:	40 81       	ld	r20, Z
     56c:	51 81       	ldd	r21, Z+1	; 0x01
     56e:	a4 2b       	or	r26, r20
     570:	b5 2b       	or	r27, r21
     572:	b1 83       	std	Z+1, r27	; 0x01
     574:	a0 83       	st	Z, r26
		break;
     576:	53 c0       	rjmp	.+166    	; 0x61e <s_read+0xf6>
		
		case ACCEL_YOUT_H:
			data_struct.accel_y=temp<<8;
     578:	e9 e7       	ldi	r30, 0x79	; 121
     57a:	f2 e0       	ldi	r31, 0x02	; 2
     57c:	12 82       	std	Z+2, r1	; 0x02
     57e:	23 83       	std	Z+3, r18	; 0x03
		break;
     580:	4e c0       	rjmp	.+156    	; 0x61e <s_read+0xf6>
		
		case ACCEL_YOUT_L:
			data_struct.accel_y|=temp;
     582:	e9 e7       	ldi	r30, 0x79	; 121
     584:	f2 e0       	ldi	r31, 0x02	; 2
     586:	42 81       	ldd	r20, Z+2	; 0x02
     588:	53 81       	ldd	r21, Z+3	; 0x03
     58a:	a4 2b       	or	r26, r20
     58c:	b5 2b       	or	r27, r21
     58e:	b3 83       	std	Z+3, r27	; 0x03
     590:	a2 83       	std	Z+2, r26	; 0x02
		break;
     592:	45 c0       	rjmp	.+138    	; 0x61e <s_read+0xf6>
		
		case ACCEL_ZOUT_H:
			data_struct.accel_z=temp<<8;
     594:	e9 e7       	ldi	r30, 0x79	; 121
     596:	f2 e0       	ldi	r31, 0x02	; 2
     598:	14 82       	std	Z+4, r1	; 0x04
     59a:	25 83       	std	Z+5, r18	; 0x05
		break;
     59c:	40 c0       	rjmp	.+128    	; 0x61e <s_read+0xf6>
		
		case ACCEL_ZOUT_L:
			data_struct.accel_z|=temp;
     59e:	e9 e7       	ldi	r30, 0x79	; 121
     5a0:	f2 e0       	ldi	r31, 0x02	; 2
     5a2:	44 81       	ldd	r20, Z+4	; 0x04
     5a4:	55 81       	ldd	r21, Z+5	; 0x05
     5a6:	a4 2b       	or	r26, r20
     5a8:	b5 2b       	or	r27, r21
     5aa:	b5 83       	std	Z+5, r27	; 0x05
     5ac:	a4 83       	std	Z+4, r26	; 0x04
		break;
     5ae:	37 c0       	rjmp	.+110    	; 0x61e <s_read+0xf6>
		
		//temperature
		case TEMP_OUT_H:
			data_struct.temp=temp<<8;
     5b0:	e9 e7       	ldi	r30, 0x79	; 121
     5b2:	f2 e0       	ldi	r31, 0x02	; 2
     5b4:	16 82       	std	Z+6, r1	; 0x06
     5b6:	27 83       	std	Z+7, r18	; 0x07
		break;
     5b8:	32 c0       	rjmp	.+100    	; 0x61e <s_read+0xf6>
		
		case TEMP_OUT_L:
			data_struct.temp|=temp;
     5ba:	e9 e7       	ldi	r30, 0x79	; 121
     5bc:	f2 e0       	ldi	r31, 0x02	; 2
     5be:	46 81       	ldd	r20, Z+6	; 0x06
     5c0:	57 81       	ldd	r21, Z+7	; 0x07
     5c2:	a4 2b       	or	r26, r20
     5c4:	b5 2b       	or	r27, r21
     5c6:	b7 83       	std	Z+7, r27	; 0x07
     5c8:	a6 83       	std	Z+6, r26	; 0x06
		break;
     5ca:	29 c0       	rjmp	.+82     	; 0x61e <s_read+0xf6>
		
		//Gyro
		case GYRO_XOUT_H:
			data_struct.gyro_x=temp<<8;
     5cc:	e9 e7       	ldi	r30, 0x79	; 121
     5ce:	f2 e0       	ldi	r31, 0x02	; 2
     5d0:	10 86       	std	Z+8, r1	; 0x08
     5d2:	21 87       	std	Z+9, r18	; 0x09
		break;
     5d4:	24 c0       	rjmp	.+72     	; 0x61e <s_read+0xf6>
		
		case GYRO_XOUT_L:
			data_struct.gyro_x|=temp;
     5d6:	e9 e7       	ldi	r30, 0x79	; 121
     5d8:	f2 e0       	ldi	r31, 0x02	; 2
     5da:	40 85       	ldd	r20, Z+8	; 0x08
     5dc:	51 85       	ldd	r21, Z+9	; 0x09
     5de:	a4 2b       	or	r26, r20
     5e0:	b5 2b       	or	r27, r21
     5e2:	b1 87       	std	Z+9, r27	; 0x09
     5e4:	a0 87       	std	Z+8, r26	; 0x08
		break;
     5e6:	1b c0       	rjmp	.+54     	; 0x61e <s_read+0xf6>
		
		case GYRO_YOUT_H:
			data_struct.gyro_y=temp<<8;
     5e8:	e9 e7       	ldi	r30, 0x79	; 121
     5ea:	f2 e0       	ldi	r31, 0x02	; 2
     5ec:	12 86       	std	Z+10, r1	; 0x0a
     5ee:	23 87       	std	Z+11, r18	; 0x0b
		break;
     5f0:	16 c0       	rjmp	.+44     	; 0x61e <s_read+0xf6>
		
		case GYRO_YOUT_L:
			data_struct.gyro_y|=temp;
     5f2:	e9 e7       	ldi	r30, 0x79	; 121
     5f4:	f2 e0       	ldi	r31, 0x02	; 2
     5f6:	42 85       	ldd	r20, Z+10	; 0x0a
     5f8:	53 85       	ldd	r21, Z+11	; 0x0b
     5fa:	a4 2b       	or	r26, r20
     5fc:	b5 2b       	or	r27, r21
     5fe:	b3 87       	std	Z+11, r27	; 0x0b
     600:	a2 87       	std	Z+10, r26	; 0x0a
		break;
     602:	0d c0       	rjmp	.+26     	; 0x61e <s_read+0xf6>
			
		case GYRO_ZOUT_H:
			data_struct.gyro_z=temp<<8;
     604:	e9 e7       	ldi	r30, 0x79	; 121
     606:	f2 e0       	ldi	r31, 0x02	; 2
     608:	14 86       	std	Z+12, r1	; 0x0c
     60a:	25 87       	std	Z+13, r18	; 0x0d
		break;
     60c:	08 c0       	rjmp	.+16     	; 0x61e <s_read+0xf6>
				
		case GYRO_ZOUT_L:
			data_struct.gyro_z|=temp;
     60e:	e9 e7       	ldi	r30, 0x79	; 121
     610:	f2 e0       	ldi	r31, 0x02	; 2
     612:	44 85       	ldd	r20, Z+12	; 0x0c
     614:	55 85       	ldd	r21, Z+13	; 0x0d
     616:	a4 2b       	or	r26, r20
     618:	b5 2b       	or	r27, r21
     61a:	b5 87       	std	Z+13, r27	; 0x0d
     61c:	a4 87       	std	Z+12, r26	; 0x0c
		default:
		//de nada
		break;
	}
	
	currentAddr++;
     61e:	9f 5f       	subi	r25, 0xFF	; 255
     620:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
	//SendInteger(UART0,currentAddr);
	//SendString(UART0,"\n");
return temp;
}
     624:	82 2f       	mov	r24, r18
     626:	08 95       	ret

00000628 <s_gatherData>:
	}
	return &GA_interface; 
}

static void s_gatherData(void)
{
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
	int i=0;
	s_start();
     62c:	1a df       	rcall	.-460    	; 0x462 <s_start>
	s_enterWrite();
     62e:	2c df       	rcall	.-424    	; 0x488 <s_enterWrite>
	s_selectRegister(ACCEL_XOUT_H);
     630:	8b e3       	ldi	r24, 0x3B	; 59
	s_start();
     632:	40 df       	rcall	.-384    	; 0x4b4 <s_selectRegister>
     634:	16 df       	rcall	.-468    	; 0x462 <s_start>
	s_enterRead();
     636:	33 df       	rcall	.-410    	; 0x49e <s_enterRead>
     638:	cd e0       	ldi	r28, 0x0D	; 13
     63a:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(i=0;i<14;++i)
	{
		if(i==13)
		{
			s_read(true);
     63c:	04 c0       	rjmp	.+8      	; 0x646 <s_gatherData+0x1e>
     63e:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			s_read(false);
		}
	}
	s_stop();
     640:	73 df       	rcall	.-282    	; 0x528 <s_read>
     642:	19 df       	rcall	.-462    	; 0x476 <s_stop>
}
     644:	05 c0       	rjmp	.+10     	; 0x650 <s_gatherData+0x28>
		{
			s_read(true);
		}
		else
		{
			s_read(false);
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	6f df       	rcall	.-290    	; 0x528 <s_read>
     64a:	21 97       	sbiw	r28, 0x01	; 1
     64c:	e1 f7       	brne	.-8      	; 0x646 <s_gatherData+0x1e>
	s_start();
	s_enterRead();
	
	for(i=0;i<14;++i)
	{
		if(i==13)
     64e:	f7 cf       	rjmp	.-18     	; 0x63e <s_gatherData+0x16>
     650:	df 91       	pop	r29
		{
			s_read(false);
		}
	}
	s_stop();
}
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <s_getAccelXYZ>:
     656:	0f 93       	push	r16
	//SendString(UART0,"\n");
return temp;
}

static void s_getAccelXYZ(int16_t* XYZ)
{
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	ec 01       	movw	r28, r24
XYZ[0]=(int16_t)((data_struct.accel_x)/8.192);
     660:	09 e7       	ldi	r16, 0x79	; 121
     662:	12 e0       	ldi	r17, 0x02	; 2
     664:	f8 01       	movw	r30, r16
     666:	60 81       	ld	r22, Z
     668:	71 81       	ldd	r23, Z+1	; 0x01
     66a:	07 2e       	mov	r0, r23
     66c:	00 0c       	add	r0, r0
     66e:	88 0b       	sbc	r24, r24
     670:	99 0b       	sbc	r25, r25
     672:	49 d3       	rcall	.+1682   	; 0xd06 <__floatsisf>
     674:	2f e6       	ldi	r18, 0x6F	; 111
     676:	32 e1       	ldi	r19, 0x12	; 18
     678:	43 e0       	ldi	r20, 0x03	; 3
     67a:	51 e4       	ldi	r21, 0x41	; 65
     67c:	a9 d2       	rcall	.+1362   	; 0xbd0 <__divsf3>
     67e:	10 d3       	rcall	.+1568   	; 0xca0 <__fixsfsi>
     680:	79 83       	std	Y+1, r23	; 0x01
     682:	68 83       	st	Y, r22
XYZ[1]=(int16_t)((data_struct.accel_y)/8.192);
     684:	f8 01       	movw	r30, r16
     686:	62 81       	ldd	r22, Z+2	; 0x02
     688:	73 81       	ldd	r23, Z+3	; 0x03
     68a:	07 2e       	mov	r0, r23
     68c:	00 0c       	add	r0, r0
     68e:	88 0b       	sbc	r24, r24
     690:	99 0b       	sbc	r25, r25
     692:	39 d3       	rcall	.+1650   	; 0xd06 <__floatsisf>
     694:	2f e6       	ldi	r18, 0x6F	; 111
     696:	32 e1       	ldi	r19, 0x12	; 18
     698:	43 e0       	ldi	r20, 0x03	; 3
     69a:	51 e4       	ldi	r21, 0x41	; 65
     69c:	99 d2       	rcall	.+1330   	; 0xbd0 <__divsf3>
     69e:	00 d3       	rcall	.+1536   	; 0xca0 <__fixsfsi>
     6a0:	7b 83       	std	Y+3, r23	; 0x03
     6a2:	6a 83       	std	Y+2, r22	; 0x02
XYZ[2]=(int16_t)((data_struct.accel_z)/8.192);
     6a4:	f8 01       	movw	r30, r16
     6a6:	64 81       	ldd	r22, Z+4	; 0x04
     6a8:	75 81       	ldd	r23, Z+5	; 0x05
     6aa:	07 2e       	mov	r0, r23
     6ac:	00 0c       	add	r0, r0
     6ae:	88 0b       	sbc	r24, r24
     6b0:	99 0b       	sbc	r25, r25
     6b2:	29 d3       	rcall	.+1618   	; 0xd06 <__floatsisf>
     6b4:	2f e6       	ldi	r18, 0x6F	; 111
     6b6:	32 e1       	ldi	r19, 0x12	; 18
     6b8:	43 e0       	ldi	r20, 0x03	; 3
     6ba:	51 e4       	ldi	r21, 0x41	; 65
     6bc:	89 d2       	rcall	.+1298   	; 0xbd0 <__divsf3>
     6be:	f0 d2       	rcall	.+1504   	; 0xca0 <__fixsfsi>
     6c0:	7d 83       	std	Y+5, r23	; 0x05
     6c2:	6c 83       	std	Y+4, r22	; 0x04
}
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	08 95       	ret

000006ce <s_getGyroXYZ>:

static void s_getGyroXYZ(int16_t* XYZ)
{
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	ec 01       	movw	r28, r24
	XYZ[0]=(int16_t)((data_struct.gyro_x)/8.192);
     6d8:	09 e7       	ldi	r16, 0x79	; 121
     6da:	12 e0       	ldi	r17, 0x02	; 2
     6dc:	f8 01       	movw	r30, r16
     6de:	60 85       	ldd	r22, Z+8	; 0x08
     6e0:	71 85       	ldd	r23, Z+9	; 0x09
     6e2:	07 2e       	mov	r0, r23
     6e4:	00 0c       	add	r0, r0
     6e6:	88 0b       	sbc	r24, r24
     6e8:	99 0b       	sbc	r25, r25
     6ea:	0d d3       	rcall	.+1562   	; 0xd06 <__floatsisf>
     6ec:	2f e6       	ldi	r18, 0x6F	; 111
     6ee:	32 e1       	ldi	r19, 0x12	; 18
     6f0:	43 e0       	ldi	r20, 0x03	; 3
     6f2:	51 e4       	ldi	r21, 0x41	; 65
     6f4:	6d d2       	rcall	.+1242   	; 0xbd0 <__divsf3>
     6f6:	d4 d2       	rcall	.+1448   	; 0xca0 <__fixsfsi>
     6f8:	79 83       	std	Y+1, r23	; 0x01
     6fa:	68 83       	st	Y, r22
	XYZ[1]=(int16_t)((data_struct.gyro_y)/8.192);
     6fc:	f8 01       	movw	r30, r16
     6fe:	62 85       	ldd	r22, Z+10	; 0x0a
     700:	73 85       	ldd	r23, Z+11	; 0x0b
     702:	07 2e       	mov	r0, r23
     704:	00 0c       	add	r0, r0
     706:	88 0b       	sbc	r24, r24
     708:	99 0b       	sbc	r25, r25
     70a:	fd d2       	rcall	.+1530   	; 0xd06 <__floatsisf>
     70c:	2f e6       	ldi	r18, 0x6F	; 111
     70e:	32 e1       	ldi	r19, 0x12	; 18
     710:	43 e0       	ldi	r20, 0x03	; 3
     712:	51 e4       	ldi	r21, 0x41	; 65
     714:	5d d2       	rcall	.+1210   	; 0xbd0 <__divsf3>
     716:	c4 d2       	rcall	.+1416   	; 0xca0 <__fixsfsi>
     718:	7b 83       	std	Y+3, r23	; 0x03
     71a:	6a 83       	std	Y+2, r22	; 0x02
	XYZ[2]=(int16_t)((data_struct.gyro_z)/8.192);
     71c:	f8 01       	movw	r30, r16
     71e:	64 85       	ldd	r22, Z+12	; 0x0c
     720:	75 85       	ldd	r23, Z+13	; 0x0d
     722:	07 2e       	mov	r0, r23
     724:	00 0c       	add	r0, r0
     726:	88 0b       	sbc	r24, r24
     728:	99 0b       	sbc	r25, r25
     72a:	ed d2       	rcall	.+1498   	; 0xd06 <__floatsisf>
     72c:	2f e6       	ldi	r18, 0x6F	; 111
     72e:	32 e1       	ldi	r19, 0x12	; 18
     730:	43 e0       	ldi	r20, 0x03	; 3
     732:	51 e4       	ldi	r21, 0x41	; 65
     734:	4d d2       	rcall	.+1178   	; 0xbd0 <__divsf3>
     736:	b4 d2       	rcall	.+1384   	; 0xca0 <__fixsfsi>
     738:	7d 83       	std	Y+5, r23	; 0x05
     73a:	6c 83       	std	Y+4, r22	; 0x04
}
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	08 95       	ret

00000746 <s_getPitchRoll>:

static void s_getPitchRoll(int16_t *pitchRoll)
{	
     746:	4f 92       	push	r4
     748:	5f 92       	push	r5
     74a:	6f 92       	push	r6
     74c:	7f 92       	push	r7
     74e:	8f 92       	push	r8
     750:	9f 92       	push	r9
     752:	af 92       	push	r10
     754:	bf 92       	push	r11
     756:	cf 92       	push	r12
     758:	df 92       	push	r13
     75a:	ef 92       	push	r14
     75c:	ff 92       	push	r15
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	8c 01       	movw	r16, r24
	pitchRoll[0] = (int16_t)((atan2(((data_struct.accel_y)/8192.0),((data_struct.accel_z)/8192.0)))*PI_DIV_180);
     768:	c9 e7       	ldi	r28, 0x79	; 121
     76a:	d2 e0       	ldi	r29, 0x02	; 2
     76c:	6c 81       	ldd	r22, Y+4	; 0x04
     76e:	7d 81       	ldd	r23, Y+5	; 0x05
     770:	07 2e       	mov	r0, r23
     772:	00 0c       	add	r0, r0
     774:	88 0b       	sbc	r24, r24
     776:	99 0b       	sbc	r25, r25
     778:	c6 d2       	rcall	.+1420   	; 0xd06 <__floatsisf>
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	40 e0       	ldi	r20, 0x00	; 0
     780:	59 e3       	ldi	r21, 0x39	; 57
     782:	79 d3       	rcall	.+1778   	; 0xe76 <__mulsf3>
     784:	6b 01       	movw	r12, r22
     786:	7c 01       	movw	r14, r24
     788:	6a 81       	ldd	r22, Y+2	; 0x02
     78a:	7b 81       	ldd	r23, Y+3	; 0x03
     78c:	07 2e       	mov	r0, r23
     78e:	00 0c       	add	r0, r0
     790:	88 0b       	sbc	r24, r24
     792:	99 0b       	sbc	r25, r25
     794:	b8 d2       	rcall	.+1392   	; 0xd06 <__floatsisf>
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	59 e3       	ldi	r21, 0x39	; 57
     79e:	6b d3       	rcall	.+1750   	; 0xe76 <__mulsf3>
     7a0:	4b 01       	movw	r8, r22
     7a2:	5c 01       	movw	r10, r24
     7a4:	a7 01       	movw	r20, r14
     7a6:	96 01       	movw	r18, r12
     7a8:	c0 d1       	rcall	.+896    	; 0xb2a <atan2>
     7aa:	21 ee       	ldi	r18, 0xE1	; 225
     7ac:	3e e2       	ldi	r19, 0x2E	; 46
     7ae:	45 e6       	ldi	r20, 0x65	; 101
     7b0:	52 e4       	ldi	r21, 0x42	; 66
     7b2:	61 d3       	rcall	.+1730   	; 0xe76 <__mulsf3>
     7b4:	75 d2       	rcall	.+1258   	; 0xca0 <__fixsfsi>
     7b6:	f8 01       	movw	r30, r16
     7b8:	71 83       	std	Z+1, r23	; 0x01
     7ba:	60 83       	st	Z, r22
	pitchRoll[1] = (int16_t)((atan2((-1.0 * (data_struct.accel_x)/8192.0) , sqrt(((data_struct.accel_y)/8192.0) * ((data_struct.accel_y)/8192.0) + ((data_struct.accel_z)/8192.0) * ((data_struct.accel_z)/8192.0))))*PI_DIV_180);
     7bc:	a5 01       	movw	r20, r10
     7be:	94 01       	movw	r18, r8
     7c0:	c5 01       	movw	r24, r10
     7c2:	b4 01       	movw	r22, r8
     7c4:	58 d3       	rcall	.+1712   	; 0xe76 <__mulsf3>
     7c6:	4b 01       	movw	r8, r22
     7c8:	5c 01       	movw	r10, r24
     7ca:	a7 01       	movw	r20, r14
     7cc:	96 01       	movw	r18, r12
     7ce:	c7 01       	movw	r24, r14
     7d0:	b6 01       	movw	r22, r12
     7d2:	51 d3       	rcall	.+1698   	; 0xe76 <__mulsf3>
     7d4:	9b 01       	movw	r18, r22
     7d6:	ac 01       	movw	r20, r24
     7d8:	c5 01       	movw	r24, r10
     7da:	b4 01       	movw	r22, r8
     7dc:	33 d1       	rcall	.+614    	; 0xa44 <__addsf3>
     7de:	b2 d3       	rcall	.+1892   	; 0xf44 <sqrt>
     7e0:	6b 01       	movw	r12, r22
     7e2:	7c 01       	movw	r14, r24
     7e4:	68 81       	ld	r22, Y
     7e6:	79 81       	ldd	r23, Y+1	; 0x01
     7e8:	07 2e       	mov	r0, r23
     7ea:	00 0c       	add	r0, r0
     7ec:	88 0b       	sbc	r24, r24
     7ee:	99 0b       	sbc	r25, r25
     7f0:	8a d2       	rcall	.+1300   	; 0xd06 <__floatsisf>
     7f2:	90 58       	subi	r25, 0x80	; 128
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	59 e3       	ldi	r21, 0x39	; 57
     7fc:	3c d3       	rcall	.+1656   	; 0xe76 <__mulsf3>
     7fe:	a7 01       	movw	r20, r14
     800:	96 01       	movw	r18, r12
     802:	93 d1       	rcall	.+806    	; 0xb2a <atan2>
     804:	21 ee       	ldi	r18, 0xE1	; 225
     806:	3e e2       	ldi	r19, 0x2E	; 46
     808:	45 e6       	ldi	r20, 0x65	; 101
     80a:	52 e4       	ldi	r21, 0x42	; 66
     80c:	34 d3       	rcall	.+1640   	; 0xe76 <__mulsf3>
     80e:	48 d2       	rcall	.+1168   	; 0xca0 <__fixsfsi>
     810:	f8 01       	movw	r30, r16
     812:	73 83       	std	Z+3, r23	; 0x03
     814:	62 83       	std	Z+2, r22	; 0x02
     816:	df 91       	pop	r29
  //pitchRoll[0] = (int16_t)(((atan(((data_struct.accel_y)/16384.0) / sqrt(pow(((data_struct.accel_x)/16384.0), 2) + pow(((data_struct.accel_z)/16384.0), 2))) * PI_DIV_180) - 0.58)*1000);
  //pitchRoll[1] = (int16_t)(((atan((-1.0*(data_struct.accel_x)/16384.0) / sqrt(pow(((data_struct.accel_y)/16384.0), 2) + pow(((data_struct.accel_z)/16384.0), 2))) * PI_DIV_180) + 0.58)*1000);
}
     818:	cf 91       	pop	r28
     81a:	1f 91       	pop	r17
     81c:	0f 91       	pop	r16
     81e:	ff 90       	pop	r15
     820:	ef 90       	pop	r14
     822:	df 90       	pop	r13
     824:	cf 90       	pop	r12
     826:	bf 90       	pop	r11
     828:	af 90       	pop	r10
     82a:	9f 90       	pop	r9
     82c:	8f 90       	pop	r8
     82e:	7f 90       	pop	r7
     830:	6f 90       	pop	r6
     832:	5f 90       	pop	r5
     834:	4f 90       	pop	r4
     836:	08 95       	ret

00000838 <get_GA_interface>:
     838:	9c 01       	movw	r18, r24
static void		s_reset(void);

GA_t* get_GA_interface(i2c_t* i2c_interface)
{
	
	if (!initialized)
     83a:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <initialized>
     83e:	91 11       	cpse	r25, r1
     840:	41 c0       	rjmp	.+130    	; 0x8c4 <get_GA_interface+0x8c>
	{
		i2c=i2c_interface;
     842:	30 93 88 02 	sts	0x0288, r19	; 0x800288 <i2c+0x1>
     846:	20 93 87 02 	sts	0x0287, r18	; 0x800287 <i2c>
		
			GA_interface.start					=	s_start;
     84a:	eb e5       	ldi	r30, 0x5B	; 91
     84c:	f2 e0       	ldi	r31, 0x02	; 2
     84e:	81 e3       	ldi	r24, 0x31	; 49
     850:	92 e0       	ldi	r25, 0x02	; 2
     852:	91 83       	std	Z+1, r25	; 0x01
     854:	80 83       	st	Z, r24
			GA_interface.stop					=	s_stop;
     856:	8b e3       	ldi	r24, 0x3B	; 59
     858:	92 e0       	ldi	r25, 0x02	; 2
     85a:	93 83       	std	Z+3, r25	; 0x03
     85c:	82 83       	std	Z+2, r24	; 0x02
			GA_interface.enterWrite				=	s_enterWrite;
     85e:	84 e4       	ldi	r24, 0x44	; 68
     860:	92 e0       	ldi	r25, 0x02	; 2
     862:	95 83       	std	Z+5, r25	; 0x05
     864:	84 83       	std	Z+4, r24	; 0x04
			GA_interface.enterRead				=	s_enterRead;
     866:	8f e4       	ldi	r24, 0x4F	; 79
     868:	92 e0       	ldi	r25, 0x02	; 2
     86a:	97 83       	std	Z+7, r25	; 0x07
     86c:	86 83       	std	Z+6, r24	; 0x06
			GA_interface.selectRegister			=	s_selectRegister;
     86e:	8a e5       	ldi	r24, 0x5A	; 90
     870:	92 e0       	ldi	r25, 0x02	; 2
     872:	91 87       	std	Z+9, r25	; 0x09
     874:	80 87       	std	Z+8, r24	; 0x08
			GA_interface.write					=	s_write;
     876:	85 e6       	ldi	r24, 0x65	; 101
     878:	92 e0       	ldi	r25, 0x02	; 2
     87a:	93 87       	std	Z+11, r25	; 0x0b
     87c:	82 87       	std	Z+10, r24	; 0x0a
			GA_interface.read					=	s_read;
     87e:	84 e9       	ldi	r24, 0x94	; 148
     880:	92 e0       	ldi	r25, 0x02	; 2
     882:	95 87       	std	Z+13, r25	; 0x0d
     884:	84 87       	std	Z+12, r24	; 0x0c
			GA_interface.getPitchRoll 			=	s_getPitchRoll;
     886:	83 ea       	ldi	r24, 0xA3	; 163
     888:	93 e0       	ldi	r25, 0x03	; 3
     88a:	97 87       	std	Z+15, r25	; 0x0f
     88c:	86 87       	std	Z+14, r24	; 0x0e
			GA_interface.getAccelXYZ			=	s_getAccelXYZ;
     88e:	8b e2       	ldi	r24, 0x2B	; 43
     890:	93 e0       	ldi	r25, 0x03	; 3
     892:	91 8b       	std	Z+17, r25	; 0x11
     894:	80 8b       	std	Z+16, r24	; 0x10
			GA_interface.getGyroXYZ				=	s_getGyroXYZ;
     896:	87 e6       	ldi	r24, 0x67	; 103
     898:	93 e0       	ldi	r25, 0x03	; 3
     89a:	93 8b       	std	Z+19, r25	; 0x13
     89c:	82 8b       	std	Z+18, r24	; 0x12
			GA_interface.gatherData				=	s_gatherData;
     89e:	84 e1       	ldi	r24, 0x14	; 20
     8a0:	93 e0       	ldi	r25, 0x03	; 3
     8a2:	95 8b       	std	Z+21, r25	; 0x15
     8a4:	84 8b       	std	Z+20, r24	; 0x14
			GA_interface.gyroSettings			=	s_gyroSettings;
     8a6:	86 e8       	ldi	r24, 0x86	; 134
     8a8:	92 e0       	ldi	r25, 0x02	; 2
     8aa:	97 8b       	std	Z+23, r25	; 0x17
     8ac:	86 8b       	std	Z+22, r24	; 0x16
			GA_interface.accerelSettings		=	s_accerelSettings;
     8ae:	86 e7       	ldi	r24, 0x76	; 118
     8b0:	92 e0       	ldi	r25, 0x02	; 2
     8b2:	91 8f       	std	Z+25, r25	; 0x19
     8b4:	80 8f       	std	Z+24, r24	; 0x18
			GA_interface.reset					=	s_reset;
     8b6:	8e e6       	ldi	r24, 0x6E	; 110
     8b8:	92 e0       	ldi	r25, 0x02	; 2
     8ba:	93 8f       	std	Z+27, r25	; 0x1b
     8bc:	82 8f       	std	Z+26, r24	; 0x1a
			initialized=true;		
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <initialized>
	}
	return &GA_interface; 
}
     8c4:	8b e5       	ldi	r24, 0x5B	; 91
     8c6:	92 e0       	ldi	r25, 0x02	; 2
     8c8:	08 95       	ret

000008ca <main>:
}
**/
#define UARTADDR UART0

int main(void)
{
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	2a 97       	sbiw	r28, 0x0a	; 10
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	f8 94       	cli
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8de:	2f ef       	ldi	r18, 0xFF	; 255
     8e0:	83 ed       	ldi	r24, 0xD3	; 211
     8e2:	90 e3       	ldi	r25, 0x30	; 48
     8e4:	21 50       	subi	r18, 0x01	; 1
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	90 40       	sbci	r25, 0x00	; 0
     8ea:	e1 f7       	brne	.-8      	; 0x8e4 <main+0x1a>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <main+0x24>
     8ee:	00 00       	nop
     8f0:	2f ef       	ldi	r18, 0xFF	; 255
     8f2:	83 ed       	ldi	r24, 0xD3	; 211
     8f4:	90 e3       	ldi	r25, 0x30	; 48
     8f6:	21 50       	subi	r18, 0x01	; 1
     8f8:	80 40       	sbci	r24, 0x00	; 0
     8fa:	90 40       	sbci	r25, 0x00	; 0
     8fc:	e1 f7       	brne	.-8      	; 0x8f6 <main+0x2c>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <main+0x36>
     900:	00 00       	nop
	{
		_delay_ms(1000);
	}
	
	
	InitUART(UARTADDR, 9600, 8,0);
     902:	00 e0       	ldi	r16, 0x00	; 0
     904:	28 e0       	ldi	r18, 0x08	; 8
     906:	40 e8       	ldi	r20, 0x80	; 128
     908:	55 e2       	ldi	r21, 0x25	; 37
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	80 ec       	ldi	r24, 0xC0	; 192
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	17 dd       	rcall	.-1490   	; 0x342 <InitUART>
	SendString(UARTADDR,"\n \n \n");
     914:	61 e0       	ldi	r22, 0x01	; 1
     916:	72 e0       	ldi	r23, 0x02	; 2
     918:	80 ec       	ldi	r24, 0xC0	; 192
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	6b dd       	rcall	.-1322   	; 0x3f4 <SendString>
	SendInteger(UARTADDR,32000);
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	7d e7       	ldi	r23, 0x7D	; 125
     922:	80 ec       	ldi	r24, 0xC0	; 192
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	7a dd       	rcall	.-1292   	; 0x41c <SendInteger>
	SendString(UARTADDR,"\n");
     928:	65 e0       	ldi	r22, 0x05	; 5
     92a:	72 e0       	ldi	r23, 0x02	; 2
     92c:	80 ec       	ldi	r24, 0xC0	; 192
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	61 dd       	rcall	.-1342   	; 0x3f4 <SendString>
	SendString(UARTADDR,"creating objects \n");
     932:	67 e0       	ldi	r22, 0x07	; 7
     934:	72 e0       	ldi	r23, 0x02	; 2
     936:	80 ec       	ldi	r24, 0xC0	; 192
     938:	90 e0       	ldi	r25, 0x00	; 0
	
	i2c_obj=get_i2c_interface();
     93a:	5c dd       	rcall	.-1352   	; 0x3f4 <SendString>
     93c:	ce dc       	rcall	.-1636   	; 0x2da <get_i2c_interface>
     93e:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <i2c_obj+0x1>
     942:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <i2c_obj>
	
	GA_obj=get_GA_interface(i2c_obj);
     946:	78 df       	rcall	.-272    	; 0x838 <get_GA_interface>
     948:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <GA_obj+0x1>
     94c:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <GA_obj>
	
	SendString(UARTADDR,"init i2c: ");
     950:	6a e1       	ldi	r22, 0x1A	; 26
     952:	72 e0       	ldi	r23, 0x02	; 2
     954:	80 ec       	ldi	r24, 0xC0	; 192
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	4d dd       	rcall	.-1382   	; 0x3f4 <SendString>
	SendInteger(UARTADDR,i2c_obj->init(10000,false));
     95a:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <i2c_obj>
     95e:	f0 91 8c 02 	lds	r31, 0x028C	; 0x80028c <i2c_obj+0x1>
     962:	01 90       	ld	r0, Z+
     964:	f0 81       	ld	r31, Z
     966:	e0 2d       	mov	r30, r0
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	60 e1       	ldi	r22, 0x10	; 16
     96c:	77 e2       	ldi	r23, 0x27	; 39
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	19 95       	eicall
     974:	bc 01       	movw	r22, r24
     976:	80 ec       	ldi	r24, 0xC0	; 192
     978:	90 e0       	ldi	r25, 0x00	; 0
	SendString(UARTADDR,"\n");	
     97a:	50 dd       	rcall	.-1376   	; 0x41c <SendInteger>
     97c:	65 e0       	ldi	r22, 0x05	; 5
     97e:	72 e0       	ldi	r23, 0x02	; 2
     980:	80 ec       	ldi	r24, 0xC0	; 192
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	37 dd       	rcall	.-1426   	; 0x3f4 <SendString>
	
//Set to +- 4G
	GA_obj->reset();
     986:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <GA_obj>
     98a:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <GA_obj+0x1>
     98e:	02 8c       	ldd	r0, Z+26	; 0x1a
     990:	f3 8d       	ldd	r31, Z+27	; 0x1b
     992:	e0 2d       	mov	r30, r0
     994:	19 95       	eicall
	GA_obj->accerelSettings(0);
     996:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <GA_obj>
     99a:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <GA_obj+0x1>
     99e:	00 8c       	ldd	r0, Z+24	; 0x18
     9a0:	f1 8d       	ldd	r31, Z+25	; 0x19
     9a2:	e0 2d       	mov	r30, r0
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	19 95       	eicall
	GA_obj->gyroSettings(0);
     9a8:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <GA_obj>
     9ac:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <GA_obj+0x1>
     9b0:	06 88       	ldd	r0, Z+22	; 0x16
     9b2:	f7 89       	ldd	r31, Z+23	; 0x17
     9b4:	e0 2d       	mov	r30, r0
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	19 95       	eicall
     9ba:	2f ef       	ldi	r18, 0xFF	; 255
     9bc:	84 e3       	ldi	r24, 0x34	; 52
     9be:	9c e0       	ldi	r25, 0x0C	; 12
     9c0:	21 50       	subi	r18, 0x01	; 1
     9c2:	80 40       	sbci	r24, 0x00	; 0
     9c4:	90 40       	sbci	r25, 0x00	; 0
     9c6:	e1 f7       	brne	.-8      	; 0x9c0 <main+0xf6>
     9c8:	00 c0       	rjmp	.+0      	; 0x9ca <main+0x100>
     9ca:	00 00       	nop
	int16_t dataPR[2];
    while (1) 
    {
	_delay_ms(250);
	
	GA_obj->gatherData();
     9cc:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <GA_obj>
     9d0:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <GA_obj+0x1>
     9d4:	04 88       	ldd	r0, Z+20	; 0x14
     9d6:	f5 89       	ldd	r31, Z+21	; 0x15
     9d8:	e0 2d       	mov	r30, r0
     9da:	19 95       	eicall
   
	//char outstring[10];
	GA_obj->getGyroXYZ(data);
     9dc:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <GA_obj>
     9e0:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <GA_obj+0x1>
     9e4:	02 88       	ldd	r0, Z+18	; 0x12
     9e6:	f3 89       	ldd	r31, Z+19	; 0x13
     9e8:	e0 2d       	mov	r30, r0
     9ea:	ce 01       	movw	r24, r28
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	19 95       	eicall
	GA_obj->getPitchRoll(dataPR);
     9f0:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <GA_obj>
     9f4:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <GA_obj+0x1>
     9f8:	06 84       	ldd	r0, Z+14	; 0x0e
     9fa:	f7 85       	ldd	r31, Z+15	; 0x0f
     9fc:	e0 2d       	mov	r30, r0
     9fe:	ce 01       	movw	r24, r28
     a00:	07 96       	adiw	r24, 0x07	; 7
SendString(UARTADDR," Y: ");
SendInteger(UARTADDR, data[1]);
SendString(UARTADDR," Z: ");
SendInteger(UARTADDR, data[2]);
*/
SendString(UARTADDR,"\n");
     a02:	19 95       	eicall
     a04:	65 e0       	ldi	r22, 0x05	; 5
     a06:	72 e0       	ldi	r23, 0x02	; 2
     a08:	80 ec       	ldi	r24, 0xC0	; 192
     a0a:	90 e0       	ldi	r25, 0x00	; 0
SendString(UARTADDR,"Pitch Roll: X: ");
     a0c:	f3 dc       	rcall	.-1562   	; 0x3f4 <SendString>
     a0e:	65 e2       	ldi	r22, 0x25	; 37
     a10:	72 e0       	ldi	r23, 0x02	; 2
     a12:	80 ec       	ldi	r24, 0xC0	; 192
     a14:	90 e0       	ldi	r25, 0x00	; 0
SendInteger(UARTADDR, dataPR[0]);
     a16:	ee dc       	rcall	.-1572   	; 0x3f4 <SendString>
     a18:	6f 81       	ldd	r22, Y+7	; 0x07
     a1a:	78 85       	ldd	r23, Y+8	; 0x08
     a1c:	80 ec       	ldi	r24, 0xC0	; 192
     a1e:	90 e0       	ldi	r25, 0x00	; 0
SendString(UARTADDR,"deg Y: ");
     a20:	fd dc       	rcall	.-1542   	; 0x41c <SendInteger>
     a22:	65 e3       	ldi	r22, 0x35	; 53
     a24:	72 e0       	ldi	r23, 0x02	; 2
     a26:	80 ec       	ldi	r24, 0xC0	; 192
     a28:	90 e0       	ldi	r25, 0x00	; 0
SendInteger(UARTADDR, dataPR[1]);
     a2a:	e4 dc       	rcall	.-1592   	; 0x3f4 <SendString>
     a2c:	69 85       	ldd	r22, Y+9	; 0x09
     a2e:	7a 85       	ldd	r23, Y+10	; 0x0a
     a30:	80 ec       	ldi	r24, 0xC0	; 192
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	f3 dc       	rcall	.-1562   	; 0x41c <SendInteger>
SendString(UARTADDR,"deg\n");
     a36:	6d e3       	ldi	r22, 0x3D	; 61
     a38:	72 e0       	ldi	r23, 0x02	; 2
     a3a:	80 ec       	ldi	r24, 0xC0	; 192
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	da dc       	rcall	.-1612   	; 0x3f4 <SendString>
     a40:	bc cf       	rjmp	.-136    	; 0x9ba <main+0xf0>

00000a42 <__subsf3>:
     a42:	50 58       	subi	r21, 0x80	; 128

00000a44 <__addsf3>:
     a44:	bb 27       	eor	r27, r27
     a46:	aa 27       	eor	r26, r26
     a48:	0e d0       	rcall	.+28     	; 0xa66 <__addsf3x>
     a4a:	d4 c1       	rjmp	.+936    	; 0xdf4 <__fp_round>
     a4c:	c5 d1       	rcall	.+906    	; 0xdd8 <__fp_pscA>
     a4e:	30 f0       	brcs	.+12     	; 0xa5c <__addsf3+0x18>
     a50:	ca d1       	rcall	.+916    	; 0xde6 <__fp_pscB>
     a52:	20 f0       	brcs	.+8      	; 0xa5c <__addsf3+0x18>
     a54:	31 f4       	brne	.+12     	; 0xa62 <__addsf3+0x1e>
     a56:	9f 3f       	cpi	r25, 0xFF	; 255
     a58:	11 f4       	brne	.+4      	; 0xa5e <__addsf3+0x1a>
     a5a:	1e f4       	brtc	.+6      	; 0xa62 <__addsf3+0x1e>
     a5c:	95 c1       	rjmp	.+810    	; 0xd88 <__fp_nan>
     a5e:	0e f4       	brtc	.+2      	; 0xa62 <__addsf3+0x1e>
     a60:	e0 95       	com	r30
     a62:	e7 fb       	bst	r30, 7
     a64:	8b c1       	rjmp	.+790    	; 0xd7c <__fp_inf>

00000a66 <__addsf3x>:
     a66:	e9 2f       	mov	r30, r25
     a68:	d6 d1       	rcall	.+940    	; 0xe16 <__fp_split3>
     a6a:	80 f3       	brcs	.-32     	; 0xa4c <__addsf3+0x8>
     a6c:	ba 17       	cp	r27, r26
     a6e:	62 07       	cpc	r22, r18
     a70:	73 07       	cpc	r23, r19
     a72:	84 07       	cpc	r24, r20
     a74:	95 07       	cpc	r25, r21
     a76:	18 f0       	brcs	.+6      	; 0xa7e <__addsf3x+0x18>
     a78:	71 f4       	brne	.+28     	; 0xa96 <__addsf3x+0x30>
     a7a:	9e f5       	brtc	.+102    	; 0xae2 <__addsf3x+0x7c>
     a7c:	ee c1       	rjmp	.+988    	; 0xe5a <__fp_zero>
     a7e:	0e f4       	brtc	.+2      	; 0xa82 <__addsf3x+0x1c>
     a80:	e0 95       	com	r30
     a82:	0b 2e       	mov	r0, r27
     a84:	ba 2f       	mov	r27, r26
     a86:	a0 2d       	mov	r26, r0
     a88:	0b 01       	movw	r0, r22
     a8a:	b9 01       	movw	r22, r18
     a8c:	90 01       	movw	r18, r0
     a8e:	0c 01       	movw	r0, r24
     a90:	ca 01       	movw	r24, r20
     a92:	a0 01       	movw	r20, r0
     a94:	11 24       	eor	r1, r1
     a96:	ff 27       	eor	r31, r31
     a98:	59 1b       	sub	r21, r25
     a9a:	99 f0       	breq	.+38     	; 0xac2 <__addsf3x+0x5c>
     a9c:	59 3f       	cpi	r21, 0xF9	; 249
     a9e:	50 f4       	brcc	.+20     	; 0xab4 <__addsf3x+0x4e>
     aa0:	50 3e       	cpi	r21, 0xE0	; 224
     aa2:	68 f1       	brcs	.+90     	; 0xafe <__addsf3x+0x98>
     aa4:	1a 16       	cp	r1, r26
     aa6:	f0 40       	sbci	r31, 0x00	; 0
     aa8:	a2 2f       	mov	r26, r18
     aaa:	23 2f       	mov	r18, r19
     aac:	34 2f       	mov	r19, r20
     aae:	44 27       	eor	r20, r20
     ab0:	58 5f       	subi	r21, 0xF8	; 248
     ab2:	f3 cf       	rjmp	.-26     	; 0xa9a <__addsf3x+0x34>
     ab4:	46 95       	lsr	r20
     ab6:	37 95       	ror	r19
     ab8:	27 95       	ror	r18
     aba:	a7 95       	ror	r26
     abc:	f0 40       	sbci	r31, 0x00	; 0
     abe:	53 95       	inc	r21
     ac0:	c9 f7       	brne	.-14     	; 0xab4 <__addsf3x+0x4e>
     ac2:	7e f4       	brtc	.+30     	; 0xae2 <__addsf3x+0x7c>
     ac4:	1f 16       	cp	r1, r31
     ac6:	ba 0b       	sbc	r27, r26
     ac8:	62 0b       	sbc	r22, r18
     aca:	73 0b       	sbc	r23, r19
     acc:	84 0b       	sbc	r24, r20
     ace:	ba f0       	brmi	.+46     	; 0xafe <__addsf3x+0x98>
     ad0:	91 50       	subi	r25, 0x01	; 1
     ad2:	a1 f0       	breq	.+40     	; 0xafc <__addsf3x+0x96>
     ad4:	ff 0f       	add	r31, r31
     ad6:	bb 1f       	adc	r27, r27
     ad8:	66 1f       	adc	r22, r22
     ada:	77 1f       	adc	r23, r23
     adc:	88 1f       	adc	r24, r24
     ade:	c2 f7       	brpl	.-16     	; 0xad0 <__addsf3x+0x6a>
     ae0:	0e c0       	rjmp	.+28     	; 0xafe <__addsf3x+0x98>
     ae2:	ba 0f       	add	r27, r26
     ae4:	62 1f       	adc	r22, r18
     ae6:	73 1f       	adc	r23, r19
     ae8:	84 1f       	adc	r24, r20
     aea:	48 f4       	brcc	.+18     	; 0xafe <__addsf3x+0x98>
     aec:	87 95       	ror	r24
     aee:	77 95       	ror	r23
     af0:	67 95       	ror	r22
     af2:	b7 95       	ror	r27
     af4:	f7 95       	ror	r31
     af6:	9e 3f       	cpi	r25, 0xFE	; 254
     af8:	08 f0       	brcs	.+2      	; 0xafc <__addsf3x+0x96>
     afa:	b3 cf       	rjmp	.-154    	; 0xa62 <__addsf3+0x1e>
     afc:	93 95       	inc	r25
     afe:	88 0f       	add	r24, r24
     b00:	08 f0       	brcs	.+2      	; 0xb04 <__addsf3x+0x9e>
     b02:	99 27       	eor	r25, r25
     b04:	ee 0f       	add	r30, r30
     b06:	97 95       	ror	r25
     b08:	87 95       	ror	r24
     b0a:	08 95       	ret
     b0c:	65 d1       	rcall	.+714    	; 0xdd8 <__fp_pscA>
     b0e:	58 f0       	brcs	.+22     	; 0xb26 <__addsf3x+0xc0>
     b10:	80 e8       	ldi	r24, 0x80	; 128
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	09 f4       	brne	.+2      	; 0xb18 <__addsf3x+0xb2>
     b16:	9e ef       	ldi	r25, 0xFE	; 254
     b18:	66 d1       	rcall	.+716    	; 0xde6 <__fp_pscB>
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <__addsf3x+0xc0>
     b1c:	40 e8       	ldi	r20, 0x80	; 128
     b1e:	51 e0       	ldi	r21, 0x01	; 1
     b20:	59 f4       	brne	.+22     	; 0xb38 <atan2+0xe>
     b22:	5e ef       	ldi	r21, 0xFE	; 254
     b24:	09 c0       	rjmp	.+18     	; 0xb38 <atan2+0xe>
     b26:	30 c1       	rjmp	.+608    	; 0xd88 <__fp_nan>
     b28:	98 c1       	rjmp	.+816    	; 0xe5a <__fp_zero>

00000b2a <atan2>:
     b2a:	e9 2f       	mov	r30, r25
     b2c:	e0 78       	andi	r30, 0x80	; 128
     b2e:	73 d1       	rcall	.+742    	; 0xe16 <__fp_split3>
     b30:	68 f3       	brcs	.-38     	; 0xb0c <__addsf3x+0xa6>
     b32:	09 2e       	mov	r0, r25
     b34:	05 2a       	or	r0, r21
     b36:	c1 f3       	breq	.-16     	; 0xb28 <__addsf3x+0xc2>
     b38:	26 17       	cp	r18, r22
     b3a:	37 07       	cpc	r19, r23
     b3c:	48 07       	cpc	r20, r24
     b3e:	59 07       	cpc	r21, r25
     b40:	38 f0       	brcs	.+14     	; 0xb50 <atan2+0x26>
     b42:	0e 2e       	mov	r0, r30
     b44:	07 f8       	bld	r0, 7
     b46:	e0 25       	eor	r30, r0
     b48:	69 f0       	breq	.+26     	; 0xb64 <atan2+0x3a>
     b4a:	e0 25       	eor	r30, r0
     b4c:	e0 64       	ori	r30, 0x40	; 64
     b4e:	0a c0       	rjmp	.+20     	; 0xb64 <atan2+0x3a>
     b50:	ef 63       	ori	r30, 0x3F	; 63
     b52:	07 f8       	bld	r0, 7
     b54:	00 94       	com	r0
     b56:	07 fa       	bst	r0, 7
     b58:	db 01       	movw	r26, r22
     b5a:	b9 01       	movw	r22, r18
     b5c:	9d 01       	movw	r18, r26
     b5e:	dc 01       	movw	r26, r24
     b60:	ca 01       	movw	r24, r20
     b62:	ad 01       	movw	r20, r26
     b64:	ef 93       	push	r30
     b66:	43 d0       	rcall	.+134    	; 0xbee <__divsf3_pse>
     b68:	45 d1       	rcall	.+650    	; 0xdf4 <__fp_round>
     b6a:	0a d0       	rcall	.+20     	; 0xb80 <atan>
     b6c:	5f 91       	pop	r21
     b6e:	55 23       	and	r21, r21
     b70:	31 f0       	breq	.+12     	; 0xb7e <atan2+0x54>
     b72:	2b ed       	ldi	r18, 0xDB	; 219
     b74:	3f e0       	ldi	r19, 0x0F	; 15
     b76:	49 e4       	ldi	r20, 0x49	; 73
     b78:	50 fd       	sbrc	r21, 0
     b7a:	49 ec       	ldi	r20, 0xC9	; 201
     b7c:	63 cf       	rjmp	.-314    	; 0xa44 <__addsf3>
     b7e:	08 95       	ret

00000b80 <atan>:
     b80:	df 93       	push	r29
     b82:	dd 27       	eor	r29, r29
     b84:	b9 2f       	mov	r27, r25
     b86:	bf 77       	andi	r27, 0x7F	; 127
     b88:	40 e8       	ldi	r20, 0x80	; 128
     b8a:	5f e3       	ldi	r21, 0x3F	; 63
     b8c:	16 16       	cp	r1, r22
     b8e:	17 06       	cpc	r1, r23
     b90:	48 07       	cpc	r20, r24
     b92:	5b 07       	cpc	r21, r27
     b94:	10 f4       	brcc	.+4      	; 0xb9a <atan+0x1a>
     b96:	d9 2f       	mov	r29, r25
     b98:	67 d1       	rcall	.+718    	; 0xe68 <inverse>
     b9a:	9f 93       	push	r25
     b9c:	8f 93       	push	r24
     b9e:	7f 93       	push	r23
     ba0:	6f 93       	push	r22
     ba2:	0e d2       	rcall	.+1052   	; 0xfc0 <square>
     ba4:	e0 e0       	ldi	r30, 0x00	; 0
     ba6:	f1 e0       	ldi	r31, 0x01	; 1
     ba8:	f2 d0       	rcall	.+484    	; 0xd8e <__fp_powser>
     baa:	24 d1       	rcall	.+584    	; 0xdf4 <__fp_round>
     bac:	2f 91       	pop	r18
     bae:	3f 91       	pop	r19
     bb0:	4f 91       	pop	r20
     bb2:	5f 91       	pop	r21
     bb4:	6c d1       	rcall	.+728    	; 0xe8e <__mulsf3x>
     bb6:	dd 23       	and	r29, r29
     bb8:	49 f0       	breq	.+18     	; 0xbcc <atan+0x4c>
     bba:	90 58       	subi	r25, 0x80	; 128
     bbc:	a2 ea       	ldi	r26, 0xA2	; 162
     bbe:	2a ed       	ldi	r18, 0xDA	; 218
     bc0:	3f e0       	ldi	r19, 0x0F	; 15
     bc2:	49 ec       	ldi	r20, 0xC9	; 201
     bc4:	5f e3       	ldi	r21, 0x3F	; 63
     bc6:	d0 78       	andi	r29, 0x80	; 128
     bc8:	5d 27       	eor	r21, r29
     bca:	4d df       	rcall	.-358    	; 0xa66 <__addsf3x>
     bcc:	df 91       	pop	r29
     bce:	12 c1       	rjmp	.+548    	; 0xdf4 <__fp_round>

00000bd0 <__divsf3>:
     bd0:	0c d0       	rcall	.+24     	; 0xbea <__divsf3x>
     bd2:	10 c1       	rjmp	.+544    	; 0xdf4 <__fp_round>
     bd4:	08 d1       	rcall	.+528    	; 0xde6 <__fp_pscB>
     bd6:	40 f0       	brcs	.+16     	; 0xbe8 <__divsf3+0x18>
     bd8:	ff d0       	rcall	.+510    	; 0xdd8 <__fp_pscA>
     bda:	30 f0       	brcs	.+12     	; 0xbe8 <__divsf3+0x18>
     bdc:	21 f4       	brne	.+8      	; 0xbe6 <__divsf3+0x16>
     bde:	5f 3f       	cpi	r21, 0xFF	; 255
     be0:	19 f0       	breq	.+6      	; 0xbe8 <__divsf3+0x18>
     be2:	cc c0       	rjmp	.+408    	; 0xd7c <__fp_inf>
     be4:	51 11       	cpse	r21, r1
     be6:	3a c1       	rjmp	.+628    	; 0xe5c <__fp_szero>
     be8:	cf c0       	rjmp	.+414    	; 0xd88 <__fp_nan>

00000bea <__divsf3x>:
     bea:	15 d1       	rcall	.+554    	; 0xe16 <__fp_split3>
     bec:	98 f3       	brcs	.-26     	; 0xbd4 <__divsf3+0x4>

00000bee <__divsf3_pse>:
     bee:	99 23       	and	r25, r25
     bf0:	c9 f3       	breq	.-14     	; 0xbe4 <__divsf3+0x14>
     bf2:	55 23       	and	r21, r21
     bf4:	b1 f3       	breq	.-20     	; 0xbe2 <__divsf3+0x12>
     bf6:	95 1b       	sub	r25, r21
     bf8:	55 0b       	sbc	r21, r21
     bfa:	bb 27       	eor	r27, r27
     bfc:	aa 27       	eor	r26, r26
     bfe:	62 17       	cp	r22, r18
     c00:	73 07       	cpc	r23, r19
     c02:	84 07       	cpc	r24, r20
     c04:	38 f0       	brcs	.+14     	; 0xc14 <__divsf3_pse+0x26>
     c06:	9f 5f       	subi	r25, 0xFF	; 255
     c08:	5f 4f       	sbci	r21, 0xFF	; 255
     c0a:	22 0f       	add	r18, r18
     c0c:	33 1f       	adc	r19, r19
     c0e:	44 1f       	adc	r20, r20
     c10:	aa 1f       	adc	r26, r26
     c12:	a9 f3       	breq	.-22     	; 0xbfe <__divsf3_pse+0x10>
     c14:	33 d0       	rcall	.+102    	; 0xc7c <__divsf3_pse+0x8e>
     c16:	0e 2e       	mov	r0, r30
     c18:	3a f0       	brmi	.+14     	; 0xc28 <__divsf3_pse+0x3a>
     c1a:	e0 e8       	ldi	r30, 0x80	; 128
     c1c:	30 d0       	rcall	.+96     	; 0xc7e <__divsf3_pse+0x90>
     c1e:	91 50       	subi	r25, 0x01	; 1
     c20:	50 40       	sbci	r21, 0x00	; 0
     c22:	e6 95       	lsr	r30
     c24:	00 1c       	adc	r0, r0
     c26:	ca f7       	brpl	.-14     	; 0xc1a <__divsf3_pse+0x2c>
     c28:	29 d0       	rcall	.+82     	; 0xc7c <__divsf3_pse+0x8e>
     c2a:	fe 2f       	mov	r31, r30
     c2c:	27 d0       	rcall	.+78     	; 0xc7c <__divsf3_pse+0x8e>
     c2e:	66 0f       	add	r22, r22
     c30:	77 1f       	adc	r23, r23
     c32:	88 1f       	adc	r24, r24
     c34:	bb 1f       	adc	r27, r27
     c36:	26 17       	cp	r18, r22
     c38:	37 07       	cpc	r19, r23
     c3a:	48 07       	cpc	r20, r24
     c3c:	ab 07       	cpc	r26, r27
     c3e:	b0 e8       	ldi	r27, 0x80	; 128
     c40:	09 f0       	breq	.+2      	; 0xc44 <__divsf3_pse+0x56>
     c42:	bb 0b       	sbc	r27, r27
     c44:	80 2d       	mov	r24, r0
     c46:	bf 01       	movw	r22, r30
     c48:	ff 27       	eor	r31, r31
     c4a:	93 58       	subi	r25, 0x83	; 131
     c4c:	5f 4f       	sbci	r21, 0xFF	; 255
     c4e:	2a f0       	brmi	.+10     	; 0xc5a <__divsf3_pse+0x6c>
     c50:	9e 3f       	cpi	r25, 0xFE	; 254
     c52:	51 05       	cpc	r21, r1
     c54:	68 f0       	brcs	.+26     	; 0xc70 <__divsf3_pse+0x82>
     c56:	92 c0       	rjmp	.+292    	; 0xd7c <__fp_inf>
     c58:	01 c1       	rjmp	.+514    	; 0xe5c <__fp_szero>
     c5a:	5f 3f       	cpi	r21, 0xFF	; 255
     c5c:	ec f3       	brlt	.-6      	; 0xc58 <__divsf3_pse+0x6a>
     c5e:	98 3e       	cpi	r25, 0xE8	; 232
     c60:	dc f3       	brlt	.-10     	; 0xc58 <__divsf3_pse+0x6a>
     c62:	86 95       	lsr	r24
     c64:	77 95       	ror	r23
     c66:	67 95       	ror	r22
     c68:	b7 95       	ror	r27
     c6a:	f7 95       	ror	r31
     c6c:	9f 5f       	subi	r25, 0xFF	; 255
     c6e:	c9 f7       	brne	.-14     	; 0xc62 <__divsf3_pse+0x74>
     c70:	88 0f       	add	r24, r24
     c72:	91 1d       	adc	r25, r1
     c74:	96 95       	lsr	r25
     c76:	87 95       	ror	r24
     c78:	97 f9       	bld	r25, 7
     c7a:	08 95       	ret
     c7c:	e1 e0       	ldi	r30, 0x01	; 1
     c7e:	66 0f       	add	r22, r22
     c80:	77 1f       	adc	r23, r23
     c82:	88 1f       	adc	r24, r24
     c84:	bb 1f       	adc	r27, r27
     c86:	62 17       	cp	r22, r18
     c88:	73 07       	cpc	r23, r19
     c8a:	84 07       	cpc	r24, r20
     c8c:	ba 07       	cpc	r27, r26
     c8e:	20 f0       	brcs	.+8      	; 0xc98 <__divsf3_pse+0xaa>
     c90:	62 1b       	sub	r22, r18
     c92:	73 0b       	sbc	r23, r19
     c94:	84 0b       	sbc	r24, r20
     c96:	ba 0b       	sbc	r27, r26
     c98:	ee 1f       	adc	r30, r30
     c9a:	88 f7       	brcc	.-30     	; 0xc7e <__divsf3_pse+0x90>
     c9c:	e0 95       	com	r30
     c9e:	08 95       	ret

00000ca0 <__fixsfsi>:
     ca0:	04 d0       	rcall	.+8      	; 0xcaa <__fixunssfsi>
     ca2:	68 94       	set
     ca4:	b1 11       	cpse	r27, r1
     ca6:	da c0       	rjmp	.+436    	; 0xe5c <__fp_szero>
     ca8:	08 95       	ret

00000caa <__fixunssfsi>:
     caa:	bd d0       	rcall	.+378    	; 0xe26 <__fp_splitA>
     cac:	88 f0       	brcs	.+34     	; 0xcd0 <__fixunssfsi+0x26>
     cae:	9f 57       	subi	r25, 0x7F	; 127
     cb0:	90 f0       	brcs	.+36     	; 0xcd6 <__fixunssfsi+0x2c>
     cb2:	b9 2f       	mov	r27, r25
     cb4:	99 27       	eor	r25, r25
     cb6:	b7 51       	subi	r27, 0x17	; 23
     cb8:	a0 f0       	brcs	.+40     	; 0xce2 <__fixunssfsi+0x38>
     cba:	d1 f0       	breq	.+52     	; 0xcf0 <__fixunssfsi+0x46>
     cbc:	66 0f       	add	r22, r22
     cbe:	77 1f       	adc	r23, r23
     cc0:	88 1f       	adc	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	1a f0       	brmi	.+6      	; 0xccc <__fixunssfsi+0x22>
     cc6:	ba 95       	dec	r27
     cc8:	c9 f7       	brne	.-14     	; 0xcbc <__fixunssfsi+0x12>
     cca:	12 c0       	rjmp	.+36     	; 0xcf0 <__fixunssfsi+0x46>
     ccc:	b1 30       	cpi	r27, 0x01	; 1
     cce:	81 f0       	breq	.+32     	; 0xcf0 <__fixunssfsi+0x46>
     cd0:	c4 d0       	rcall	.+392    	; 0xe5a <__fp_zero>
     cd2:	b1 e0       	ldi	r27, 0x01	; 1
     cd4:	08 95       	ret
     cd6:	c1 c0       	rjmp	.+386    	; 0xe5a <__fp_zero>
     cd8:	67 2f       	mov	r22, r23
     cda:	78 2f       	mov	r23, r24
     cdc:	88 27       	eor	r24, r24
     cde:	b8 5f       	subi	r27, 0xF8	; 248
     ce0:	39 f0       	breq	.+14     	; 0xcf0 <__fixunssfsi+0x46>
     ce2:	b9 3f       	cpi	r27, 0xF9	; 249
     ce4:	cc f3       	brlt	.-14     	; 0xcd8 <__fixunssfsi+0x2e>
     ce6:	86 95       	lsr	r24
     ce8:	77 95       	ror	r23
     cea:	67 95       	ror	r22
     cec:	b3 95       	inc	r27
     cee:	d9 f7       	brne	.-10     	; 0xce6 <__fixunssfsi+0x3c>
     cf0:	3e f4       	brtc	.+14     	; 0xd00 <__fixunssfsi+0x56>
     cf2:	90 95       	com	r25
     cf4:	80 95       	com	r24
     cf6:	70 95       	com	r23
     cf8:	61 95       	neg	r22
     cfa:	7f 4f       	sbci	r23, 0xFF	; 255
     cfc:	8f 4f       	sbci	r24, 0xFF	; 255
     cfe:	9f 4f       	sbci	r25, 0xFF	; 255
     d00:	08 95       	ret

00000d02 <__floatunsisf>:
     d02:	e8 94       	clt
     d04:	09 c0       	rjmp	.+18     	; 0xd18 <__floatsisf+0x12>

00000d06 <__floatsisf>:
     d06:	97 fb       	bst	r25, 7
     d08:	3e f4       	brtc	.+14     	; 0xd18 <__floatsisf+0x12>
     d0a:	90 95       	com	r25
     d0c:	80 95       	com	r24
     d0e:	70 95       	com	r23
     d10:	61 95       	neg	r22
     d12:	7f 4f       	sbci	r23, 0xFF	; 255
     d14:	8f 4f       	sbci	r24, 0xFF	; 255
     d16:	9f 4f       	sbci	r25, 0xFF	; 255
     d18:	99 23       	and	r25, r25
     d1a:	a9 f0       	breq	.+42     	; 0xd46 <__floatsisf+0x40>
     d1c:	f9 2f       	mov	r31, r25
     d1e:	96 e9       	ldi	r25, 0x96	; 150
     d20:	bb 27       	eor	r27, r27
     d22:	93 95       	inc	r25
     d24:	f6 95       	lsr	r31
     d26:	87 95       	ror	r24
     d28:	77 95       	ror	r23
     d2a:	67 95       	ror	r22
     d2c:	b7 95       	ror	r27
     d2e:	f1 11       	cpse	r31, r1
     d30:	f8 cf       	rjmp	.-16     	; 0xd22 <__floatsisf+0x1c>
     d32:	fa f4       	brpl	.+62     	; 0xd72 <__floatsisf+0x6c>
     d34:	bb 0f       	add	r27, r27
     d36:	11 f4       	brne	.+4      	; 0xd3c <__floatsisf+0x36>
     d38:	60 ff       	sbrs	r22, 0
     d3a:	1b c0       	rjmp	.+54     	; 0xd72 <__floatsisf+0x6c>
     d3c:	6f 5f       	subi	r22, 0xFF	; 255
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
     d40:	8f 4f       	sbci	r24, 0xFF	; 255
     d42:	9f 4f       	sbci	r25, 0xFF	; 255
     d44:	16 c0       	rjmp	.+44     	; 0xd72 <__floatsisf+0x6c>
     d46:	88 23       	and	r24, r24
     d48:	11 f0       	breq	.+4      	; 0xd4e <__floatsisf+0x48>
     d4a:	96 e9       	ldi	r25, 0x96	; 150
     d4c:	11 c0       	rjmp	.+34     	; 0xd70 <__floatsisf+0x6a>
     d4e:	77 23       	and	r23, r23
     d50:	21 f0       	breq	.+8      	; 0xd5a <__floatsisf+0x54>
     d52:	9e e8       	ldi	r25, 0x8E	; 142
     d54:	87 2f       	mov	r24, r23
     d56:	76 2f       	mov	r23, r22
     d58:	05 c0       	rjmp	.+10     	; 0xd64 <__floatsisf+0x5e>
     d5a:	66 23       	and	r22, r22
     d5c:	71 f0       	breq	.+28     	; 0xd7a <__floatsisf+0x74>
     d5e:	96 e8       	ldi	r25, 0x86	; 134
     d60:	86 2f       	mov	r24, r22
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	2a f0       	brmi	.+10     	; 0xd72 <__floatsisf+0x6c>
     d68:	9a 95       	dec	r25
     d6a:	66 0f       	add	r22, r22
     d6c:	77 1f       	adc	r23, r23
     d6e:	88 1f       	adc	r24, r24
     d70:	da f7       	brpl	.-10     	; 0xd68 <__floatsisf+0x62>
     d72:	88 0f       	add	r24, r24
     d74:	96 95       	lsr	r25
     d76:	87 95       	ror	r24
     d78:	97 f9       	bld	r25, 7
     d7a:	08 95       	ret

00000d7c <__fp_inf>:
     d7c:	97 f9       	bld	r25, 7
     d7e:	9f 67       	ori	r25, 0x7F	; 127
     d80:	80 e8       	ldi	r24, 0x80	; 128
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	08 95       	ret

00000d88 <__fp_nan>:
     d88:	9f ef       	ldi	r25, 0xFF	; 255
     d8a:	80 ec       	ldi	r24, 0xC0	; 192
     d8c:	08 95       	ret

00000d8e <__fp_powser>:
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	1f 93       	push	r17
     d94:	0f 93       	push	r16
     d96:	ff 92       	push	r15
     d98:	ef 92       	push	r14
     d9a:	df 92       	push	r13
     d9c:	7b 01       	movw	r14, r22
     d9e:	8c 01       	movw	r16, r24
     da0:	68 94       	set
     da2:	05 c0       	rjmp	.+10     	; 0xdae <__fp_powser+0x20>
     da4:	da 2e       	mov	r13, r26
     da6:	ef 01       	movw	r28, r30
     da8:	72 d0       	rcall	.+228    	; 0xe8e <__mulsf3x>
     daa:	fe 01       	movw	r30, r28
     dac:	e8 94       	clt
     dae:	a5 91       	lpm	r26, Z+
     db0:	25 91       	lpm	r18, Z+
     db2:	35 91       	lpm	r19, Z+
     db4:	45 91       	lpm	r20, Z+
     db6:	55 91       	lpm	r21, Z+
     db8:	ae f3       	brts	.-22     	; 0xda4 <__fp_powser+0x16>
     dba:	ef 01       	movw	r28, r30
     dbc:	54 de       	rcall	.-856    	; 0xa66 <__addsf3x>
     dbe:	fe 01       	movw	r30, r28
     dc0:	97 01       	movw	r18, r14
     dc2:	a8 01       	movw	r20, r16
     dc4:	da 94       	dec	r13
     dc6:	79 f7       	brne	.-34     	; 0xda6 <__fp_powser+0x18>
     dc8:	df 90       	pop	r13
     dca:	ef 90       	pop	r14
     dcc:	ff 90       	pop	r15
     dce:	0f 91       	pop	r16
     dd0:	1f 91       	pop	r17
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	08 95       	ret

00000dd8 <__fp_pscA>:
     dd8:	00 24       	eor	r0, r0
     dda:	0a 94       	dec	r0
     ddc:	16 16       	cp	r1, r22
     dde:	17 06       	cpc	r1, r23
     de0:	18 06       	cpc	r1, r24
     de2:	09 06       	cpc	r0, r25
     de4:	08 95       	ret

00000de6 <__fp_pscB>:
     de6:	00 24       	eor	r0, r0
     de8:	0a 94       	dec	r0
     dea:	12 16       	cp	r1, r18
     dec:	13 06       	cpc	r1, r19
     dee:	14 06       	cpc	r1, r20
     df0:	05 06       	cpc	r0, r21
     df2:	08 95       	ret

00000df4 <__fp_round>:
     df4:	09 2e       	mov	r0, r25
     df6:	03 94       	inc	r0
     df8:	00 0c       	add	r0, r0
     dfa:	11 f4       	brne	.+4      	; 0xe00 <__fp_round+0xc>
     dfc:	88 23       	and	r24, r24
     dfe:	52 f0       	brmi	.+20     	; 0xe14 <__fp_round+0x20>
     e00:	bb 0f       	add	r27, r27
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fp_round+0x20>
     e04:	bf 2b       	or	r27, r31
     e06:	11 f4       	brne	.+4      	; 0xe0c <__fp_round+0x18>
     e08:	60 ff       	sbrs	r22, 0
     e0a:	04 c0       	rjmp	.+8      	; 0xe14 <__fp_round+0x20>
     e0c:	6f 5f       	subi	r22, 0xFF	; 255
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	8f 4f       	sbci	r24, 0xFF	; 255
     e12:	9f 4f       	sbci	r25, 0xFF	; 255
     e14:	08 95       	ret

00000e16 <__fp_split3>:
     e16:	57 fd       	sbrc	r21, 7
     e18:	90 58       	subi	r25, 0x80	; 128
     e1a:	44 0f       	add	r20, r20
     e1c:	55 1f       	adc	r21, r21
     e1e:	59 f0       	breq	.+22     	; 0xe36 <__fp_splitA+0x10>
     e20:	5f 3f       	cpi	r21, 0xFF	; 255
     e22:	71 f0       	breq	.+28     	; 0xe40 <__fp_splitA+0x1a>
     e24:	47 95       	ror	r20

00000e26 <__fp_splitA>:
     e26:	88 0f       	add	r24, r24
     e28:	97 fb       	bst	r25, 7
     e2a:	99 1f       	adc	r25, r25
     e2c:	61 f0       	breq	.+24     	; 0xe46 <__fp_splitA+0x20>
     e2e:	9f 3f       	cpi	r25, 0xFF	; 255
     e30:	79 f0       	breq	.+30     	; 0xe50 <__fp_splitA+0x2a>
     e32:	87 95       	ror	r24
     e34:	08 95       	ret
     e36:	12 16       	cp	r1, r18
     e38:	13 06       	cpc	r1, r19
     e3a:	14 06       	cpc	r1, r20
     e3c:	55 1f       	adc	r21, r21
     e3e:	f2 cf       	rjmp	.-28     	; 0xe24 <__fp_split3+0xe>
     e40:	46 95       	lsr	r20
     e42:	f1 df       	rcall	.-30     	; 0xe26 <__fp_splitA>
     e44:	08 c0       	rjmp	.+16     	; 0xe56 <__fp_splitA+0x30>
     e46:	16 16       	cp	r1, r22
     e48:	17 06       	cpc	r1, r23
     e4a:	18 06       	cpc	r1, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	f1 cf       	rjmp	.-30     	; 0xe32 <__fp_splitA+0xc>
     e50:	86 95       	lsr	r24
     e52:	71 05       	cpc	r23, r1
     e54:	61 05       	cpc	r22, r1
     e56:	08 94       	sec
     e58:	08 95       	ret

00000e5a <__fp_zero>:
     e5a:	e8 94       	clt

00000e5c <__fp_szero>:
     e5c:	bb 27       	eor	r27, r27
     e5e:	66 27       	eor	r22, r22
     e60:	77 27       	eor	r23, r23
     e62:	cb 01       	movw	r24, r22
     e64:	97 f9       	bld	r25, 7
     e66:	08 95       	ret

00000e68 <inverse>:
     e68:	9b 01       	movw	r18, r22
     e6a:	ac 01       	movw	r20, r24
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	80 e8       	ldi	r24, 0x80	; 128
     e72:	9f e3       	ldi	r25, 0x3F	; 63
     e74:	ad ce       	rjmp	.-678    	; 0xbd0 <__divsf3>

00000e76 <__mulsf3>:
     e76:	0b d0       	rcall	.+22     	; 0xe8e <__mulsf3x>
     e78:	bd cf       	rjmp	.-134    	; 0xdf4 <__fp_round>
     e7a:	ae df       	rcall	.-164    	; 0xdd8 <__fp_pscA>
     e7c:	28 f0       	brcs	.+10     	; 0xe88 <__mulsf3+0x12>
     e7e:	b3 df       	rcall	.-154    	; 0xde6 <__fp_pscB>
     e80:	18 f0       	brcs	.+6      	; 0xe88 <__mulsf3+0x12>
     e82:	95 23       	and	r25, r21
     e84:	09 f0       	breq	.+2      	; 0xe88 <__mulsf3+0x12>
     e86:	7a cf       	rjmp	.-268    	; 0xd7c <__fp_inf>
     e88:	7f cf       	rjmp	.-258    	; 0xd88 <__fp_nan>
     e8a:	11 24       	eor	r1, r1
     e8c:	e7 cf       	rjmp	.-50     	; 0xe5c <__fp_szero>

00000e8e <__mulsf3x>:
     e8e:	c3 df       	rcall	.-122    	; 0xe16 <__fp_split3>
     e90:	a0 f3       	brcs	.-24     	; 0xe7a <__mulsf3+0x4>

00000e92 <__mulsf3_pse>:
     e92:	95 9f       	mul	r25, r21
     e94:	d1 f3       	breq	.-12     	; 0xe8a <__mulsf3+0x14>
     e96:	95 0f       	add	r25, r21
     e98:	50 e0       	ldi	r21, 0x00	; 0
     e9a:	55 1f       	adc	r21, r21
     e9c:	62 9f       	mul	r22, r18
     e9e:	f0 01       	movw	r30, r0
     ea0:	72 9f       	mul	r23, r18
     ea2:	bb 27       	eor	r27, r27
     ea4:	f0 0d       	add	r31, r0
     ea6:	b1 1d       	adc	r27, r1
     ea8:	63 9f       	mul	r22, r19
     eaa:	aa 27       	eor	r26, r26
     eac:	f0 0d       	add	r31, r0
     eae:	b1 1d       	adc	r27, r1
     eb0:	aa 1f       	adc	r26, r26
     eb2:	64 9f       	mul	r22, r20
     eb4:	66 27       	eor	r22, r22
     eb6:	b0 0d       	add	r27, r0
     eb8:	a1 1d       	adc	r26, r1
     eba:	66 1f       	adc	r22, r22
     ebc:	82 9f       	mul	r24, r18
     ebe:	22 27       	eor	r18, r18
     ec0:	b0 0d       	add	r27, r0
     ec2:	a1 1d       	adc	r26, r1
     ec4:	62 1f       	adc	r22, r18
     ec6:	73 9f       	mul	r23, r19
     ec8:	b0 0d       	add	r27, r0
     eca:	a1 1d       	adc	r26, r1
     ecc:	62 1f       	adc	r22, r18
     ece:	83 9f       	mul	r24, r19
     ed0:	a0 0d       	add	r26, r0
     ed2:	61 1d       	adc	r22, r1
     ed4:	22 1f       	adc	r18, r18
     ed6:	74 9f       	mul	r23, r20
     ed8:	33 27       	eor	r19, r19
     eda:	a0 0d       	add	r26, r0
     edc:	61 1d       	adc	r22, r1
     ede:	23 1f       	adc	r18, r19
     ee0:	84 9f       	mul	r24, r20
     ee2:	60 0d       	add	r22, r0
     ee4:	21 1d       	adc	r18, r1
     ee6:	82 2f       	mov	r24, r18
     ee8:	76 2f       	mov	r23, r22
     eea:	6a 2f       	mov	r22, r26
     eec:	11 24       	eor	r1, r1
     eee:	9f 57       	subi	r25, 0x7F	; 127
     ef0:	50 40       	sbci	r21, 0x00	; 0
     ef2:	8a f0       	brmi	.+34     	; 0xf16 <__mulsf3_pse+0x84>
     ef4:	e1 f0       	breq	.+56     	; 0xf2e <__mulsf3_pse+0x9c>
     ef6:	88 23       	and	r24, r24
     ef8:	4a f0       	brmi	.+18     	; 0xf0c <__mulsf3_pse+0x7a>
     efa:	ee 0f       	add	r30, r30
     efc:	ff 1f       	adc	r31, r31
     efe:	bb 1f       	adc	r27, r27
     f00:	66 1f       	adc	r22, r22
     f02:	77 1f       	adc	r23, r23
     f04:	88 1f       	adc	r24, r24
     f06:	91 50       	subi	r25, 0x01	; 1
     f08:	50 40       	sbci	r21, 0x00	; 0
     f0a:	a9 f7       	brne	.-22     	; 0xef6 <__mulsf3_pse+0x64>
     f0c:	9e 3f       	cpi	r25, 0xFE	; 254
     f0e:	51 05       	cpc	r21, r1
     f10:	70 f0       	brcs	.+28     	; 0xf2e <__mulsf3_pse+0x9c>
     f12:	34 cf       	rjmp	.-408    	; 0xd7c <__fp_inf>
     f14:	a3 cf       	rjmp	.-186    	; 0xe5c <__fp_szero>
     f16:	5f 3f       	cpi	r21, 0xFF	; 255
     f18:	ec f3       	brlt	.-6      	; 0xf14 <__mulsf3_pse+0x82>
     f1a:	98 3e       	cpi	r25, 0xE8	; 232
     f1c:	dc f3       	brlt	.-10     	; 0xf14 <__mulsf3_pse+0x82>
     f1e:	86 95       	lsr	r24
     f20:	77 95       	ror	r23
     f22:	67 95       	ror	r22
     f24:	b7 95       	ror	r27
     f26:	f7 95       	ror	r31
     f28:	e7 95       	ror	r30
     f2a:	9f 5f       	subi	r25, 0xFF	; 255
     f2c:	c1 f7       	brne	.-16     	; 0xf1e <__mulsf3_pse+0x8c>
     f2e:	fe 2b       	or	r31, r30
     f30:	88 0f       	add	r24, r24
     f32:	91 1d       	adc	r25, r1
     f34:	96 95       	lsr	r25
     f36:	87 95       	ror	r24
     f38:	97 f9       	bld	r25, 7
     f3a:	08 95       	ret
     f3c:	11 f4       	brne	.+4      	; 0xf42 <__mulsf3_pse+0xb0>
     f3e:	0e f4       	brtc	.+2      	; 0xf42 <__mulsf3_pse+0xb0>
     f40:	23 cf       	rjmp	.-442    	; 0xd88 <__fp_nan>
     f42:	41 c0       	rjmp	.+130    	; 0xfc6 <__fp_mpack>

00000f44 <sqrt>:
     f44:	70 df       	rcall	.-288    	; 0xe26 <__fp_splitA>
     f46:	d0 f3       	brcs	.-12     	; 0xf3c <__mulsf3_pse+0xaa>
     f48:	99 23       	and	r25, r25
     f4a:	d9 f3       	breq	.-10     	; 0xf42 <__mulsf3_pse+0xb0>
     f4c:	ce f3       	brts	.-14     	; 0xf40 <__mulsf3_pse+0xae>
     f4e:	9f 57       	subi	r25, 0x7F	; 127
     f50:	55 0b       	sbc	r21, r21
     f52:	87 ff       	sbrs	r24, 7
     f54:	46 d0       	rcall	.+140    	; 0xfe2 <__fp_norm2>
     f56:	00 24       	eor	r0, r0
     f58:	a0 e6       	ldi	r26, 0x60	; 96
     f5a:	40 ea       	ldi	r20, 0xA0	; 160
     f5c:	90 01       	movw	r18, r0
     f5e:	80 58       	subi	r24, 0x80	; 128
     f60:	56 95       	lsr	r21
     f62:	97 95       	ror	r25
     f64:	28 f4       	brcc	.+10     	; 0xf70 <sqrt+0x2c>
     f66:	80 5c       	subi	r24, 0xC0	; 192
     f68:	66 0f       	add	r22, r22
     f6a:	77 1f       	adc	r23, r23
     f6c:	88 1f       	adc	r24, r24
     f6e:	20 f0       	brcs	.+8      	; 0xf78 <sqrt+0x34>
     f70:	26 17       	cp	r18, r22
     f72:	37 07       	cpc	r19, r23
     f74:	48 07       	cpc	r20, r24
     f76:	30 f4       	brcc	.+12     	; 0xf84 <sqrt+0x40>
     f78:	62 1b       	sub	r22, r18
     f7a:	73 0b       	sbc	r23, r19
     f7c:	84 0b       	sbc	r24, r20
     f7e:	20 29       	or	r18, r0
     f80:	31 29       	or	r19, r1
     f82:	4a 2b       	or	r20, r26
     f84:	a6 95       	lsr	r26
     f86:	17 94       	ror	r1
     f88:	07 94       	ror	r0
     f8a:	20 25       	eor	r18, r0
     f8c:	31 25       	eor	r19, r1
     f8e:	4a 27       	eor	r20, r26
     f90:	58 f7       	brcc	.-42     	; 0xf68 <sqrt+0x24>
     f92:	66 0f       	add	r22, r22
     f94:	77 1f       	adc	r23, r23
     f96:	88 1f       	adc	r24, r24
     f98:	20 f0       	brcs	.+8      	; 0xfa2 <sqrt+0x5e>
     f9a:	26 17       	cp	r18, r22
     f9c:	37 07       	cpc	r19, r23
     f9e:	48 07       	cpc	r20, r24
     fa0:	30 f4       	brcc	.+12     	; 0xfae <sqrt+0x6a>
     fa2:	62 0b       	sbc	r22, r18
     fa4:	73 0b       	sbc	r23, r19
     fa6:	84 0b       	sbc	r24, r20
     fa8:	20 0d       	add	r18, r0
     faa:	31 1d       	adc	r19, r1
     fac:	41 1d       	adc	r20, r1
     fae:	a0 95       	com	r26
     fb0:	81 f7       	brne	.-32     	; 0xf92 <sqrt+0x4e>
     fb2:	b9 01       	movw	r22, r18
     fb4:	84 2f       	mov	r24, r20
     fb6:	91 58       	subi	r25, 0x81	; 129
     fb8:	88 0f       	add	r24, r24
     fba:	96 95       	lsr	r25
     fbc:	87 95       	ror	r24
     fbe:	08 95       	ret

00000fc0 <square>:
     fc0:	9b 01       	movw	r18, r22
     fc2:	ac 01       	movw	r20, r24
     fc4:	58 cf       	rjmp	.-336    	; 0xe76 <__mulsf3>

00000fc6 <__fp_mpack>:
     fc6:	9f 3f       	cpi	r25, 0xFF	; 255
     fc8:	31 f0       	breq	.+12     	; 0xfd6 <__fp_mpack_finite+0xc>

00000fca <__fp_mpack_finite>:
     fca:	91 50       	subi	r25, 0x01	; 1
     fcc:	20 f4       	brcc	.+8      	; 0xfd6 <__fp_mpack_finite+0xc>
     fce:	87 95       	ror	r24
     fd0:	77 95       	ror	r23
     fd2:	67 95       	ror	r22
     fd4:	b7 95       	ror	r27
     fd6:	88 0f       	add	r24, r24
     fd8:	91 1d       	adc	r25, r1
     fda:	96 95       	lsr	r25
     fdc:	87 95       	ror	r24
     fde:	97 f9       	bld	r25, 7
     fe0:	08 95       	ret

00000fe2 <__fp_norm2>:
     fe2:	91 50       	subi	r25, 0x01	; 1
     fe4:	50 40       	sbci	r21, 0x00	; 0
     fe6:	66 0f       	add	r22, r22
     fe8:	77 1f       	adc	r23, r23
     fea:	88 1f       	adc	r24, r24
     fec:	d2 f7       	brpl	.-12     	; 0xfe2 <__fp_norm2>
     fee:	08 95       	ret

00000ff0 <__udivmodsi4>:
     ff0:	a1 e2       	ldi	r26, 0x21	; 33
     ff2:	1a 2e       	mov	r1, r26
     ff4:	aa 1b       	sub	r26, r26
     ff6:	bb 1b       	sub	r27, r27
     ff8:	fd 01       	movw	r30, r26
     ffa:	0d c0       	rjmp	.+26     	; 0x1016 <__udivmodsi4_ep>

00000ffc <__udivmodsi4_loop>:
     ffc:	aa 1f       	adc	r26, r26
     ffe:	bb 1f       	adc	r27, r27
    1000:	ee 1f       	adc	r30, r30
    1002:	ff 1f       	adc	r31, r31
    1004:	a2 17       	cp	r26, r18
    1006:	b3 07       	cpc	r27, r19
    1008:	e4 07       	cpc	r30, r20
    100a:	f5 07       	cpc	r31, r21
    100c:	20 f0       	brcs	.+8      	; 0x1016 <__udivmodsi4_ep>
    100e:	a2 1b       	sub	r26, r18
    1010:	b3 0b       	sbc	r27, r19
    1012:	e4 0b       	sbc	r30, r20
    1014:	f5 0b       	sbc	r31, r21

00001016 <__udivmodsi4_ep>:
    1016:	66 1f       	adc	r22, r22
    1018:	77 1f       	adc	r23, r23
    101a:	88 1f       	adc	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	1a 94       	dec	r1
    1020:	69 f7       	brne	.-38     	; 0xffc <__udivmodsi4_loop>
    1022:	60 95       	com	r22
    1024:	70 95       	com	r23
    1026:	80 95       	com	r24
    1028:	90 95       	com	r25
    102a:	9b 01       	movw	r18, r22
    102c:	ac 01       	movw	r20, r24
    102e:	bd 01       	movw	r22, r26
    1030:	cf 01       	movw	r24, r30
    1032:	08 95       	ret

00001034 <__tablejump2__>:
    1034:	ee 0f       	add	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	88 1f       	adc	r24, r24
    103a:	8b bf       	out	0x3b, r24	; 59
    103c:	07 90       	elpm	r0, Z+
    103e:	f6 91       	elpm	r31, Z
    1040:	e0 2d       	mov	r30, r0
    1042:	19 94       	eijmp

00001044 <__itoa_ncheck>:
    1044:	bb 27       	eor	r27, r27
    1046:	4a 30       	cpi	r20, 0x0A	; 10
    1048:	31 f4       	brne	.+12     	; 0x1056 <__itoa_ncheck+0x12>
    104a:	99 23       	and	r25, r25
    104c:	22 f4       	brpl	.+8      	; 0x1056 <__itoa_ncheck+0x12>
    104e:	bd e2       	ldi	r27, 0x2D	; 45
    1050:	90 95       	com	r25
    1052:	81 95       	neg	r24
    1054:	9f 4f       	sbci	r25, 0xFF	; 255
    1056:	01 c0       	rjmp	.+2      	; 0x105a <__utoa_common>

00001058 <__utoa_ncheck>:
    1058:	bb 27       	eor	r27, r27

0000105a <__utoa_common>:
    105a:	fb 01       	movw	r30, r22
    105c:	55 27       	eor	r21, r21
    105e:	aa 27       	eor	r26, r26
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	aa 1f       	adc	r26, r26
    1066:	a4 17       	cp	r26, r20
    1068:	10 f0       	brcs	.+4      	; 0x106e <__utoa_common+0x14>
    106a:	a4 1b       	sub	r26, r20
    106c:	83 95       	inc	r24
    106e:	50 51       	subi	r21, 0x10	; 16
    1070:	b9 f7       	brne	.-18     	; 0x1060 <__utoa_common+0x6>
    1072:	a0 5d       	subi	r26, 0xD0	; 208
    1074:	aa 33       	cpi	r26, 0x3A	; 58
    1076:	08 f0       	brcs	.+2      	; 0x107a <__utoa_common+0x20>
    1078:	a9 5d       	subi	r26, 0xD9	; 217
    107a:	a1 93       	st	Z+, r26
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	79 f7       	brne	.-34     	; 0x105e <__utoa_common+0x4>
    1080:	b1 11       	cpse	r27, r1
    1082:	b1 93       	st	Z+, r27
    1084:	11 92       	st	Z+, r1
    1086:	cb 01       	movw	r24, r22
    1088:	00 c0       	rjmp	.+0      	; 0x108a <strrev>

0000108a <strrev>:
    108a:	dc 01       	movw	r26, r24
    108c:	fc 01       	movw	r30, r24
    108e:	67 2f       	mov	r22, r23
    1090:	71 91       	ld	r23, Z+
    1092:	77 23       	and	r23, r23
    1094:	e1 f7       	brne	.-8      	; 0x108e <strrev+0x4>
    1096:	32 97       	sbiw	r30, 0x02	; 2
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <strrev+0x18>
    109a:	7c 91       	ld	r23, X
    109c:	6d 93       	st	X+, r22
    109e:	70 83       	st	Z, r23
    10a0:	62 91       	ld	r22, -Z
    10a2:	ae 17       	cp	r26, r30
    10a4:	bf 07       	cpc	r27, r31
    10a6:	c8 f3       	brcs	.-14     	; 0x109a <strrev+0x10>
    10a8:	08 95       	ret

000010aa <_exit>:
    10aa:	f8 94       	cli

000010ac <__stop_program>:
    10ac:	ff cf       	rjmp	.-2      	; 0x10ac <__stop_program>
