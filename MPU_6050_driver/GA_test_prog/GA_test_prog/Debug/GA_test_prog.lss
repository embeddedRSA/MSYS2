
GA_test_prog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800200  000015a2  00001636  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  0080024a  0080024a  00001680  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a77  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000138e  00000000  00000000  000042ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f51  00000000  00000000  0000568d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  000065e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c4f  00000000  00000000  000069ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d0f  00000000  00000000  0000763b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000834a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	96 c0       	rjmp	.+300    	; 0x12e <__ctors_end>
       2:	00 00       	nop
       4:	b4 c0       	rjmp	.+360    	; 0x16e <__bad_interrupt>
       6:	00 00       	nop
       8:	b2 c0       	rjmp	.+356    	; 0x16e <__bad_interrupt>
       a:	00 00       	nop
       c:	b0 c0       	rjmp	.+352    	; 0x16e <__bad_interrupt>
       e:	00 00       	nop
      10:	ae c0       	rjmp	.+348    	; 0x16e <__bad_interrupt>
      12:	00 00       	nop
      14:	ac c0       	rjmp	.+344    	; 0x16e <__bad_interrupt>
      16:	00 00       	nop
      18:	aa c0       	rjmp	.+340    	; 0x16e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a8 c0       	rjmp	.+336    	; 0x16e <__bad_interrupt>
      1e:	00 00       	nop
      20:	a6 c0       	rjmp	.+332    	; 0x16e <__bad_interrupt>
      22:	00 00       	nop
      24:	a4 c0       	rjmp	.+328    	; 0x16e <__bad_interrupt>
      26:	00 00       	nop
      28:	a2 c0       	rjmp	.+324    	; 0x16e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a0 c0       	rjmp	.+320    	; 0x16e <__bad_interrupt>
      2e:	00 00       	nop
      30:	9e c0       	rjmp	.+316    	; 0x16e <__bad_interrupt>
      32:	00 00       	nop
      34:	9c c0       	rjmp	.+312    	; 0x16e <__bad_interrupt>
      36:	00 00       	nop
      38:	9a c0       	rjmp	.+308    	; 0x16e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	98 c0       	rjmp	.+304    	; 0x16e <__bad_interrupt>
      3e:	00 00       	nop
      40:	96 c0       	rjmp	.+300    	; 0x16e <__bad_interrupt>
      42:	00 00       	nop
      44:	94 c0       	rjmp	.+296    	; 0x16e <__bad_interrupt>
      46:	00 00       	nop
      48:	92 c0       	rjmp	.+292    	; 0x16e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	90 c0       	rjmp	.+288    	; 0x16e <__bad_interrupt>
      4e:	00 00       	nop
      50:	8e c0       	rjmp	.+284    	; 0x16e <__bad_interrupt>
      52:	00 00       	nop
      54:	8c c0       	rjmp	.+280    	; 0x16e <__bad_interrupt>
      56:	00 00       	nop
      58:	8a c0       	rjmp	.+276    	; 0x16e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	88 c0       	rjmp	.+272    	; 0x16e <__bad_interrupt>
      5e:	00 00       	nop
      60:	86 c0       	rjmp	.+268    	; 0x16e <__bad_interrupt>
      62:	00 00       	nop
      64:	84 c0       	rjmp	.+264    	; 0x16e <__bad_interrupt>
      66:	00 00       	nop
      68:	82 c0       	rjmp	.+260    	; 0x16e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	80 c0       	rjmp	.+256    	; 0x16e <__bad_interrupt>
      6e:	00 00       	nop
      70:	7e c0       	rjmp	.+252    	; 0x16e <__bad_interrupt>
      72:	00 00       	nop
      74:	7c c0       	rjmp	.+248    	; 0x16e <__bad_interrupt>
      76:	00 00       	nop
      78:	7a c0       	rjmp	.+244    	; 0x16e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	78 c0       	rjmp	.+240    	; 0x16e <__bad_interrupt>
      7e:	00 00       	nop
      80:	76 c0       	rjmp	.+236    	; 0x16e <__bad_interrupt>
      82:	00 00       	nop
      84:	74 c0       	rjmp	.+232    	; 0x16e <__bad_interrupt>
      86:	00 00       	nop
      88:	72 c0       	rjmp	.+228    	; 0x16e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	70 c0       	rjmp	.+224    	; 0x16e <__bad_interrupt>
      8e:	00 00       	nop
      90:	6e c0       	rjmp	.+220    	; 0x16e <__bad_interrupt>
      92:	00 00       	nop
      94:	6c c0       	rjmp	.+216    	; 0x16e <__bad_interrupt>
      96:	00 00       	nop
      98:	6a c0       	rjmp	.+212    	; 0x16e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	68 c0       	rjmp	.+208    	; 0x16e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	66 c0       	rjmp	.+204    	; 0x16e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	64 c0       	rjmp	.+200    	; 0x16e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	62 c0       	rjmp	.+196    	; 0x16e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	60 c0       	rjmp	.+192    	; 0x16e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5e c0       	rjmp	.+188    	; 0x16e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5c c0       	rjmp	.+184    	; 0x16e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5a c0       	rjmp	.+180    	; 0x16e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	58 c0       	rjmp	.+176    	; 0x16e <__bad_interrupt>
      be:	00 00       	nop
      c0:	56 c0       	rjmp	.+172    	; 0x16e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	54 c0       	rjmp	.+168    	; 0x16e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	52 c0       	rjmp	.+164    	; 0x16e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	50 c0       	rjmp	.+160    	; 0x16e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	4e c0       	rjmp	.+156    	; 0x16e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4c c0       	rjmp	.+152    	; 0x16e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4a c0       	rjmp	.+148    	; 0x16e <__bad_interrupt>
      da:	00 00       	nop
      dc:	48 c0       	rjmp	.+144    	; 0x16e <__bad_interrupt>
      de:	00 00       	nop
      e0:	46 c0       	rjmp	.+140    	; 0x16e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	e1 04       	cpc	r14, r1
      e6:	e6 04       	cpc	r14, r6
      e8:	ef 04       	cpc	r14, r15
      ea:	f4 04       	cpc	r15, r4
      ec:	fd 04       	cpc	r15, r13
      ee:	02 05       	cpc	r16, r2
      f0:	0b 05       	cpc	r16, r11
      f2:	10 05       	cpc	r17, r0
      f4:	19 05       	cpc	r17, r9
      f6:	1e 05       	cpc	r17, r14
      f8:	27 05       	cpc	r18, r7
      fa:	2c 05       	cpc	r18, r12
      fc:	35 05       	cpc	r19, r5
      fe:	3a 05       	cpc	r19, r10
     100:	08 4a       	sbci	r16, 0xA8	; 168
     102:	d7 3b       	cpi	r29, 0xB7	; 183
     104:	3b ce       	rjmp	.-906    	; 0xfffffd7c <__eeprom_end+0xff7efd7c>
     106:	01 6e       	ori	r16, 0xE1	; 225
     108:	84 bc       	out	0x24, r8	; 36
     10a:	bf fd       	.word	0xfdbf	; ????
     10c:	c1 2f       	mov	r28, r17
     10e:	3d 6c       	ori	r19, 0xCD	; 205
     110:	74 31       	cpi	r23, 0x14	; 20
     112:	9a bd       	out	0x2a, r25	; 42
     114:	56 83       	std	Z+6, r21	; 0x06
     116:	3d da       	rcall	.-2950   	; 0xfffff592 <__eeprom_end+0xff7ef592>
     118:	3d 00       	.word	0x003d	; ????
     11a:	c7 7f       	andi	r28, 0xF7	; 247
     11c:	11 be       	out	0x31, r1	; 49
     11e:	d9 e4       	ldi	r29, 0x49	; 73
     120:	bb 4c       	sbci	r27, 0xCB	; 203
     122:	3e 91       	ld	r19, -X
     124:	6b aa       	std	Y+51, r6	; 0x33
     126:	aa be       	out	0x3a, r10	; 58
     128:	00 00       	nop
     12a:	00 80       	ld	r0, Z
     12c:	3f 00       	.word	0x003f	; ????

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d1 e2       	ldi	r29, 0x21	; 33
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61
     13a:	00 e0       	ldi	r16, 0x00	; 0
     13c:	0c bf       	out	0x3c, r16	; 60

0000013e <__do_copy_data>:
     13e:	12 e0       	ldi	r17, 0x02	; 2
     140:	a0 e0       	ldi	r26, 0x00	; 0
     142:	b2 e0       	ldi	r27, 0x02	; 2
     144:	e2 ea       	ldi	r30, 0xA2	; 162
     146:	f5 e1       	ldi	r31, 0x15	; 21
     148:	00 e0       	ldi	r16, 0x00	; 0
     14a:	0b bf       	out	0x3b, r16	; 59
     14c:	02 c0       	rjmp	.+4      	; 0x152 <__do_copy_data+0x14>
     14e:	07 90       	elpm	r0, Z+
     150:	0d 92       	st	X+, r0
     152:	aa 34       	cpi	r26, 0x4A	; 74
     154:	b1 07       	cpc	r27, r17
     156:	d9 f7       	brne	.-10     	; 0x14e <__do_copy_data+0x10>

00000158 <__do_clear_bss>:
     158:	22 e0       	ldi	r18, 0x02	; 2
     15a:	aa e4       	ldi	r26, 0x4A	; 74
     15c:	b2 e0       	ldi	r27, 0x02	; 2
     15e:	01 c0       	rjmp	.+2      	; 0x162 <.do_clear_bss_start>

00000160 <.do_clear_bss_loop>:
     160:	1d 92       	st	X+, r1

00000162 <.do_clear_bss_start>:
     162:	a8 39       	cpi	r26, 0x98	; 152
     164:	b2 07       	cpc	r27, r18
     166:	e1 f7       	brne	.-8      	; 0x160 <.do_clear_bss_loop>
     168:	16 d6       	rcall	.+3116   	; 0xd96 <main>
     16a:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <_exit>

0000016e <__bad_interrupt>:
     16e:	48 cf       	rjmp	.-368    	; 0x0 <__vectors>

00000170 <s_init>:
this is also where polling is enabled by setting enable_interrupt = false.
is implemented 
-------------function description end-------------------------------------------------------
**/
static uint16_t s_init(uint32_t p_SCL_f ,bool p_enable_interrupt) //freq is given in Hz
{
     170:	61 38       	cpi	r22, 0x81	; 129
     172:	2a e1       	ldi	r18, 0x1A	; 26
     174:	72 07       	cpc	r23, r18
     176:	26 e0       	ldi	r18, 0x06	; 6
     178:	82 07       	cpc	r24, r18
     17a:	91 05       	cpc	r25, r1
     17c:	20 f0       	brcs	.+8      	; 0x186 <s_init+0x16>
     17e:	60 e8       	ldi	r22, 0x80	; 128
     180:	7a e1       	ldi	r23, 0x1A	; 26
     182:	86 e0       	ldi	r24, 0x06	; 6
     184:	90 e0       	ldi	r25, 0x00	; 0
if (!(p_SCL_f <= SCL_MAX))
	{
		p_SCL_f=SCL_MAX;
	}
		//enable TWI clock module 
	PRR0&=~(1<<PRTWI);
     186:	e4 e6       	ldi	r30, 0x64	; 100
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	20 81       	ld	r18, Z
     18c:	2f 77       	andi	r18, 0x7F	; 127
     18e:	20 83       	st	Z, r18
	
	//enable TWI
	TWCR|=(1<<TWEN);	
     190:	ec eb       	ldi	r30, 0xBC	; 188
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	20 81       	ld	r18, Z
     196:	24 60       	ori	r18, 0x04	; 4
     198:	20 83       	st	Z, r18
	
	//enable interrupt
	s_int_is_enabled=p_enable_interrupt;
     19a:	40 93 4c 02 	sts	0x024C, r20	; 0x80024c <s_int_is_enabled>
	if (s_int_is_enabled)
     19e:	44 23       	and	r20, r20
     1a0:	19 f0       	breq	.+6      	; 0x1a8 <s_init+0x38>
	{
		TWCR|=(1<<TWIE);
     1a2:	20 81       	ld	r18, Z
     1a4:	21 60       	ori	r18, 0x01	; 1
     1a6:	20 83       	st	Z, r18
	}
	
	//constants pre calculated from mathcad 
			
		uint8_t TWBR_1= (uint8_t)((F_CPU/((double)8.0*p_SCL_f))-(double)2.0);
     1a8:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__floatunsisf>
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	51 e4       	ldi	r21, 0x41	; 65
     1b4:	0e 94 b5 09 	call	0x136a	; 0x136a <__mulsf3>
     1b8:	9b 01       	movw	r18, r22
     1ba:	ac 01       	movw	r20, r24
     1bc:	60 e0       	ldi	r22, 0x00	; 0
     1be:	74 e2       	ldi	r23, 0x24	; 36
     1c0:	84 e7       	ldi	r24, 0x74	; 116
     1c2:	9b e4       	ldi	r25, 0x4B	; 75
     1c4:	7f d7       	rcall	.+3838   	; 0x10c4 <__divsf3>
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	40 e0       	ldi	r20, 0x00	; 0
     1cc:	50 e4       	ldi	r21, 0x40	; 64
     1ce:	b3 d6       	rcall	.+3430   	; 0xf36 <__subsf3>
     1d0:	e6 d7       	rcall	.+4044   	; 0x119e <__fixunssfsi>

	//set prescaler to 1 -> 0b00
		
	TWSR&=~(1<<TWPS1);
     1d2:	e9 eb       	ldi	r30, 0xB9	; 185
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	8d 7f       	andi	r24, 0xFD	; 253
     1da:	80 83       	st	Z, r24
	//typecast to proper format and insert
	TWBR = TWBR_1;//TWBR_1;
     1dc:	e8 eb       	ldi	r30, 0xB8	; 184
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	60 83       	st	Z, r22
	return TWBR;
     1e2:	80 81       	ld	r24, Z
	
}
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	08 95       	ret

000001e8 <s_disable>:
----------------description-----------------------------------------------------------------
Disables any i2c activity, activity, 'init_s()' does not need to be followed before starting new transfer
-------------function description end-------------------------------------------------------
**/
static void s_disable(void)
{
     1e8:	08 95       	ret

000001ea <s_start>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static void s_start(void)
{
	TWCR=0;
     1ea:	ec eb       	ldi	r30, 0xBC	; 188
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	10 82       	st	Z, r1
	TWCR |= (1<<TWSTA)|(1<<TWEN)|(1<<TWINT); //TWSTA sends start bit 
     1f0:	80 81       	ld	r24, Z
     1f2:	84 6a       	ori	r24, 0xA4	; 164
     1f4:	80 83       	st	Z, r24

	if (!s_int_is_enabled)
     1f6:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <s_int_is_enabled>
     1fa:	81 11       	cpse	r24, r1
     1fc:	03 c0       	rjmp	.+6      	; 0x204 <s_start+0x1a>
	{
		while ((TWCR & (1<<TWINT)) == 0)
     1fe:	80 81       	ld	r24, Z
     200:	88 23       	and	r24, r24
     202:	ec f7       	brge	.-6      	; 0x1fe <s_start+0x14>
     204:	08 95       	ret

00000206 <s_stop>:
stops i2c, no polling needed
-------------function description end-------------------------------------------------------
**/
static void s_stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     206:	84 e9       	ldi	r24, 0x94	; 148
     208:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     20c:	08 95       	ret

0000020e <s_selectMode>:
-------------function description end-------------------------------------------------------
**/
static void s_selectMode(uint8_t p_SLA_addr,I2C_MODE_t p_mode) //SLA_x is SLA+R/W
{
	//must send address now
	if(p_mode==I2C_WRITE_MODE)
     20e:	61 11       	cpse	r22, r1
     210:	04 c0       	rjmp	.+8      	; 0x21a <s_selectMode+0xc>
	{
		TWDR=((p_SLA_addr<<1)&(~0b1));
     212:	88 0f       	add	r24, r24
     214:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     218:	06 c0       	rjmp	.+12     	; 0x226 <s_selectMode+0x18>
	}
	else if(p_mode==I2C_READ_MODE)
     21a:	61 30       	cpi	r22, 0x01	; 1
     21c:	21 f4       	brne	.+8      	; 0x226 <s_selectMode+0x18>
	{
		TWDR=((p_SLA_addr<<1)|(0b1));
     21e:	88 0f       	add	r24, r24
     220:	81 60       	ori	r24, 0x01	; 1
     222:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	}
	TWCR |= (1<<TWINT);
     226:	ec eb       	ldi	r30, 0xBC	; 188
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	80 68       	ori	r24, 0x80	; 128
     22e:	80 83       	st	Z, r24
	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     230:	80 81       	ld	r24, Z
     232:	84 6a       	ori	r24, 0xA4	; 164
     234:	80 83       	st	Z, r24
	if (!s_int_is_enabled)
     236:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <s_int_is_enabled>
     23a:	81 11       	cpse	r24, r1
     23c:	03 c0       	rjmp	.+6      	; 0x244 <s_selectMode+0x36>
	{
	  while ((TWCR & (1<<TWINT)) == 0) //poll
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	ec f7       	brge	.-6      	; 0x23e <s_selectMode+0x30>
     244:	08 95       	ret

00000246 <s_write>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static void s_write(uint8_t p_data)
{
	TWDR = p_data;
     246:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT)|(1<<TWEN);
     24a:	84 e8       	ldi	r24, 0x84	; 132
     24c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	if (!s_int_is_enabled)
     250:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <s_int_is_enabled>
     254:	81 11       	cpse	r24, r1
     256:	05 c0       	rjmp	.+10     	; 0x262 <s_write+0x1c>
	{
		while ((TWCR & (1<<TWINT)) == 0)
     258:	ec eb       	ldi	r30, 0xBC	; 188
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	88 23       	and	r24, r24
     260:	ec f7       	brge	.-6      	; 0x25c <s_write+0x16>
     262:	08 95       	ret

00000264 <s_read>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static uint8_t s_read (bool p_isLast)
{
	if (!p_isLast ) //If we want to read more than 1 byte
     264:	81 11       	cpse	r24, r1
     266:	04 c0       	rjmp	.+8      	; 0x270 <s_read+0xc>
	{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     268:	84 ec       	ldi	r24, 0xC4	; 196
     26a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     26e:	03 c0       	rjmp	.+6      	; 0x276 <s_read+0x12>
	}

	else             //If we want to read only one byte
	{
		TWCR = (1<<TWINT) | (1<<TWEN);
     270:	84 e8       	ldi	r24, 0x84	; 132
     272:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	}
	
	if (!s_int_is_enabled)
     276:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <s_int_is_enabled>
     27a:	81 11       	cpse	r24, r1
     27c:	08 c0       	rjmp	.+16     	; 0x28e <s_read+0x2a>
	{
	  while ((TWCR & (1<<TWINT)) == 0)
     27e:	ec eb       	ldi	r30, 0xBC	; 188
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	88 23       	and	r24, r24
     286:	ec f7       	brge	.-6      	; 0x282 <s_read+0x1e>
	  {}
	{}
	return TWDR;
     288:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     28c:	08 95       	ret
	}

	return 0;
     28e:	80 e0       	ldi	r24, 0x00	; 0
}
     290:	08 95       	ret

00000292 <s_setBusy>:
may be used as a primitive mutex when using several i2c devices in isr
-------------function description end-------------------------------------------------------
**/
static bool s_setBusy(bool p_status)
{	
	s_busy_flag		=	p_status;
     292:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <__data_end>
	return  s_busy_flag;
}
     296:	08 95       	ret

00000298 <s_getBusy>:
-------------function description end-------------------------------------------------------
**/
static bool s_getBusy(void)
{
	return s_busy_flag;
}
     298:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__data_end>
     29c:	08 95       	ret

0000029e <s_getStatus>:
retiurns TWSR status code, is used for debugging purposes or ISR state machhines
-------------function description end-------------------------------------------------------
**/
static uint8_t s_getStatus(void)
{
	return (TWSR)&(0b11111000);
     29e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     2a2:	88 7f       	andi	r24, 0xF8	; 248
     2a4:	08 95       	ret

000002a6 <get_i2c_interface>:
-------------function description end-------------------------------------------------------
**/
i2c_t* get_i2c_interface(void)
{
	
 if (!s_initialized)
     2a6:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <s_initialized>
     2aa:	81 11       	cpse	r24, r1
     2ac:	2d c0       	rjmp	.+90     	; 0x308 <get_i2c_interface+0x62>
 {
	s_i2c_interface.init				=	s_init;
     2ae:	ed e4       	ldi	r30, 0x4D	; 77
     2b0:	f2 e0       	ldi	r31, 0x02	; 2
     2b2:	88 eb       	ldi	r24, 0xB8	; 184
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	91 83       	std	Z+1, r25	; 0x01
     2b8:	80 83       	st	Z, r24
	s_i2c_interface.disable				=	s_disable;
     2ba:	84 ef       	ldi	r24, 0xF4	; 244
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	93 83       	std	Z+3, r25	; 0x03
     2c0:	82 83       	std	Z+2, r24	; 0x02
	s_i2c_interface.start				=	s_start;
     2c2:	85 ef       	ldi	r24, 0xF5	; 245
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	84 83       	std	Z+4, r24	; 0x04
	s_i2c_interface.stop				=	s_stop;
     2ca:	83 e0       	ldi	r24, 0x03	; 3
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	97 83       	std	Z+7, r25	; 0x07
     2d0:	86 83       	std	Z+6, r24	; 0x06
	s_i2c_interface.selectmode			=	s_selectMode;
     2d2:	87 e0       	ldi	r24, 0x07	; 7
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	91 87       	std	Z+9, r25	; 0x09
     2d8:	80 87       	std	Z+8, r24	; 0x08
	s_i2c_interface.write				=	s_write;
     2da:	83 e2       	ldi	r24, 0x23	; 35
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	93 87       	std	Z+11, r25	; 0x0b
     2e0:	82 87       	std	Z+10, r24	; 0x0a
	s_i2c_interface.read				=	s_read;
     2e2:	82 e3       	ldi	r24, 0x32	; 50
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	95 87       	std	Z+13, r25	; 0x0d
     2e8:	84 87       	std	Z+12, r24	; 0x0c
	s_i2c_interface.setBusy				=	s_setBusy;
     2ea:	89 e4       	ldi	r24, 0x49	; 73
     2ec:	91 e0       	ldi	r25, 0x01	; 1
     2ee:	97 87       	std	Z+15, r25	; 0x0f
     2f0:	86 87       	std	Z+14, r24	; 0x0e
	s_i2c_interface.getBusy				=	s_getBusy;
     2f2:	8c e4       	ldi	r24, 0x4C	; 76
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	91 8b       	std	Z+17, r25	; 0x11
     2f8:	80 8b       	std	Z+16, r24	; 0x10
	s_i2c_interface.getStatus			=	s_getStatus;
     2fa:	8f e4       	ldi	r24, 0x4F	; 79
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	93 8b       	std	Z+19, r25	; 0x13
     300:	82 8b       	std	Z+18, r24	; 0x12
	s_initialized=true;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <s_initialized>
	
 }
	return &s_i2c_interface;
}
     308:	8d e4       	ldi	r24, 0x4D	; 77
     30a:	92 e0       	ldi	r25, 0x02	; 2
     30c:	08 95       	ret

0000030e <ds1307_init>:


//Initialize the i2c communication for the RTC
static void ds1307_init(i2c_t* p_i2c)
{
	i2c=p_i2c;
     30e:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <i2c+0x1>
     312:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <i2c>
	//init i2c communication
	i2c->init(10000,0); 
     316:	dc 01       	movw	r26, r24
     318:	ed 91       	ld	r30, X+
     31a:	fc 91       	ld	r31, X
     31c:	40 e0       	ldi	r20, 0x00	; 0
     31e:	60 e1       	ldi	r22, 0x10	; 16
     320:	77 e2       	ldi	r23, 0x27	; 39
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	19 95       	eicall
     328:	08 95       	ret

0000032a <ds1307_getDateAndTime>:
To get the latest time and date form the DS1307 RTC in its timekeeper registers, 
done via the i2c driver. Weekday "day" is not used in the function.  
-------------function description end-------------------------------------------------------
**/
static void ds1307_getDateAndTime(uint8_t *year, uint8_t *month, uint8_t *day, uint8_t *hour, uint8_t *minute, uint8_t *second)
{
     32a:	8f 92       	push	r8
     32c:	9f 92       	push	r9
     32e:	af 92       	push	r10
     330:	bf 92       	push	r11
     332:	cf 92       	push	r12
     334:	df 92       	push	r13
     336:	ef 92       	push	r14
     338:	ff 92       	push	r15
     33a:	0f 93       	push	r16
     33c:	1f 93       	push	r17
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	ec 01       	movw	r28, r24
     344:	6b 01       	movw	r12, r22
     346:	5a 01       	movw	r10, r20
     348:	49 01       	movw	r8, r18
	i2c->start();
     34a:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     34e:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     352:	04 80       	ldd	r0, Z+4	; 0x04
     354:	f5 81       	ldd	r31, Z+5	; 0x05
     356:	e0 2d       	mov	r30, r0
     358:	19 95       	eicall
	i2c->selectmode((DS1307_ADDR),I2C_WRITE_MODE); //Write select
     35a:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     35e:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     362:	00 84       	ldd	r0, Z+8	; 0x08
     364:	f1 85       	ldd	r31, Z+9	; 0x09
     366:	e0 2d       	mov	r30, r0
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	88 e6       	ldi	r24, 0x68	; 104
     36c:	19 95       	eicall
	i2c->write(0x00); //stop oscillator
     36e:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     372:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     376:	02 84       	ldd	r0, Z+10	; 0x0a
     378:	f3 85       	ldd	r31, Z+11	; 0x0b
     37a:	e0 2d       	mov	r30, r0
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	19 95       	eicall
	i2c->stop();
     380:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     384:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     388:	06 80       	ldd	r0, Z+6	; 0x06
     38a:	f7 81       	ldd	r31, Z+7	; 0x07
     38c:	e0 2d       	mov	r30, r0
     38e:	19 95       	eicall

	i2c->start(); //start again before reading 
     390:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     394:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     398:	04 80       	ldd	r0, Z+4	; 0x04
     39a:	f5 81       	ldd	r31, Z+5	; 0x05
     39c:	e0 2d       	mov	r30, r0
     39e:	19 95       	eicall
	i2c->selectmode((DS1307_ADDR),I2C_READ_MODE); //I2C read
     3a0:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     3a4:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     3a8:	00 84       	ldd	r0, Z+8	; 0x08
     3aa:	f1 85       	ldd	r31, Z+9	; 0x09
     3ac:	e0 2d       	mov	r30, r0
     3ae:	61 e0       	ldi	r22, 0x01	; 1
     3b0:	88 e6       	ldi	r24, 0x68	; 104
     3b2:	19 95       	eicall
	*second = ds1307_bcd2dec(i2c->read(false) & 0x7F);
     3b4:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     3b8:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     3bc:	04 84       	ldd	r0, Z+12	; 0x0c
     3be:	f5 85       	ldd	r31, Z+13	; 0x0d
     3c0:	e0 2d       	mov	r30, r0
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	19 95       	eicall
     3c6:	8f 77       	andi	r24, 0x7F	; 127
     3c8:	98 2f       	mov	r25, r24
     3ca:	92 95       	swap	r25
     3cc:	9f 70       	andi	r25, 0x0F	; 15
     3ce:	29 2f       	mov	r18, r25
     3d0:	22 0f       	add	r18, r18
     3d2:	92 0f       	add	r25, r18
     3d4:	99 0f       	add	r25, r25
     3d6:	89 1b       	sub	r24, r25
     3d8:	f7 01       	movw	r30, r14
     3da:	80 83       	st	Z, r24
	*minute = ds1307_bcd2dec(i2c->read(false));
     3dc:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     3e0:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     3e4:	04 84       	ldd	r0, Z+12	; 0x0c
     3e6:	f5 85       	ldd	r31, Z+13	; 0x0d
     3e8:	e0 2d       	mov	r30, r0
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	19 95       	eicall
     3ee:	98 2f       	mov	r25, r24
     3f0:	92 95       	swap	r25
     3f2:	9f 70       	andi	r25, 0x0F	; 15
     3f4:	29 2f       	mov	r18, r25
     3f6:	22 0f       	add	r18, r18
     3f8:	92 0f       	add	r25, r18
     3fa:	99 0f       	add	r25, r25
     3fc:	89 1b       	sub	r24, r25
     3fe:	f8 01       	movw	r30, r16
     400:	80 83       	st	Z, r24
	*hour = ds1307_bcd2dec(i2c->read(false));
     402:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     406:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     40a:	04 84       	ldd	r0, Z+12	; 0x0c
     40c:	f5 85       	ldd	r31, Z+13	; 0x0d
     40e:	e0 2d       	mov	r30, r0
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	19 95       	eicall
     414:	98 2f       	mov	r25, r24
     416:	92 95       	swap	r25
     418:	9f 70       	andi	r25, 0x0F	; 15
     41a:	29 2f       	mov	r18, r25
     41c:	22 0f       	add	r18, r18
     41e:	92 0f       	add	r25, r18
     420:	99 0f       	add	r25, r25
     422:	89 1b       	sub	r24, r25
     424:	f4 01       	movw	r30, r8
     426:	80 83       	st	Z, r24
	i2c->read(false); //We dont need to read the weekday
     428:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     42c:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     430:	04 84       	ldd	r0, Z+12	; 0x0c
     432:	f5 85       	ldd	r31, Z+13	; 0x0d
     434:	e0 2d       	mov	r30, r0
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	19 95       	eicall
	*day = ds1307_bcd2dec(i2c->read(false));
     43a:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     43e:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     442:	04 84       	ldd	r0, Z+12	; 0x0c
     444:	f5 85       	ldd	r31, Z+13	; 0x0d
     446:	e0 2d       	mov	r30, r0
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	19 95       	eicall
     44c:	98 2f       	mov	r25, r24
     44e:	92 95       	swap	r25
     450:	9f 70       	andi	r25, 0x0F	; 15
     452:	29 2f       	mov	r18, r25
     454:	22 0f       	add	r18, r18
     456:	92 0f       	add	r25, r18
     458:	99 0f       	add	r25, r25
     45a:	89 1b       	sub	r24, r25
     45c:	f5 01       	movw	r30, r10
     45e:	80 83       	st	Z, r24
	*month = ds1307_bcd2dec(i2c->read(false));
     460:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     464:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     468:	04 84       	ldd	r0, Z+12	; 0x0c
     46a:	f5 85       	ldd	r31, Z+13	; 0x0d
     46c:	e0 2d       	mov	r30, r0
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	19 95       	eicall
     472:	98 2f       	mov	r25, r24
     474:	92 95       	swap	r25
     476:	9f 70       	andi	r25, 0x0F	; 15
     478:	29 2f       	mov	r18, r25
     47a:	22 0f       	add	r18, r18
     47c:	92 0f       	add	r25, r18
     47e:	99 0f       	add	r25, r25
     480:	89 1b       	sub	r24, r25
     482:	f6 01       	movw	r30, r12
     484:	80 83       	st	Z, r24
	*year = ds1307_bcd2dec(i2c->read(true));
     486:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     48a:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     48e:	04 84       	ldd	r0, Z+12	; 0x0c
     490:	f5 85       	ldd	r31, Z+13	; 0x0d
     492:	e0 2d       	mov	r30, r0
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	19 95       	eicall
     498:	98 2f       	mov	r25, r24
     49a:	92 95       	swap	r25
     49c:	9f 70       	andi	r25, 0x0F	; 15
     49e:	29 2f       	mov	r18, r25
     4a0:	22 0f       	add	r18, r18
     4a2:	92 0f       	add	r25, r18
     4a4:	99 0f       	add	r25, r25
     4a6:	89 1b       	sub	r24, r25
     4a8:	88 83       	st	Y, r24
	i2c->stop();
     4aa:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     4ae:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     4b2:	06 80       	ldd	r0, Z+6	; 0x06
     4b4:	f7 81       	ldd	r31, Z+7	; 0x07
     4b6:	e0 2d       	mov	r30, r0
     4b8:	19 95       	eicall
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	df 90       	pop	r13
     4c8:	cf 90       	pop	r12
     4ca:	bf 90       	pop	r11
     4cc:	af 90       	pop	r10
     4ce:	9f 90       	pop	r9
     4d0:	8f 90       	pop	r8
     4d2:	08 95       	ret

000004d4 <ds1307_setDateAndTime>:
To set the time and date for the DS1307 RTC in its timekeeper registers, 
done via the i2c driver. 
-------------function description end-------------------------------------------------------
**/
static void ds1307_setDateAndTime(uint8_t year, uint8_t month, uint8_t day, uint8_t weekDay, uint8_t hour, uint8_t minute, uint8_t second)
{
     4d4:	cf 92       	push	r12
     4d6:	df 92       	push	r13
     4d8:	ef 92       	push	r14
     4da:	ff 92       	push	r15
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
	//First check if any input is over limit
	if (second < 0 || second > 59 ||
     4e4:	9b e3       	ldi	r25, 0x3B	; 59
     4e6:	9c 15       	cp	r25, r12
     4e8:	08 f4       	brcc	.+2      	; 0x4ec <ds1307_setDateAndTime+0x18>
     4ea:	d2 c0       	rjmp	.+420    	; 0x690 <ds1307_setDateAndTime+0x1bc>
	minute < 0 || minute > 59 ||
     4ec:	9e 15       	cp	r25, r14
     4ee:	08 f4       	brcc	.+2      	; 0x4f2 <ds1307_setDateAndTime+0x1e>
     4f0:	cf c0       	rjmp	.+414    	; 0x690 <ds1307_setDateAndTime+0x1bc>
	hour < 0 || hour > 23 ||
     4f2:	08 31       	cpi	r16, 0x18	; 24
     4f4:	08 f0       	brcs	.+2      	; 0x4f8 <ds1307_setDateAndTime+0x24>
     4f6:	cc c0       	rjmp	.+408    	; 0x690 <ds1307_setDateAndTime+0x1bc>
     4f8:	9f ef       	ldi	r25, 0xFF	; 255
     4fa:	94 0f       	add	r25, r20
     4fc:	9f 31       	cpi	r25, 0x1F	; 31
     4fe:	08 f0       	brcs	.+2      	; 0x502 <ds1307_setDateAndTime+0x2e>
     500:	c7 c0       	rjmp	.+398    	; 0x690 <ds1307_setDateAndTime+0x1bc>
	day < 1 || day > 31 ||
     502:	9f ef       	ldi	r25, 0xFF	; 255
     504:	92 0f       	add	r25, r18
     506:	97 30       	cpi	r25, 0x07	; 7
     508:	08 f0       	brcs	.+2      	; 0x50c <ds1307_setDateAndTime+0x38>
     50a:	c2 c0       	rjmp	.+388    	; 0x690 <ds1307_setDateAndTime+0x1bc>
	weekDay < 1 || weekDay > 7 ||
     50c:	9f ef       	ldi	r25, 0xFF	; 255
     50e:	96 0f       	add	r25, r22
     510:	9c 30       	cpi	r25, 0x0C	; 12
     512:	08 f0       	brcs	.+2      	; 0x516 <ds1307_setDateAndTime+0x42>
     514:	bd c0       	rjmp	.+378    	; 0x690 <ds1307_setDateAndTime+0x1bc>
	month < 1 || month > 12 ||
	year < 0 || year > 99)
     516:	84 36       	cpi	r24, 0x64	; 100
     518:	08 f0       	brcs	.+2      	; 0x51c <ds1307_setDateAndTime+0x48>
     51a:	ba c0       	rjmp	.+372    	; 0x690 <ds1307_setDateAndTime+0x1bc>
     51c:	d2 2f       	mov	r29, r18
     51e:	c4 2f       	mov	r28, r20
     520:	16 2f       	mov	r17, r22
     522:	f8 2e       	mov	r15, r24
		second=0;
	}
	else
	{
		//Write date and time
		i2c->start();		
     524:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     528:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     52c:	04 80       	ldd	r0, Z+4	; 0x04
     52e:	f5 81       	ldd	r31, Z+5	; 0x05
     530:	e0 2d       	mov	r30, r0
     532:	19 95       	eicall
		i2c->selectmode((DS1307_ADDR),I2C_WRITE_MODE); //Write select
     534:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     538:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     53c:	00 84       	ldd	r0, Z+8	; 0x08
     53e:	f1 85       	ldd	r31, Z+9	; 0x09
     540:	e0 2d       	mov	r30, r0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	88 e6       	ldi	r24, 0x68	; 104
     546:	19 95       	eicall
		i2c->write(0x00); //stop oscillator		
     548:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     54c:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     550:	02 84       	ldd	r0, Z+10	; 0x0a
     552:	f3 85       	ldd	r31, Z+11	; 0x0b
     554:	e0 2d       	mov	r30, r0
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	19 95       	eicall
		i2c->write(ds1307_dec2bcd(second));	//Write the data
     55a:	0f 2e       	mov	r0, r31
     55c:	fd ec       	ldi	r31, 0xCD	; 205
     55e:	df 2e       	mov	r13, r31
     560:	f0 2d       	mov	r31, r0
     562:	cd 9c       	mul	r12, r13
     564:	81 2d       	mov	r24, r1
     566:	11 24       	eor	r1, r1
     568:	86 95       	lsr	r24
     56a:	86 95       	lsr	r24
     56c:	86 95       	lsr	r24
     56e:	98 2f       	mov	r25, r24
     570:	99 0f       	add	r25, r25
     572:	89 0f       	add	r24, r25
     574:	88 0f       	add	r24, r24
     576:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     57a:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     57e:	02 84       	ldd	r0, Z+10	; 0x0a
     580:	f3 85       	ldd	r31, Z+11	; 0x0b
     582:	e0 2d       	mov	r30, r0
     584:	8c 0d       	add	r24, r12
     586:	19 95       	eicall
		i2c->write(ds1307_dec2bcd(minute));
     588:	ed 9c       	mul	r14, r13
     58a:	81 2d       	mov	r24, r1
     58c:	11 24       	eor	r1, r1
     58e:	86 95       	lsr	r24
     590:	86 95       	lsr	r24
     592:	86 95       	lsr	r24
     594:	98 2f       	mov	r25, r24
     596:	99 0f       	add	r25, r25
     598:	89 0f       	add	r24, r25
     59a:	88 0f       	add	r24, r24
     59c:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     5a0:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     5a4:	02 84       	ldd	r0, Z+10	; 0x0a
     5a6:	f3 85       	ldd	r31, Z+11	; 0x0b
     5a8:	e0 2d       	mov	r30, r0
     5aa:	8e 0d       	add	r24, r14
     5ac:	19 95       	eicall
		i2c->write(ds1307_dec2bcd(hour));
     5ae:	0d 9d       	mul	r16, r13
     5b0:	81 2d       	mov	r24, r1
     5b2:	11 24       	eor	r1, r1
     5b4:	86 95       	lsr	r24
     5b6:	86 95       	lsr	r24
     5b8:	86 95       	lsr	r24
     5ba:	98 2f       	mov	r25, r24
     5bc:	99 0f       	add	r25, r25
     5be:	89 0f       	add	r24, r25
     5c0:	88 0f       	add	r24, r24
     5c2:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     5c6:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     5ca:	02 84       	ldd	r0, Z+10	; 0x0a
     5cc:	f3 85       	ldd	r31, Z+11	; 0x0b
     5ce:	e0 2d       	mov	r30, r0
     5d0:	80 0f       	add	r24, r16
     5d2:	19 95       	eicall
		i2c->write(ds1307_dec2bcd(weekDay));
     5d4:	dd 9d       	mul	r29, r13
     5d6:	81 2d       	mov	r24, r1
     5d8:	11 24       	eor	r1, r1
     5da:	86 95       	lsr	r24
     5dc:	86 95       	lsr	r24
     5de:	86 95       	lsr	r24
     5e0:	98 2f       	mov	r25, r24
     5e2:	99 0f       	add	r25, r25
     5e4:	89 0f       	add	r24, r25
     5e6:	88 0f       	add	r24, r24
     5e8:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     5ec:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     5f0:	02 84       	ldd	r0, Z+10	; 0x0a
     5f2:	f3 85       	ldd	r31, Z+11	; 0x0b
     5f4:	e0 2d       	mov	r30, r0
     5f6:	8d 0f       	add	r24, r29
     5f8:	19 95       	eicall
		i2c->write(ds1307_dec2bcd(day));
     5fa:	cd 9d       	mul	r28, r13
     5fc:	81 2d       	mov	r24, r1
     5fe:	11 24       	eor	r1, r1
     600:	86 95       	lsr	r24
     602:	86 95       	lsr	r24
     604:	86 95       	lsr	r24
     606:	98 2f       	mov	r25, r24
     608:	99 0f       	add	r25, r25
     60a:	89 0f       	add	r24, r25
     60c:	88 0f       	add	r24, r24
     60e:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     612:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     616:	02 84       	ldd	r0, Z+10	; 0x0a
     618:	f3 85       	ldd	r31, Z+11	; 0x0b
     61a:	e0 2d       	mov	r30, r0
     61c:	8c 0f       	add	r24, r28
     61e:	19 95       	eicall
		i2c->write(ds1307_dec2bcd(month));
     620:	1d 9d       	mul	r17, r13
     622:	81 2d       	mov	r24, r1
     624:	11 24       	eor	r1, r1
     626:	86 95       	lsr	r24
     628:	86 95       	lsr	r24
     62a:	86 95       	lsr	r24
     62c:	98 2f       	mov	r25, r24
     62e:	99 0f       	add	r25, r25
     630:	89 0f       	add	r24, r25
     632:	88 0f       	add	r24, r24
     634:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     638:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     63c:	02 84       	ldd	r0, Z+10	; 0x0a
     63e:	f3 85       	ldd	r31, Z+11	; 0x0b
     640:	e0 2d       	mov	r30, r0
     642:	81 0f       	add	r24, r17
     644:	19 95       	eicall
		i2c->write(ds1307_dec2bcd(year));
     646:	fd 9c       	mul	r15, r13
     648:	d1 2c       	mov	r13, r1
     64a:	11 24       	eor	r1, r1
     64c:	d6 94       	lsr	r13
     64e:	d6 94       	lsr	r13
     650:	d6 94       	lsr	r13
     652:	8d 2d       	mov	r24, r13
     654:	88 0f       	add	r24, r24
     656:	d8 0e       	add	r13, r24
     658:	8d 2d       	mov	r24, r13
     65a:	88 0f       	add	r24, r24
     65c:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     660:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     664:	02 84       	ldd	r0, Z+10	; 0x0a
     666:	f3 85       	ldd	r31, Z+11	; 0x0b
     668:	e0 2d       	mov	r30, r0
     66a:	8f 0d       	add	r24, r15
     66c:	19 95       	eicall
		i2c->write(0x00); //start oscillator
     66e:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     672:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     676:	02 84       	ldd	r0, Z+10	; 0x0a
     678:	f3 85       	ldd	r31, Z+11	; 0x0b
     67a:	e0 2d       	mov	r30, r0
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	19 95       	eicall
		i2c->stop();
     680:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <i2c>
     684:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <i2c+0x1>
     688:	06 80       	ldd	r0, Z+6	; 0x06
     68a:	f7 81       	ldd	r31, Z+7	; 0x07
     68c:	e0 2d       	mov	r30, r0
     68e:	19 95       	eicall
	}
	
}
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	ff 90       	pop	r15
     69a:	ef 90       	pop	r14
     69c:	df 90       	pop	r13
     69e:	cf 90       	pop	r12
     6a0:	08 95       	ret

000006a2 <get_RTC_interface>:
//Constructor
RTC_t *get_RTC_interface(void)
{
	if (!init)
	{
		RTCinterface.initRTC=ds1307_init;
     6a2:	e1 e6       	ldi	r30, 0x61	; 97
     6a4:	f2 e0       	ldi	r31, 0x02	; 2
     6a6:	87 e8       	ldi	r24, 0x87	; 135
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	91 83       	std	Z+1, r25	; 0x01
     6ac:	80 83       	st	Z, r24
		RTCinterface.setDateTime=ds1307_setDateAndTime;
     6ae:	8a e6       	ldi	r24, 0x6A	; 106
     6b0:	92 e0       	ldi	r25, 0x02	; 2
     6b2:	93 83       	std	Z+3, r25	; 0x03
     6b4:	82 83       	std	Z+2, r24	; 0x02
		RTCinterface.getDateTime=ds1307_getDateAndTime;
     6b6:	85 e9       	ldi	r24, 0x95	; 149
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	95 83       	std	Z+5, r25	; 0x05
     6bc:	84 83       	std	Z+4, r24	; 0x04
	}
	return &RTCinterface;
};
     6be:	cf 01       	movw	r24, r30
     6c0:	08 95       	ret

000006c2 <InitUART>:
  // Wait for new character received
  while ( (UCSRnA & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDRn;
}
     6c2:	0f 93       	push	r16
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	ec 01       	movw	r28, r24
     6ca:	db 01       	movw	r26, r22
     6cc:	ca 01       	movw	r24, r20
     6ce:	8c 52       	subi	r24, 0x2C	; 44
     6d0:	91 40       	sbci	r25, 0x01	; 1
     6d2:	a1 09       	sbc	r26, r1
     6d4:	b1 09       	sbc	r27, r1
     6d6:	85 3d       	cpi	r24, 0xD5	; 213
     6d8:	90 4c       	sbci	r25, 0xC0	; 192
     6da:	a1 40       	sbci	r26, 0x01	; 1
     6dc:	b1 05       	cpc	r27, r1
     6de:	08 f0       	brcs	.+2      	; 0x6e2 <InitUART+0x20>
     6e0:	3f c0       	rjmp	.+126    	; 0x760 <InitUART+0x9e>
     6e2:	25 50       	subi	r18, 0x05	; 5
     6e4:	24 30       	cpi	r18, 0x04	; 4
     6e6:	e0 f5       	brcc	.+120    	; 0x760 <InitUART+0x9e>
     6e8:	80 e2       	ldi	r24, 0x20	; 32
     6ea:	88 83       	st	Y, r24
     6ec:	88 e1       	ldi	r24, 0x18	; 24
     6ee:	89 83       	std	Y+1, r24	; 0x01
     6f0:	22 0f       	add	r18, r18
     6f2:	2a 83       	std	Y+2, r18	; 0x02
     6f4:	05 34       	cpi	r16, 0x45	; 69
     6f6:	21 f4       	brne	.+8      	; 0x700 <InitUART+0x3e>
     6f8:	8a 81       	ldd	r24, Y+2	; 0x02
     6fa:	80 62       	ori	r24, 0x20	; 32
     6fc:	8a 83       	std	Y+2, r24	; 0x02
     6fe:	05 c0       	rjmp	.+10     	; 0x70a <InitUART+0x48>
     700:	0f 34       	cpi	r16, 0x4F	; 79
     702:	19 f4       	brne	.+6      	; 0x70a <InitUART+0x48>
     704:	8a 81       	ldd	r24, Y+2	; 0x02
     706:	80 63       	ori	r24, 0x30	; 48
     708:	8a 83       	std	Y+2, r24	; 0x02
     70a:	db 01       	movw	r26, r22
     70c:	ca 01       	movw	r24, r20
     70e:	80 58       	subi	r24, 0x80	; 128
     710:	9b 47       	sbci	r25, 0x7B	; 123
     712:	a1 4e       	sbci	r26, 0xE1	; 225
     714:	bf 4f       	sbci	r27, 0xFF	; 255
     716:	88 0f       	add	r24, r24
     718:	99 1f       	adc	r25, r25
     71a:	aa 1f       	adc	r26, r26
     71c:	bb 1f       	adc	r27, r27
     71e:	88 0f       	add	r24, r24
     720:	99 1f       	adc	r25, r25
     722:	aa 1f       	adc	r26, r26
     724:	bb 1f       	adc	r27, r27
     726:	88 0f       	add	r24, r24
     728:	99 1f       	adc	r25, r25
     72a:	aa 1f       	adc	r26, r26
     72c:	bb 1f       	adc	r27, r27
     72e:	44 0f       	add	r20, r20
     730:	55 1f       	adc	r21, r21
     732:	66 1f       	adc	r22, r22
     734:	77 1f       	adc	r23, r23
     736:	44 0f       	add	r20, r20
     738:	55 1f       	adc	r21, r21
     73a:	66 1f       	adc	r22, r22
     73c:	77 1f       	adc	r23, r23
     73e:	9a 01       	movw	r18, r20
     740:	ab 01       	movw	r20, r22
     742:	22 0f       	add	r18, r18
     744:	33 1f       	adc	r19, r19
     746:	44 1f       	adc	r20, r20
     748:	55 1f       	adc	r21, r21
     74a:	22 0f       	add	r18, r18
     74c:	33 1f       	adc	r19, r19
     74e:	44 1f       	adc	r20, r20
     750:	55 1f       	adc	r21, r21
     752:	bc 01       	movw	r22, r24
     754:	cd 01       	movw	r24, r26
     756:	c6 d6       	rcall	.+3468   	; 0x14e4 <__udivmodsi4>
     758:	21 50       	subi	r18, 0x01	; 1
     75a:	31 09       	sbc	r19, r1
     75c:	3d 83       	std	Y+5, r19	; 0x05
     75e:	2c 83       	std	Y+4, r18	; 0x04
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	0f 91       	pop	r16
     766:	08 95       	ret

00000768 <SendChar>:
Then send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(unsigned int UART_adr, char Tegn)
{
     768:	fc 01       	movw	r30, r24
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRnA & (1<<5)) == 0 )
     76a:	90 81       	ld	r25, Z
     76c:	95 ff       	sbrs	r25, 5
     76e:	fd cf       	rjmp	.-6      	; 0x76a <SendChar+0x2>
  {}
  // Then send the character
  UDRn = Tegn;
     770:	66 83       	std	Z+6, r22	; 0x06
     772:	08 95       	ret

00000774 <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	eb 01       	movw	r28, r22
  // Repeat until zero-termination
  while (*Streng != 0)
     77e:	68 81       	ld	r22, Y
     780:	66 23       	and	r22, r22
     782:	39 f0       	breq	.+14     	; 0x792 <SendString+0x1e>
     784:	8c 01       	movw	r16, r24
     786:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
     788:	c8 01       	movw	r24, r16
     78a:	ee df       	rcall	.-36     	; 0x768 <SendChar>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
     78c:	69 91       	ld	r22, Y+
     78e:	61 11       	cpse	r22, r1
     790:	fb cf       	rjmp	.-10     	; 0x788 <SendString+0x14>
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
    // Advance the pointer one step
    Streng++;
  }
}
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	08 95       	ret

0000079c <SendInteger>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(unsigned int UART_adr, int Tal)
{
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	27 97       	sbiw	r28, 0x07	; 7
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	8c 01       	movw	r16, r24
     7b6:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     7b8:	4a e0       	ldi	r20, 0x0A	; 10
     7ba:	be 01       	movw	r22, r28
     7bc:	6f 5f       	subi	r22, 0xFF	; 255
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	bb d6       	rcall	.+3446   	; 0x1538 <__itoa_ncheck>
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Tal, array, 10);
  // - then send the string
  SendString(UART_adr, array);
     7c2:	be 01       	movw	r22, r28
     7c4:	6f 5f       	subi	r22, 0xFF	; 255
     7c6:	7f 4f       	sbci	r23, 0xFF	; 255
     7c8:	c8 01       	movw	r24, r16
     7ca:	d4 df       	rcall	.-88     	; 0x774 <SendString>
}
     7cc:	27 96       	adiw	r28, 0x07	; 7
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	f8 94       	cli
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	cd bf       	out	0x3d, r28	; 61
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	08 95       	ret

000007e2 <s_start>:
}


static uint8_t s_start(void)
{
	s_i2c->start();
     7e2:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <s_i2c>
     7e6:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <s_i2c+0x1>
     7ea:	04 80       	ldd	r0, Z+4	; 0x04
     7ec:	f5 81       	ldd	r31, Z+5	; 0x05
     7ee:	e0 2d       	mov	r30, r0
     7f0:	19 95       	eicall
	return 1;

}
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	08 95       	ret

000007f6 <s_stop>:
static void s_stop(void)
{
	s_i2c->stop();
     7f6:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <s_i2c>
     7fa:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <s_i2c+0x1>
     7fe:	06 80       	ldd	r0, Z+6	; 0x06
     800:	f7 81       	ldd	r31, Z+7	; 0x07
     802:	e0 2d       	mov	r30, r0
     804:	19 95       	eicall
     806:	08 95       	ret

00000808 <s_enterWrite>:
}
static void s_enterWrite(void)
{
	
	s_i2c->selectmode(ADDR_0,I2C_WRITE_MODE);
     808:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <s_i2c>
     80c:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <s_i2c+0x1>
     810:	00 84       	ldd	r0, Z+8	; 0x08
     812:	f1 85       	ldd	r31, Z+9	; 0x09
     814:	e0 2d       	mov	r30, r0
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	88 e6       	ldi	r24, 0x68	; 104
     81a:	19 95       	eicall
     81c:	08 95       	ret

0000081e <s_selectRegister>:
	s_i2c->selectmode(ADDR_0,I2C_READ_MODE);
	
}
static void s_selectRegister(reg_addr_t p_reg_addr)
{
	s_currentAddr=p_reg_addr;
     81e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	s_i2c->write(p_reg_addr);
     822:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <s_i2c>
     826:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <s_i2c+0x1>
     82a:	02 84       	ldd	r0, Z+10	; 0x0a
     82c:	f3 85       	ldd	r31, Z+11	; 0x0b
     82e:	e0 2d       	mov	r30, r0
     830:	19 95       	eicall
     832:	08 95       	ret

00000834 <s_write>:
}
static void s_write(uint8_t p_data)
{
	s_i2c->write(p_data);
     834:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <s_i2c>
     838:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <s_i2c+0x1>
     83c:	02 84       	ldd	r0, Z+10	; 0x0a
     83e:	f3 85       	ldd	r31, Z+11	; 0x0b
     840:	e0 2d       	mov	r30, r0
     842:	19 95       	eicall
     844:	08 95       	ret

00000846 <s_accerelSettings>:
}

static void s_accerelSettings(uint8_t p_range)
{
//4g right now
	if (p_range<=3)
     846:	84 30       	cpi	r24, 0x04	; 4
     848:	08 f0       	brcs	.+2      	; 0x84c <s_accerelSettings+0x6>
     84a:	4a c0       	rjmp	.+148    	; 0x8e0 <s_accerelSettings+0x9a>
	{
		s_accelRange = p_range;
     84c:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <s_accelRange>
		s_start();
     850:	c8 df       	rcall	.-112    	; 0x7e2 <s_start>
		s_enterWrite();
     852:	da df       	rcall	.-76     	; 0x808 <s_enterWrite>
		s_selectRegister(ACCEL_SETTING_REG);
     854:	8c e1       	ldi	r24, 0x1C	; 28
     856:	e3 df       	rcall	.-58     	; 0x81e <s_selectRegister>
     858:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <s_accelRange>
		s_write(s_accelRange<<3);
     85c:	88 0f       	add	r24, r24
     85e:	88 0f       	add	r24, r24
     860:	88 0f       	add	r24, r24
     862:	e8 df       	rcall	.-48     	; 0x834 <s_write>
		s_stop();
     864:	c8 df       	rcall	.-112    	; 0x7f6 <s_stop>
     866:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <s_accelRange>
		
	switch (s_accelRange)
     86a:	81 30       	cpi	r24, 0x01	; 1
     86c:	99 f0       	breq	.+38     	; 0x894 <s_accerelSettings+0x4e>
     86e:	28 f0       	brcs	.+10     	; 0x87a <s_accerelSettings+0x34>
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	e9 f0       	breq	.+58     	; 0x8ae <s_accerelSettings+0x68>
     874:	83 30       	cpi	r24, 0x03	; 3
     876:	41 f1       	breq	.+80     	; 0x8c8 <s_accerelSettings+0x82>
     878:	08 95       	ret
     87a:	80 e0       	ldi	r24, 0x00	; 0
	{
		case 0:
		s_scalefact_accel = 16384.0;
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	a0 e8       	ldi	r26, 0x80	; 128
     880:	b6 e4       	ldi	r27, 0x46	; 70
     882:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <s_scalefact_accel>
     886:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <s_scalefact_accel+0x1>
     88a:	a0 93 6f 02 	sts	0x026F, r26	; 0x80026f <s_scalefact_accel+0x2>
     88e:	b0 93 70 02 	sts	0x0270, r27	; 0x800270 <s_scalefact_accel+0x3>
     892:	08 95       	ret
		break;
     894:	80 e0       	ldi	r24, 0x00	; 0
		case 1:
		s_scalefact_accel = 8192.0;
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	a0 e0       	ldi	r26, 0x00	; 0
     89a:	b6 e4       	ldi	r27, 0x46	; 70
     89c:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <s_scalefact_accel>
     8a0:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <s_scalefact_accel+0x1>
     8a4:	a0 93 6f 02 	sts	0x026F, r26	; 0x80026f <s_scalefact_accel+0x2>
     8a8:	b0 93 70 02 	sts	0x0270, r27	; 0x800270 <s_scalefact_accel+0x3>
     8ac:	08 95       	ret
		break;
     8ae:	80 e0       	ldi	r24, 0x00	; 0
		case 2:
		s_scalefact_accel = 4096.0;
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	a0 e8       	ldi	r26, 0x80	; 128
     8b4:	b5 e4       	ldi	r27, 0x45	; 69
     8b6:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <s_scalefact_accel>
     8ba:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <s_scalefact_accel+0x1>
     8be:	a0 93 6f 02 	sts	0x026F, r26	; 0x80026f <s_scalefact_accel+0x2>
     8c2:	b0 93 70 02 	sts	0x0270, r27	; 0x800270 <s_scalefact_accel+0x3>
     8c6:	08 95       	ret
		break;
     8c8:	80 e0       	ldi	r24, 0x00	; 0
		case 3:
		s_scalefact_accel = 2048.0;
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	a0 e0       	ldi	r26, 0x00	; 0
     8ce:	b5 e4       	ldi	r27, 0x45	; 69
     8d0:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <s_scalefact_accel>
     8d4:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <s_scalefact_accel+0x1>
     8d8:	a0 93 6f 02 	sts	0x026F, r26	; 0x80026f <s_scalefact_accel+0x2>
     8dc:	b0 93 70 02 	sts	0x0270, r27	; 0x800270 <s_scalefact_accel+0x3>
     8e0:	08 95       	ret

000008e2 <s_gyroSettings>:
     8e2:	84 30       	cpi	r24, 0x04	; 4
	s_stop();
}

static void s_gyroSettings(uint8_t p_range)
{
	if (p_range<=3)
     8e4:	08 f0       	brcs	.+2      	; 0x8e8 <s_gyroSettings+0x6>
     8e6:	4a c0       	rjmp	.+148    	; 0x97c <s_gyroSettings+0x9a>
	{
		s_gyroRange = p_range;
     8e8:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <s_gyroRange>
		s_start();
     8ec:	7a df       	rcall	.-268    	; 0x7e2 <s_start>
		s_enterWrite();
     8ee:	8c df       	rcall	.-232    	; 0x808 <s_enterWrite>
		s_selectRegister(GYRO_SETTING_REG);
     8f0:	8b e1       	ldi	r24, 0x1B	; 27
     8f2:	95 df       	rcall	.-214    	; 0x81e <s_selectRegister>
     8f4:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <s_gyroRange>
		s_write(s_gyroRange<<3);
     8f8:	88 0f       	add	r24, r24
     8fa:	88 0f       	add	r24, r24
     8fc:	88 0f       	add	r24, r24
     8fe:	9a df       	rcall	.-204    	; 0x834 <s_write>
		s_stop();
     900:	7a df       	rcall	.-268    	; 0x7f6 <s_stop>
     902:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <s_gyroRange>
		
		switch (s_gyroRange)
     906:	81 30       	cpi	r24, 0x01	; 1
     908:	99 f0       	breq	.+38     	; 0x930 <s_gyroSettings+0x4e>
     90a:	28 f0       	brcs	.+10     	; 0x916 <s_gyroSettings+0x34>
     90c:	82 30       	cpi	r24, 0x02	; 2
     90e:	e9 f0       	breq	.+58     	; 0x94a <s_gyroSettings+0x68>
     910:	83 30       	cpi	r24, 0x03	; 3
     912:	41 f1       	breq	.+80     	; 0x964 <s_gyroSettings+0x82>
     914:	08 95       	ret
     916:	80 e0       	ldi	r24, 0x00	; 0
		{
		case 0:
			s_scalefact_gyro = 131.0;	
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	a3 e0       	ldi	r26, 0x03	; 3
     91c:	b3 e4       	ldi	r27, 0x43	; 67
     91e:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <s_scalefact_gyro>
     922:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <s_scalefact_gyro+0x1>
     926:	a0 93 6b 02 	sts	0x026B, r26	; 0x80026b <s_scalefact_gyro+0x2>
     92a:	b0 93 6c 02 	sts	0x026C, r27	; 0x80026c <s_scalefact_gyro+0x3>
     92e:	08 95       	ret
		break;
     930:	80 e0       	ldi	r24, 0x00	; 0
		case 1:
			s_scalefact_gyro = 65.5;	
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	a3 e8       	ldi	r26, 0x83	; 131
     936:	b2 e4       	ldi	r27, 0x42	; 66
     938:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <s_scalefact_gyro>
     93c:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <s_scalefact_gyro+0x1>
     940:	a0 93 6b 02 	sts	0x026B, r26	; 0x80026b <s_scalefact_gyro+0x2>
     944:	b0 93 6c 02 	sts	0x026C, r27	; 0x80026c <s_scalefact_gyro+0x3>
     948:	08 95       	ret
		break;
     94a:	83 e3       	ldi	r24, 0x33	; 51
		case 2:
			s_scalefact_gyro = 32.8;	
     94c:	93 e3       	ldi	r25, 0x33	; 51
     94e:	a3 e0       	ldi	r26, 0x03	; 3
     950:	b2 e4       	ldi	r27, 0x42	; 66
     952:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <s_scalefact_gyro>
     956:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <s_scalefact_gyro+0x1>
     95a:	a0 93 6b 02 	sts	0x026B, r26	; 0x80026b <s_scalefact_gyro+0x2>
     95e:	b0 93 6c 02 	sts	0x026C, r27	; 0x80026c <s_scalefact_gyro+0x3>
     962:	08 95       	ret
		break;
     964:	83 e3       	ldi	r24, 0x33	; 51
		case 3:
			s_scalefact_gyro = 16.4;
     966:	93 e3       	ldi	r25, 0x33	; 51
     968:	a3 e8       	ldi	r26, 0x83	; 131
     96a:	b1 e4       	ldi	r27, 0x41	; 65
     96c:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <s_scalefact_gyro>
     970:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <s_scalefact_gyro+0x1>
     974:	a0 93 6b 02 	sts	0x026B, r26	; 0x80026b <s_scalefact_gyro+0x2>
     978:	b0 93 6c 02 	sts	0x026C, r27	; 0x80026c <s_scalefact_gyro+0x3>
     97c:	08 95       	ret

0000097e <s_reset>:
     97e:	31 df       	rcall	.-414    	; 0x7e2 <s_start>


static void s_reset(void)
{
	s_start();
	s_enterWrite();
     980:	43 df       	rcall	.-378    	; 0x808 <s_enterWrite>
	s_selectRegister(0x6B);
     982:	8b e6       	ldi	r24, 0x6B	; 107
     984:	4c df       	rcall	.-360    	; 0x81e <s_selectRegister>
	s_write(0x00);
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	55 df       	rcall	.-342    	; 0x834 <s_write>
     98a:	35 cf       	rjmp	.-406    	; 0x7f6 <s_stop>
	s_stop();
     98c:	08 95       	ret

0000098e <s_read>:
     98e:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <s_i2c>
{
	s_i2c->write(p_data);
}
static uint8_t s_read(bool p_is_last)
{
	int16_t temp=s_i2c->read(p_is_last);
     992:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <s_i2c+0x1>
     996:	04 84       	ldd	r0, Z+12	; 0x0c
     998:	f5 85       	ldd	r31, Z+13	; 0x0d
     99a:	e0 2d       	mov	r30, r0
     99c:	19 95       	eicall
     99e:	28 2f       	mov	r18, r24
     9a0:	a8 2f       	mov	r26, r24
     9a2:	b0 e0       	ldi	r27, 0x00	; 0
	
	switch (s_currentAddr)
     9a4:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     9a8:	49 2f       	mov	r20, r25
     9aa:	50 e0       	ldi	r21, 0x00	; 0
     9ac:	fa 01       	movw	r30, r20
     9ae:	fb 97       	sbiw	r30, 0x3b	; 59
     9b0:	ee 30       	cpi	r30, 0x0E	; 14
     9b2:	f1 05       	cpc	r31, r1
     9b4:	08 f0       	brcs	.+2      	; 0x9b8 <s_read+0x2a>
     9b6:	66 c0       	rjmp	.+204    	; 0xa84 <s_read+0xf6>
     9b8:	88 27       	eor	r24, r24
     9ba:	ee 58       	subi	r30, 0x8E	; 142
     9bc:	ff 4f       	sbci	r31, 0xFF	; 255
     9be:	8f 4f       	sbci	r24, 0xFF	; 255
     9c0:	b3 c5       	rjmp	.+2918   	; 0x1528 <__tablejump2__>
	{
		//accelerometer
		case ACCEL_XOUT_H:
			s_data_struct.accel_x=temp<<8;
     9c2:	e3 e7       	ldi	r30, 0x73	; 115
     9c4:	f2 e0       	ldi	r31, 0x02	; 2
     9c6:	10 82       	st	Z, r1
     9c8:	21 83       	std	Z+1, r18	; 0x01
		break;
     9ca:	5c c0       	rjmp	.+184    	; 0xa84 <s_read+0xf6>
		
		case ACCEL_XOUT_L:
			s_data_struct.accel_x|=temp;
     9cc:	e3 e7       	ldi	r30, 0x73	; 115
     9ce:	f2 e0       	ldi	r31, 0x02	; 2
     9d0:	40 81       	ld	r20, Z
     9d2:	51 81       	ldd	r21, Z+1	; 0x01
     9d4:	a4 2b       	or	r26, r20
     9d6:	b5 2b       	or	r27, r21
     9d8:	b1 83       	std	Z+1, r27	; 0x01
     9da:	a0 83       	st	Z, r26
		break;
     9dc:	53 c0       	rjmp	.+166    	; 0xa84 <s_read+0xf6>
		
		case ACCEL_YOUT_H:
			s_data_struct.accel_y=temp<<8;
     9de:	e3 e7       	ldi	r30, 0x73	; 115
     9e0:	f2 e0       	ldi	r31, 0x02	; 2
     9e2:	12 82       	std	Z+2, r1	; 0x02
     9e4:	23 83       	std	Z+3, r18	; 0x03
		break;
     9e6:	4e c0       	rjmp	.+156    	; 0xa84 <s_read+0xf6>
		
		case ACCEL_YOUT_L:
			s_data_struct.accel_y|=temp;
     9e8:	e3 e7       	ldi	r30, 0x73	; 115
     9ea:	f2 e0       	ldi	r31, 0x02	; 2
     9ec:	42 81       	ldd	r20, Z+2	; 0x02
     9ee:	53 81       	ldd	r21, Z+3	; 0x03
     9f0:	a4 2b       	or	r26, r20
     9f2:	b5 2b       	or	r27, r21
     9f4:	b3 83       	std	Z+3, r27	; 0x03
     9f6:	a2 83       	std	Z+2, r26	; 0x02
		break;
     9f8:	45 c0       	rjmp	.+138    	; 0xa84 <s_read+0xf6>
		
		case ACCEL_ZOUT_H:
			s_data_struct.accel_z=temp<<8;
     9fa:	e3 e7       	ldi	r30, 0x73	; 115
     9fc:	f2 e0       	ldi	r31, 0x02	; 2
     9fe:	14 82       	std	Z+4, r1	; 0x04
     a00:	25 83       	std	Z+5, r18	; 0x05
		break;
     a02:	40 c0       	rjmp	.+128    	; 0xa84 <s_read+0xf6>
		
		case ACCEL_ZOUT_L:
			s_data_struct.accel_z|=temp;
     a04:	e3 e7       	ldi	r30, 0x73	; 115
     a06:	f2 e0       	ldi	r31, 0x02	; 2
     a08:	44 81       	ldd	r20, Z+4	; 0x04
     a0a:	55 81       	ldd	r21, Z+5	; 0x05
     a0c:	a4 2b       	or	r26, r20
     a0e:	b5 2b       	or	r27, r21
     a10:	b5 83       	std	Z+5, r27	; 0x05
     a12:	a4 83       	std	Z+4, r26	; 0x04
		break;
     a14:	37 c0       	rjmp	.+110    	; 0xa84 <s_read+0xf6>
		
		//temperature
		case TEMP_OUT_H:
			s_data_struct.temp=temp<<8;
     a16:	e3 e7       	ldi	r30, 0x73	; 115
     a18:	f2 e0       	ldi	r31, 0x02	; 2
     a1a:	16 82       	std	Z+6, r1	; 0x06
     a1c:	27 83       	std	Z+7, r18	; 0x07
		break;
     a1e:	32 c0       	rjmp	.+100    	; 0xa84 <s_read+0xf6>
		
		case TEMP_OUT_L:
			s_data_struct.temp|=temp;
     a20:	e3 e7       	ldi	r30, 0x73	; 115
     a22:	f2 e0       	ldi	r31, 0x02	; 2
     a24:	46 81       	ldd	r20, Z+6	; 0x06
     a26:	57 81       	ldd	r21, Z+7	; 0x07
     a28:	a4 2b       	or	r26, r20
     a2a:	b5 2b       	or	r27, r21
     a2c:	b7 83       	std	Z+7, r27	; 0x07
     a2e:	a6 83       	std	Z+6, r26	; 0x06
		break;
     a30:	29 c0       	rjmp	.+82     	; 0xa84 <s_read+0xf6>
		
		//Gyro
		case GYRO_XOUT_H:
			s_data_struct.gyro_x=temp<<8;
     a32:	e3 e7       	ldi	r30, 0x73	; 115
     a34:	f2 e0       	ldi	r31, 0x02	; 2
     a36:	10 86       	std	Z+8, r1	; 0x08
     a38:	21 87       	std	Z+9, r18	; 0x09
		break;
     a3a:	24 c0       	rjmp	.+72     	; 0xa84 <s_read+0xf6>
		
		case GYRO_XOUT_L:
			s_data_struct.gyro_x|=temp;
     a3c:	e3 e7       	ldi	r30, 0x73	; 115
     a3e:	f2 e0       	ldi	r31, 0x02	; 2
     a40:	40 85       	ldd	r20, Z+8	; 0x08
     a42:	51 85       	ldd	r21, Z+9	; 0x09
     a44:	a4 2b       	or	r26, r20
     a46:	b5 2b       	or	r27, r21
     a48:	b1 87       	std	Z+9, r27	; 0x09
     a4a:	a0 87       	std	Z+8, r26	; 0x08
		break;
     a4c:	1b c0       	rjmp	.+54     	; 0xa84 <s_read+0xf6>
		
		case GYRO_YOUT_H:
			s_data_struct.gyro_y=temp<<8;
     a4e:	e3 e7       	ldi	r30, 0x73	; 115
     a50:	f2 e0       	ldi	r31, 0x02	; 2
     a52:	12 86       	std	Z+10, r1	; 0x0a
     a54:	23 87       	std	Z+11, r18	; 0x0b
		break;
     a56:	16 c0       	rjmp	.+44     	; 0xa84 <s_read+0xf6>
		
		case GYRO_YOUT_L:
			s_data_struct.gyro_y|=temp;
     a58:	e3 e7       	ldi	r30, 0x73	; 115
     a5a:	f2 e0       	ldi	r31, 0x02	; 2
     a5c:	42 85       	ldd	r20, Z+10	; 0x0a
     a5e:	53 85       	ldd	r21, Z+11	; 0x0b
     a60:	a4 2b       	or	r26, r20
     a62:	b5 2b       	or	r27, r21
     a64:	b3 87       	std	Z+11, r27	; 0x0b
     a66:	a2 87       	std	Z+10, r26	; 0x0a
		break;
     a68:	0d c0       	rjmp	.+26     	; 0xa84 <s_read+0xf6>
			
		case GYRO_ZOUT_H:
			s_data_struct.gyro_z=temp<<8;
     a6a:	e3 e7       	ldi	r30, 0x73	; 115
     a6c:	f2 e0       	ldi	r31, 0x02	; 2
     a6e:	14 86       	std	Z+12, r1	; 0x0c
     a70:	25 87       	std	Z+13, r18	; 0x0d
		break;
     a72:	08 c0       	rjmp	.+16     	; 0xa84 <s_read+0xf6>
				
		case GYRO_ZOUT_L:
			s_data_struct.gyro_z|=temp;
     a74:	e3 e7       	ldi	r30, 0x73	; 115
     a76:	f2 e0       	ldi	r31, 0x02	; 2
     a78:	44 85       	ldd	r20, Z+12	; 0x0c
     a7a:	55 85       	ldd	r21, Z+13	; 0x0d
     a7c:	a4 2b       	or	r26, r20
     a7e:	b5 2b       	or	r27, r21
     a80:	b5 87       	std	Z+13, r27	; 0x0d
     a82:	a4 87       	std	Z+12, r26	; 0x0c
		default:
		//de nada
		break;
	}
	
	s_currentAddr++;
     a84:	9f 5f       	subi	r25, 0xFF	; 255
     a86:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
	//SendInteger(UART0,currentAddr);
	//SendString(UART0,"\n");
return temp;
}
     a8a:	82 2f       	mov	r24, r18
     a8c:	08 95       	ret

00000a8e <s_gatherData>:
	}
	return &s_GA_interface; 
}

static void s_gatherData(void)
{
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
	int i=0;
	s_start();
     a92:	a7 de       	rcall	.-690    	; 0x7e2 <s_start>
	s_enterWrite();
     a94:	b9 de       	rcall	.-654    	; 0x808 <s_enterWrite>
	s_selectRegister(ACCEL_XOUT_H);
     a96:	8b e3       	ldi	r24, 0x3B	; 59
     a98:	c2 de       	rcall	.-636    	; 0x81e <s_selectRegister>
	s_start();
     a9a:	a3 de       	rcall	.-698    	; 0x7e2 <s_start>
     a9c:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <s_i2c>
	
}
static void s_enterRead(void)
{

	s_i2c->selectmode(ADDR_0,I2C_READ_MODE);
     aa0:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <s_i2c+0x1>
     aa4:	00 84       	ldd	r0, Z+8	; 0x08
     aa6:	f1 85       	ldd	r31, Z+9	; 0x09
     aa8:	e0 2d       	mov	r30, r0
     aaa:	61 e0       	ldi	r22, 0x01	; 1
     aac:	88 e6       	ldi	r24, 0x68	; 104
     aae:	19 95       	eicall
     ab0:	cd e0       	ldi	r28, 0x0D	; 13
     ab2:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(i=0;i<14;++i)
	{
		if(i==13)
		{
			s_read(true);
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <s_gatherData+0x30>
     ab6:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			s_read(false);
		}
	}
	s_stop();
     ab8:	6a df       	rcall	.-300    	; 0x98e <s_read>
     aba:	9d de       	rcall	.-710    	; 0x7f6 <s_stop>
}
     abc:	05 c0       	rjmp	.+10     	; 0xac8 <s_gatherData+0x3a>
		{
			s_read(true);
		}
		else
		{
			s_read(false);
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	66 df       	rcall	.-308    	; 0x98e <s_read>
     ac2:	21 97       	sbiw	r28, 0x01	; 1
     ac4:	e1 f7       	brne	.-8      	; 0xabe <s_gatherData+0x30>
	s_start();
	s_enterRead();
	
	for(i=0;i<14;++i)
	{
		if(i==13)
     ac6:	f7 cf       	rjmp	.-18     	; 0xab6 <s_gatherData+0x28>
     ac8:	df 91       	pop	r29
		{
			s_read(false);
		}
	}
	s_stop();
}
     aca:	cf 91       	pop	r28
     acc:	08 95       	ret

00000ace <s_getAccelXYZ>:
     ace:	cf 92       	push	r12
	//SendString(UART0,"\n");
return temp;
}

static void s_getAccelXYZ(int32_t* p_XYZ)
{
     ad0:	df 92       	push	r13
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	ec 01       	movw	r28, r24
	int temp=0;
	//return mG
	p_XYZ[0]=(int32_t)((((double)s_data_struct.accel_x)/((double)s_scalefact_accel))*1000);
     ae0:	c0 90 6d 02 	lds	r12, 0x026D	; 0x80026d <s_scalefact_accel>
     ae4:	d0 90 6e 02 	lds	r13, 0x026E	; 0x80026e <s_scalefact_accel+0x1>
     ae8:	e0 90 6f 02 	lds	r14, 0x026F	; 0x80026f <s_scalefact_accel+0x2>
     aec:	f0 90 70 02 	lds	r15, 0x0270	; 0x800270 <s_scalefact_accel+0x3>
     af0:	03 e7       	ldi	r16, 0x73	; 115
     af2:	12 e0       	ldi	r17, 0x02	; 2
     af4:	f8 01       	movw	r30, r16
     af6:	60 81       	ld	r22, Z
     af8:	71 81       	ldd	r23, Z+1	; 0x01
     afa:	07 2e       	mov	r0, r23
     afc:	00 0c       	add	r0, r0
     afe:	88 0b       	sbc	r24, r24
     b00:	99 0b       	sbc	r25, r25
     b02:	7b d3       	rcall	.+1782   	; 0x11fa <__floatsisf>
     b04:	a7 01       	movw	r20, r14
     b06:	96 01       	movw	r18, r12
     b08:	dd d2       	rcall	.+1466   	; 0x10c4 <__divsf3>
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	4a e7       	ldi	r20, 0x7A	; 122
     b10:	54 e4       	ldi	r21, 0x44	; 68
     b12:	2b d4       	rcall	.+2134   	; 0x136a <__mulsf3>
     b14:	3f d3       	rcall	.+1662   	; 0x1194 <__fixsfsi>
     b16:	68 83       	st	Y, r22
     b18:	79 83       	std	Y+1, r23	; 0x01
     b1a:	8a 83       	std	Y+2, r24	; 0x02
     b1c:	9b 83       	std	Y+3, r25	; 0x03

	p_XYZ[1]=(int32_t)((((double)s_data_struct.accel_y)/((double)s_scalefact_accel))*1000);
     b1e:	f8 01       	movw	r30, r16
     b20:	62 81       	ldd	r22, Z+2	; 0x02
     b22:	73 81       	ldd	r23, Z+3	; 0x03
     b24:	07 2e       	mov	r0, r23
     b26:	00 0c       	add	r0, r0
     b28:	88 0b       	sbc	r24, r24
     b2a:	99 0b       	sbc	r25, r25
     b2c:	66 d3       	rcall	.+1740   	; 0x11fa <__floatsisf>
     b2e:	a7 01       	movw	r20, r14
     b30:	96 01       	movw	r18, r12
     b32:	c8 d2       	rcall	.+1424   	; 0x10c4 <__divsf3>
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	4a e7       	ldi	r20, 0x7A	; 122
     b3a:	54 e4       	ldi	r21, 0x44	; 68
     b3c:	16 d4       	rcall	.+2092   	; 0x136a <__mulsf3>
     b3e:	2a d3       	rcall	.+1620   	; 0x1194 <__fixsfsi>
     b40:	6c 83       	std	Y+4, r22	; 0x04
     b42:	7d 83       	std	Y+5, r23	; 0x05
     b44:	8e 83       	std	Y+6, r24	; 0x06
     b46:	9f 83       	std	Y+7, r25	; 0x07

	p_XYZ[2]=(int32_t)((((double)s_data_struct.accel_z)/((double)s_scalefact_accel))*1000);
     b48:	f8 01       	movw	r30, r16
     b4a:	64 81       	ldd	r22, Z+4	; 0x04
     b4c:	75 81       	ldd	r23, Z+5	; 0x05
     b4e:	07 2e       	mov	r0, r23
     b50:	00 0c       	add	r0, r0
     b52:	88 0b       	sbc	r24, r24
     b54:	99 0b       	sbc	r25, r25
     b56:	51 d3       	rcall	.+1698   	; 0x11fa <__floatsisf>
     b58:	a7 01       	movw	r20, r14
     b5a:	96 01       	movw	r18, r12
     b5c:	b3 d2       	rcall	.+1382   	; 0x10c4 <__divsf3>
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	4a e7       	ldi	r20, 0x7A	; 122
     b64:	54 e4       	ldi	r21, 0x44	; 68
     b66:	01 d4       	rcall	.+2050   	; 0x136a <__mulsf3>
     b68:	15 d3       	rcall	.+1578   	; 0x1194 <__fixsfsi>
     b6a:	68 87       	std	Y+8, r22	; 0x08
     b6c:	79 87       	std	Y+9, r23	; 0x09
     b6e:	8a 87       	std	Y+10, r24	; 0x0a
     b70:	9b 87       	std	Y+11, r25	; 0x0b
     b72:	df 91       	pop	r29
	////return mm/s^2
	//p_XYZ[0]=(int32_t)(MS_SQR*(data_struct.accel_x)/(s_scalefact_accel/1000.0));
	//p_XYZ[1]=(int32_t)(MS_SQR*(data_struct.accel_y)/(s_scalefact_accel/1000.0));
	//p_XYZ[2]=(int32_t)(MS_SQR*(data_struct.accel_z)/(s_scalefact_accel/1000.0));
}
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	df 90       	pop	r13
     b80:	cf 90       	pop	r12
     b82:	08 95       	ret

00000b84 <s_getGyroXYZ>:
     b84:	cf 92       	push	r12

static void s_getGyroXYZ(int32_t* p_XYZ)
{
     b86:	df 92       	push	r13
     b88:	ef 92       	push	r14
     b8a:	ff 92       	push	r15
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	ec 01       	movw	r28, r24
	//return in deg/s
	p_XYZ[0]=(int32_t)((s_data_struct.gyro_x)/(s_scalefact_gyro));
     b96:	c0 90 69 02 	lds	r12, 0x0269	; 0x800269 <s_scalefact_gyro>
     b9a:	d0 90 6a 02 	lds	r13, 0x026A	; 0x80026a <s_scalefact_gyro+0x1>
     b9e:	e0 90 6b 02 	lds	r14, 0x026B	; 0x80026b <s_scalefact_gyro+0x2>
     ba2:	f0 90 6c 02 	lds	r15, 0x026C	; 0x80026c <s_scalefact_gyro+0x3>
     ba6:	03 e7       	ldi	r16, 0x73	; 115
     ba8:	12 e0       	ldi	r17, 0x02	; 2
     baa:	f8 01       	movw	r30, r16
     bac:	60 85       	ldd	r22, Z+8	; 0x08
     bae:	71 85       	ldd	r23, Z+9	; 0x09
     bb0:	07 2e       	mov	r0, r23
     bb2:	00 0c       	add	r0, r0
     bb4:	88 0b       	sbc	r24, r24
     bb6:	99 0b       	sbc	r25, r25
     bb8:	20 d3       	rcall	.+1600   	; 0x11fa <__floatsisf>
     bba:	a7 01       	movw	r20, r14
     bbc:	96 01       	movw	r18, r12
     bbe:	82 d2       	rcall	.+1284   	; 0x10c4 <__divsf3>
     bc0:	e9 d2       	rcall	.+1490   	; 0x1194 <__fixsfsi>
     bc2:	68 83       	st	Y, r22
     bc4:	79 83       	std	Y+1, r23	; 0x01
     bc6:	8a 83       	std	Y+2, r24	; 0x02
     bc8:	9b 83       	std	Y+3, r25	; 0x03
	p_XYZ[1]=(int32_t)((s_data_struct.gyro_y)/(s_scalefact_gyro));
     bca:	f8 01       	movw	r30, r16
     bcc:	62 85       	ldd	r22, Z+10	; 0x0a
     bce:	73 85       	ldd	r23, Z+11	; 0x0b
     bd0:	07 2e       	mov	r0, r23
     bd2:	00 0c       	add	r0, r0
     bd4:	88 0b       	sbc	r24, r24
     bd6:	99 0b       	sbc	r25, r25
     bd8:	10 d3       	rcall	.+1568   	; 0x11fa <__floatsisf>
     bda:	a7 01       	movw	r20, r14
     bdc:	96 01       	movw	r18, r12
     bde:	72 d2       	rcall	.+1252   	; 0x10c4 <__divsf3>
     be0:	d9 d2       	rcall	.+1458   	; 0x1194 <__fixsfsi>
     be2:	6c 83       	std	Y+4, r22	; 0x04
     be4:	7d 83       	std	Y+5, r23	; 0x05
     be6:	8e 83       	std	Y+6, r24	; 0x06
     be8:	9f 83       	std	Y+7, r25	; 0x07
	p_XYZ[2]=(int32_t)((s_data_struct.gyro_z)/(s_scalefact_gyro));
     bea:	f8 01       	movw	r30, r16
     bec:	64 85       	ldd	r22, Z+12	; 0x0c
     bee:	75 85       	ldd	r23, Z+13	; 0x0d
     bf0:	07 2e       	mov	r0, r23
     bf2:	00 0c       	add	r0, r0
     bf4:	88 0b       	sbc	r24, r24
     bf6:	99 0b       	sbc	r25, r25
     bf8:	00 d3       	rcall	.+1536   	; 0x11fa <__floatsisf>
     bfa:	a7 01       	movw	r20, r14
     bfc:	96 01       	movw	r18, r12
     bfe:	62 d2       	rcall	.+1220   	; 0x10c4 <__divsf3>
     c00:	c9 d2       	rcall	.+1426   	; 0x1194 <__fixsfsi>
     c02:	68 87       	std	Y+8, r22	; 0x08
     c04:	79 87       	std	Y+9, r23	; 0x09
     c06:	8a 87       	std	Y+10, r24	; 0x0a
     c08:	9b 87       	std	Y+11, r25	; 0x0b
}
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	ef 90       	pop	r14
     c16:	df 90       	pop	r13
     c18:	cf 90       	pop	r12
     c1a:	08 95       	ret

00000c1c <s_getPitchRoll>:

static void s_getPitchRoll(int16_t *p_pitchRoll)
{	
     c1c:	4f 92       	push	r4
     c1e:	5f 92       	push	r5
     c20:	6f 92       	push	r6
     c22:	7f 92       	push	r7
     c24:	8f 92       	push	r8
     c26:	9f 92       	push	r9
     c28:	af 92       	push	r10
     c2a:	bf 92       	push	r11
     c2c:	cf 92       	push	r12
     c2e:	df 92       	push	r13
     c30:	ef 92       	push	r14
     c32:	ff 92       	push	r15
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	00 d0       	rcall	.+0      	; 0xc3e <s_getPitchRoll+0x22>
     c3e:	1f 92       	push	r1
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	8c 01       	movw	r16, r24
	p_pitchRoll[0] = (int16_t)((atan2(((s_data_struct.accel_y)/s_scalefact_accel),((s_data_struct.accel_z)/s_scalefact_accel)))*PI_DIV_180);
     c46:	40 90 6d 02 	lds	r4, 0x026D	; 0x80026d <s_scalefact_accel>
     c4a:	50 90 6e 02 	lds	r5, 0x026E	; 0x80026e <s_scalefact_accel+0x1>
     c4e:	60 90 6f 02 	lds	r6, 0x026F	; 0x80026f <s_scalefact_accel+0x2>
     c52:	70 90 70 02 	lds	r7, 0x0270	; 0x800270 <s_scalefact_accel+0x3>
     c56:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <s_data_struct+0x4>
     c5a:	70 91 78 02 	lds	r23, 0x0278	; 0x800278 <s_data_struct+0x5>
     c5e:	07 2e       	mov	r0, r23
     c60:	00 0c       	add	r0, r0
     c62:	88 0b       	sbc	r24, r24
     c64:	99 0b       	sbc	r25, r25
     c66:	c9 d2       	rcall	.+1426   	; 0x11fa <__floatsisf>
     c68:	a3 01       	movw	r20, r6
     c6a:	92 01       	movw	r18, r4
     c6c:	2b d2       	rcall	.+1110   	; 0x10c4 <__divsf3>
     c6e:	6b 01       	movw	r12, r22
     c70:	7c 01       	movw	r14, r24
     c72:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <s_data_struct+0x2>
     c76:	70 91 76 02 	lds	r23, 0x0276	; 0x800276 <s_data_struct+0x3>
     c7a:	07 2e       	mov	r0, r23
     c7c:	00 0c       	add	r0, r0
     c7e:	88 0b       	sbc	r24, r24
     c80:	99 0b       	sbc	r25, r25
     c82:	bb d2       	rcall	.+1398   	; 0x11fa <__floatsisf>
     c84:	a3 01       	movw	r20, r6
     c86:	92 01       	movw	r18, r4
     c88:	1d d2       	rcall	.+1082   	; 0x10c4 <__divsf3>
     c8a:	4b 01       	movw	r8, r22
     c8c:	5c 01       	movw	r10, r24
     c8e:	a7 01       	movw	r20, r14
     c90:	96 01       	movw	r18, r12
     c92:	c5 d1       	rcall	.+906    	; 0x101e <atan2>
     c94:	21 ee       	ldi	r18, 0xE1	; 225
     c96:	3e e2       	ldi	r19, 0x2E	; 46
     c98:	45 e6       	ldi	r20, 0x65	; 101
     c9a:	52 e4       	ldi	r21, 0x42	; 66
     c9c:	66 d3       	rcall	.+1740   	; 0x136a <__mulsf3>
     c9e:	7a d2       	rcall	.+1268   	; 0x1194 <__fixsfsi>
     ca0:	f8 01       	movw	r30, r16
     ca2:	71 83       	std	Z+1, r23	; 0x01
     ca4:	60 83       	st	Z, r22
	p_pitchRoll[1] = (int16_t)((atan2((-1.0 * (s_data_struct.accel_x)/s_scalefact_accel) , sqrt(((s_data_struct.accel_y)/s_scalefact_accel) * ((s_data_struct.accel_y)/s_scalefact_accel) 
     ca6:	a5 01       	movw	r20, r10
     ca8:	94 01       	movw	r18, r8
     caa:	c5 01       	movw	r24, r10
     cac:	b4 01       	movw	r22, r8
     cae:	5d d3       	rcall	.+1722   	; 0x136a <__mulsf3>
     cb0:	69 83       	std	Y+1, r22	; 0x01
     cb2:	7a 83       	std	Y+2, r23	; 0x02
     cb4:	8b 83       	std	Y+3, r24	; 0x03
     cb6:	9c 83       	std	Y+4, r25	; 0x04
     cb8:	a5 01       	movw	r20, r10
     cba:	94 01       	movw	r18, r8
     cbc:	c5 01       	movw	r24, r10
     cbe:	b4 01       	movw	r22, r8
     cc0:	54 d3       	rcall	.+1704   	; 0x136a <__mulsf3>
     cc2:	4b 01       	movw	r8, r22
     cc4:	5c 01       	movw	r10, r24
     cc6:	a7 01       	movw	r20, r14
     cc8:	96 01       	movw	r18, r12
     cca:	c7 01       	movw	r24, r14
     ccc:	b6 01       	movw	r22, r12
     cce:	4d d3       	rcall	.+1690   	; 0x136a <__mulsf3>
     cd0:	9b 01       	movw	r18, r22
     cd2:	ac 01       	movw	r20, r24
     cd4:	c5 01       	movw	r24, r10
     cd6:	b4 01       	movw	r22, r8
     cd8:	2f d1       	rcall	.+606    	; 0xf38 <__addsf3>
     cda:	ae d3       	rcall	.+1884   	; 0x1438 <sqrt>
     cdc:	6b 01       	movw	r12, r22
     cde:	7c 01       	movw	r14, r24
     ce0:	e3 e7       	ldi	r30, 0x73	; 115
     ce2:	f2 e0       	ldi	r31, 0x02	; 2
     ce4:	60 81       	ld	r22, Z
     ce6:	71 81       	ldd	r23, Z+1	; 0x01
     ce8:	07 2e       	mov	r0, r23
     cea:	00 0c       	add	r0, r0
     cec:	88 0b       	sbc	r24, r24
     cee:	99 0b       	sbc	r25, r25
     cf0:	84 d2       	rcall	.+1288   	; 0x11fa <__floatsisf>
     cf2:	90 58       	subi	r25, 0x80	; 128
     cf4:	a3 01       	movw	r20, r6
     cf6:	92 01       	movw	r18, r4
     cf8:	e5 d1       	rcall	.+970    	; 0x10c4 <__divsf3>
     cfa:	a7 01       	movw	r20, r14
     cfc:	96 01       	movw	r18, r12
     cfe:	8f d1       	rcall	.+798    	; 0x101e <atan2>
     d00:	21 ee       	ldi	r18, 0xE1	; 225
     d02:	3e e2       	ldi	r19, 0x2E	; 46
     d04:	45 e6       	ldi	r20, 0x65	; 101
     d06:	52 e4       	ldi	r21, 0x42	; 66
     d08:	30 d3       	rcall	.+1632   	; 0x136a <__mulsf3>
     d0a:	44 d2       	rcall	.+1160   	; 0x1194 <__fixsfsi>
     d0c:	f8 01       	movw	r30, r16
     d0e:	73 83       	std	Z+3, r23	; 0x03
     d10:	62 83       	std	Z+2, r22	; 0x02
     d12:	0f 90       	pop	r0
					+ ((s_data_struct.accel_z)/s_scalefact_accel) * ((s_data_struct.accel_z)/s_scalefact_accel))))*PI_DIV_180);

//https://wiki.dfrobot.com/How_to_Use_a_Three-Axis_Accelerometer_for_Tilt_Sensing

}
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	1f 91       	pop	r17
     d20:	0f 91       	pop	r16
     d22:	ff 90       	pop	r15
     d24:	ef 90       	pop	r14
     d26:	df 90       	pop	r13
     d28:	cf 90       	pop	r12
     d2a:	bf 90       	pop	r11
     d2c:	af 90       	pop	r10
     d2e:	9f 90       	pop	r9
     d30:	8f 90       	pop	r8
     d32:	7f 90       	pop	r7
     d34:	6f 90       	pop	r6
     d36:	5f 90       	pop	r5
     d38:	4f 90       	pop	r4
     d3a:	08 95       	ret

00000d3c <get_GA_interface>:
     d3c:	9c 01       	movw	r18, r24
static void		s_reset(void);

GA_t* get_GA_interface(i2c_t* p_i2c_interface)
{
	
	if (!s_initialized)
     d3e:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <s_initialized>
     d42:	91 11       	cpse	r25, r1
     d44:	25 c0       	rjmp	.+74     	; 0xd90 <get_GA_interface+0x54>
	{
		s_i2c=p_i2c_interface;
     d46:	30 93 83 02 	sts	0x0283, r19	; 0x800283 <s_i2c+0x1>
     d4a:	20 93 82 02 	sts	0x0282, r18	; 0x800282 <s_i2c>
		
			s_GA_interface.reset					=	s_reset;
     d4e:	e4 e8       	ldi	r30, 0x84	; 132
     d50:	f2 e0       	ldi	r31, 0x02	; 2
     d52:	8f eb       	ldi	r24, 0xBF	; 191
     d54:	94 e0       	ldi	r25, 0x04	; 4
     d56:	95 87       	std	Z+13, r25	; 0x0d
     d58:	84 87       	std	Z+12, r24	; 0x0c
			s_GA_interface.gyroSettings				=	s_gyroSettings;
     d5a:	81 e7       	ldi	r24, 0x71	; 113
     d5c:	94 e0       	ldi	r25, 0x04	; 4
     d5e:	91 87       	std	Z+9, r25	; 0x09
     d60:	80 87       	std	Z+8, r24	; 0x08
			s_GA_interface.accerelSettings			=	s_accerelSettings;
     d62:	83 e2       	ldi	r24, 0x23	; 35
     d64:	94 e0       	ldi	r25, 0x04	; 4
     d66:	93 87       	std	Z+11, r25	; 0x0b
     d68:	82 87       	std	Z+10, r24	; 0x0a
			s_GA_interface.getPitchRoll 			=	s_getPitchRoll;
     d6a:	8e e0       	ldi	r24, 0x0E	; 14
     d6c:	96 e0       	ldi	r25, 0x06	; 6
     d6e:	91 83       	std	Z+1, r25	; 0x01
     d70:	80 83       	st	Z, r24
			s_GA_interface.getAccelXYZ				=	s_getAccelXYZ;
     d72:	87 e6       	ldi	r24, 0x67	; 103
     d74:	95 e0       	ldi	r25, 0x05	; 5
     d76:	93 83       	std	Z+3, r25	; 0x03
     d78:	82 83       	std	Z+2, r24	; 0x02
			s_GA_interface.getGyroXYZ				=	s_getGyroXYZ;
     d7a:	82 ec       	ldi	r24, 0xC2	; 194
     d7c:	95 e0       	ldi	r25, 0x05	; 5
     d7e:	95 83       	std	Z+5, r25	; 0x05
     d80:	84 83       	std	Z+4, r24	; 0x04
			s_GA_interface.gatherData				=	s_gatherData;
     d82:	87 e4       	ldi	r24, 0x47	; 71
     d84:	95 e0       	ldi	r25, 0x05	; 5
     d86:	97 83       	std	Z+7, r25	; 0x07
     d88:	86 83       	std	Z+6, r24	; 0x06
			s_GA_interface.selectRegister			=	s_selectRegister;
			s_GA_interface.write					=	s_write;
			s_GA_interface.read						=	s_read;
			**/
			
			s_initialized=true;		
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <s_initialized>
	}
	return &s_GA_interface; 
}
     d90:	84 e8       	ldi	r24, 0x84	; 132
     d92:	92 e0       	ldi	r25, 0x02	; 2
     d94:	08 95       	ret

00000d96 <main>:
}
**/
#define UARTADDR UART0

int main(void)
{
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	6c 97       	sbiw	r28, 0x1c	; 28
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     daa:	2f ef       	ldi	r18, 0xFF	; 255
     dac:	83 ed       	ldi	r24, 0xD3	; 211
     dae:	90 e3       	ldi	r25, 0x30	; 48
     db0:	21 50       	subi	r18, 0x01	; 1
     db2:	80 40       	sbci	r24, 0x00	; 0
     db4:	90 40       	sbci	r25, 0x00	; 0
     db6:	e1 f7       	brne	.-8      	; 0xdb0 <main+0x1a>
     db8:	00 c0       	rjmp	.+0      	; 0xdba <main+0x24>
     dba:	00 00       	nop
     dbc:	2f ef       	ldi	r18, 0xFF	; 255
     dbe:	83 ed       	ldi	r24, 0xD3	; 211
     dc0:	90 e3       	ldi	r25, 0x30	; 48
     dc2:	21 50       	subi	r18, 0x01	; 1
     dc4:	80 40       	sbci	r24, 0x00	; 0
     dc6:	90 40       	sbci	r25, 0x00	; 0
     dc8:	e1 f7       	brne	.-8      	; 0xdc2 <main+0x2c>
     dca:	00 c0       	rjmp	.+0      	; 0xdcc <main+0x36>
     dcc:	00 00       	nop
	{
		_delay_ms(1000);
	}
	
	
	InitUART(UARTADDR, 9600, 8,0);
     dce:	00 e0       	ldi	r16, 0x00	; 0
     dd0:	28 e0       	ldi	r18, 0x08	; 8
     dd2:	40 e8       	ldi	r20, 0x80	; 128
     dd4:	55 e2       	ldi	r21, 0x25	; 37
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	80 ec       	ldi	r24, 0xC0	; 192
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	71 dc       	rcall	.-1822   	; 0x6c2 <InitUART>
	SendString(UARTADDR,"\n \n \n");
     de0:	61 e0       	ldi	r22, 0x01	; 1
     de2:	72 e0       	ldi	r23, 0x02	; 2
     de4:	80 ec       	ldi	r24, 0xC0	; 192
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	c5 dc       	rcall	.-1654   	; 0x774 <SendString>
	SendInteger(UARTADDR,32000);
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	7d e7       	ldi	r23, 0x7D	; 125
     dee:	80 ec       	ldi	r24, 0xC0	; 192
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	d4 dc       	rcall	.-1624   	; 0x79c <SendInteger>
	SendString(UARTADDR,"\n");
     df4:	65 e0       	ldi	r22, 0x05	; 5
     df6:	72 e0       	ldi	r23, 0x02	; 2
     df8:	80 ec       	ldi	r24, 0xC0	; 192
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	bb dc       	rcall	.-1674   	; 0x774 <SendString>
	SendString(UARTADDR,"creating objects \n");
     dfe:	67 e0       	ldi	r22, 0x07	; 7
     e00:	72 e0       	ldi	r23, 0x02	; 2
     e02:	80 ec       	ldi	r24, 0xC0	; 192
     e04:	90 e0       	ldi	r25, 0x00	; 0
	
	i2c_obj=get_i2c_interface();
     e06:	b6 dc       	rcall	.-1684   	; 0x774 <SendString>
     e08:	4e da       	rcall	.-2916   	; 0x2a6 <get_i2c_interface>
     e0a:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <i2c_obj+0x1>
     e0e:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <i2c_obj>
	
	GA_obj=get_GA_interface(i2c_obj);
     e12:	94 df       	rcall	.-216    	; 0xd3c <get_GA_interface>
     e14:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <GA_obj+0x1>
     e18:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <GA_obj>
	
	RTC_obj= get_RTC_interface();
     e1c:	42 dc       	rcall	.-1916   	; 0x6a2 <get_RTC_interface>
     e1e:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <RTC_obj+0x1>
     e22:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <RTC_obj>
	
	SendString(UARTADDR,"init i2c: ");
     e26:	6a e1       	ldi	r22, 0x1A	; 26
     e28:	72 e0       	ldi	r23, 0x02	; 2
     e2a:	80 ec       	ldi	r24, 0xC0	; 192
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	a2 dc       	rcall	.-1724   	; 0x774 <SendString>
     e30:	e0 91 96 02 	lds	r30, 0x0296	; 0x800296 <i2c_obj>
	SendInteger(UARTADDR,i2c_obj->init(100000,false));
     e34:	f0 91 97 02 	lds	r31, 0x0297	; 0x800297 <i2c_obj+0x1>
     e38:	01 90       	ld	r0, Z+
     e3a:	f0 81       	ld	r31, Z
     e3c:	e0 2d       	mov	r30, r0
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	60 ea       	ldi	r22, 0xA0	; 160
     e42:	76 e8       	ldi	r23, 0x86	; 134
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	19 95       	eicall
     e4a:	bc 01       	movw	r22, r24
     e4c:	80 ec       	ldi	r24, 0xC0	; 192
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	a5 dc       	rcall	.-1718   	; 0x79c <SendInteger>
	SendString(UARTADDR,"\n");
     e52:	65 e0       	ldi	r22, 0x05	; 5
     e54:	72 e0       	ldi	r23, 0x02	; 2
     e56:	80 ec       	ldi	r24, 0xC0	; 192
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	8c dc       	rcall	.-1768   	; 0x774 <SendString>
     e5c:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <GA_obj>
	
	//RTC

	
	//Set to +- 4G
	GA_obj->reset();
     e60:	f0 91 95 02 	lds	r31, 0x0295	; 0x800295 <GA_obj+0x1>
     e64:	04 84       	ldd	r0, Z+12	; 0x0c
     e66:	f5 85       	ldd	r31, Z+13	; 0x0d
     e68:	e0 2d       	mov	r30, r0
     e6a:	19 95       	eicall
     e6c:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <GA_obj>
	GA_obj->gyroSettings(2);
     e70:	f0 91 95 02 	lds	r31, 0x0295	; 0x800295 <GA_obj+0x1>
     e74:	00 84       	ldd	r0, Z+8	; 0x08
     e76:	f1 85       	ldd	r31, Z+9	; 0x09
     e78:	e0 2d       	mov	r30, r0
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	19 95       	eicall
     e7e:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <GA_obj>
	GA_obj->accerelSettings(1);
     e82:	f0 91 95 02 	lds	r31, 0x0295	; 0x800295 <GA_obj+0x1>
     e86:	02 84       	ldd	r0, Z+10	; 0x0a
     e88:	f3 85       	ldd	r31, Z+11	; 0x0b
     e8a:	e0 2d       	mov	r30, r0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	19 95       	eicall
     e90:	2f ef       	ldi	r18, 0xFF	; 255
     e92:	89 e6       	ldi	r24, 0x69	; 105
     e94:	98 e1       	ldi	r25, 0x18	; 24
     e96:	21 50       	subi	r18, 0x01	; 1
     e98:	80 40       	sbci	r24, 0x00	; 0
     e9a:	90 40       	sbci	r25, 0x00	; 0
     e9c:	e1 f7       	brne	.-8      	; 0xe96 <main+0x100>
     e9e:	00 c0       	rjmp	.+0      	; 0xea0 <main+0x10a>
     ea0:	00 00       	nop
     ea2:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <GA_obj>
	{
		_delay_ms(500);

		
		
		GA_obj->gatherData();
     ea6:	f0 91 95 02 	lds	r31, 0x0295	; 0x800295 <GA_obj+0x1>
     eaa:	06 80       	ldd	r0, Z+6	; 0x06
     eac:	f7 81       	ldd	r31, Z+7	; 0x07
     eae:	e0 2d       	mov	r30, r0
     eb0:	19 95       	eicall
     eb2:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <GA_obj>
		
		//char outstring[10];
		GA_obj->getGyroXYZ(gyrodata);
     eb6:	f0 91 95 02 	lds	r31, 0x0295	; 0x800295 <GA_obj+0x1>
     eba:	04 80       	ldd	r0, Z+4	; 0x04
     ebc:	f5 81       	ldd	r31, Z+5	; 0x05
     ebe:	e0 2d       	mov	r30, r0
     ec0:	ce 01       	movw	r24, r28
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	19 95       	eicall
     ec6:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <GA_obj>
		GA_obj->getAccelXYZ(acceldata);
     eca:	f0 91 95 02 	lds	r31, 0x0295	; 0x800295 <GA_obj+0x1>
     ece:	02 80       	ldd	r0, Z+2	; 0x02
     ed0:	f3 81       	ldd	r31, Z+3	; 0x03
     ed2:	e0 2d       	mov	r30, r0
     ed4:	ce 01       	movw	r24, r28
     ed6:	0d 96       	adiw	r24, 0x0d	; 13
     ed8:	19 95       	eicall
     eda:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <GA_obj>
		GA_obj->getPitchRoll(dataPR);
     ede:	f0 91 95 02 	lds	r31, 0x0295	; 0x800295 <GA_obj+0x1>
     ee2:	01 90       	ld	r0, Z+
     ee4:	f0 81       	ld	r31, Z
     ee6:	e0 2d       	mov	r30, r0
     ee8:	ce 01       	movw	r24, r28
     eea:	49 96       	adiw	r24, 0x19	; 25
		

		SendString(UARTADDR,"GYRO X: ");
     eec:	19 95       	eicall
     eee:	65 e2       	ldi	r22, 0x25	; 37
     ef0:	72 e0       	ldi	r23, 0x02	; 2
     ef2:	80 ec       	ldi	r24, 0xC0	; 192
     ef4:	90 e0       	ldi	r25, 0x00	; 0
		SendInteger(UARTADDR, gyrodata[0]);
     ef6:	3e dc       	rcall	.-1924   	; 0x774 <SendString>
     ef8:	69 81       	ldd	r22, Y+1	; 0x01
     efa:	7a 81       	ldd	r23, Y+2	; 0x02
     efc:	80 ec       	ldi	r24, 0xC0	; 192
     efe:	90 e0       	ldi	r25, 0x00	; 0
		SendString(UARTADDR,"deg/s Y: ");
     f00:	4d dc       	rcall	.-1894   	; 0x79c <SendInteger>
     f02:	6e e2       	ldi	r22, 0x2E	; 46
     f04:	72 e0       	ldi	r23, 0x02	; 2
     f06:	80 ec       	ldi	r24, 0xC0	; 192
     f08:	90 e0       	ldi	r25, 0x00	; 0
		SendInteger(UARTADDR, gyrodata[1]);
     f0a:	34 dc       	rcall	.-1944   	; 0x774 <SendString>
     f0c:	6d 81       	ldd	r22, Y+5	; 0x05
     f0e:	7e 81       	ldd	r23, Y+6	; 0x06
     f10:	80 ec       	ldi	r24, 0xC0	; 192
     f12:	90 e0       	ldi	r25, 0x00	; 0
		SendString(UARTADDR,"deg/s Z: ");
     f14:	43 dc       	rcall	.-1914   	; 0x79c <SendInteger>
     f16:	68 e3       	ldi	r22, 0x38	; 56
     f18:	72 e0       	ldi	r23, 0x02	; 2
     f1a:	80 ec       	ldi	r24, 0xC0	; 192
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	2a dc       	rcall	.-1964   	; 0x774 <SendString>
		SendInteger(UARTADDR, gyrodata[2]);
     f20:	69 85       	ldd	r22, Y+9	; 0x09
     f22:	7a 85       	ldd	r23, Y+10	; 0x0a
     f24:	80 ec       	ldi	r24, 0xC0	; 192
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	39 dc       	rcall	.-1934   	; 0x79c <SendInteger>
     f2a:	62 e4       	ldi	r22, 0x42	; 66
		SendString(UARTADDR,"deg/s \n");
     f2c:	72 e0       	ldi	r23, 0x02	; 2
     f2e:	80 ec       	ldi	r24, 0xC0	; 192
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	20 dc       	rcall	.-1984   	; 0x774 <SendString>
     f34:	ad cf       	rjmp	.-166    	; 0xe90 <main+0xfa>

00000f36 <__subsf3>:
     f36:	50 58       	subi	r21, 0x80	; 128

00000f38 <__addsf3>:
     f38:	bb 27       	eor	r27, r27
     f3a:	aa 27       	eor	r26, r26
     f3c:	0e d0       	rcall	.+28     	; 0xf5a <__addsf3x>
     f3e:	d4 c1       	rjmp	.+936    	; 0x12e8 <__fp_round>
     f40:	c5 d1       	rcall	.+906    	; 0x12cc <__fp_pscA>
     f42:	30 f0       	brcs	.+12     	; 0xf50 <__addsf3+0x18>
     f44:	ca d1       	rcall	.+916    	; 0x12da <__fp_pscB>
     f46:	20 f0       	brcs	.+8      	; 0xf50 <__addsf3+0x18>
     f48:	31 f4       	brne	.+12     	; 0xf56 <__addsf3+0x1e>
     f4a:	9f 3f       	cpi	r25, 0xFF	; 255
     f4c:	11 f4       	brne	.+4      	; 0xf52 <__addsf3+0x1a>
     f4e:	1e f4       	brtc	.+6      	; 0xf56 <__addsf3+0x1e>
     f50:	95 c1       	rjmp	.+810    	; 0x127c <__fp_nan>
     f52:	0e f4       	brtc	.+2      	; 0xf56 <__addsf3+0x1e>
     f54:	e0 95       	com	r30
     f56:	e7 fb       	bst	r30, 7
     f58:	8b c1       	rjmp	.+790    	; 0x1270 <__fp_inf>

00000f5a <__addsf3x>:
     f5a:	e9 2f       	mov	r30, r25
     f5c:	d6 d1       	rcall	.+940    	; 0x130a <__fp_split3>
     f5e:	80 f3       	brcs	.-32     	; 0xf40 <__addsf3+0x8>
     f60:	ba 17       	cp	r27, r26
     f62:	62 07       	cpc	r22, r18
     f64:	73 07       	cpc	r23, r19
     f66:	84 07       	cpc	r24, r20
     f68:	95 07       	cpc	r25, r21
     f6a:	18 f0       	brcs	.+6      	; 0xf72 <__addsf3x+0x18>
     f6c:	71 f4       	brne	.+28     	; 0xf8a <__addsf3x+0x30>
     f6e:	9e f5       	brtc	.+102    	; 0xfd6 <__addsf3x+0x7c>
     f70:	ee c1       	rjmp	.+988    	; 0x134e <__fp_zero>
     f72:	0e f4       	brtc	.+2      	; 0xf76 <__addsf3x+0x1c>
     f74:	e0 95       	com	r30
     f76:	0b 2e       	mov	r0, r27
     f78:	ba 2f       	mov	r27, r26
     f7a:	a0 2d       	mov	r26, r0
     f7c:	0b 01       	movw	r0, r22
     f7e:	b9 01       	movw	r22, r18
     f80:	90 01       	movw	r18, r0
     f82:	0c 01       	movw	r0, r24
     f84:	ca 01       	movw	r24, r20
     f86:	a0 01       	movw	r20, r0
     f88:	11 24       	eor	r1, r1
     f8a:	ff 27       	eor	r31, r31
     f8c:	59 1b       	sub	r21, r25
     f8e:	99 f0       	breq	.+38     	; 0xfb6 <__addsf3x+0x5c>
     f90:	59 3f       	cpi	r21, 0xF9	; 249
     f92:	50 f4       	brcc	.+20     	; 0xfa8 <__addsf3x+0x4e>
     f94:	50 3e       	cpi	r21, 0xE0	; 224
     f96:	68 f1       	brcs	.+90     	; 0xff2 <__addsf3x+0x98>
     f98:	1a 16       	cp	r1, r26
     f9a:	f0 40       	sbci	r31, 0x00	; 0
     f9c:	a2 2f       	mov	r26, r18
     f9e:	23 2f       	mov	r18, r19
     fa0:	34 2f       	mov	r19, r20
     fa2:	44 27       	eor	r20, r20
     fa4:	58 5f       	subi	r21, 0xF8	; 248
     fa6:	f3 cf       	rjmp	.-26     	; 0xf8e <__addsf3x+0x34>
     fa8:	46 95       	lsr	r20
     faa:	37 95       	ror	r19
     fac:	27 95       	ror	r18
     fae:	a7 95       	ror	r26
     fb0:	f0 40       	sbci	r31, 0x00	; 0
     fb2:	53 95       	inc	r21
     fb4:	c9 f7       	brne	.-14     	; 0xfa8 <__addsf3x+0x4e>
     fb6:	7e f4       	brtc	.+30     	; 0xfd6 <__addsf3x+0x7c>
     fb8:	1f 16       	cp	r1, r31
     fba:	ba 0b       	sbc	r27, r26
     fbc:	62 0b       	sbc	r22, r18
     fbe:	73 0b       	sbc	r23, r19
     fc0:	84 0b       	sbc	r24, r20
     fc2:	ba f0       	brmi	.+46     	; 0xff2 <__addsf3x+0x98>
     fc4:	91 50       	subi	r25, 0x01	; 1
     fc6:	a1 f0       	breq	.+40     	; 0xff0 <__addsf3x+0x96>
     fc8:	ff 0f       	add	r31, r31
     fca:	bb 1f       	adc	r27, r27
     fcc:	66 1f       	adc	r22, r22
     fce:	77 1f       	adc	r23, r23
     fd0:	88 1f       	adc	r24, r24
     fd2:	c2 f7       	brpl	.-16     	; 0xfc4 <__addsf3x+0x6a>
     fd4:	0e c0       	rjmp	.+28     	; 0xff2 <__addsf3x+0x98>
     fd6:	ba 0f       	add	r27, r26
     fd8:	62 1f       	adc	r22, r18
     fda:	73 1f       	adc	r23, r19
     fdc:	84 1f       	adc	r24, r20
     fde:	48 f4       	brcc	.+18     	; 0xff2 <__addsf3x+0x98>
     fe0:	87 95       	ror	r24
     fe2:	77 95       	ror	r23
     fe4:	67 95       	ror	r22
     fe6:	b7 95       	ror	r27
     fe8:	f7 95       	ror	r31
     fea:	9e 3f       	cpi	r25, 0xFE	; 254
     fec:	08 f0       	brcs	.+2      	; 0xff0 <__addsf3x+0x96>
     fee:	b3 cf       	rjmp	.-154    	; 0xf56 <__addsf3+0x1e>
     ff0:	93 95       	inc	r25
     ff2:	88 0f       	add	r24, r24
     ff4:	08 f0       	brcs	.+2      	; 0xff8 <__addsf3x+0x9e>
     ff6:	99 27       	eor	r25, r25
     ff8:	ee 0f       	add	r30, r30
     ffa:	97 95       	ror	r25
     ffc:	87 95       	ror	r24
     ffe:	08 95       	ret
    1000:	65 d1       	rcall	.+714    	; 0x12cc <__fp_pscA>
    1002:	58 f0       	brcs	.+22     	; 0x101a <__addsf3x+0xc0>
    1004:	80 e8       	ldi	r24, 0x80	; 128
    1006:	91 e0       	ldi	r25, 0x01	; 1
    1008:	09 f4       	brne	.+2      	; 0x100c <__addsf3x+0xb2>
    100a:	9e ef       	ldi	r25, 0xFE	; 254
    100c:	66 d1       	rcall	.+716    	; 0x12da <__fp_pscB>
    100e:	28 f0       	brcs	.+10     	; 0x101a <__addsf3x+0xc0>
    1010:	40 e8       	ldi	r20, 0x80	; 128
    1012:	51 e0       	ldi	r21, 0x01	; 1
    1014:	59 f4       	brne	.+22     	; 0x102c <atan2+0xe>
    1016:	5e ef       	ldi	r21, 0xFE	; 254
    1018:	09 c0       	rjmp	.+18     	; 0x102c <atan2+0xe>
    101a:	30 c1       	rjmp	.+608    	; 0x127c <__fp_nan>
    101c:	98 c1       	rjmp	.+816    	; 0x134e <__fp_zero>

0000101e <atan2>:
    101e:	e9 2f       	mov	r30, r25
    1020:	e0 78       	andi	r30, 0x80	; 128
    1022:	73 d1       	rcall	.+742    	; 0x130a <__fp_split3>
    1024:	68 f3       	brcs	.-38     	; 0x1000 <__addsf3x+0xa6>
    1026:	09 2e       	mov	r0, r25
    1028:	05 2a       	or	r0, r21
    102a:	c1 f3       	breq	.-16     	; 0x101c <__addsf3x+0xc2>
    102c:	26 17       	cp	r18, r22
    102e:	37 07       	cpc	r19, r23
    1030:	48 07       	cpc	r20, r24
    1032:	59 07       	cpc	r21, r25
    1034:	38 f0       	brcs	.+14     	; 0x1044 <atan2+0x26>
    1036:	0e 2e       	mov	r0, r30
    1038:	07 f8       	bld	r0, 7
    103a:	e0 25       	eor	r30, r0
    103c:	69 f0       	breq	.+26     	; 0x1058 <atan2+0x3a>
    103e:	e0 25       	eor	r30, r0
    1040:	e0 64       	ori	r30, 0x40	; 64
    1042:	0a c0       	rjmp	.+20     	; 0x1058 <atan2+0x3a>
    1044:	ef 63       	ori	r30, 0x3F	; 63
    1046:	07 f8       	bld	r0, 7
    1048:	00 94       	com	r0
    104a:	07 fa       	bst	r0, 7
    104c:	db 01       	movw	r26, r22
    104e:	b9 01       	movw	r22, r18
    1050:	9d 01       	movw	r18, r26
    1052:	dc 01       	movw	r26, r24
    1054:	ca 01       	movw	r24, r20
    1056:	ad 01       	movw	r20, r26
    1058:	ef 93       	push	r30
    105a:	43 d0       	rcall	.+134    	; 0x10e2 <__divsf3_pse>
    105c:	45 d1       	rcall	.+650    	; 0x12e8 <__fp_round>
    105e:	0a d0       	rcall	.+20     	; 0x1074 <atan>
    1060:	5f 91       	pop	r21
    1062:	55 23       	and	r21, r21
    1064:	31 f0       	breq	.+12     	; 0x1072 <atan2+0x54>
    1066:	2b ed       	ldi	r18, 0xDB	; 219
    1068:	3f e0       	ldi	r19, 0x0F	; 15
    106a:	49 e4       	ldi	r20, 0x49	; 73
    106c:	50 fd       	sbrc	r21, 0
    106e:	49 ec       	ldi	r20, 0xC9	; 201
    1070:	63 cf       	rjmp	.-314    	; 0xf38 <__addsf3>
    1072:	08 95       	ret

00001074 <atan>:
    1074:	df 93       	push	r29
    1076:	dd 27       	eor	r29, r29
    1078:	b9 2f       	mov	r27, r25
    107a:	bf 77       	andi	r27, 0x7F	; 127
    107c:	40 e8       	ldi	r20, 0x80	; 128
    107e:	5f e3       	ldi	r21, 0x3F	; 63
    1080:	16 16       	cp	r1, r22
    1082:	17 06       	cpc	r1, r23
    1084:	48 07       	cpc	r20, r24
    1086:	5b 07       	cpc	r21, r27
    1088:	10 f4       	brcc	.+4      	; 0x108e <atan+0x1a>
    108a:	d9 2f       	mov	r29, r25
    108c:	67 d1       	rcall	.+718    	; 0x135c <inverse>
    108e:	9f 93       	push	r25
    1090:	8f 93       	push	r24
    1092:	7f 93       	push	r23
    1094:	6f 93       	push	r22
    1096:	0e d2       	rcall	.+1052   	; 0x14b4 <square>
    1098:	e0 e0       	ldi	r30, 0x00	; 0
    109a:	f1 e0       	ldi	r31, 0x01	; 1
    109c:	f2 d0       	rcall	.+484    	; 0x1282 <__fp_powser>
    109e:	24 d1       	rcall	.+584    	; 0x12e8 <__fp_round>
    10a0:	2f 91       	pop	r18
    10a2:	3f 91       	pop	r19
    10a4:	4f 91       	pop	r20
    10a6:	5f 91       	pop	r21
    10a8:	6c d1       	rcall	.+728    	; 0x1382 <__mulsf3x>
    10aa:	dd 23       	and	r29, r29
    10ac:	49 f0       	breq	.+18     	; 0x10c0 <atan+0x4c>
    10ae:	90 58       	subi	r25, 0x80	; 128
    10b0:	a2 ea       	ldi	r26, 0xA2	; 162
    10b2:	2a ed       	ldi	r18, 0xDA	; 218
    10b4:	3f e0       	ldi	r19, 0x0F	; 15
    10b6:	49 ec       	ldi	r20, 0xC9	; 201
    10b8:	5f e3       	ldi	r21, 0x3F	; 63
    10ba:	d0 78       	andi	r29, 0x80	; 128
    10bc:	5d 27       	eor	r21, r29
    10be:	4d df       	rcall	.-358    	; 0xf5a <__addsf3x>
    10c0:	df 91       	pop	r29
    10c2:	12 c1       	rjmp	.+548    	; 0x12e8 <__fp_round>

000010c4 <__divsf3>:
    10c4:	0c d0       	rcall	.+24     	; 0x10de <__divsf3x>
    10c6:	10 c1       	rjmp	.+544    	; 0x12e8 <__fp_round>
    10c8:	08 d1       	rcall	.+528    	; 0x12da <__fp_pscB>
    10ca:	40 f0       	brcs	.+16     	; 0x10dc <__divsf3+0x18>
    10cc:	ff d0       	rcall	.+510    	; 0x12cc <__fp_pscA>
    10ce:	30 f0       	brcs	.+12     	; 0x10dc <__divsf3+0x18>
    10d0:	21 f4       	brne	.+8      	; 0x10da <__divsf3+0x16>
    10d2:	5f 3f       	cpi	r21, 0xFF	; 255
    10d4:	19 f0       	breq	.+6      	; 0x10dc <__divsf3+0x18>
    10d6:	cc c0       	rjmp	.+408    	; 0x1270 <__fp_inf>
    10d8:	51 11       	cpse	r21, r1
    10da:	3a c1       	rjmp	.+628    	; 0x1350 <__fp_szero>
    10dc:	cf c0       	rjmp	.+414    	; 0x127c <__fp_nan>

000010de <__divsf3x>:
    10de:	15 d1       	rcall	.+554    	; 0x130a <__fp_split3>
    10e0:	98 f3       	brcs	.-26     	; 0x10c8 <__divsf3+0x4>

000010e2 <__divsf3_pse>:
    10e2:	99 23       	and	r25, r25
    10e4:	c9 f3       	breq	.-14     	; 0x10d8 <__divsf3+0x14>
    10e6:	55 23       	and	r21, r21
    10e8:	b1 f3       	breq	.-20     	; 0x10d6 <__divsf3+0x12>
    10ea:	95 1b       	sub	r25, r21
    10ec:	55 0b       	sbc	r21, r21
    10ee:	bb 27       	eor	r27, r27
    10f0:	aa 27       	eor	r26, r26
    10f2:	62 17       	cp	r22, r18
    10f4:	73 07       	cpc	r23, r19
    10f6:	84 07       	cpc	r24, r20
    10f8:	38 f0       	brcs	.+14     	; 0x1108 <__divsf3_pse+0x26>
    10fa:	9f 5f       	subi	r25, 0xFF	; 255
    10fc:	5f 4f       	sbci	r21, 0xFF	; 255
    10fe:	22 0f       	add	r18, r18
    1100:	33 1f       	adc	r19, r19
    1102:	44 1f       	adc	r20, r20
    1104:	aa 1f       	adc	r26, r26
    1106:	a9 f3       	breq	.-22     	; 0x10f2 <__divsf3_pse+0x10>
    1108:	33 d0       	rcall	.+102    	; 0x1170 <__divsf3_pse+0x8e>
    110a:	0e 2e       	mov	r0, r30
    110c:	3a f0       	brmi	.+14     	; 0x111c <__divsf3_pse+0x3a>
    110e:	e0 e8       	ldi	r30, 0x80	; 128
    1110:	30 d0       	rcall	.+96     	; 0x1172 <__divsf3_pse+0x90>
    1112:	91 50       	subi	r25, 0x01	; 1
    1114:	50 40       	sbci	r21, 0x00	; 0
    1116:	e6 95       	lsr	r30
    1118:	00 1c       	adc	r0, r0
    111a:	ca f7       	brpl	.-14     	; 0x110e <__divsf3_pse+0x2c>
    111c:	29 d0       	rcall	.+82     	; 0x1170 <__divsf3_pse+0x8e>
    111e:	fe 2f       	mov	r31, r30
    1120:	27 d0       	rcall	.+78     	; 0x1170 <__divsf3_pse+0x8e>
    1122:	66 0f       	add	r22, r22
    1124:	77 1f       	adc	r23, r23
    1126:	88 1f       	adc	r24, r24
    1128:	bb 1f       	adc	r27, r27
    112a:	26 17       	cp	r18, r22
    112c:	37 07       	cpc	r19, r23
    112e:	48 07       	cpc	r20, r24
    1130:	ab 07       	cpc	r26, r27
    1132:	b0 e8       	ldi	r27, 0x80	; 128
    1134:	09 f0       	breq	.+2      	; 0x1138 <__divsf3_pse+0x56>
    1136:	bb 0b       	sbc	r27, r27
    1138:	80 2d       	mov	r24, r0
    113a:	bf 01       	movw	r22, r30
    113c:	ff 27       	eor	r31, r31
    113e:	93 58       	subi	r25, 0x83	; 131
    1140:	5f 4f       	sbci	r21, 0xFF	; 255
    1142:	2a f0       	brmi	.+10     	; 0x114e <__divsf3_pse+0x6c>
    1144:	9e 3f       	cpi	r25, 0xFE	; 254
    1146:	51 05       	cpc	r21, r1
    1148:	68 f0       	brcs	.+26     	; 0x1164 <__divsf3_pse+0x82>
    114a:	92 c0       	rjmp	.+292    	; 0x1270 <__fp_inf>
    114c:	01 c1       	rjmp	.+514    	; 0x1350 <__fp_szero>
    114e:	5f 3f       	cpi	r21, 0xFF	; 255
    1150:	ec f3       	brlt	.-6      	; 0x114c <__divsf3_pse+0x6a>
    1152:	98 3e       	cpi	r25, 0xE8	; 232
    1154:	dc f3       	brlt	.-10     	; 0x114c <__divsf3_pse+0x6a>
    1156:	86 95       	lsr	r24
    1158:	77 95       	ror	r23
    115a:	67 95       	ror	r22
    115c:	b7 95       	ror	r27
    115e:	f7 95       	ror	r31
    1160:	9f 5f       	subi	r25, 0xFF	; 255
    1162:	c9 f7       	brne	.-14     	; 0x1156 <__divsf3_pse+0x74>
    1164:	88 0f       	add	r24, r24
    1166:	91 1d       	adc	r25, r1
    1168:	96 95       	lsr	r25
    116a:	87 95       	ror	r24
    116c:	97 f9       	bld	r25, 7
    116e:	08 95       	ret
    1170:	e1 e0       	ldi	r30, 0x01	; 1
    1172:	66 0f       	add	r22, r22
    1174:	77 1f       	adc	r23, r23
    1176:	88 1f       	adc	r24, r24
    1178:	bb 1f       	adc	r27, r27
    117a:	62 17       	cp	r22, r18
    117c:	73 07       	cpc	r23, r19
    117e:	84 07       	cpc	r24, r20
    1180:	ba 07       	cpc	r27, r26
    1182:	20 f0       	brcs	.+8      	; 0x118c <__divsf3_pse+0xaa>
    1184:	62 1b       	sub	r22, r18
    1186:	73 0b       	sbc	r23, r19
    1188:	84 0b       	sbc	r24, r20
    118a:	ba 0b       	sbc	r27, r26
    118c:	ee 1f       	adc	r30, r30
    118e:	88 f7       	brcc	.-30     	; 0x1172 <__divsf3_pse+0x90>
    1190:	e0 95       	com	r30
    1192:	08 95       	ret

00001194 <__fixsfsi>:
    1194:	04 d0       	rcall	.+8      	; 0x119e <__fixunssfsi>
    1196:	68 94       	set
    1198:	b1 11       	cpse	r27, r1
    119a:	da c0       	rjmp	.+436    	; 0x1350 <__fp_szero>
    119c:	08 95       	ret

0000119e <__fixunssfsi>:
    119e:	bd d0       	rcall	.+378    	; 0x131a <__fp_splitA>
    11a0:	88 f0       	brcs	.+34     	; 0x11c4 <__fixunssfsi+0x26>
    11a2:	9f 57       	subi	r25, 0x7F	; 127
    11a4:	90 f0       	brcs	.+36     	; 0x11ca <__fixunssfsi+0x2c>
    11a6:	b9 2f       	mov	r27, r25
    11a8:	99 27       	eor	r25, r25
    11aa:	b7 51       	subi	r27, 0x17	; 23
    11ac:	a0 f0       	brcs	.+40     	; 0x11d6 <__fixunssfsi+0x38>
    11ae:	d1 f0       	breq	.+52     	; 0x11e4 <__fixunssfsi+0x46>
    11b0:	66 0f       	add	r22, r22
    11b2:	77 1f       	adc	r23, r23
    11b4:	88 1f       	adc	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	1a f0       	brmi	.+6      	; 0x11c0 <__fixunssfsi+0x22>
    11ba:	ba 95       	dec	r27
    11bc:	c9 f7       	brne	.-14     	; 0x11b0 <__fixunssfsi+0x12>
    11be:	12 c0       	rjmp	.+36     	; 0x11e4 <__fixunssfsi+0x46>
    11c0:	b1 30       	cpi	r27, 0x01	; 1
    11c2:	81 f0       	breq	.+32     	; 0x11e4 <__fixunssfsi+0x46>
    11c4:	c4 d0       	rcall	.+392    	; 0x134e <__fp_zero>
    11c6:	b1 e0       	ldi	r27, 0x01	; 1
    11c8:	08 95       	ret
    11ca:	c1 c0       	rjmp	.+386    	; 0x134e <__fp_zero>
    11cc:	67 2f       	mov	r22, r23
    11ce:	78 2f       	mov	r23, r24
    11d0:	88 27       	eor	r24, r24
    11d2:	b8 5f       	subi	r27, 0xF8	; 248
    11d4:	39 f0       	breq	.+14     	; 0x11e4 <__fixunssfsi+0x46>
    11d6:	b9 3f       	cpi	r27, 0xF9	; 249
    11d8:	cc f3       	brlt	.-14     	; 0x11cc <__fixunssfsi+0x2e>
    11da:	86 95       	lsr	r24
    11dc:	77 95       	ror	r23
    11de:	67 95       	ror	r22
    11e0:	b3 95       	inc	r27
    11e2:	d9 f7       	brne	.-10     	; 0x11da <__fixunssfsi+0x3c>
    11e4:	3e f4       	brtc	.+14     	; 0x11f4 <__fixunssfsi+0x56>
    11e6:	90 95       	com	r25
    11e8:	80 95       	com	r24
    11ea:	70 95       	com	r23
    11ec:	61 95       	neg	r22
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	8f 4f       	sbci	r24, 0xFF	; 255
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	08 95       	ret

000011f6 <__floatunsisf>:
    11f6:	e8 94       	clt
    11f8:	09 c0       	rjmp	.+18     	; 0x120c <__floatsisf+0x12>

000011fa <__floatsisf>:
    11fa:	97 fb       	bst	r25, 7
    11fc:	3e f4       	brtc	.+14     	; 0x120c <__floatsisf+0x12>
    11fe:	90 95       	com	r25
    1200:	80 95       	com	r24
    1202:	70 95       	com	r23
    1204:	61 95       	neg	r22
    1206:	7f 4f       	sbci	r23, 0xFF	; 255
    1208:	8f 4f       	sbci	r24, 0xFF	; 255
    120a:	9f 4f       	sbci	r25, 0xFF	; 255
    120c:	99 23       	and	r25, r25
    120e:	a9 f0       	breq	.+42     	; 0x123a <__floatsisf+0x40>
    1210:	f9 2f       	mov	r31, r25
    1212:	96 e9       	ldi	r25, 0x96	; 150
    1214:	bb 27       	eor	r27, r27
    1216:	93 95       	inc	r25
    1218:	f6 95       	lsr	r31
    121a:	87 95       	ror	r24
    121c:	77 95       	ror	r23
    121e:	67 95       	ror	r22
    1220:	b7 95       	ror	r27
    1222:	f1 11       	cpse	r31, r1
    1224:	f8 cf       	rjmp	.-16     	; 0x1216 <__floatsisf+0x1c>
    1226:	fa f4       	brpl	.+62     	; 0x1266 <__floatsisf+0x6c>
    1228:	bb 0f       	add	r27, r27
    122a:	11 f4       	brne	.+4      	; 0x1230 <__floatsisf+0x36>
    122c:	60 ff       	sbrs	r22, 0
    122e:	1b c0       	rjmp	.+54     	; 0x1266 <__floatsisf+0x6c>
    1230:	6f 5f       	subi	r22, 0xFF	; 255
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	8f 4f       	sbci	r24, 0xFF	; 255
    1236:	9f 4f       	sbci	r25, 0xFF	; 255
    1238:	16 c0       	rjmp	.+44     	; 0x1266 <__floatsisf+0x6c>
    123a:	88 23       	and	r24, r24
    123c:	11 f0       	breq	.+4      	; 0x1242 <__floatsisf+0x48>
    123e:	96 e9       	ldi	r25, 0x96	; 150
    1240:	11 c0       	rjmp	.+34     	; 0x1264 <__floatsisf+0x6a>
    1242:	77 23       	and	r23, r23
    1244:	21 f0       	breq	.+8      	; 0x124e <__floatsisf+0x54>
    1246:	9e e8       	ldi	r25, 0x8E	; 142
    1248:	87 2f       	mov	r24, r23
    124a:	76 2f       	mov	r23, r22
    124c:	05 c0       	rjmp	.+10     	; 0x1258 <__floatsisf+0x5e>
    124e:	66 23       	and	r22, r22
    1250:	71 f0       	breq	.+28     	; 0x126e <__floatsisf+0x74>
    1252:	96 e8       	ldi	r25, 0x86	; 134
    1254:	86 2f       	mov	r24, r22
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	2a f0       	brmi	.+10     	; 0x1266 <__floatsisf+0x6c>
    125c:	9a 95       	dec	r25
    125e:	66 0f       	add	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	88 1f       	adc	r24, r24
    1264:	da f7       	brpl	.-10     	; 0x125c <__floatsisf+0x62>
    1266:	88 0f       	add	r24, r24
    1268:	96 95       	lsr	r25
    126a:	87 95       	ror	r24
    126c:	97 f9       	bld	r25, 7
    126e:	08 95       	ret

00001270 <__fp_inf>:
    1270:	97 f9       	bld	r25, 7
    1272:	9f 67       	ori	r25, 0x7F	; 127
    1274:	80 e8       	ldi	r24, 0x80	; 128
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	08 95       	ret

0000127c <__fp_nan>:
    127c:	9f ef       	ldi	r25, 0xFF	; 255
    127e:	80 ec       	ldi	r24, 0xC0	; 192
    1280:	08 95       	ret

00001282 <__fp_powser>:
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	1f 93       	push	r17
    1288:	0f 93       	push	r16
    128a:	ff 92       	push	r15
    128c:	ef 92       	push	r14
    128e:	df 92       	push	r13
    1290:	7b 01       	movw	r14, r22
    1292:	8c 01       	movw	r16, r24
    1294:	68 94       	set
    1296:	05 c0       	rjmp	.+10     	; 0x12a2 <__fp_powser+0x20>
    1298:	da 2e       	mov	r13, r26
    129a:	ef 01       	movw	r28, r30
    129c:	72 d0       	rcall	.+228    	; 0x1382 <__mulsf3x>
    129e:	fe 01       	movw	r30, r28
    12a0:	e8 94       	clt
    12a2:	a5 91       	lpm	r26, Z+
    12a4:	25 91       	lpm	r18, Z+
    12a6:	35 91       	lpm	r19, Z+
    12a8:	45 91       	lpm	r20, Z+
    12aa:	55 91       	lpm	r21, Z+
    12ac:	ae f3       	brts	.-22     	; 0x1298 <__fp_powser+0x16>
    12ae:	ef 01       	movw	r28, r30
    12b0:	54 de       	rcall	.-856    	; 0xf5a <__addsf3x>
    12b2:	fe 01       	movw	r30, r28
    12b4:	97 01       	movw	r18, r14
    12b6:	a8 01       	movw	r20, r16
    12b8:	da 94       	dec	r13
    12ba:	79 f7       	brne	.-34     	; 0x129a <__fp_powser+0x18>
    12bc:	df 90       	pop	r13
    12be:	ef 90       	pop	r14
    12c0:	ff 90       	pop	r15
    12c2:	0f 91       	pop	r16
    12c4:	1f 91       	pop	r17
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <__fp_pscA>:
    12cc:	00 24       	eor	r0, r0
    12ce:	0a 94       	dec	r0
    12d0:	16 16       	cp	r1, r22
    12d2:	17 06       	cpc	r1, r23
    12d4:	18 06       	cpc	r1, r24
    12d6:	09 06       	cpc	r0, r25
    12d8:	08 95       	ret

000012da <__fp_pscB>:
    12da:	00 24       	eor	r0, r0
    12dc:	0a 94       	dec	r0
    12de:	12 16       	cp	r1, r18
    12e0:	13 06       	cpc	r1, r19
    12e2:	14 06       	cpc	r1, r20
    12e4:	05 06       	cpc	r0, r21
    12e6:	08 95       	ret

000012e8 <__fp_round>:
    12e8:	09 2e       	mov	r0, r25
    12ea:	03 94       	inc	r0
    12ec:	00 0c       	add	r0, r0
    12ee:	11 f4       	brne	.+4      	; 0x12f4 <__fp_round+0xc>
    12f0:	88 23       	and	r24, r24
    12f2:	52 f0       	brmi	.+20     	; 0x1308 <__fp_round+0x20>
    12f4:	bb 0f       	add	r27, r27
    12f6:	40 f4       	brcc	.+16     	; 0x1308 <__fp_round+0x20>
    12f8:	bf 2b       	or	r27, r31
    12fa:	11 f4       	brne	.+4      	; 0x1300 <__fp_round+0x18>
    12fc:	60 ff       	sbrs	r22, 0
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <__fp_round+0x20>
    1300:	6f 5f       	subi	r22, 0xFF	; 255
    1302:	7f 4f       	sbci	r23, 0xFF	; 255
    1304:	8f 4f       	sbci	r24, 0xFF	; 255
    1306:	9f 4f       	sbci	r25, 0xFF	; 255
    1308:	08 95       	ret

0000130a <__fp_split3>:
    130a:	57 fd       	sbrc	r21, 7
    130c:	90 58       	subi	r25, 0x80	; 128
    130e:	44 0f       	add	r20, r20
    1310:	55 1f       	adc	r21, r21
    1312:	59 f0       	breq	.+22     	; 0x132a <__fp_splitA+0x10>
    1314:	5f 3f       	cpi	r21, 0xFF	; 255
    1316:	71 f0       	breq	.+28     	; 0x1334 <__fp_splitA+0x1a>
    1318:	47 95       	ror	r20

0000131a <__fp_splitA>:
    131a:	88 0f       	add	r24, r24
    131c:	97 fb       	bst	r25, 7
    131e:	99 1f       	adc	r25, r25
    1320:	61 f0       	breq	.+24     	; 0x133a <__fp_splitA+0x20>
    1322:	9f 3f       	cpi	r25, 0xFF	; 255
    1324:	79 f0       	breq	.+30     	; 0x1344 <__fp_splitA+0x2a>
    1326:	87 95       	ror	r24
    1328:	08 95       	ret
    132a:	12 16       	cp	r1, r18
    132c:	13 06       	cpc	r1, r19
    132e:	14 06       	cpc	r1, r20
    1330:	55 1f       	adc	r21, r21
    1332:	f2 cf       	rjmp	.-28     	; 0x1318 <__fp_split3+0xe>
    1334:	46 95       	lsr	r20
    1336:	f1 df       	rcall	.-30     	; 0x131a <__fp_splitA>
    1338:	08 c0       	rjmp	.+16     	; 0x134a <__fp_splitA+0x30>
    133a:	16 16       	cp	r1, r22
    133c:	17 06       	cpc	r1, r23
    133e:	18 06       	cpc	r1, r24
    1340:	99 1f       	adc	r25, r25
    1342:	f1 cf       	rjmp	.-30     	; 0x1326 <__fp_splitA+0xc>
    1344:	86 95       	lsr	r24
    1346:	71 05       	cpc	r23, r1
    1348:	61 05       	cpc	r22, r1
    134a:	08 94       	sec
    134c:	08 95       	ret

0000134e <__fp_zero>:
    134e:	e8 94       	clt

00001350 <__fp_szero>:
    1350:	bb 27       	eor	r27, r27
    1352:	66 27       	eor	r22, r22
    1354:	77 27       	eor	r23, r23
    1356:	cb 01       	movw	r24, r22
    1358:	97 f9       	bld	r25, 7
    135a:	08 95       	ret

0000135c <inverse>:
    135c:	9b 01       	movw	r18, r22
    135e:	ac 01       	movw	r20, r24
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	80 e8       	ldi	r24, 0x80	; 128
    1366:	9f e3       	ldi	r25, 0x3F	; 63
    1368:	ad ce       	rjmp	.-678    	; 0x10c4 <__divsf3>

0000136a <__mulsf3>:
    136a:	0b d0       	rcall	.+22     	; 0x1382 <__mulsf3x>
    136c:	bd cf       	rjmp	.-134    	; 0x12e8 <__fp_round>
    136e:	ae df       	rcall	.-164    	; 0x12cc <__fp_pscA>
    1370:	28 f0       	brcs	.+10     	; 0x137c <__mulsf3+0x12>
    1372:	b3 df       	rcall	.-154    	; 0x12da <__fp_pscB>
    1374:	18 f0       	brcs	.+6      	; 0x137c <__mulsf3+0x12>
    1376:	95 23       	and	r25, r21
    1378:	09 f0       	breq	.+2      	; 0x137c <__mulsf3+0x12>
    137a:	7a cf       	rjmp	.-268    	; 0x1270 <__fp_inf>
    137c:	7f cf       	rjmp	.-258    	; 0x127c <__fp_nan>
    137e:	11 24       	eor	r1, r1
    1380:	e7 cf       	rjmp	.-50     	; 0x1350 <__fp_szero>

00001382 <__mulsf3x>:
    1382:	c3 df       	rcall	.-122    	; 0x130a <__fp_split3>
    1384:	a0 f3       	brcs	.-24     	; 0x136e <__mulsf3+0x4>

00001386 <__mulsf3_pse>:
    1386:	95 9f       	mul	r25, r21
    1388:	d1 f3       	breq	.-12     	; 0x137e <__mulsf3+0x14>
    138a:	95 0f       	add	r25, r21
    138c:	50 e0       	ldi	r21, 0x00	; 0
    138e:	55 1f       	adc	r21, r21
    1390:	62 9f       	mul	r22, r18
    1392:	f0 01       	movw	r30, r0
    1394:	72 9f       	mul	r23, r18
    1396:	bb 27       	eor	r27, r27
    1398:	f0 0d       	add	r31, r0
    139a:	b1 1d       	adc	r27, r1
    139c:	63 9f       	mul	r22, r19
    139e:	aa 27       	eor	r26, r26
    13a0:	f0 0d       	add	r31, r0
    13a2:	b1 1d       	adc	r27, r1
    13a4:	aa 1f       	adc	r26, r26
    13a6:	64 9f       	mul	r22, r20
    13a8:	66 27       	eor	r22, r22
    13aa:	b0 0d       	add	r27, r0
    13ac:	a1 1d       	adc	r26, r1
    13ae:	66 1f       	adc	r22, r22
    13b0:	82 9f       	mul	r24, r18
    13b2:	22 27       	eor	r18, r18
    13b4:	b0 0d       	add	r27, r0
    13b6:	a1 1d       	adc	r26, r1
    13b8:	62 1f       	adc	r22, r18
    13ba:	73 9f       	mul	r23, r19
    13bc:	b0 0d       	add	r27, r0
    13be:	a1 1d       	adc	r26, r1
    13c0:	62 1f       	adc	r22, r18
    13c2:	83 9f       	mul	r24, r19
    13c4:	a0 0d       	add	r26, r0
    13c6:	61 1d       	adc	r22, r1
    13c8:	22 1f       	adc	r18, r18
    13ca:	74 9f       	mul	r23, r20
    13cc:	33 27       	eor	r19, r19
    13ce:	a0 0d       	add	r26, r0
    13d0:	61 1d       	adc	r22, r1
    13d2:	23 1f       	adc	r18, r19
    13d4:	84 9f       	mul	r24, r20
    13d6:	60 0d       	add	r22, r0
    13d8:	21 1d       	adc	r18, r1
    13da:	82 2f       	mov	r24, r18
    13dc:	76 2f       	mov	r23, r22
    13de:	6a 2f       	mov	r22, r26
    13e0:	11 24       	eor	r1, r1
    13e2:	9f 57       	subi	r25, 0x7F	; 127
    13e4:	50 40       	sbci	r21, 0x00	; 0
    13e6:	8a f0       	brmi	.+34     	; 0x140a <__mulsf3_pse+0x84>
    13e8:	e1 f0       	breq	.+56     	; 0x1422 <__mulsf3_pse+0x9c>
    13ea:	88 23       	and	r24, r24
    13ec:	4a f0       	brmi	.+18     	; 0x1400 <__mulsf3_pse+0x7a>
    13ee:	ee 0f       	add	r30, r30
    13f0:	ff 1f       	adc	r31, r31
    13f2:	bb 1f       	adc	r27, r27
    13f4:	66 1f       	adc	r22, r22
    13f6:	77 1f       	adc	r23, r23
    13f8:	88 1f       	adc	r24, r24
    13fa:	91 50       	subi	r25, 0x01	; 1
    13fc:	50 40       	sbci	r21, 0x00	; 0
    13fe:	a9 f7       	brne	.-22     	; 0x13ea <__mulsf3_pse+0x64>
    1400:	9e 3f       	cpi	r25, 0xFE	; 254
    1402:	51 05       	cpc	r21, r1
    1404:	70 f0       	brcs	.+28     	; 0x1422 <__mulsf3_pse+0x9c>
    1406:	34 cf       	rjmp	.-408    	; 0x1270 <__fp_inf>
    1408:	a3 cf       	rjmp	.-186    	; 0x1350 <__fp_szero>
    140a:	5f 3f       	cpi	r21, 0xFF	; 255
    140c:	ec f3       	brlt	.-6      	; 0x1408 <__mulsf3_pse+0x82>
    140e:	98 3e       	cpi	r25, 0xE8	; 232
    1410:	dc f3       	brlt	.-10     	; 0x1408 <__mulsf3_pse+0x82>
    1412:	86 95       	lsr	r24
    1414:	77 95       	ror	r23
    1416:	67 95       	ror	r22
    1418:	b7 95       	ror	r27
    141a:	f7 95       	ror	r31
    141c:	e7 95       	ror	r30
    141e:	9f 5f       	subi	r25, 0xFF	; 255
    1420:	c1 f7       	brne	.-16     	; 0x1412 <__mulsf3_pse+0x8c>
    1422:	fe 2b       	or	r31, r30
    1424:	88 0f       	add	r24, r24
    1426:	91 1d       	adc	r25, r1
    1428:	96 95       	lsr	r25
    142a:	87 95       	ror	r24
    142c:	97 f9       	bld	r25, 7
    142e:	08 95       	ret
    1430:	11 f4       	brne	.+4      	; 0x1436 <__mulsf3_pse+0xb0>
    1432:	0e f4       	brtc	.+2      	; 0x1436 <__mulsf3_pse+0xb0>
    1434:	23 cf       	rjmp	.-442    	; 0x127c <__fp_nan>
    1436:	41 c0       	rjmp	.+130    	; 0x14ba <__fp_mpack>

00001438 <sqrt>:
    1438:	70 df       	rcall	.-288    	; 0x131a <__fp_splitA>
    143a:	d0 f3       	brcs	.-12     	; 0x1430 <__mulsf3_pse+0xaa>
    143c:	99 23       	and	r25, r25
    143e:	d9 f3       	breq	.-10     	; 0x1436 <__mulsf3_pse+0xb0>
    1440:	ce f3       	brts	.-14     	; 0x1434 <__mulsf3_pse+0xae>
    1442:	9f 57       	subi	r25, 0x7F	; 127
    1444:	55 0b       	sbc	r21, r21
    1446:	87 ff       	sbrs	r24, 7
    1448:	46 d0       	rcall	.+140    	; 0x14d6 <__fp_norm2>
    144a:	00 24       	eor	r0, r0
    144c:	a0 e6       	ldi	r26, 0x60	; 96
    144e:	40 ea       	ldi	r20, 0xA0	; 160
    1450:	90 01       	movw	r18, r0
    1452:	80 58       	subi	r24, 0x80	; 128
    1454:	56 95       	lsr	r21
    1456:	97 95       	ror	r25
    1458:	28 f4       	brcc	.+10     	; 0x1464 <sqrt+0x2c>
    145a:	80 5c       	subi	r24, 0xC0	; 192
    145c:	66 0f       	add	r22, r22
    145e:	77 1f       	adc	r23, r23
    1460:	88 1f       	adc	r24, r24
    1462:	20 f0       	brcs	.+8      	; 0x146c <sqrt+0x34>
    1464:	26 17       	cp	r18, r22
    1466:	37 07       	cpc	r19, r23
    1468:	48 07       	cpc	r20, r24
    146a:	30 f4       	brcc	.+12     	; 0x1478 <sqrt+0x40>
    146c:	62 1b       	sub	r22, r18
    146e:	73 0b       	sbc	r23, r19
    1470:	84 0b       	sbc	r24, r20
    1472:	20 29       	or	r18, r0
    1474:	31 29       	or	r19, r1
    1476:	4a 2b       	or	r20, r26
    1478:	a6 95       	lsr	r26
    147a:	17 94       	ror	r1
    147c:	07 94       	ror	r0
    147e:	20 25       	eor	r18, r0
    1480:	31 25       	eor	r19, r1
    1482:	4a 27       	eor	r20, r26
    1484:	58 f7       	brcc	.-42     	; 0x145c <sqrt+0x24>
    1486:	66 0f       	add	r22, r22
    1488:	77 1f       	adc	r23, r23
    148a:	88 1f       	adc	r24, r24
    148c:	20 f0       	brcs	.+8      	; 0x1496 <sqrt+0x5e>
    148e:	26 17       	cp	r18, r22
    1490:	37 07       	cpc	r19, r23
    1492:	48 07       	cpc	r20, r24
    1494:	30 f4       	brcc	.+12     	; 0x14a2 <sqrt+0x6a>
    1496:	62 0b       	sbc	r22, r18
    1498:	73 0b       	sbc	r23, r19
    149a:	84 0b       	sbc	r24, r20
    149c:	20 0d       	add	r18, r0
    149e:	31 1d       	adc	r19, r1
    14a0:	41 1d       	adc	r20, r1
    14a2:	a0 95       	com	r26
    14a4:	81 f7       	brne	.-32     	; 0x1486 <sqrt+0x4e>
    14a6:	b9 01       	movw	r22, r18
    14a8:	84 2f       	mov	r24, r20
    14aa:	91 58       	subi	r25, 0x81	; 129
    14ac:	88 0f       	add	r24, r24
    14ae:	96 95       	lsr	r25
    14b0:	87 95       	ror	r24
    14b2:	08 95       	ret

000014b4 <square>:
    14b4:	9b 01       	movw	r18, r22
    14b6:	ac 01       	movw	r20, r24
    14b8:	58 cf       	rjmp	.-336    	; 0x136a <__mulsf3>

000014ba <__fp_mpack>:
    14ba:	9f 3f       	cpi	r25, 0xFF	; 255
    14bc:	31 f0       	breq	.+12     	; 0x14ca <__fp_mpack_finite+0xc>

000014be <__fp_mpack_finite>:
    14be:	91 50       	subi	r25, 0x01	; 1
    14c0:	20 f4       	brcc	.+8      	; 0x14ca <__fp_mpack_finite+0xc>
    14c2:	87 95       	ror	r24
    14c4:	77 95       	ror	r23
    14c6:	67 95       	ror	r22
    14c8:	b7 95       	ror	r27
    14ca:	88 0f       	add	r24, r24
    14cc:	91 1d       	adc	r25, r1
    14ce:	96 95       	lsr	r25
    14d0:	87 95       	ror	r24
    14d2:	97 f9       	bld	r25, 7
    14d4:	08 95       	ret

000014d6 <__fp_norm2>:
    14d6:	91 50       	subi	r25, 0x01	; 1
    14d8:	50 40       	sbci	r21, 0x00	; 0
    14da:	66 0f       	add	r22, r22
    14dc:	77 1f       	adc	r23, r23
    14de:	88 1f       	adc	r24, r24
    14e0:	d2 f7       	brpl	.-12     	; 0x14d6 <__fp_norm2>
    14e2:	08 95       	ret

000014e4 <__udivmodsi4>:
    14e4:	a1 e2       	ldi	r26, 0x21	; 33
    14e6:	1a 2e       	mov	r1, r26
    14e8:	aa 1b       	sub	r26, r26
    14ea:	bb 1b       	sub	r27, r27
    14ec:	fd 01       	movw	r30, r26
    14ee:	0d c0       	rjmp	.+26     	; 0x150a <__udivmodsi4_ep>

000014f0 <__udivmodsi4_loop>:
    14f0:	aa 1f       	adc	r26, r26
    14f2:	bb 1f       	adc	r27, r27
    14f4:	ee 1f       	adc	r30, r30
    14f6:	ff 1f       	adc	r31, r31
    14f8:	a2 17       	cp	r26, r18
    14fa:	b3 07       	cpc	r27, r19
    14fc:	e4 07       	cpc	r30, r20
    14fe:	f5 07       	cpc	r31, r21
    1500:	20 f0       	brcs	.+8      	; 0x150a <__udivmodsi4_ep>
    1502:	a2 1b       	sub	r26, r18
    1504:	b3 0b       	sbc	r27, r19
    1506:	e4 0b       	sbc	r30, r20
    1508:	f5 0b       	sbc	r31, r21

0000150a <__udivmodsi4_ep>:
    150a:	66 1f       	adc	r22, r22
    150c:	77 1f       	adc	r23, r23
    150e:	88 1f       	adc	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	1a 94       	dec	r1
    1514:	69 f7       	brne	.-38     	; 0x14f0 <__udivmodsi4_loop>
    1516:	60 95       	com	r22
    1518:	70 95       	com	r23
    151a:	80 95       	com	r24
    151c:	90 95       	com	r25
    151e:	9b 01       	movw	r18, r22
    1520:	ac 01       	movw	r20, r24
    1522:	bd 01       	movw	r22, r26
    1524:	cf 01       	movw	r24, r30
    1526:	08 95       	ret

00001528 <__tablejump2__>:
    1528:	ee 0f       	add	r30, r30
    152a:	ff 1f       	adc	r31, r31
    152c:	88 1f       	adc	r24, r24
    152e:	8b bf       	out	0x3b, r24	; 59
    1530:	07 90       	elpm	r0, Z+
    1532:	f6 91       	elpm	r31, Z
    1534:	e0 2d       	mov	r30, r0
    1536:	19 94       	eijmp

00001538 <__itoa_ncheck>:
    1538:	bb 27       	eor	r27, r27
    153a:	4a 30       	cpi	r20, 0x0A	; 10
    153c:	31 f4       	brne	.+12     	; 0x154a <__itoa_ncheck+0x12>
    153e:	99 23       	and	r25, r25
    1540:	22 f4       	brpl	.+8      	; 0x154a <__itoa_ncheck+0x12>
    1542:	bd e2       	ldi	r27, 0x2D	; 45
    1544:	90 95       	com	r25
    1546:	81 95       	neg	r24
    1548:	9f 4f       	sbci	r25, 0xFF	; 255
    154a:	01 c0       	rjmp	.+2      	; 0x154e <__utoa_common>

0000154c <__utoa_ncheck>:
    154c:	bb 27       	eor	r27, r27

0000154e <__utoa_common>:
    154e:	fb 01       	movw	r30, r22
    1550:	55 27       	eor	r21, r21
    1552:	aa 27       	eor	r26, r26
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	aa 1f       	adc	r26, r26
    155a:	a4 17       	cp	r26, r20
    155c:	10 f0       	brcs	.+4      	; 0x1562 <__utoa_common+0x14>
    155e:	a4 1b       	sub	r26, r20
    1560:	83 95       	inc	r24
    1562:	50 51       	subi	r21, 0x10	; 16
    1564:	b9 f7       	brne	.-18     	; 0x1554 <__utoa_common+0x6>
    1566:	a0 5d       	subi	r26, 0xD0	; 208
    1568:	aa 33       	cpi	r26, 0x3A	; 58
    156a:	08 f0       	brcs	.+2      	; 0x156e <__utoa_common+0x20>
    156c:	a9 5d       	subi	r26, 0xD9	; 217
    156e:	a1 93       	st	Z+, r26
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	79 f7       	brne	.-34     	; 0x1552 <__utoa_common+0x4>
    1574:	b1 11       	cpse	r27, r1
    1576:	b1 93       	st	Z+, r27
    1578:	11 92       	st	Z+, r1
    157a:	cb 01       	movw	r24, r22
    157c:	00 c0       	rjmp	.+0      	; 0x157e <strrev>

0000157e <strrev>:
    157e:	dc 01       	movw	r26, r24
    1580:	fc 01       	movw	r30, r24
    1582:	67 2f       	mov	r22, r23
    1584:	71 91       	ld	r23, Z+
    1586:	77 23       	and	r23, r23
    1588:	e1 f7       	brne	.-8      	; 0x1582 <strrev+0x4>
    158a:	32 97       	sbiw	r30, 0x02	; 2
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <strrev+0x18>
    158e:	7c 91       	ld	r23, X
    1590:	6d 93       	st	X+, r22
    1592:	70 83       	st	Z, r23
    1594:	62 91       	ld	r22, -Z
    1596:	ae 17       	cp	r26, r30
    1598:	bf 07       	cpc	r27, r31
    159a:	c8 f3       	brcs	.-14     	; 0x158e <strrev+0x10>
    159c:	08 95       	ret

0000159e <_exit>:
    159e:	f8 94       	cli

000015a0 <__stop_program>:
    15a0:	ff cf       	rjmp	.-2      	; 0x15a0 <__stop_program>
