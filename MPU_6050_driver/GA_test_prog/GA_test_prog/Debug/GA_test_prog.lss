
GA_test_prog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800200  0000121a  000012ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000121a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  0080024a  0080024a  000012f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000245a  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001237  00000000  00000000  0000392a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d59  00000000  00000000  00004b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  000058bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b09  00000000  00000000  00005c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009f9  00000000  00000000  00006729  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00007122  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	96 c0       	rjmp	.+300    	; 0x12e <__ctors_end>
       2:	00 00       	nop
       4:	b4 c0       	rjmp	.+360    	; 0x16e <__bad_interrupt>
       6:	00 00       	nop
       8:	b2 c0       	rjmp	.+356    	; 0x16e <__bad_interrupt>
       a:	00 00       	nop
       c:	b0 c0       	rjmp	.+352    	; 0x16e <__bad_interrupt>
       e:	00 00       	nop
      10:	ae c0       	rjmp	.+348    	; 0x16e <__bad_interrupt>
      12:	00 00       	nop
      14:	ac c0       	rjmp	.+344    	; 0x16e <__bad_interrupt>
      16:	00 00       	nop
      18:	aa c0       	rjmp	.+340    	; 0x16e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a8 c0       	rjmp	.+336    	; 0x16e <__bad_interrupt>
      1e:	00 00       	nop
      20:	a6 c0       	rjmp	.+332    	; 0x16e <__bad_interrupt>
      22:	00 00       	nop
      24:	a4 c0       	rjmp	.+328    	; 0x16e <__bad_interrupt>
      26:	00 00       	nop
      28:	a2 c0       	rjmp	.+324    	; 0x16e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a0 c0       	rjmp	.+320    	; 0x16e <__bad_interrupt>
      2e:	00 00       	nop
      30:	9e c0       	rjmp	.+316    	; 0x16e <__bad_interrupt>
      32:	00 00       	nop
      34:	9c c0       	rjmp	.+312    	; 0x16e <__bad_interrupt>
      36:	00 00       	nop
      38:	9a c0       	rjmp	.+308    	; 0x16e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	98 c0       	rjmp	.+304    	; 0x16e <__bad_interrupt>
      3e:	00 00       	nop
      40:	96 c0       	rjmp	.+300    	; 0x16e <__bad_interrupt>
      42:	00 00       	nop
      44:	94 c0       	rjmp	.+296    	; 0x16e <__bad_interrupt>
      46:	00 00       	nop
      48:	92 c0       	rjmp	.+292    	; 0x16e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	90 c0       	rjmp	.+288    	; 0x16e <__bad_interrupt>
      4e:	00 00       	nop
      50:	8e c0       	rjmp	.+284    	; 0x16e <__bad_interrupt>
      52:	00 00       	nop
      54:	8c c0       	rjmp	.+280    	; 0x16e <__bad_interrupt>
      56:	00 00       	nop
      58:	8a c0       	rjmp	.+276    	; 0x16e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	88 c0       	rjmp	.+272    	; 0x16e <__bad_interrupt>
      5e:	00 00       	nop
      60:	86 c0       	rjmp	.+268    	; 0x16e <__bad_interrupt>
      62:	00 00       	nop
      64:	84 c0       	rjmp	.+264    	; 0x16e <__bad_interrupt>
      66:	00 00       	nop
      68:	82 c0       	rjmp	.+260    	; 0x16e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	80 c0       	rjmp	.+256    	; 0x16e <__bad_interrupt>
      6e:	00 00       	nop
      70:	7e c0       	rjmp	.+252    	; 0x16e <__bad_interrupt>
      72:	00 00       	nop
      74:	7c c0       	rjmp	.+248    	; 0x16e <__bad_interrupt>
      76:	00 00       	nop
      78:	7a c0       	rjmp	.+244    	; 0x16e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	78 c0       	rjmp	.+240    	; 0x16e <__bad_interrupt>
      7e:	00 00       	nop
      80:	76 c0       	rjmp	.+236    	; 0x16e <__bad_interrupt>
      82:	00 00       	nop
      84:	74 c0       	rjmp	.+232    	; 0x16e <__bad_interrupt>
      86:	00 00       	nop
      88:	72 c0       	rjmp	.+228    	; 0x16e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	70 c0       	rjmp	.+224    	; 0x16e <__bad_interrupt>
      8e:	00 00       	nop
      90:	6e c0       	rjmp	.+220    	; 0x16e <__bad_interrupt>
      92:	00 00       	nop
      94:	6c c0       	rjmp	.+216    	; 0x16e <__bad_interrupt>
      96:	00 00       	nop
      98:	6a c0       	rjmp	.+212    	; 0x16e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	68 c0       	rjmp	.+208    	; 0x16e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	66 c0       	rjmp	.+204    	; 0x16e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	64 c0       	rjmp	.+200    	; 0x16e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	62 c0       	rjmp	.+196    	; 0x16e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	60 c0       	rjmp	.+192    	; 0x16e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5e c0       	rjmp	.+188    	; 0x16e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5c c0       	rjmp	.+184    	; 0x16e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5a c0       	rjmp	.+180    	; 0x16e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	58 c0       	rjmp	.+176    	; 0x16e <__bad_interrupt>
      be:	00 00       	nop
      c0:	56 c0       	rjmp	.+172    	; 0x16e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	54 c0       	rjmp	.+168    	; 0x16e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	52 c0       	rjmp	.+164    	; 0x16e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	50 c0       	rjmp	.+160    	; 0x16e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	4e c0       	rjmp	.+156    	; 0x16e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4c c0       	rjmp	.+152    	; 0x16e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4a c0       	rjmp	.+148    	; 0x16e <__bad_interrupt>
      da:	00 00       	nop
      dc:	48 c0       	rjmp	.+144    	; 0x16e <__bad_interrupt>
      de:	00 00       	nop
      e0:	46 c0       	rjmp	.+140    	; 0x16e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	17 03       	mulsu	r17, r23
      e6:	1c 03       	fmul	r17, r20
      e8:	25 03       	mulsu	r18, r21
      ea:	2a 03       	fmul	r18, r18
      ec:	33 03       	mulsu	r19, r19
      ee:	38 03       	fmul	r19, r16
      f0:	41 03       	mulsu	r20, r17
      f2:	46 03       	mulsu	r20, r22
      f4:	4f 03       	fmul	r20, r23
      f6:	54 03       	mulsu	r21, r20
      f8:	5d 03       	fmul	r21, r21
      fa:	62 03       	mulsu	r22, r18
      fc:	6b 03       	fmul	r22, r19
      fe:	70 03       	mulsu	r23, r16
     100:	08 4a       	sbci	r16, 0xA8	; 168
     102:	d7 3b       	cpi	r29, 0xB7	; 183
     104:	3b ce       	rjmp	.-906    	; 0xfffffd7c <__eeprom_end+0xff7efd7c>
     106:	01 6e       	ori	r16, 0xE1	; 225
     108:	84 bc       	out	0x24, r8	; 36
     10a:	bf fd       	.word	0xfdbf	; ????
     10c:	c1 2f       	mov	r28, r17
     10e:	3d 6c       	ori	r19, 0xCD	; 205
     110:	74 31       	cpi	r23, 0x14	; 20
     112:	9a bd       	out	0x2a, r25	; 42
     114:	56 83       	std	Z+6, r21	; 0x06
     116:	3d da       	rcall	.-2950   	; 0xfffff592 <__eeprom_end+0xff7ef592>
     118:	3d 00       	.word	0x003d	; ????
     11a:	c7 7f       	andi	r28, 0xF7	; 247
     11c:	11 be       	out	0x31, r1	; 49
     11e:	d9 e4       	ldi	r29, 0x49	; 73
     120:	bb 4c       	sbci	r27, 0xCB	; 203
     122:	3e 91       	ld	r19, -X
     124:	6b aa       	std	Y+51, r6	; 0x33
     126:	aa be       	out	0x3a, r10	; 58
     128:	00 00       	nop
     12a:	00 80       	ld	r0, Z
     12c:	3f 00       	.word	0x003f	; ????

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d1 e2       	ldi	r29, 0x21	; 33
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61
     13a:	00 e0       	ldi	r16, 0x00	; 0
     13c:	0c bf       	out	0x3c, r16	; 60

0000013e <__do_copy_data>:
     13e:	12 e0       	ldi	r17, 0x02	; 2
     140:	a0 e0       	ldi	r26, 0x00	; 0
     142:	b2 e0       	ldi	r27, 0x02	; 2
     144:	ea e1       	ldi	r30, 0x1A	; 26
     146:	f2 e1       	ldi	r31, 0x12	; 18
     148:	00 e0       	ldi	r16, 0x00	; 0
     14a:	0b bf       	out	0x3b, r16	; 59
     14c:	02 c0       	rjmp	.+4      	; 0x152 <__do_copy_data+0x14>
     14e:	07 90       	elpm	r0, Z+
     150:	0d 92       	st	X+, r0
     152:	aa 34       	cpi	r26, 0x4A	; 74
     154:	b1 07       	cpc	r27, r17
     156:	d9 f7       	brne	.-10     	; 0x14e <__do_copy_data+0x10>

00000158 <__do_clear_bss>:
     158:	22 e0       	ldi	r18, 0x02	; 2
     15a:	aa e4       	ldi	r26, 0x4A	; 74
     15c:	b2 e0       	ldi	r27, 0x02	; 2
     15e:	01 c0       	rjmp	.+2      	; 0x162 <.do_clear_bss_start>

00000160 <.do_clear_bss_loop>:
     160:	1d 92       	st	X+, r1

00000162 <.do_clear_bss_start>:
     162:	ae 39       	cpi	r26, 0x9E	; 158
     164:	b2 07       	cpc	r27, r18
     166:	e1 f7       	brne	.-8      	; 0x160 <.do_clear_bss_loop>
     168:	57 d4       	rcall	.+2222   	; 0xa18 <main>
     16a:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <_exit>

0000016e <__bad_interrupt>:
     16e:	48 cf       	rjmp	.-368    	; 0x0 <__vectors>

00000170 <init_s>:
**/
static uint16_t init_s(uint32_t SCL_f ,bool enable_interrupt) //freq is given in Hz
{
	
	//no internal pull up implemented so far
if (SCL_f <= 400000)
     170:	61 38       	cpi	r22, 0x81	; 129
     172:	2a e1       	ldi	r18, 0x1A	; 26
     174:	72 07       	cpc	r23, r18
     176:	26 e0       	ldi	r18, 0x06	; 6
     178:	82 07       	cpc	r24, r18
     17a:	91 05       	cpc	r25, r1
     17c:	a0 f5       	brcc	.+104    	; 0x1e6 <init_s+0x76>
	{
		//enable TWI clock module 
	PRR0&=~(1<<PRTWI);
     17e:	e4 e6       	ldi	r30, 0x64	; 100
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	20 81       	ld	r18, Z
     184:	2f 77       	andi	r18, 0x7F	; 127
     186:	20 83       	st	Z, r18
	
	//enable TWI
	TWCR|=(1<<TWEN);	
     188:	ec eb       	ldi	r30, 0xBC	; 188
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	20 81       	ld	r18, Z
     18e:	24 60       	ori	r18, 0x04	; 4
     190:	20 83       	st	Z, r18
	
	//enable interrupt
	int_is_enabled=enable_interrupt;
     192:	40 93 4c 02 	sts	0x024C, r20	; 0x80024c <int_is_enabled>
	if (int_is_enabled)
     196:	44 23       	and	r20, r20
     198:	19 f0       	breq	.+6      	; 0x1a0 <init_s+0x30>
	{
		TWCR|=(1<<TWIE);
     19a:	20 81       	ld	r18, Z
     19c:	21 60       	ori	r18, 0x01	; 1
     19e:	20 83       	st	Z, r18
	}
	
	//constants pre calculated from mathcad 
			
		uint8_t TWBR_1= (uint8_t)((F_CPU/(8.0*SCL_f))-2.0);
     1a0:	66 d6       	rcall	.+3276   	; 0xe6e <__floatunsisf>
     1a2:	20 e0       	ldi	r18, 0x00	; 0
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	40 e0       	ldi	r20, 0x00	; 0
     1a8:	51 e4       	ldi	r21, 0x41	; 65
     1aa:	1b d7       	rcall	.+3638   	; 0xfe2 <__mulsf3>
     1ac:	9b 01       	movw	r18, r22
     1ae:	ac 01       	movw	r20, r24
     1b0:	60 e0       	ldi	r22, 0x00	; 0
     1b2:	74 e2       	ldi	r23, 0x24	; 36
     1b4:	84 e7       	ldi	r24, 0x74	; 116
     1b6:	9b e4       	ldi	r25, 0x4B	; 75
     1b8:	c1 d5       	rcall	.+2946   	; 0xd3c <__divsf3>
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	40 e0       	ldi	r20, 0x00	; 0
     1c0:	50 e4       	ldi	r21, 0x40	; 64
     1c2:	f5 d4       	rcall	.+2538   	; 0xbae <__subsf3>
     1c4:	28 d6       	rcall	.+3152   	; 0xe16 <__fixunssfsi>


		uint8_t validation = 0xFF;

		if(TWBR_1>0 && TWBR_1<=validation )
     1c6:	66 23       	and	r22, r22
     1c8:	89 f0       	breq	.+34     	; 0x1ec <init_s+0x7c>
		{
			//set prescaler

			TWSR&=~(1<<TWPS0);
     1ca:	e9 eb       	ldi	r30, 0xB9	; 185
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	8e 7f       	andi	r24, 0xFE	; 254
     1d2:	80 83       	st	Z, r24
			TWSR&=~(1<<TWPS1);
     1d4:	80 81       	ld	r24, Z
     1d6:	8d 7f       	andi	r24, 0xFD	; 253
     1d8:	80 83       	st	Z, r24
			//typecast to proper format and insert
			TWBR = TWBR_1;
     1da:	e8 eb       	ldi	r30, 0xB8	; 184
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	60 83       	st	Z, r22
			return TWBR;
     1e0:	80 81       	ld	r24, Z
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	08 95       	ret
	TWBR = TWBR_1;
	return TWBR_1;
	}
else
	{
	return 69;
     1e6:	85 e4       	ldi	r24, 0x45	; 69
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	08 95       	ret
			return TWBR;
		}

		else
		{
			return 0; //return 0 error
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	90 e0       	ldi	r25, 0x00	; 0
	}
else
	{
	return 69;
	}
}
     1f0:	08 95       	ret

000001f2 <disable_s>:
----------------description-----------------------------------------------------------------
Disables any i2c activity, activity, 'init_s()' does not need to be followed before starting new transfer
-------------function description end-------------------------------------------------------
**/
static void disable_s(void)
{
     1f2:	08 95       	ret

000001f4 <start_s>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static void start_s(void)
{
	TWCR=0;
     1f4:	ec eb       	ldi	r30, 0xBC	; 188
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	10 82       	st	Z, r1
	TWCR |= (1<<TWSTA)|(1<<TWEN)|(1<<TWINT); //TWSTA sends start bit 
     1fa:	80 81       	ld	r24, Z
     1fc:	84 6a       	ori	r24, 0xA4	; 164
     1fe:	80 83       	st	Z, r24

	if (!int_is_enabled)
     200:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <int_is_enabled>
     204:	81 11       	cpse	r24, r1
     206:	03 c0       	rjmp	.+6      	; 0x20e <start_s+0x1a>
	{
		while ((TWCR & (1<<TWINT)) == 0)
     208:	80 81       	ld	r24, Z
     20a:	88 23       	and	r24, r24
     20c:	ec f7       	brge	.-6      	; 0x208 <start_s+0x14>
     20e:	08 95       	ret

00000210 <stop_s>:
stops i2c, no polling needed
-------------function description end-------------------------------------------------------
**/
static void stop_s()
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     210:	84 e9       	ldi	r24, 0x94	; 148
     212:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     216:	08 95       	ret

00000218 <selectMode_s>:
-------------function description end-------------------------------------------------------
**/
static void selectMode_s(uint8_t SLA_addr,I2C_MODE_t p_mode) //SLA_x is SLA+R/W
{
	//must send address now
	if(p_mode==I2C_WRITE_MODE)
     218:	61 11       	cpse	r22, r1
     21a:	04 c0       	rjmp	.+8      	; 0x224 <selectMode_s+0xc>
	{
		TWDR=((SLA_addr<<1)&(~0b1));
     21c:	88 0f       	add	r24, r24
     21e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     222:	06 c0       	rjmp	.+12     	; 0x230 <selectMode_s+0x18>
	}
	else if(p_mode==I2C_READ_MODE)
     224:	61 30       	cpi	r22, 0x01	; 1
     226:	21 f4       	brne	.+8      	; 0x230 <selectMode_s+0x18>
	{
		TWDR=((SLA_addr<<1)|(0b1));
     228:	88 0f       	add	r24, r24
     22a:	81 60       	ori	r24, 0x01	; 1
     22c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	}
	TWCR |= (1<<TWINT);
     230:	ec eb       	ldi	r30, 0xBC	; 188
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 81       	ld	r24, Z
     236:	80 68       	ori	r24, 0x80	; 128
     238:	80 83       	st	Z, r24
	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     23a:	80 81       	ld	r24, Z
     23c:	84 6a       	ori	r24, 0xA4	; 164
     23e:	80 83       	st	Z, r24
	if (!int_is_enabled)
     240:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <int_is_enabled>
     244:	81 11       	cpse	r24, r1
     246:	03 c0       	rjmp	.+6      	; 0x24e <selectMode_s+0x36>
	{
	  while ((TWCR & (1<<TWINT)) == 0) //poll
     248:	80 81       	ld	r24, Z
     24a:	88 23       	and	r24, r24
     24c:	ec f7       	brge	.-6      	; 0x248 <selectMode_s+0x30>
     24e:	08 95       	ret

00000250 <write_s>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static void write_s(uint8_t data)
{
	TWDR = data;
     250:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT)|(1<<TWEN);
     254:	84 e8       	ldi	r24, 0x84	; 132
     256:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	if (!int_is_enabled)
     25a:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <int_is_enabled>
     25e:	81 11       	cpse	r24, r1
     260:	05 c0       	rjmp	.+10     	; 0x26c <write_s+0x1c>
	{
		while ((TWCR & (1<<TWINT)) == 0)
     262:	ec eb       	ldi	r30, 0xBC	; 188
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	88 23       	and	r24, r24
     26a:	ec f7       	brge	.-6      	; 0x266 <write_s+0x16>
     26c:	08 95       	ret

0000026e <read_s>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static uint8_t read_s (bool isLast)
{
	if (!isLast ) //If we want to read more than 1 byte
     26e:	81 11       	cpse	r24, r1
     270:	04 c0       	rjmp	.+8      	; 0x27a <read_s+0xc>
	{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     272:	84 ec       	ldi	r24, 0xC4	; 196
     274:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     278:	03 c0       	rjmp	.+6      	; 0x280 <read_s+0x12>
	}

	else             //If we want to read only one byte
	{
		TWCR = (1<<TWINT) | (1<<TWEN);
     27a:	84 e8       	ldi	r24, 0x84	; 132
     27c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	}
	
	if (!int_is_enabled)
     280:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <int_is_enabled>
     284:	81 11       	cpse	r24, r1
     286:	08 c0       	rjmp	.+16     	; 0x298 <read_s+0x2a>
	{
	  while ((TWCR & (1<<TWINT)) == 0)
     288:	ec eb       	ldi	r30, 0xBC	; 188
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	88 23       	and	r24, r24
     290:	ec f7       	brge	.-6      	; 0x28c <read_s+0x1e>
	  {}
	{}
	return TWDR;
     292:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     296:	08 95       	ret
	}

	return 0;
     298:	80 e0       	ldi	r24, 0x00	; 0
}
     29a:	08 95       	ret

0000029c <setBusy_s>:

static bool setBusy_s(bool status)
{	
	busy_flag=status;
     29c:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <__data_end>
	return  busy_flag;
}
     2a0:	08 95       	ret

000002a2 <getBusy_s>:


static bool getBusy_s(void)
{
	return busy_flag;
}
     2a2:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__data_end>
     2a6:	08 95       	ret

000002a8 <getStatus_s>:

static uint8_t getStatus_s(void)
{
	return (TWSR)&(0b11111000);
     2a8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     2ac:	88 7f       	andi	r24, 0xF8	; 248
     2ae:	08 95       	ret

000002b0 <get_i2c_interface>:
-------------function description end-------------------------------------------------------
**/
i2c_t* get_i2c_interface(void)
{
	
 if (!initialized)
     2b0:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <initialized>
     2b4:	81 11       	cpse	r24, r1
     2b6:	2d c0       	rjmp	.+90     	; 0x312 <get_i2c_interface+0x62>
 {
	i2c_interface.init				=	init_s;
     2b8:	ed e4       	ldi	r30, 0x4D	; 77
     2ba:	f2 e0       	ldi	r31, 0x02	; 2
     2bc:	88 eb       	ldi	r24, 0xB8	; 184
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	91 83       	std	Z+1, r25	; 0x01
     2c2:	80 83       	st	Z, r24
	i2c_interface.disable			=	disable_s;
     2c4:	89 ef       	ldi	r24, 0xF9	; 249
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	93 83       	std	Z+3, r25	; 0x03
     2ca:	82 83       	std	Z+2, r24	; 0x02
	i2c_interface.start				=	start_s;
     2cc:	8a ef       	ldi	r24, 0xFA	; 250
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	95 83       	std	Z+5, r25	; 0x05
     2d2:	84 83       	std	Z+4, r24	; 0x04
	i2c_interface.stop				=	stop_s;
     2d4:	88 e0       	ldi	r24, 0x08	; 8
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	97 83       	std	Z+7, r25	; 0x07
     2da:	86 83       	std	Z+6, r24	; 0x06
	i2c_interface.selectmode		=	selectMode_s;
     2dc:	8c e0       	ldi	r24, 0x0C	; 12
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	91 87       	std	Z+9, r25	; 0x09
     2e2:	80 87       	std	Z+8, r24	; 0x08
	i2c_interface.write				=	write_s;
     2e4:	88 e2       	ldi	r24, 0x28	; 40
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	93 87       	std	Z+11, r25	; 0x0b
     2ea:	82 87       	std	Z+10, r24	; 0x0a
	i2c_interface.read				=	read_s;
     2ec:	87 e3       	ldi	r24, 0x37	; 55
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	95 87       	std	Z+13, r25	; 0x0d
     2f2:	84 87       	std	Z+12, r24	; 0x0c
	i2c_interface.setBusy			=	setBusy_s;
     2f4:	8e e4       	ldi	r24, 0x4E	; 78
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	97 87       	std	Z+15, r25	; 0x0f
     2fa:	86 87       	std	Z+14, r24	; 0x0e
	i2c_interface.getBusy			=	getBusy_s;
     2fc:	81 e5       	ldi	r24, 0x51	; 81
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	91 8b       	std	Z+17, r25	; 0x11
     302:	80 8b       	std	Z+16, r24	; 0x10
	i2c_interface.getStatus			=	getStatus_s;
     304:	84 e5       	ldi	r24, 0x54	; 84
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	93 8b       	std	Z+19, r25	; 0x13
     30a:	82 8b       	std	Z+18, r24	; 0x12
	initialized=true;
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <initialized>
	
 }
	return &i2c_interface;
}
     312:	8d e4       	ldi	r24, 0x4D	; 77
     314:	92 e0       	ldi	r25, 0x02	; 2
     316:	08 95       	ret

00000318 <InitUART>:
  // Wait for new character received
  while ( (UCSRnA & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDRn;
}
     318:	0f 93       	push	r16
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	ec 01       	movw	r28, r24
     320:	db 01       	movw	r26, r22
     322:	ca 01       	movw	r24, r20
     324:	8c 52       	subi	r24, 0x2C	; 44
     326:	91 40       	sbci	r25, 0x01	; 1
     328:	a1 09       	sbc	r26, r1
     32a:	b1 09       	sbc	r27, r1
     32c:	85 3d       	cpi	r24, 0xD5	; 213
     32e:	90 4c       	sbci	r25, 0xC0	; 192
     330:	a1 40       	sbci	r26, 0x01	; 1
     332:	b1 05       	cpc	r27, r1
     334:	08 f0       	brcs	.+2      	; 0x338 <InitUART+0x20>
     336:	3f c0       	rjmp	.+126    	; 0x3b6 <InitUART+0x9e>
     338:	25 50       	subi	r18, 0x05	; 5
     33a:	24 30       	cpi	r18, 0x04	; 4
     33c:	e0 f5       	brcc	.+120    	; 0x3b6 <InitUART+0x9e>
     33e:	80 e2       	ldi	r24, 0x20	; 32
     340:	88 83       	st	Y, r24
     342:	88 e1       	ldi	r24, 0x18	; 24
     344:	89 83       	std	Y+1, r24	; 0x01
     346:	22 0f       	add	r18, r18
     348:	2a 83       	std	Y+2, r18	; 0x02
     34a:	05 34       	cpi	r16, 0x45	; 69
     34c:	21 f4       	brne	.+8      	; 0x356 <InitUART+0x3e>
     34e:	8a 81       	ldd	r24, Y+2	; 0x02
     350:	80 62       	ori	r24, 0x20	; 32
     352:	8a 83       	std	Y+2, r24	; 0x02
     354:	05 c0       	rjmp	.+10     	; 0x360 <InitUART+0x48>
     356:	0f 34       	cpi	r16, 0x4F	; 79
     358:	19 f4       	brne	.+6      	; 0x360 <InitUART+0x48>
     35a:	8a 81       	ldd	r24, Y+2	; 0x02
     35c:	80 63       	ori	r24, 0x30	; 48
     35e:	8a 83       	std	Y+2, r24	; 0x02
     360:	db 01       	movw	r26, r22
     362:	ca 01       	movw	r24, r20
     364:	80 58       	subi	r24, 0x80	; 128
     366:	9b 47       	sbci	r25, 0x7B	; 123
     368:	a1 4e       	sbci	r26, 0xE1	; 225
     36a:	bf 4f       	sbci	r27, 0xFF	; 255
     36c:	88 0f       	add	r24, r24
     36e:	99 1f       	adc	r25, r25
     370:	aa 1f       	adc	r26, r26
     372:	bb 1f       	adc	r27, r27
     374:	88 0f       	add	r24, r24
     376:	99 1f       	adc	r25, r25
     378:	aa 1f       	adc	r26, r26
     37a:	bb 1f       	adc	r27, r27
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	aa 1f       	adc	r26, r26
     382:	bb 1f       	adc	r27, r27
     384:	44 0f       	add	r20, r20
     386:	55 1f       	adc	r21, r21
     388:	66 1f       	adc	r22, r22
     38a:	77 1f       	adc	r23, r23
     38c:	44 0f       	add	r20, r20
     38e:	55 1f       	adc	r21, r21
     390:	66 1f       	adc	r22, r22
     392:	77 1f       	adc	r23, r23
     394:	9a 01       	movw	r18, r20
     396:	ab 01       	movw	r20, r22
     398:	22 0f       	add	r18, r18
     39a:	33 1f       	adc	r19, r19
     39c:	44 1f       	adc	r20, r20
     39e:	55 1f       	adc	r21, r21
     3a0:	22 0f       	add	r18, r18
     3a2:	33 1f       	adc	r19, r19
     3a4:	44 1f       	adc	r20, r20
     3a6:	55 1f       	adc	r21, r21
     3a8:	bc 01       	movw	r22, r24
     3aa:	cd 01       	movw	r24, r26
     3ac:	d7 d6       	rcall	.+3502   	; 0x115c <__udivmodsi4>
     3ae:	21 50       	subi	r18, 0x01	; 1
     3b0:	31 09       	sbc	r19, r1
     3b2:	3d 83       	std	Y+5, r19	; 0x05
     3b4:	2c 83       	std	Y+4, r18	; 0x04
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	0f 91       	pop	r16
     3bc:	08 95       	ret

000003be <SendChar>:
Then send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(unsigned int UART_adr, char Tegn)
{
     3be:	fc 01       	movw	r30, r24
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRnA & (1<<5)) == 0 )
     3c0:	90 81       	ld	r25, Z
     3c2:	95 ff       	sbrs	r25, 5
     3c4:	fd cf       	rjmp	.-6      	; 0x3c0 <SendChar+0x2>
  {}
  // Then send the character
  UDRn = Tegn;
     3c6:	66 83       	std	Z+6, r22	; 0x06
     3c8:	08 95       	ret

000003ca <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	eb 01       	movw	r28, r22
  // Repeat until zero-termination
  while (*Streng != 0)
     3d4:	68 81       	ld	r22, Y
     3d6:	66 23       	and	r22, r22
     3d8:	39 f0       	breq	.+14     	; 0x3e8 <SendString+0x1e>
     3da:	8c 01       	movw	r16, r24
     3dc:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
     3de:	c8 01       	movw	r24, r16
     3e0:	ee df       	rcall	.-36     	; 0x3be <SendChar>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
     3e2:	69 91       	ld	r22, Y+
     3e4:	61 11       	cpse	r22, r1
     3e6:	fb cf       	rjmp	.-10     	; 0x3de <SendString+0x14>
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
    // Advance the pointer one step
    Streng++;
  }
}
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	08 95       	ret

000003f2 <SendInteger>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(unsigned int UART_adr, int Tal)
{
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	27 97       	sbiw	r28, 0x07	; 7
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
     404:	de bf       	out	0x3e, r29	; 62
     406:	0f be       	out	0x3f, r0	; 63
     408:	cd bf       	out	0x3d, r28	; 61
     40a:	8c 01       	movw	r16, r24
     40c:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     40e:	4a e0       	ldi	r20, 0x0A	; 10
     410:	be 01       	movw	r22, r28
     412:	6f 5f       	subi	r22, 0xFF	; 255
     414:	7f 4f       	sbci	r23, 0xFF	; 255
     416:	cc d6       	rcall	.+3480   	; 0x11b0 <__itoa_ncheck>
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Tal, array, 10);
  // - then send the string
  SendString(UART_adr, array);
     418:	be 01       	movw	r22, r28
     41a:	6f 5f       	subi	r22, 0xFF	; 255
     41c:	7f 4f       	sbci	r23, 0xFF	; 255
     41e:	c8 01       	movw	r24, r16
     420:	d4 df       	rcall	.-88     	; 0x3ca <SendString>
}
     422:	27 96       	adiw	r28, 0x07	; 7
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	08 95       	ret

00000438 <s_start>:
}


static uint8_t s_start(void)
{
	i2c->start();
     438:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <i2c>
     43c:	f0 91 99 02 	lds	r31, 0x0299	; 0x800299 <i2c+0x1>
     440:	04 80       	ldd	r0, Z+4	; 0x04
     442:	f5 81       	ldd	r31, Z+5	; 0x05
     444:	e0 2d       	mov	r30, r0
     446:	19 95       	eicall
	return 1;

}
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	08 95       	ret

0000044c <s_stop>:
static void s_stop(void)
{
	i2c->stop();
     44c:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <i2c>
     450:	f0 91 99 02 	lds	r31, 0x0299	; 0x800299 <i2c+0x1>
     454:	06 80       	ldd	r0, Z+6	; 0x06
     456:	f7 81       	ldd	r31, Z+7	; 0x07
     458:	e0 2d       	mov	r30, r0
     45a:	19 95       	eicall
     45c:	08 95       	ret

0000045e <s_enterWrite>:
}
static void s_enterWrite(void)
{
	
	i2c->selectmode(ADDR_0,I2C_WRITE_MODE);
     45e:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <i2c>
     462:	f0 91 99 02 	lds	r31, 0x0299	; 0x800299 <i2c+0x1>
     466:	00 84       	ldd	r0, Z+8	; 0x08
     468:	f1 85       	ldd	r31, Z+9	; 0x09
     46a:	e0 2d       	mov	r30, r0
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	88 e6       	ldi	r24, 0x68	; 104
     470:	19 95       	eicall
     472:	08 95       	ret

00000474 <s_enterRead>:
	
}
static void s_enterRead(void)
{

	i2c->selectmode(ADDR_0,I2C_READ_MODE);
     474:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <i2c>
     478:	f0 91 99 02 	lds	r31, 0x0299	; 0x800299 <i2c+0x1>
     47c:	00 84       	ldd	r0, Z+8	; 0x08
     47e:	f1 85       	ldd	r31, Z+9	; 0x09
     480:	e0 2d       	mov	r30, r0
     482:	61 e0       	ldi	r22, 0x01	; 1
     484:	88 e6       	ldi	r24, 0x68	; 104
     486:	19 95       	eicall
     488:	08 95       	ret

0000048a <s_selectRegister>:
	
}
static void s_selectRegister(reg_addr_t reg_addr)
{
	currentAddr=reg_addr;
     48a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	i2c->write(reg_addr);
     48e:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <i2c>
     492:	f0 91 99 02 	lds	r31, 0x0299	; 0x800299 <i2c+0x1>
     496:	02 84       	ldd	r0, Z+10	; 0x0a
     498:	f3 85       	ldd	r31, Z+11	; 0x0b
     49a:	e0 2d       	mov	r30, r0
     49c:	19 95       	eicall
     49e:	08 95       	ret

000004a0 <s_write>:
}
static void s_write(uint8_t data)
{
	i2c->write(data);
     4a0:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <i2c>
     4a4:	f0 91 99 02 	lds	r31, 0x0299	; 0x800299 <i2c+0x1>
     4a8:	02 84       	ldd	r0, Z+10	; 0x0a
     4aa:	f3 85       	ldd	r31, Z+11	; 0x0b
     4ac:	e0 2d       	mov	r30, r0
     4ae:	19 95       	eicall
     4b0:	08 95       	ret

000004b2 <s_reset>:



static void s_reset(void)
{
	s_start();
     4b2:	c2 df       	rcall	.-124    	; 0x438 <s_start>
	s_enterWrite();
     4b4:	d4 df       	rcall	.-88     	; 0x45e <s_enterWrite>
	s_selectRegister(0x6B);
     4b6:	8b e6       	ldi	r24, 0x6B	; 107
     4b8:	e8 df       	rcall	.-48     	; 0x48a <s_selectRegister>
	s_write(0x00);
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	f1 df       	rcall	.-30     	; 0x4a0 <s_write>
     4be:	c6 cf       	rjmp	.-116    	; 0x44c <s_stop>
	s_stop();
     4c0:	08 95       	ret

000004c2 <s_accerelSettings>:
     4c2:	84 30       	cpi	r24, 0x04	; 4
     4c4:	08 f0       	brcs	.+2      	; 0x4c8 <s_accerelSettings+0x6>
}

static void s_accerelSettings(uint8_t p_range)
{
//4g right now
	if (p_range<=3)
     4c6:	4a c0       	rjmp	.+148    	; 0x55c <s_accerelSettings+0x9a>
	{
		s_accelRange = p_range;
     4c8:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <s_accelRange>
		s_start();
     4cc:	b5 df       	rcall	.-150    	; 0x438 <s_start>
		s_enterWrite();
     4ce:	c7 df       	rcall	.-114    	; 0x45e <s_enterWrite>
		s_selectRegister(ACCEL_SETTING_REG);
     4d0:	8c e1       	ldi	r24, 0x1C	; 28
     4d2:	db df       	rcall	.-74     	; 0x48a <s_selectRegister>
     4d4:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <s_accelRange>
		s_write(s_accelRange<<3);
     4d8:	88 0f       	add	r24, r24
     4da:	88 0f       	add	r24, r24
     4dc:	88 0f       	add	r24, r24
     4de:	e0 df       	rcall	.-64     	; 0x4a0 <s_write>
		s_stop();
     4e0:	b5 df       	rcall	.-150    	; 0x44c <s_stop>
     4e2:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <s_accelRange>
		
	switch (s_accelRange)
     4e6:	81 30       	cpi	r24, 0x01	; 1
     4e8:	99 f0       	breq	.+38     	; 0x510 <s_accerelSettings+0x4e>
     4ea:	28 f0       	brcs	.+10     	; 0x4f6 <s_accerelSettings+0x34>
     4ec:	82 30       	cpi	r24, 0x02	; 2
     4ee:	e9 f0       	breq	.+58     	; 0x52a <s_accerelSettings+0x68>
     4f0:	83 30       	cpi	r24, 0x03	; 3
     4f2:	41 f1       	breq	.+80     	; 0x544 <s_accerelSettings+0x82>
     4f4:	08 95       	ret
     4f6:	80 e0       	ldi	r24, 0x00	; 0
	{
		case 0:
		s_scalefact_accel = 16384.0;
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	a0 e8       	ldi	r26, 0x80	; 128
     4fc:	b6 e4       	ldi	r27, 0x46	; 70
     4fe:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <s_scalefact_accel>
     502:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <s_scalefact_accel+0x1>
     506:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <s_scalefact_accel+0x2>
     50a:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <s_scalefact_accel+0x3>
     50e:	08 95       	ret
		break;
     510:	80 e0       	ldi	r24, 0x00	; 0
		case 1:
		s_scalefact_accel = 8192.0;
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	a0 e0       	ldi	r26, 0x00	; 0
     516:	b6 e4       	ldi	r27, 0x46	; 70
     518:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <s_scalefact_accel>
     51c:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <s_scalefact_accel+0x1>
     520:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <s_scalefact_accel+0x2>
     524:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <s_scalefact_accel+0x3>
     528:	08 95       	ret
		break;
     52a:	80 e0       	ldi	r24, 0x00	; 0
		case 2:
		s_scalefact_accel = 4096.0;
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	a0 e8       	ldi	r26, 0x80	; 128
     530:	b5 e4       	ldi	r27, 0x45	; 69
     532:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <s_scalefact_accel>
     536:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <s_scalefact_accel+0x1>
     53a:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <s_scalefact_accel+0x2>
     53e:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <s_scalefact_accel+0x3>
     542:	08 95       	ret
		break;
     544:	80 e0       	ldi	r24, 0x00	; 0
		case 3:
		s_scalefact_accel = 2048.0;
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	a0 e0       	ldi	r26, 0x00	; 0
     54a:	b5 e4       	ldi	r27, 0x45	; 69
     54c:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <s_scalefact_accel>
     550:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <s_scalefact_accel+0x1>
     554:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <s_scalefact_accel+0x2>
     558:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <s_scalefact_accel+0x3>
     55c:	08 95       	ret

0000055e <s_gyroSettings>:
     55e:	84 30       	cpi	r24, 0x04	; 4
	s_stop();
}

static void s_gyroSettings(uint8_t p_range)
{
	if (p_range<=3)
     560:	08 f0       	brcs	.+2      	; 0x564 <s_gyroSettings+0x6>
     562:	4a c0       	rjmp	.+148    	; 0x5f8 <s_gyroSettings+0x9a>
	{
		s_gyroRange = p_range;
     564:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <s_gyroRange>
		s_start();
     568:	67 df       	rcall	.-306    	; 0x438 <s_start>
		s_enterWrite();
     56a:	79 df       	rcall	.-270    	; 0x45e <s_enterWrite>
		s_selectRegister(GYRO_SETTING_REG);
     56c:	8b e1       	ldi	r24, 0x1B	; 27
     56e:	8d df       	rcall	.-230    	; 0x48a <s_selectRegister>
     570:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <s_gyroRange>
		s_write(s_gyroRange<<3);
     574:	88 0f       	add	r24, r24
     576:	88 0f       	add	r24, r24
     578:	88 0f       	add	r24, r24
     57a:	92 df       	rcall	.-220    	; 0x4a0 <s_write>
		s_stop();
     57c:	67 df       	rcall	.-306    	; 0x44c <s_stop>
     57e:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <s_gyroRange>
		
		switch (s_gyroRange)
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	99 f0       	breq	.+38     	; 0x5ac <s_gyroSettings+0x4e>
     586:	28 f0       	brcs	.+10     	; 0x592 <s_gyroSettings+0x34>
     588:	82 30       	cpi	r24, 0x02	; 2
     58a:	e9 f0       	breq	.+58     	; 0x5c6 <s_gyroSettings+0x68>
     58c:	83 30       	cpi	r24, 0x03	; 3
     58e:	41 f1       	breq	.+80     	; 0x5e0 <s_gyroSettings+0x82>
     590:	08 95       	ret
     592:	80 e0       	ldi	r24, 0x00	; 0
		{
		case 0:
			s_scalefact_gyro = 131.0;	
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	a3 e0       	ldi	r26, 0x03	; 3
     598:	b3 e4       	ldi	r27, 0x43	; 67
     59a:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <s_scalefact_gyro>
     59e:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <s_scalefact_gyro+0x1>
     5a2:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <s_scalefact_gyro+0x2>
     5a6:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <s_scalefact_gyro+0x3>
     5aa:	08 95       	ret
		break;
     5ac:	80 e0       	ldi	r24, 0x00	; 0
		case 1:
			s_scalefact_gyro = 65.5;	
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	a3 e8       	ldi	r26, 0x83	; 131
     5b2:	b2 e4       	ldi	r27, 0x42	; 66
     5b4:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <s_scalefact_gyro>
     5b8:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <s_scalefact_gyro+0x1>
     5bc:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <s_scalefact_gyro+0x2>
     5c0:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <s_scalefact_gyro+0x3>
     5c4:	08 95       	ret
		break;
     5c6:	83 e3       	ldi	r24, 0x33	; 51
		case 2:
			s_scalefact_gyro = 32.8;	
     5c8:	93 e3       	ldi	r25, 0x33	; 51
     5ca:	a3 e0       	ldi	r26, 0x03	; 3
     5cc:	b2 e4       	ldi	r27, 0x42	; 66
     5ce:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <s_scalefact_gyro>
     5d2:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <s_scalefact_gyro+0x1>
     5d6:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <s_scalefact_gyro+0x2>
     5da:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <s_scalefact_gyro+0x3>
     5de:	08 95       	ret
		break;
     5e0:	83 e3       	ldi	r24, 0x33	; 51
		case 3:
			s_scalefact_gyro = 16.4;
     5e2:	93 e3       	ldi	r25, 0x33	; 51
     5e4:	a3 e8       	ldi	r26, 0x83	; 131
     5e6:	b1 e4       	ldi	r27, 0x41	; 65
     5e8:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <s_scalefact_gyro>
     5ec:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <s_scalefact_gyro+0x1>
     5f0:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <s_scalefact_gyro+0x2>
     5f4:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <s_scalefact_gyro+0x3>
     5f8:	08 95       	ret

000005fa <s_read>:
     5fa:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <i2c>
{
	i2c->write(data);
}
static uint8_t s_read(bool is_last)
{
	int16_t temp=i2c->read(is_last);
     5fe:	f0 91 99 02 	lds	r31, 0x0299	; 0x800299 <i2c+0x1>
     602:	04 84       	ldd	r0, Z+12	; 0x0c
     604:	f5 85       	ldd	r31, Z+13	; 0x0d
     606:	e0 2d       	mov	r30, r0
     608:	19 95       	eicall
     60a:	28 2f       	mov	r18, r24
     60c:	a8 2f       	mov	r26, r24
     60e:	b0 e0       	ldi	r27, 0x00	; 0
	
	switch (currentAddr)
     610:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     614:	49 2f       	mov	r20, r25
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	fa 01       	movw	r30, r20
     61a:	fb 97       	sbiw	r30, 0x3b	; 59
     61c:	ee 30       	cpi	r30, 0x0E	; 14
     61e:	f1 05       	cpc	r31, r1
     620:	08 f0       	brcs	.+2      	; 0x624 <s_read+0x2a>
     622:	66 c0       	rjmp	.+204    	; 0x6f0 <s_read+0xf6>
     624:	88 27       	eor	r24, r24
     626:	ee 58       	subi	r30, 0x8E	; 142
     628:	ff 4f       	sbci	r31, 0xFF	; 255
     62a:	8f 4f       	sbci	r24, 0xFF	; 255
     62c:	b9 c5       	rjmp	.+2930   	; 0x11a0 <__tablejump2__>
	{
		//accelerometer
		case ACCEL_XOUT_H:
			data_struct.accel_x=temp<<8;
     62e:	ea e8       	ldi	r30, 0x8A	; 138
     630:	f2 e0       	ldi	r31, 0x02	; 2
     632:	10 82       	st	Z, r1
     634:	21 83       	std	Z+1, r18	; 0x01
		break;
     636:	5c c0       	rjmp	.+184    	; 0x6f0 <s_read+0xf6>
		
		case ACCEL_XOUT_L:
		data_struct.accel_x|=temp;
     638:	ea e8       	ldi	r30, 0x8A	; 138
     63a:	f2 e0       	ldi	r31, 0x02	; 2
     63c:	40 81       	ld	r20, Z
     63e:	51 81       	ldd	r21, Z+1	; 0x01
     640:	a4 2b       	or	r26, r20
     642:	b5 2b       	or	r27, r21
     644:	b1 83       	std	Z+1, r27	; 0x01
     646:	a0 83       	st	Z, r26
		break;
     648:	53 c0       	rjmp	.+166    	; 0x6f0 <s_read+0xf6>
		
		case ACCEL_YOUT_H:
			data_struct.accel_y=temp<<8;
     64a:	ea e8       	ldi	r30, 0x8A	; 138
     64c:	f2 e0       	ldi	r31, 0x02	; 2
     64e:	12 82       	std	Z+2, r1	; 0x02
     650:	23 83       	std	Z+3, r18	; 0x03
		break;
     652:	4e c0       	rjmp	.+156    	; 0x6f0 <s_read+0xf6>
		
		case ACCEL_YOUT_L:
			data_struct.accel_y|=temp;
     654:	ea e8       	ldi	r30, 0x8A	; 138
     656:	f2 e0       	ldi	r31, 0x02	; 2
     658:	42 81       	ldd	r20, Z+2	; 0x02
     65a:	53 81       	ldd	r21, Z+3	; 0x03
     65c:	a4 2b       	or	r26, r20
     65e:	b5 2b       	or	r27, r21
     660:	b3 83       	std	Z+3, r27	; 0x03
     662:	a2 83       	std	Z+2, r26	; 0x02
		break;
     664:	45 c0       	rjmp	.+138    	; 0x6f0 <s_read+0xf6>
		
		case ACCEL_ZOUT_H:
			data_struct.accel_z=temp<<8;
     666:	ea e8       	ldi	r30, 0x8A	; 138
     668:	f2 e0       	ldi	r31, 0x02	; 2
     66a:	14 82       	std	Z+4, r1	; 0x04
     66c:	25 83       	std	Z+5, r18	; 0x05
		break;
     66e:	40 c0       	rjmp	.+128    	; 0x6f0 <s_read+0xf6>
		
		case ACCEL_ZOUT_L:
			data_struct.accel_z|=temp;
     670:	ea e8       	ldi	r30, 0x8A	; 138
     672:	f2 e0       	ldi	r31, 0x02	; 2
     674:	44 81       	ldd	r20, Z+4	; 0x04
     676:	55 81       	ldd	r21, Z+5	; 0x05
     678:	a4 2b       	or	r26, r20
     67a:	b5 2b       	or	r27, r21
     67c:	b5 83       	std	Z+5, r27	; 0x05
     67e:	a4 83       	std	Z+4, r26	; 0x04
		break;
     680:	37 c0       	rjmp	.+110    	; 0x6f0 <s_read+0xf6>
		
		//temperature
		case TEMP_OUT_H:
			data_struct.temp=temp<<8;
     682:	ea e8       	ldi	r30, 0x8A	; 138
     684:	f2 e0       	ldi	r31, 0x02	; 2
     686:	16 82       	std	Z+6, r1	; 0x06
     688:	27 83       	std	Z+7, r18	; 0x07
		break;
     68a:	32 c0       	rjmp	.+100    	; 0x6f0 <s_read+0xf6>
		
		case TEMP_OUT_L:
			data_struct.temp|=temp;
     68c:	ea e8       	ldi	r30, 0x8A	; 138
     68e:	f2 e0       	ldi	r31, 0x02	; 2
     690:	46 81       	ldd	r20, Z+6	; 0x06
     692:	57 81       	ldd	r21, Z+7	; 0x07
     694:	a4 2b       	or	r26, r20
     696:	b5 2b       	or	r27, r21
     698:	b7 83       	std	Z+7, r27	; 0x07
     69a:	a6 83       	std	Z+6, r26	; 0x06
		break;
     69c:	29 c0       	rjmp	.+82     	; 0x6f0 <s_read+0xf6>
		
		//Gyro
		case GYRO_XOUT_H:
			data_struct.gyro_x=temp<<8;
     69e:	ea e8       	ldi	r30, 0x8A	; 138
     6a0:	f2 e0       	ldi	r31, 0x02	; 2
     6a2:	10 86       	std	Z+8, r1	; 0x08
     6a4:	21 87       	std	Z+9, r18	; 0x09
		break;
     6a6:	24 c0       	rjmp	.+72     	; 0x6f0 <s_read+0xf6>
		
		case GYRO_XOUT_L:
			data_struct.gyro_x|=temp;
     6a8:	ea e8       	ldi	r30, 0x8A	; 138
     6aa:	f2 e0       	ldi	r31, 0x02	; 2
     6ac:	40 85       	ldd	r20, Z+8	; 0x08
     6ae:	51 85       	ldd	r21, Z+9	; 0x09
     6b0:	a4 2b       	or	r26, r20
     6b2:	b5 2b       	or	r27, r21
     6b4:	b1 87       	std	Z+9, r27	; 0x09
     6b6:	a0 87       	std	Z+8, r26	; 0x08
		break;
     6b8:	1b c0       	rjmp	.+54     	; 0x6f0 <s_read+0xf6>
		
		case GYRO_YOUT_H:
			data_struct.gyro_y=temp<<8;
     6ba:	ea e8       	ldi	r30, 0x8A	; 138
     6bc:	f2 e0       	ldi	r31, 0x02	; 2
     6be:	12 86       	std	Z+10, r1	; 0x0a
     6c0:	23 87       	std	Z+11, r18	; 0x0b
		break;
     6c2:	16 c0       	rjmp	.+44     	; 0x6f0 <s_read+0xf6>
		
		case GYRO_YOUT_L:
			data_struct.gyro_y|=temp;
     6c4:	ea e8       	ldi	r30, 0x8A	; 138
     6c6:	f2 e0       	ldi	r31, 0x02	; 2
     6c8:	42 85       	ldd	r20, Z+10	; 0x0a
     6ca:	53 85       	ldd	r21, Z+11	; 0x0b
     6cc:	a4 2b       	or	r26, r20
     6ce:	b5 2b       	or	r27, r21
     6d0:	b3 87       	std	Z+11, r27	; 0x0b
     6d2:	a2 87       	std	Z+10, r26	; 0x0a
		break;
     6d4:	0d c0       	rjmp	.+26     	; 0x6f0 <s_read+0xf6>
			
		case GYRO_ZOUT_H:
			data_struct.gyro_z=temp<<8;
     6d6:	ea e8       	ldi	r30, 0x8A	; 138
     6d8:	f2 e0       	ldi	r31, 0x02	; 2
     6da:	14 86       	std	Z+12, r1	; 0x0c
     6dc:	25 87       	std	Z+13, r18	; 0x0d
		break;
     6de:	08 c0       	rjmp	.+16     	; 0x6f0 <s_read+0xf6>
				
		case GYRO_ZOUT_L:
			data_struct.gyro_z|=temp;
     6e0:	ea e8       	ldi	r30, 0x8A	; 138
     6e2:	f2 e0       	ldi	r31, 0x02	; 2
     6e4:	44 85       	ldd	r20, Z+12	; 0x0c
     6e6:	55 85       	ldd	r21, Z+13	; 0x0d
     6e8:	a4 2b       	or	r26, r20
     6ea:	b5 2b       	or	r27, r21
     6ec:	b5 87       	std	Z+13, r27	; 0x0d
     6ee:	a4 87       	std	Z+12, r26	; 0x0c
		default:
		//de nada
		break;
	}
	
	currentAddr++;
     6f0:	9f 5f       	subi	r25, 0xFF	; 255
     6f2:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
	//SendInteger(UART0,currentAddr);
	//SendString(UART0,"\n");
return temp;
}
     6f6:	82 2f       	mov	r24, r18
     6f8:	08 95       	ret

000006fa <s_gatherData>:
	}
	return &GA_interface; 
}

static void s_gatherData(void)
{
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
	int i=0;
	s_start();
     6fe:	9c de       	rcall	.-712    	; 0x438 <s_start>
	s_enterWrite();
     700:	ae de       	rcall	.-676    	; 0x45e <s_enterWrite>
	s_selectRegister(ACCEL_XOUT_H);
     702:	8b e3       	ldi	r24, 0x3B	; 59
	s_start();
     704:	c2 de       	rcall	.-636    	; 0x48a <s_selectRegister>
     706:	98 de       	rcall	.-720    	; 0x438 <s_start>
	s_enterRead();
     708:	b5 de       	rcall	.-662    	; 0x474 <s_enterRead>
     70a:	cd e0       	ldi	r28, 0x0D	; 13
     70c:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(i=0;i<14;++i)
	{
		if(i==13)
		{
			s_read(true);
     70e:	04 c0       	rjmp	.+8      	; 0x718 <s_gatherData+0x1e>
     710:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			s_read(false);
		}
	}
	s_stop();
     712:	73 df       	rcall	.-282    	; 0x5fa <s_read>
     714:	9b de       	rcall	.-714    	; 0x44c <s_stop>
}
     716:	05 c0       	rjmp	.+10     	; 0x722 <s_gatherData+0x28>
		{
			s_read(true);
		}
		else
		{
			s_read(false);
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	6f df       	rcall	.-290    	; 0x5fa <s_read>
     71c:	21 97       	sbiw	r28, 0x01	; 1
     71e:	e1 f7       	brne	.-8      	; 0x718 <s_gatherData+0x1e>
	s_start();
	s_enterRead();
	
	for(i=0;i<14;++i)
	{
		if(i==13)
     720:	f7 cf       	rjmp	.-18     	; 0x710 <s_gatherData+0x16>
     722:	df 91       	pop	r29
		{
			s_read(false);
		}
	}
	s_stop();
}
     724:	cf 91       	pop	r28
     726:	08 95       	ret

00000728 <s_getAccelXYZ>:
     728:	cf 92       	push	r12
	//SendString(UART0,"\n");
return temp;
}

static void s_getAccelXYZ(int32_t* XYZ)
{
     72a:	df 92       	push	r13
     72c:	ef 92       	push	r14
     72e:	ff 92       	push	r15
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	ec 01       	movw	r28, r24
	//return mG
	XYZ[0]=(int32_t)((data_struct.accel_x)/(s_scalefact_accel/1000.0));
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	4a e7       	ldi	r20, 0x7A	; 122
     740:	54 e4       	ldi	r21, 0x44	; 68
     742:	60 91 65 02 	lds	r22, 0x0265	; 0x800265 <s_scalefact_accel>
     746:	70 91 66 02 	lds	r23, 0x0266	; 0x800266 <s_scalefact_accel+0x1>
     74a:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <s_scalefact_accel+0x2>
     74e:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <s_scalefact_accel+0x3>
     752:	f4 d2       	rcall	.+1512   	; 0xd3c <__divsf3>
     754:	6b 01       	movw	r12, r22
     756:	7c 01       	movw	r14, r24
     758:	0a e8       	ldi	r16, 0x8A	; 138
     75a:	12 e0       	ldi	r17, 0x02	; 2
     75c:	f8 01       	movw	r30, r16
     75e:	60 81       	ld	r22, Z
     760:	71 81       	ldd	r23, Z+1	; 0x01
     762:	07 2e       	mov	r0, r23
     764:	00 0c       	add	r0, r0
     766:	88 0b       	sbc	r24, r24
     768:	99 0b       	sbc	r25, r25
     76a:	83 d3       	rcall	.+1798   	; 0xe72 <__floatsisf>
     76c:	a7 01       	movw	r20, r14
     76e:	96 01       	movw	r18, r12
     770:	e5 d2       	rcall	.+1482   	; 0xd3c <__divsf3>
     772:	4c d3       	rcall	.+1688   	; 0xe0c <__fixsfsi>
     774:	68 83       	st	Y, r22
     776:	79 83       	std	Y+1, r23	; 0x01
     778:	8a 83       	std	Y+2, r24	; 0x02
     77a:	9b 83       	std	Y+3, r25	; 0x03
	XYZ[1]=(int32_t)((data_struct.accel_y)/(s_scalefact_accel/1000.0));
     77c:	f8 01       	movw	r30, r16
     77e:	62 81       	ldd	r22, Z+2	; 0x02
     780:	73 81       	ldd	r23, Z+3	; 0x03
     782:	07 2e       	mov	r0, r23
     784:	00 0c       	add	r0, r0
     786:	88 0b       	sbc	r24, r24
     788:	99 0b       	sbc	r25, r25
     78a:	73 d3       	rcall	.+1766   	; 0xe72 <__floatsisf>
     78c:	a7 01       	movw	r20, r14
     78e:	96 01       	movw	r18, r12
     790:	d5 d2       	rcall	.+1450   	; 0xd3c <__divsf3>
     792:	3c d3       	rcall	.+1656   	; 0xe0c <__fixsfsi>
     794:	6c 83       	std	Y+4, r22	; 0x04
     796:	7d 83       	std	Y+5, r23	; 0x05
     798:	8e 83       	std	Y+6, r24	; 0x06
     79a:	9f 83       	std	Y+7, r25	; 0x07
	XYZ[2]=(int32_t)((data_struct.accel_z)/(s_scalefact_accel/1000.0));
     79c:	f8 01       	movw	r30, r16
     79e:	64 81       	ldd	r22, Z+4	; 0x04
     7a0:	75 81       	ldd	r23, Z+5	; 0x05
     7a2:	07 2e       	mov	r0, r23
     7a4:	00 0c       	add	r0, r0
     7a6:	88 0b       	sbc	r24, r24
     7a8:	99 0b       	sbc	r25, r25
     7aa:	63 d3       	rcall	.+1734   	; 0xe72 <__floatsisf>
     7ac:	a7 01       	movw	r20, r14
     7ae:	96 01       	movw	r18, r12
     7b0:	c5 d2       	rcall	.+1418   	; 0xd3c <__divsf3>
     7b2:	2c d3       	rcall	.+1624   	; 0xe0c <__fixsfsi>
     7b4:	68 87       	std	Y+8, r22	; 0x08
     7b6:	79 87       	std	Y+9, r23	; 0x09
     7b8:	8a 87       	std	Y+10, r24	; 0x0a
     7ba:	9b 87       	std	Y+11, r25	; 0x0b
	
	////return mm/s^2
	//XYZ[0]=(int32_t)(MS_SQR*(data_struct.accel_x)/(s_scalefact_accel/1000.0));
	//XYZ[1]=(int32_t)(MS_SQR*(data_struct.accel_y)/(s_scalefact_accel/1000.0));
	//XYZ[2]=(int32_t)(MS_SQR*(data_struct.accel_z)/(s_scalefact_accel/1000.0));
}
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	ff 90       	pop	r15
     7c6:	ef 90       	pop	r14
     7c8:	df 90       	pop	r13
     7ca:	cf 90       	pop	r12
     7cc:	08 95       	ret

000007ce <s_getGyroXYZ>:

static void s_getGyroXYZ(int32_t* XYZ)
{
     7ce:	cf 92       	push	r12
     7d0:	df 92       	push	r13
     7d2:	ef 92       	push	r14
     7d4:	ff 92       	push	r15
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	ec 01       	movw	r28, r24
	//return in deg/s
	XYZ[0]=(int32_t)((data_struct.gyro_x)/(s_scalefact_gyro));
     7e0:	c0 90 61 02 	lds	r12, 0x0261	; 0x800261 <s_scalefact_gyro>
     7e4:	d0 90 62 02 	lds	r13, 0x0262	; 0x800262 <s_scalefact_gyro+0x1>
     7e8:	e0 90 63 02 	lds	r14, 0x0263	; 0x800263 <s_scalefact_gyro+0x2>
     7ec:	f0 90 64 02 	lds	r15, 0x0264	; 0x800264 <s_scalefact_gyro+0x3>
     7f0:	0a e8       	ldi	r16, 0x8A	; 138
     7f2:	12 e0       	ldi	r17, 0x02	; 2
     7f4:	f8 01       	movw	r30, r16
     7f6:	60 85       	ldd	r22, Z+8	; 0x08
     7f8:	71 85       	ldd	r23, Z+9	; 0x09
     7fa:	07 2e       	mov	r0, r23
     7fc:	00 0c       	add	r0, r0
     7fe:	88 0b       	sbc	r24, r24
     800:	99 0b       	sbc	r25, r25
     802:	37 d3       	rcall	.+1646   	; 0xe72 <__floatsisf>
     804:	a7 01       	movw	r20, r14
     806:	96 01       	movw	r18, r12
     808:	99 d2       	rcall	.+1330   	; 0xd3c <__divsf3>
     80a:	00 d3       	rcall	.+1536   	; 0xe0c <__fixsfsi>
     80c:	68 83       	st	Y, r22
     80e:	79 83       	std	Y+1, r23	; 0x01
     810:	8a 83       	std	Y+2, r24	; 0x02
     812:	9b 83       	std	Y+3, r25	; 0x03
	XYZ[1]=(int32_t)((data_struct.gyro_y)/(s_scalefact_gyro));
     814:	f8 01       	movw	r30, r16
     816:	62 85       	ldd	r22, Z+10	; 0x0a
     818:	73 85       	ldd	r23, Z+11	; 0x0b
     81a:	07 2e       	mov	r0, r23
     81c:	00 0c       	add	r0, r0
     81e:	88 0b       	sbc	r24, r24
     820:	99 0b       	sbc	r25, r25
     822:	27 d3       	rcall	.+1614   	; 0xe72 <__floatsisf>
     824:	a7 01       	movw	r20, r14
     826:	96 01       	movw	r18, r12
     828:	89 d2       	rcall	.+1298   	; 0xd3c <__divsf3>
     82a:	f0 d2       	rcall	.+1504   	; 0xe0c <__fixsfsi>
     82c:	6c 83       	std	Y+4, r22	; 0x04
     82e:	7d 83       	std	Y+5, r23	; 0x05
     830:	8e 83       	std	Y+6, r24	; 0x06
     832:	9f 83       	std	Y+7, r25	; 0x07
	XYZ[2]=(int32_t)((data_struct.gyro_z)/(s_scalefact_gyro));
     834:	f8 01       	movw	r30, r16
     836:	64 85       	ldd	r22, Z+12	; 0x0c
     838:	75 85       	ldd	r23, Z+13	; 0x0d
     83a:	07 2e       	mov	r0, r23
     83c:	00 0c       	add	r0, r0
     83e:	88 0b       	sbc	r24, r24
     840:	99 0b       	sbc	r25, r25
     842:	17 d3       	rcall	.+1582   	; 0xe72 <__floatsisf>
     844:	a7 01       	movw	r20, r14
     846:	96 01       	movw	r18, r12
     848:	79 d2       	rcall	.+1266   	; 0xd3c <__divsf3>
     84a:	e0 d2       	rcall	.+1472   	; 0xe0c <__fixsfsi>
     84c:	68 87       	std	Y+8, r22	; 0x08
     84e:	79 87       	std	Y+9, r23	; 0x09
     850:	8a 87       	std	Y+10, r24	; 0x0a
     852:	9b 87       	std	Y+11, r25	; 0x0b
}
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	df 90       	pop	r13
     862:	cf 90       	pop	r12
     864:	08 95       	ret

00000866 <s_getPitchRoll>:

static void s_getPitchRoll(int16_t *pitchRoll)
{	
     866:	4f 92       	push	r4
     868:	5f 92       	push	r5
     86a:	6f 92       	push	r6
     86c:	7f 92       	push	r7
     86e:	8f 92       	push	r8
     870:	9f 92       	push	r9
     872:	af 92       	push	r10
     874:	bf 92       	push	r11
     876:	cf 92       	push	r12
     878:	df 92       	push	r13
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	00 d0       	rcall	.+0      	; 0x888 <s_getPitchRoll+0x22>
     888:	1f 92       	push	r1
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
     88e:	8c 01       	movw	r16, r24
	pitchRoll[0] = (int16_t)((atan2(((data_struct.accel_y)/s_scalefact_accel),((data_struct.accel_z)/s_scalefact_accel)))*PI_DIV_180);
     890:	40 90 65 02 	lds	r4, 0x0265	; 0x800265 <s_scalefact_accel>
     894:	50 90 66 02 	lds	r5, 0x0266	; 0x800266 <s_scalefact_accel+0x1>
     898:	60 90 67 02 	lds	r6, 0x0267	; 0x800267 <s_scalefact_accel+0x2>
     89c:	70 90 68 02 	lds	r7, 0x0268	; 0x800268 <s_scalefact_accel+0x3>
     8a0:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <data_struct+0x4>
     8a4:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <data_struct+0x5>
     8a8:	07 2e       	mov	r0, r23
     8aa:	00 0c       	add	r0, r0
     8ac:	88 0b       	sbc	r24, r24
     8ae:	99 0b       	sbc	r25, r25
     8b0:	e0 d2       	rcall	.+1472   	; 0xe72 <__floatsisf>
     8b2:	a3 01       	movw	r20, r6
     8b4:	92 01       	movw	r18, r4
     8b6:	42 d2       	rcall	.+1156   	; 0xd3c <__divsf3>
     8b8:	6b 01       	movw	r12, r22
     8ba:	7c 01       	movw	r14, r24
     8bc:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <data_struct+0x2>
     8c0:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <data_struct+0x3>
     8c4:	07 2e       	mov	r0, r23
     8c6:	00 0c       	add	r0, r0
     8c8:	88 0b       	sbc	r24, r24
     8ca:	99 0b       	sbc	r25, r25
     8cc:	d2 d2       	rcall	.+1444   	; 0xe72 <__floatsisf>
     8ce:	a3 01       	movw	r20, r6
     8d0:	92 01       	movw	r18, r4
     8d2:	34 d2       	rcall	.+1128   	; 0xd3c <__divsf3>
     8d4:	4b 01       	movw	r8, r22
     8d6:	5c 01       	movw	r10, r24
     8d8:	a7 01       	movw	r20, r14
     8da:	96 01       	movw	r18, r12
     8dc:	dc d1       	rcall	.+952    	; 0xc96 <atan2>
     8de:	21 ee       	ldi	r18, 0xE1	; 225
     8e0:	3e e2       	ldi	r19, 0x2E	; 46
     8e2:	45 e6       	ldi	r20, 0x65	; 101
     8e4:	52 e4       	ldi	r21, 0x42	; 66
     8e6:	7d d3       	rcall	.+1786   	; 0xfe2 <__mulsf3>
     8e8:	91 d2       	rcall	.+1314   	; 0xe0c <__fixsfsi>
     8ea:	f8 01       	movw	r30, r16
     8ec:	71 83       	std	Z+1, r23	; 0x01
     8ee:	60 83       	st	Z, r22
	pitchRoll[1] = (int16_t)((atan2((-1.0 * (data_struct.accel_x)/s_scalefact_accel) , sqrt(((data_struct.accel_y)/s_scalefact_accel) * ((data_struct.accel_y)/s_scalefact_accel) 
     8f0:	a5 01       	movw	r20, r10
     8f2:	94 01       	movw	r18, r8
     8f4:	c5 01       	movw	r24, r10
     8f6:	b4 01       	movw	r22, r8
     8f8:	74 d3       	rcall	.+1768   	; 0xfe2 <__mulsf3>
     8fa:	69 83       	std	Y+1, r22	; 0x01
     8fc:	7a 83       	std	Y+2, r23	; 0x02
     8fe:	8b 83       	std	Y+3, r24	; 0x03
     900:	9c 83       	std	Y+4, r25	; 0x04
     902:	a5 01       	movw	r20, r10
     904:	94 01       	movw	r18, r8
     906:	c5 01       	movw	r24, r10
     908:	b4 01       	movw	r22, r8
     90a:	6b d3       	rcall	.+1750   	; 0xfe2 <__mulsf3>
     90c:	4b 01       	movw	r8, r22
     90e:	5c 01       	movw	r10, r24
     910:	a7 01       	movw	r20, r14
     912:	96 01       	movw	r18, r12
     914:	c7 01       	movw	r24, r14
     916:	b6 01       	movw	r22, r12
     918:	64 d3       	rcall	.+1736   	; 0xfe2 <__mulsf3>
     91a:	9b 01       	movw	r18, r22
     91c:	ac 01       	movw	r20, r24
     91e:	c5 01       	movw	r24, r10
     920:	b4 01       	movw	r22, r8
     922:	46 d1       	rcall	.+652    	; 0xbb0 <__addsf3>
     924:	c5 d3       	rcall	.+1930   	; 0x10b0 <sqrt>
     926:	6b 01       	movw	r12, r22
     928:	7c 01       	movw	r14, r24
     92a:	ea e8       	ldi	r30, 0x8A	; 138
     92c:	f2 e0       	ldi	r31, 0x02	; 2
     92e:	60 81       	ld	r22, Z
     930:	71 81       	ldd	r23, Z+1	; 0x01
     932:	07 2e       	mov	r0, r23
     934:	00 0c       	add	r0, r0
     936:	88 0b       	sbc	r24, r24
     938:	99 0b       	sbc	r25, r25
     93a:	9b d2       	rcall	.+1334   	; 0xe72 <__floatsisf>
     93c:	90 58       	subi	r25, 0x80	; 128
     93e:	a3 01       	movw	r20, r6
     940:	92 01       	movw	r18, r4
     942:	fc d1       	rcall	.+1016   	; 0xd3c <__divsf3>
     944:	a7 01       	movw	r20, r14
     946:	96 01       	movw	r18, r12
     948:	a6 d1       	rcall	.+844    	; 0xc96 <atan2>
     94a:	21 ee       	ldi	r18, 0xE1	; 225
     94c:	3e e2       	ldi	r19, 0x2E	; 46
     94e:	45 e6       	ldi	r20, 0x65	; 101
     950:	52 e4       	ldi	r21, 0x42	; 66
     952:	47 d3       	rcall	.+1678   	; 0xfe2 <__mulsf3>
     954:	5b d2       	rcall	.+1206   	; 0xe0c <__fixsfsi>
     956:	f8 01       	movw	r30, r16
     958:	73 83       	std	Z+3, r23	; 0x03
     95a:	62 83       	std	Z+2, r22	; 0x02
     95c:	0f 90       	pop	r0
					+ ((data_struct.accel_z)/s_scalefact_accel) * ((data_struct.accel_z)/s_scalefact_accel))))*PI_DIV_180);

//https://wiki.dfrobot.com/How_to_Use_a_Three-Axis_Accelerometer_for_Tilt_Sensing

}
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	df 90       	pop	r13
     972:	cf 90       	pop	r12
     974:	bf 90       	pop	r11
     976:	af 90       	pop	r10
     978:	9f 90       	pop	r9
     97a:	8f 90       	pop	r8
     97c:	7f 90       	pop	r7
     97e:	6f 90       	pop	r6
     980:	5f 90       	pop	r5
     982:	4f 90       	pop	r4
     984:	08 95       	ret

00000986 <get_GA_interface>:
     986:	9c 01       	movw	r18, r24
static void		s_reset(void);

GA_t* get_GA_interface(i2c_t* i2c_interface)
{
	
	if (!initialized)
     988:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <initialized>
     98c:	91 11       	cpse	r25, r1
     98e:	41 c0       	rjmp	.+130    	; 0xa12 <get_GA_interface+0x8c>
	{
		i2c=i2c_interface;
     990:	30 93 99 02 	sts	0x0299, r19	; 0x800299 <i2c+0x1>
     994:	20 93 98 02 	sts	0x0298, r18	; 0x800298 <i2c>
		
			GA_interface.start					=	s_start;
     998:	ec e6       	ldi	r30, 0x6C	; 108
     99a:	f2 e0       	ldi	r31, 0x02	; 2
     99c:	8c e1       	ldi	r24, 0x1C	; 28
     99e:	92 e0       	ldi	r25, 0x02	; 2
     9a0:	91 83       	std	Z+1, r25	; 0x01
     9a2:	80 83       	st	Z, r24
			GA_interface.stop					=	s_stop;
     9a4:	86 e2       	ldi	r24, 0x26	; 38
     9a6:	92 e0       	ldi	r25, 0x02	; 2
     9a8:	93 83       	std	Z+3, r25	; 0x03
     9aa:	82 83       	std	Z+2, r24	; 0x02
			GA_interface.enterWrite				=	s_enterWrite;
     9ac:	8f e2       	ldi	r24, 0x2F	; 47
     9ae:	92 e0       	ldi	r25, 0x02	; 2
     9b0:	95 83       	std	Z+5, r25	; 0x05
     9b2:	84 83       	std	Z+4, r24	; 0x04
			GA_interface.enterRead				=	s_enterRead;
     9b4:	8a e3       	ldi	r24, 0x3A	; 58
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	97 83       	std	Z+7, r25	; 0x07
     9ba:	86 83       	std	Z+6, r24	; 0x06
			GA_interface.selectRegister			=	s_selectRegister;
     9bc:	85 e4       	ldi	r24, 0x45	; 69
     9be:	92 e0       	ldi	r25, 0x02	; 2
     9c0:	91 87       	std	Z+9, r25	; 0x09
     9c2:	80 87       	std	Z+8, r24	; 0x08
			GA_interface.write					=	s_write;
     9c4:	80 e5       	ldi	r24, 0x50	; 80
     9c6:	92 e0       	ldi	r25, 0x02	; 2
     9c8:	93 87       	std	Z+11, r25	; 0x0b
     9ca:	82 87       	std	Z+10, r24	; 0x0a
			GA_interface.read					=	s_read;
     9cc:	8d ef       	ldi	r24, 0xFD	; 253
     9ce:	92 e0       	ldi	r25, 0x02	; 2
     9d0:	95 87       	std	Z+13, r25	; 0x0d
     9d2:	84 87       	std	Z+12, r24	; 0x0c
			GA_interface.getPitchRoll 			=	s_getPitchRoll;
     9d4:	83 e3       	ldi	r24, 0x33	; 51
     9d6:	94 e0       	ldi	r25, 0x04	; 4
     9d8:	97 87       	std	Z+15, r25	; 0x0f
     9da:	86 87       	std	Z+14, r24	; 0x0e
			GA_interface.getAccelXYZ			=	s_getAccelXYZ;
     9dc:	84 e9       	ldi	r24, 0x94	; 148
     9de:	93 e0       	ldi	r25, 0x03	; 3
     9e0:	91 8b       	std	Z+17, r25	; 0x11
     9e2:	80 8b       	std	Z+16, r24	; 0x10
			GA_interface.getGyroXYZ				=	s_getGyroXYZ;
     9e4:	87 ee       	ldi	r24, 0xE7	; 231
     9e6:	93 e0       	ldi	r25, 0x03	; 3
     9e8:	93 8b       	std	Z+19, r25	; 0x13
     9ea:	82 8b       	std	Z+18, r24	; 0x12
			GA_interface.gatherData				=	s_gatherData;
     9ec:	8d e7       	ldi	r24, 0x7D	; 125
     9ee:	93 e0       	ldi	r25, 0x03	; 3
     9f0:	95 8b       	std	Z+21, r25	; 0x15
     9f2:	84 8b       	std	Z+20, r24	; 0x14
			GA_interface.gyroSettings			=	s_gyroSettings;
     9f4:	8f ea       	ldi	r24, 0xAF	; 175
     9f6:	92 e0       	ldi	r25, 0x02	; 2
     9f8:	97 8b       	std	Z+23, r25	; 0x17
     9fa:	86 8b       	std	Z+22, r24	; 0x16
			GA_interface.accerelSettings		=	s_accerelSettings;
     9fc:	81 e6       	ldi	r24, 0x61	; 97
     9fe:	92 e0       	ldi	r25, 0x02	; 2
     a00:	91 8f       	std	Z+25, r25	; 0x19
     a02:	80 8f       	std	Z+24, r24	; 0x18
			GA_interface.reset					=	s_reset;
     a04:	89 e5       	ldi	r24, 0x59	; 89
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	93 8f       	std	Z+27, r25	; 0x1b
     a0a:	82 8f       	std	Z+26, r24	; 0x1a
			initialized=true;		
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <initialized>
	}
	return &GA_interface; 
}
     a12:	8c e6       	ldi	r24, 0x6C	; 108
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	08 95       	ret

00000a18 <main>:
}
**/
#define UARTADDR UART0

int main(void)
{
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
     a20:	6c 97       	sbiw	r28, 0x1c	; 28
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	f8 94       	cli
     a26:	de bf       	out	0x3e, r29	; 62
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a2c:	2f ef       	ldi	r18, 0xFF	; 255
     a2e:	83 ed       	ldi	r24, 0xD3	; 211
     a30:	90 e3       	ldi	r25, 0x30	; 48
     a32:	21 50       	subi	r18, 0x01	; 1
     a34:	80 40       	sbci	r24, 0x00	; 0
     a36:	90 40       	sbci	r25, 0x00	; 0
     a38:	e1 f7       	brne	.-8      	; 0xa32 <main+0x1a>
     a3a:	00 c0       	rjmp	.+0      	; 0xa3c <main+0x24>
     a3c:	00 00       	nop
     a3e:	2f ef       	ldi	r18, 0xFF	; 255
     a40:	83 ed       	ldi	r24, 0xD3	; 211
     a42:	90 e3       	ldi	r25, 0x30	; 48
     a44:	21 50       	subi	r18, 0x01	; 1
     a46:	80 40       	sbci	r24, 0x00	; 0
     a48:	90 40       	sbci	r25, 0x00	; 0
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <main+0x2c>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <main+0x36>
     a4e:	00 00       	nop
	{
		_delay_ms(1000);
	}
	
	
	InitUART(UARTADDR, 9600, 8,0);
     a50:	00 e0       	ldi	r16, 0x00	; 0
     a52:	28 e0       	ldi	r18, 0x08	; 8
     a54:	40 e8       	ldi	r20, 0x80	; 128
     a56:	55 e2       	ldi	r21, 0x25	; 37
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	80 ec       	ldi	r24, 0xC0	; 192
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	5b dc       	rcall	.-1866   	; 0x318 <InitUART>
	SendString(UARTADDR,"\n \n \n");
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	72 e0       	ldi	r23, 0x02	; 2
     a66:	80 ec       	ldi	r24, 0xC0	; 192
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	af dc       	rcall	.-1698   	; 0x3ca <SendString>
	SendInteger(UARTADDR,32000);
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	7d e7       	ldi	r23, 0x7D	; 125
     a70:	80 ec       	ldi	r24, 0xC0	; 192
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	be dc       	rcall	.-1668   	; 0x3f2 <SendInteger>
	SendString(UARTADDR,"\n");
     a76:	65 e0       	ldi	r22, 0x05	; 5
     a78:	72 e0       	ldi	r23, 0x02	; 2
     a7a:	80 ec       	ldi	r24, 0xC0	; 192
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a5 dc       	rcall	.-1718   	; 0x3ca <SendString>
	SendString(UARTADDR,"creating objects \n");
     a80:	67 e0       	ldi	r22, 0x07	; 7
     a82:	72 e0       	ldi	r23, 0x02	; 2
     a84:	80 ec       	ldi	r24, 0xC0	; 192
     a86:	90 e0       	ldi	r25, 0x00	; 0
	
	i2c_obj=get_i2c_interface();
     a88:	a0 dc       	rcall	.-1728   	; 0x3ca <SendString>
     a8a:	12 dc       	rcall	.-2012   	; 0x2b0 <get_i2c_interface>
     a8c:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <i2c_obj+0x1>
     a90:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <i2c_obj>
	
	GA_obj=get_GA_interface(i2c_obj);
     a94:	78 df       	rcall	.-272    	; 0x986 <get_GA_interface>
     a96:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <GA_obj+0x1>
     a9a:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <GA_obj>
	
	SendString(UARTADDR,"init i2c: ");
     a9e:	6a e1       	ldi	r22, 0x1A	; 26
     aa0:	72 e0       	ldi	r23, 0x02	; 2
     aa2:	80 ec       	ldi	r24, 0xC0	; 192
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	91 dc       	rcall	.-1758   	; 0x3ca <SendString>
	SendInteger(UARTADDR,i2c_obj->init(120000,false));
     aa8:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <i2c_obj>
     aac:	f0 91 9d 02 	lds	r31, 0x029D	; 0x80029d <i2c_obj+0x1>
     ab0:	01 90       	ld	r0, Z+
     ab2:	f0 81       	ld	r31, Z
     ab4:	e0 2d       	mov	r30, r0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	60 ec       	ldi	r22, 0xC0	; 192
     aba:	74 ed       	ldi	r23, 0xD4	; 212
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	19 95       	eicall
     ac2:	bc 01       	movw	r22, r24
     ac4:	80 ec       	ldi	r24, 0xC0	; 192
     ac6:	90 e0       	ldi	r25, 0x00	; 0
	SendString(UARTADDR,"\n");	
     ac8:	94 dc       	rcall	.-1752   	; 0x3f2 <SendInteger>
     aca:	65 e0       	ldi	r22, 0x05	; 5
     acc:	72 e0       	ldi	r23, 0x02	; 2
     ace:	80 ec       	ldi	r24, 0xC0	; 192
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	7b dc       	rcall	.-1802   	; 0x3ca <SendString>
	
//Set to +- 4G
	GA_obj->reset();
     ad4:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <GA_obj>
     ad8:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <GA_obj+0x1>
     adc:	02 8c       	ldd	r0, Z+26	; 0x1a
     ade:	f3 8d       	ldd	r31, Z+27	; 0x1b
     ae0:	e0 2d       	mov	r30, r0
     ae2:	19 95       	eicall
	GA_obj->accerelSettings(3);
     ae4:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <GA_obj>
     ae8:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <GA_obj+0x1>
     aec:	00 8c       	ldd	r0, Z+24	; 0x18
     aee:	f1 8d       	ldd	r31, Z+25	; 0x19
     af0:	e0 2d       	mov	r30, r0
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	19 95       	eicall
	GA_obj->gyroSettings(3);
     af6:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <GA_obj>
     afa:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <GA_obj+0x1>
     afe:	06 88       	ldd	r0, Z+22	; 0x16
     b00:	f7 89       	ldd	r31, Z+23	; 0x17
     b02:	e0 2d       	mov	r30, r0
     b04:	83 e0       	ldi	r24, 0x03	; 3
     b06:	19 95       	eicall
     b08:	2f ef       	ldi	r18, 0xFF	; 255
     b0a:	83 e2       	ldi	r24, 0x23	; 35
     b0c:	94 ef       	ldi	r25, 0xF4	; 244
     b0e:	21 50       	subi	r18, 0x01	; 1
     b10:	80 40       	sbci	r24, 0x00	; 0
     b12:	90 40       	sbci	r25, 0x00	; 0
     b14:	e1 f7       	brne	.-8      	; 0xb0e <main+0xf6>
     b16:	00 c0       	rjmp	.+0      	; 0xb18 <main+0x100>
     b18:	00 00       	nop
	int16_t dataPR[2];
    while (1) 
    {
	_delay_ms(5000);
	
	GA_obj->gatherData();
     b1a:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <GA_obj>
     b1e:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <GA_obj+0x1>
     b22:	04 88       	ldd	r0, Z+20	; 0x14
     b24:	f5 89       	ldd	r31, Z+21	; 0x15
     b26:	e0 2d       	mov	r30, r0
     b28:	19 95       	eicall
   
	//char outstring[10];
	GA_obj->getGyroXYZ(gyrodata);
     b2a:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <GA_obj>
     b2e:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <GA_obj+0x1>
     b32:	02 88       	ldd	r0, Z+18	; 0x12
     b34:	f3 89       	ldd	r31, Z+19	; 0x13
     b36:	e0 2d       	mov	r30, r0
     b38:	ce 01       	movw	r24, r28
     b3a:	0d 96       	adiw	r24, 0x0d	; 13
     b3c:	19 95       	eicall
	GA_obj->getAccelXYZ(acceldata);
     b3e:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <GA_obj>
     b42:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <GA_obj+0x1>
     b46:	00 88       	ldd	r0, Z+16	; 0x10
     b48:	f1 89       	ldd	r31, Z+17	; 0x11
     b4a:	e0 2d       	mov	r30, r0
     b4c:	ce 01       	movw	r24, r28
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	19 95       	eicall
	GA_obj->getPitchRoll(dataPR);
     b52:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <GA_obj>
     b56:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <GA_obj+0x1>
     b5a:	06 84       	ldd	r0, Z+14	; 0x0e
     b5c:	f7 85       	ldd	r31, Z+15	; 0x0f
     b5e:	e0 2d       	mov	r30, r0
     b60:	ce 01       	movw	r24, r28
     b62:	49 96       	adiw	r24, 0x19	; 25


SendString(UARTADDR,"GYRO X: ");
     b64:	19 95       	eicall
     b66:	65 e2       	ldi	r22, 0x25	; 37
     b68:	72 e0       	ldi	r23, 0x02	; 2
     b6a:	80 ec       	ldi	r24, 0xC0	; 192
     b6c:	90 e0       	ldi	r25, 0x00	; 0
SendInteger(UARTADDR, gyrodata[0]);
     b6e:	2d dc       	rcall	.-1958   	; 0x3ca <SendString>
     b70:	6d 85       	ldd	r22, Y+13	; 0x0d
     b72:	7e 85       	ldd	r23, Y+14	; 0x0e
     b74:	80 ec       	ldi	r24, 0xC0	; 192
     b76:	90 e0       	ldi	r25, 0x00	; 0
SendString(UARTADDR,"deg/s Y: ");
     b78:	3c dc       	rcall	.-1928   	; 0x3f2 <SendInteger>
     b7a:	6e e2       	ldi	r22, 0x2E	; 46
     b7c:	72 e0       	ldi	r23, 0x02	; 2
     b7e:	80 ec       	ldi	r24, 0xC0	; 192
     b80:	90 e0       	ldi	r25, 0x00	; 0
SendInteger(UARTADDR, gyrodata[1]);
     b82:	23 dc       	rcall	.-1978   	; 0x3ca <SendString>
     b84:	69 89       	ldd	r22, Y+17	; 0x11
     b86:	7a 89       	ldd	r23, Y+18	; 0x12
     b88:	80 ec       	ldi	r24, 0xC0	; 192
     b8a:	90 e0       	ldi	r25, 0x00	; 0
SendString(UARTADDR,"deg/s Z: ");
     b8c:	32 dc       	rcall	.-1948   	; 0x3f2 <SendInteger>
     b8e:	68 e3       	ldi	r22, 0x38	; 56
     b90:	72 e0       	ldi	r23, 0x02	; 2
     b92:	80 ec       	ldi	r24, 0xC0	; 192
     b94:	90 e0       	ldi	r25, 0x00	; 0
SendInteger(UARTADDR, gyrodata[2]);
     b96:	19 dc       	rcall	.-1998   	; 0x3ca <SendString>
     b98:	6d 89       	ldd	r22, Y+21	; 0x15
     b9a:	7e 89       	ldd	r23, Y+22	; 0x16
     b9c:	80 ec       	ldi	r24, 0xC0	; 192
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	28 dc       	rcall	.-1968   	; 0x3f2 <SendInteger>
SendString(UARTADDR,"deg/s \n");
     ba2:	62 e4       	ldi	r22, 0x42	; 66
     ba4:	72 e0       	ldi	r23, 0x02	; 2
     ba6:	80 ec       	ldi	r24, 0xC0	; 192
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0f dc       	rcall	.-2018   	; 0x3ca <SendString>
     bac:	ad cf       	rjmp	.-166    	; 0xb08 <main+0xf0>

00000bae <__subsf3>:
     bae:	50 58       	subi	r21, 0x80	; 128

00000bb0 <__addsf3>:
     bb0:	bb 27       	eor	r27, r27
     bb2:	aa 27       	eor	r26, r26
     bb4:	0e d0       	rcall	.+28     	; 0xbd2 <__addsf3x>
     bb6:	d4 c1       	rjmp	.+936    	; 0xf60 <__fp_round>
     bb8:	c5 d1       	rcall	.+906    	; 0xf44 <__fp_pscA>
     bba:	30 f0       	brcs	.+12     	; 0xbc8 <__addsf3+0x18>
     bbc:	ca d1       	rcall	.+916    	; 0xf52 <__fp_pscB>
     bbe:	20 f0       	brcs	.+8      	; 0xbc8 <__addsf3+0x18>
     bc0:	31 f4       	brne	.+12     	; 0xbce <__addsf3+0x1e>
     bc2:	9f 3f       	cpi	r25, 0xFF	; 255
     bc4:	11 f4       	brne	.+4      	; 0xbca <__addsf3+0x1a>
     bc6:	1e f4       	brtc	.+6      	; 0xbce <__addsf3+0x1e>
     bc8:	95 c1       	rjmp	.+810    	; 0xef4 <__fp_nan>
     bca:	0e f4       	brtc	.+2      	; 0xbce <__addsf3+0x1e>
     bcc:	e0 95       	com	r30
     bce:	e7 fb       	bst	r30, 7
     bd0:	8b c1       	rjmp	.+790    	; 0xee8 <__fp_inf>

00000bd2 <__addsf3x>:
     bd2:	e9 2f       	mov	r30, r25
     bd4:	d6 d1       	rcall	.+940    	; 0xf82 <__fp_split3>
     bd6:	80 f3       	brcs	.-32     	; 0xbb8 <__addsf3+0x8>
     bd8:	ba 17       	cp	r27, r26
     bda:	62 07       	cpc	r22, r18
     bdc:	73 07       	cpc	r23, r19
     bde:	84 07       	cpc	r24, r20
     be0:	95 07       	cpc	r25, r21
     be2:	18 f0       	brcs	.+6      	; 0xbea <__addsf3x+0x18>
     be4:	71 f4       	brne	.+28     	; 0xc02 <__addsf3x+0x30>
     be6:	9e f5       	brtc	.+102    	; 0xc4e <__addsf3x+0x7c>
     be8:	ee c1       	rjmp	.+988    	; 0xfc6 <__fp_zero>
     bea:	0e f4       	brtc	.+2      	; 0xbee <__addsf3x+0x1c>
     bec:	e0 95       	com	r30
     bee:	0b 2e       	mov	r0, r27
     bf0:	ba 2f       	mov	r27, r26
     bf2:	a0 2d       	mov	r26, r0
     bf4:	0b 01       	movw	r0, r22
     bf6:	b9 01       	movw	r22, r18
     bf8:	90 01       	movw	r18, r0
     bfa:	0c 01       	movw	r0, r24
     bfc:	ca 01       	movw	r24, r20
     bfe:	a0 01       	movw	r20, r0
     c00:	11 24       	eor	r1, r1
     c02:	ff 27       	eor	r31, r31
     c04:	59 1b       	sub	r21, r25
     c06:	99 f0       	breq	.+38     	; 0xc2e <__addsf3x+0x5c>
     c08:	59 3f       	cpi	r21, 0xF9	; 249
     c0a:	50 f4       	brcc	.+20     	; 0xc20 <__addsf3x+0x4e>
     c0c:	50 3e       	cpi	r21, 0xE0	; 224
     c0e:	68 f1       	brcs	.+90     	; 0xc6a <__addsf3x+0x98>
     c10:	1a 16       	cp	r1, r26
     c12:	f0 40       	sbci	r31, 0x00	; 0
     c14:	a2 2f       	mov	r26, r18
     c16:	23 2f       	mov	r18, r19
     c18:	34 2f       	mov	r19, r20
     c1a:	44 27       	eor	r20, r20
     c1c:	58 5f       	subi	r21, 0xF8	; 248
     c1e:	f3 cf       	rjmp	.-26     	; 0xc06 <__addsf3x+0x34>
     c20:	46 95       	lsr	r20
     c22:	37 95       	ror	r19
     c24:	27 95       	ror	r18
     c26:	a7 95       	ror	r26
     c28:	f0 40       	sbci	r31, 0x00	; 0
     c2a:	53 95       	inc	r21
     c2c:	c9 f7       	brne	.-14     	; 0xc20 <__addsf3x+0x4e>
     c2e:	7e f4       	brtc	.+30     	; 0xc4e <__addsf3x+0x7c>
     c30:	1f 16       	cp	r1, r31
     c32:	ba 0b       	sbc	r27, r26
     c34:	62 0b       	sbc	r22, r18
     c36:	73 0b       	sbc	r23, r19
     c38:	84 0b       	sbc	r24, r20
     c3a:	ba f0       	brmi	.+46     	; 0xc6a <__addsf3x+0x98>
     c3c:	91 50       	subi	r25, 0x01	; 1
     c3e:	a1 f0       	breq	.+40     	; 0xc68 <__addsf3x+0x96>
     c40:	ff 0f       	add	r31, r31
     c42:	bb 1f       	adc	r27, r27
     c44:	66 1f       	adc	r22, r22
     c46:	77 1f       	adc	r23, r23
     c48:	88 1f       	adc	r24, r24
     c4a:	c2 f7       	brpl	.-16     	; 0xc3c <__addsf3x+0x6a>
     c4c:	0e c0       	rjmp	.+28     	; 0xc6a <__addsf3x+0x98>
     c4e:	ba 0f       	add	r27, r26
     c50:	62 1f       	adc	r22, r18
     c52:	73 1f       	adc	r23, r19
     c54:	84 1f       	adc	r24, r20
     c56:	48 f4       	brcc	.+18     	; 0xc6a <__addsf3x+0x98>
     c58:	87 95       	ror	r24
     c5a:	77 95       	ror	r23
     c5c:	67 95       	ror	r22
     c5e:	b7 95       	ror	r27
     c60:	f7 95       	ror	r31
     c62:	9e 3f       	cpi	r25, 0xFE	; 254
     c64:	08 f0       	brcs	.+2      	; 0xc68 <__addsf3x+0x96>
     c66:	b3 cf       	rjmp	.-154    	; 0xbce <__addsf3+0x1e>
     c68:	93 95       	inc	r25
     c6a:	88 0f       	add	r24, r24
     c6c:	08 f0       	brcs	.+2      	; 0xc70 <__addsf3x+0x9e>
     c6e:	99 27       	eor	r25, r25
     c70:	ee 0f       	add	r30, r30
     c72:	97 95       	ror	r25
     c74:	87 95       	ror	r24
     c76:	08 95       	ret
     c78:	65 d1       	rcall	.+714    	; 0xf44 <__fp_pscA>
     c7a:	58 f0       	brcs	.+22     	; 0xc92 <__addsf3x+0xc0>
     c7c:	80 e8       	ldi	r24, 0x80	; 128
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	09 f4       	brne	.+2      	; 0xc84 <__addsf3x+0xb2>
     c82:	9e ef       	ldi	r25, 0xFE	; 254
     c84:	66 d1       	rcall	.+716    	; 0xf52 <__fp_pscB>
     c86:	28 f0       	brcs	.+10     	; 0xc92 <__addsf3x+0xc0>
     c88:	40 e8       	ldi	r20, 0x80	; 128
     c8a:	51 e0       	ldi	r21, 0x01	; 1
     c8c:	59 f4       	brne	.+22     	; 0xca4 <atan2+0xe>
     c8e:	5e ef       	ldi	r21, 0xFE	; 254
     c90:	09 c0       	rjmp	.+18     	; 0xca4 <atan2+0xe>
     c92:	30 c1       	rjmp	.+608    	; 0xef4 <__fp_nan>
     c94:	98 c1       	rjmp	.+816    	; 0xfc6 <__fp_zero>

00000c96 <atan2>:
     c96:	e9 2f       	mov	r30, r25
     c98:	e0 78       	andi	r30, 0x80	; 128
     c9a:	73 d1       	rcall	.+742    	; 0xf82 <__fp_split3>
     c9c:	68 f3       	brcs	.-38     	; 0xc78 <__addsf3x+0xa6>
     c9e:	09 2e       	mov	r0, r25
     ca0:	05 2a       	or	r0, r21
     ca2:	c1 f3       	breq	.-16     	; 0xc94 <__addsf3x+0xc2>
     ca4:	26 17       	cp	r18, r22
     ca6:	37 07       	cpc	r19, r23
     ca8:	48 07       	cpc	r20, r24
     caa:	59 07       	cpc	r21, r25
     cac:	38 f0       	brcs	.+14     	; 0xcbc <atan2+0x26>
     cae:	0e 2e       	mov	r0, r30
     cb0:	07 f8       	bld	r0, 7
     cb2:	e0 25       	eor	r30, r0
     cb4:	69 f0       	breq	.+26     	; 0xcd0 <atan2+0x3a>
     cb6:	e0 25       	eor	r30, r0
     cb8:	e0 64       	ori	r30, 0x40	; 64
     cba:	0a c0       	rjmp	.+20     	; 0xcd0 <atan2+0x3a>
     cbc:	ef 63       	ori	r30, 0x3F	; 63
     cbe:	07 f8       	bld	r0, 7
     cc0:	00 94       	com	r0
     cc2:	07 fa       	bst	r0, 7
     cc4:	db 01       	movw	r26, r22
     cc6:	b9 01       	movw	r22, r18
     cc8:	9d 01       	movw	r18, r26
     cca:	dc 01       	movw	r26, r24
     ccc:	ca 01       	movw	r24, r20
     cce:	ad 01       	movw	r20, r26
     cd0:	ef 93       	push	r30
     cd2:	43 d0       	rcall	.+134    	; 0xd5a <__divsf3_pse>
     cd4:	45 d1       	rcall	.+650    	; 0xf60 <__fp_round>
     cd6:	0a d0       	rcall	.+20     	; 0xcec <atan>
     cd8:	5f 91       	pop	r21
     cda:	55 23       	and	r21, r21
     cdc:	31 f0       	breq	.+12     	; 0xcea <atan2+0x54>
     cde:	2b ed       	ldi	r18, 0xDB	; 219
     ce0:	3f e0       	ldi	r19, 0x0F	; 15
     ce2:	49 e4       	ldi	r20, 0x49	; 73
     ce4:	50 fd       	sbrc	r21, 0
     ce6:	49 ec       	ldi	r20, 0xC9	; 201
     ce8:	63 cf       	rjmp	.-314    	; 0xbb0 <__addsf3>
     cea:	08 95       	ret

00000cec <atan>:
     cec:	df 93       	push	r29
     cee:	dd 27       	eor	r29, r29
     cf0:	b9 2f       	mov	r27, r25
     cf2:	bf 77       	andi	r27, 0x7F	; 127
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	16 16       	cp	r1, r22
     cfa:	17 06       	cpc	r1, r23
     cfc:	48 07       	cpc	r20, r24
     cfe:	5b 07       	cpc	r21, r27
     d00:	10 f4       	brcc	.+4      	; 0xd06 <atan+0x1a>
     d02:	d9 2f       	mov	r29, r25
     d04:	67 d1       	rcall	.+718    	; 0xfd4 <inverse>
     d06:	9f 93       	push	r25
     d08:	8f 93       	push	r24
     d0a:	7f 93       	push	r23
     d0c:	6f 93       	push	r22
     d0e:	0e d2       	rcall	.+1052   	; 0x112c <square>
     d10:	e0 e0       	ldi	r30, 0x00	; 0
     d12:	f1 e0       	ldi	r31, 0x01	; 1
     d14:	f2 d0       	rcall	.+484    	; 0xefa <__fp_powser>
     d16:	24 d1       	rcall	.+584    	; 0xf60 <__fp_round>
     d18:	2f 91       	pop	r18
     d1a:	3f 91       	pop	r19
     d1c:	4f 91       	pop	r20
     d1e:	5f 91       	pop	r21
     d20:	6c d1       	rcall	.+728    	; 0xffa <__mulsf3x>
     d22:	dd 23       	and	r29, r29
     d24:	49 f0       	breq	.+18     	; 0xd38 <atan+0x4c>
     d26:	90 58       	subi	r25, 0x80	; 128
     d28:	a2 ea       	ldi	r26, 0xA2	; 162
     d2a:	2a ed       	ldi	r18, 0xDA	; 218
     d2c:	3f e0       	ldi	r19, 0x0F	; 15
     d2e:	49 ec       	ldi	r20, 0xC9	; 201
     d30:	5f e3       	ldi	r21, 0x3F	; 63
     d32:	d0 78       	andi	r29, 0x80	; 128
     d34:	5d 27       	eor	r21, r29
     d36:	4d df       	rcall	.-358    	; 0xbd2 <__addsf3x>
     d38:	df 91       	pop	r29
     d3a:	12 c1       	rjmp	.+548    	; 0xf60 <__fp_round>

00000d3c <__divsf3>:
     d3c:	0c d0       	rcall	.+24     	; 0xd56 <__divsf3x>
     d3e:	10 c1       	rjmp	.+544    	; 0xf60 <__fp_round>
     d40:	08 d1       	rcall	.+528    	; 0xf52 <__fp_pscB>
     d42:	40 f0       	brcs	.+16     	; 0xd54 <__divsf3+0x18>
     d44:	ff d0       	rcall	.+510    	; 0xf44 <__fp_pscA>
     d46:	30 f0       	brcs	.+12     	; 0xd54 <__divsf3+0x18>
     d48:	21 f4       	brne	.+8      	; 0xd52 <__divsf3+0x16>
     d4a:	5f 3f       	cpi	r21, 0xFF	; 255
     d4c:	19 f0       	breq	.+6      	; 0xd54 <__divsf3+0x18>
     d4e:	cc c0       	rjmp	.+408    	; 0xee8 <__fp_inf>
     d50:	51 11       	cpse	r21, r1
     d52:	3a c1       	rjmp	.+628    	; 0xfc8 <__fp_szero>
     d54:	cf c0       	rjmp	.+414    	; 0xef4 <__fp_nan>

00000d56 <__divsf3x>:
     d56:	15 d1       	rcall	.+554    	; 0xf82 <__fp_split3>
     d58:	98 f3       	brcs	.-26     	; 0xd40 <__divsf3+0x4>

00000d5a <__divsf3_pse>:
     d5a:	99 23       	and	r25, r25
     d5c:	c9 f3       	breq	.-14     	; 0xd50 <__divsf3+0x14>
     d5e:	55 23       	and	r21, r21
     d60:	b1 f3       	breq	.-20     	; 0xd4e <__divsf3+0x12>
     d62:	95 1b       	sub	r25, r21
     d64:	55 0b       	sbc	r21, r21
     d66:	bb 27       	eor	r27, r27
     d68:	aa 27       	eor	r26, r26
     d6a:	62 17       	cp	r22, r18
     d6c:	73 07       	cpc	r23, r19
     d6e:	84 07       	cpc	r24, r20
     d70:	38 f0       	brcs	.+14     	; 0xd80 <__divsf3_pse+0x26>
     d72:	9f 5f       	subi	r25, 0xFF	; 255
     d74:	5f 4f       	sbci	r21, 0xFF	; 255
     d76:	22 0f       	add	r18, r18
     d78:	33 1f       	adc	r19, r19
     d7a:	44 1f       	adc	r20, r20
     d7c:	aa 1f       	adc	r26, r26
     d7e:	a9 f3       	breq	.-22     	; 0xd6a <__divsf3_pse+0x10>
     d80:	33 d0       	rcall	.+102    	; 0xde8 <__divsf3_pse+0x8e>
     d82:	0e 2e       	mov	r0, r30
     d84:	3a f0       	brmi	.+14     	; 0xd94 <__divsf3_pse+0x3a>
     d86:	e0 e8       	ldi	r30, 0x80	; 128
     d88:	30 d0       	rcall	.+96     	; 0xdea <__divsf3_pse+0x90>
     d8a:	91 50       	subi	r25, 0x01	; 1
     d8c:	50 40       	sbci	r21, 0x00	; 0
     d8e:	e6 95       	lsr	r30
     d90:	00 1c       	adc	r0, r0
     d92:	ca f7       	brpl	.-14     	; 0xd86 <__divsf3_pse+0x2c>
     d94:	29 d0       	rcall	.+82     	; 0xde8 <__divsf3_pse+0x8e>
     d96:	fe 2f       	mov	r31, r30
     d98:	27 d0       	rcall	.+78     	; 0xde8 <__divsf3_pse+0x8e>
     d9a:	66 0f       	add	r22, r22
     d9c:	77 1f       	adc	r23, r23
     d9e:	88 1f       	adc	r24, r24
     da0:	bb 1f       	adc	r27, r27
     da2:	26 17       	cp	r18, r22
     da4:	37 07       	cpc	r19, r23
     da6:	48 07       	cpc	r20, r24
     da8:	ab 07       	cpc	r26, r27
     daa:	b0 e8       	ldi	r27, 0x80	; 128
     dac:	09 f0       	breq	.+2      	; 0xdb0 <__divsf3_pse+0x56>
     dae:	bb 0b       	sbc	r27, r27
     db0:	80 2d       	mov	r24, r0
     db2:	bf 01       	movw	r22, r30
     db4:	ff 27       	eor	r31, r31
     db6:	93 58       	subi	r25, 0x83	; 131
     db8:	5f 4f       	sbci	r21, 0xFF	; 255
     dba:	2a f0       	brmi	.+10     	; 0xdc6 <__divsf3_pse+0x6c>
     dbc:	9e 3f       	cpi	r25, 0xFE	; 254
     dbe:	51 05       	cpc	r21, r1
     dc0:	68 f0       	brcs	.+26     	; 0xddc <__divsf3_pse+0x82>
     dc2:	92 c0       	rjmp	.+292    	; 0xee8 <__fp_inf>
     dc4:	01 c1       	rjmp	.+514    	; 0xfc8 <__fp_szero>
     dc6:	5f 3f       	cpi	r21, 0xFF	; 255
     dc8:	ec f3       	brlt	.-6      	; 0xdc4 <__divsf3_pse+0x6a>
     dca:	98 3e       	cpi	r25, 0xE8	; 232
     dcc:	dc f3       	brlt	.-10     	; 0xdc4 <__divsf3_pse+0x6a>
     dce:	86 95       	lsr	r24
     dd0:	77 95       	ror	r23
     dd2:	67 95       	ror	r22
     dd4:	b7 95       	ror	r27
     dd6:	f7 95       	ror	r31
     dd8:	9f 5f       	subi	r25, 0xFF	; 255
     dda:	c9 f7       	brne	.-14     	; 0xdce <__divsf3_pse+0x74>
     ddc:	88 0f       	add	r24, r24
     dde:	91 1d       	adc	r25, r1
     de0:	96 95       	lsr	r25
     de2:	87 95       	ror	r24
     de4:	97 f9       	bld	r25, 7
     de6:	08 95       	ret
     de8:	e1 e0       	ldi	r30, 0x01	; 1
     dea:	66 0f       	add	r22, r22
     dec:	77 1f       	adc	r23, r23
     dee:	88 1f       	adc	r24, r24
     df0:	bb 1f       	adc	r27, r27
     df2:	62 17       	cp	r22, r18
     df4:	73 07       	cpc	r23, r19
     df6:	84 07       	cpc	r24, r20
     df8:	ba 07       	cpc	r27, r26
     dfa:	20 f0       	brcs	.+8      	; 0xe04 <__divsf3_pse+0xaa>
     dfc:	62 1b       	sub	r22, r18
     dfe:	73 0b       	sbc	r23, r19
     e00:	84 0b       	sbc	r24, r20
     e02:	ba 0b       	sbc	r27, r26
     e04:	ee 1f       	adc	r30, r30
     e06:	88 f7       	brcc	.-30     	; 0xdea <__divsf3_pse+0x90>
     e08:	e0 95       	com	r30
     e0a:	08 95       	ret

00000e0c <__fixsfsi>:
     e0c:	04 d0       	rcall	.+8      	; 0xe16 <__fixunssfsi>
     e0e:	68 94       	set
     e10:	b1 11       	cpse	r27, r1
     e12:	da c0       	rjmp	.+436    	; 0xfc8 <__fp_szero>
     e14:	08 95       	ret

00000e16 <__fixunssfsi>:
     e16:	bd d0       	rcall	.+378    	; 0xf92 <__fp_splitA>
     e18:	88 f0       	brcs	.+34     	; 0xe3c <__fixunssfsi+0x26>
     e1a:	9f 57       	subi	r25, 0x7F	; 127
     e1c:	90 f0       	brcs	.+36     	; 0xe42 <__fixunssfsi+0x2c>
     e1e:	b9 2f       	mov	r27, r25
     e20:	99 27       	eor	r25, r25
     e22:	b7 51       	subi	r27, 0x17	; 23
     e24:	a0 f0       	brcs	.+40     	; 0xe4e <__fixunssfsi+0x38>
     e26:	d1 f0       	breq	.+52     	; 0xe5c <__fixunssfsi+0x46>
     e28:	66 0f       	add	r22, r22
     e2a:	77 1f       	adc	r23, r23
     e2c:	88 1f       	adc	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	1a f0       	brmi	.+6      	; 0xe38 <__fixunssfsi+0x22>
     e32:	ba 95       	dec	r27
     e34:	c9 f7       	brne	.-14     	; 0xe28 <__fixunssfsi+0x12>
     e36:	12 c0       	rjmp	.+36     	; 0xe5c <__fixunssfsi+0x46>
     e38:	b1 30       	cpi	r27, 0x01	; 1
     e3a:	81 f0       	breq	.+32     	; 0xe5c <__fixunssfsi+0x46>
     e3c:	c4 d0       	rcall	.+392    	; 0xfc6 <__fp_zero>
     e3e:	b1 e0       	ldi	r27, 0x01	; 1
     e40:	08 95       	ret
     e42:	c1 c0       	rjmp	.+386    	; 0xfc6 <__fp_zero>
     e44:	67 2f       	mov	r22, r23
     e46:	78 2f       	mov	r23, r24
     e48:	88 27       	eor	r24, r24
     e4a:	b8 5f       	subi	r27, 0xF8	; 248
     e4c:	39 f0       	breq	.+14     	; 0xe5c <__fixunssfsi+0x46>
     e4e:	b9 3f       	cpi	r27, 0xF9	; 249
     e50:	cc f3       	brlt	.-14     	; 0xe44 <__fixunssfsi+0x2e>
     e52:	86 95       	lsr	r24
     e54:	77 95       	ror	r23
     e56:	67 95       	ror	r22
     e58:	b3 95       	inc	r27
     e5a:	d9 f7       	brne	.-10     	; 0xe52 <__fixunssfsi+0x3c>
     e5c:	3e f4       	brtc	.+14     	; 0xe6c <__fixunssfsi+0x56>
     e5e:	90 95       	com	r25
     e60:	80 95       	com	r24
     e62:	70 95       	com	r23
     e64:	61 95       	neg	r22
     e66:	7f 4f       	sbci	r23, 0xFF	; 255
     e68:	8f 4f       	sbci	r24, 0xFF	; 255
     e6a:	9f 4f       	sbci	r25, 0xFF	; 255
     e6c:	08 95       	ret

00000e6e <__floatunsisf>:
     e6e:	e8 94       	clt
     e70:	09 c0       	rjmp	.+18     	; 0xe84 <__floatsisf+0x12>

00000e72 <__floatsisf>:
     e72:	97 fb       	bst	r25, 7
     e74:	3e f4       	brtc	.+14     	; 0xe84 <__floatsisf+0x12>
     e76:	90 95       	com	r25
     e78:	80 95       	com	r24
     e7a:	70 95       	com	r23
     e7c:	61 95       	neg	r22
     e7e:	7f 4f       	sbci	r23, 0xFF	; 255
     e80:	8f 4f       	sbci	r24, 0xFF	; 255
     e82:	9f 4f       	sbci	r25, 0xFF	; 255
     e84:	99 23       	and	r25, r25
     e86:	a9 f0       	breq	.+42     	; 0xeb2 <__floatsisf+0x40>
     e88:	f9 2f       	mov	r31, r25
     e8a:	96 e9       	ldi	r25, 0x96	; 150
     e8c:	bb 27       	eor	r27, r27
     e8e:	93 95       	inc	r25
     e90:	f6 95       	lsr	r31
     e92:	87 95       	ror	r24
     e94:	77 95       	ror	r23
     e96:	67 95       	ror	r22
     e98:	b7 95       	ror	r27
     e9a:	f1 11       	cpse	r31, r1
     e9c:	f8 cf       	rjmp	.-16     	; 0xe8e <__floatsisf+0x1c>
     e9e:	fa f4       	brpl	.+62     	; 0xede <__floatsisf+0x6c>
     ea0:	bb 0f       	add	r27, r27
     ea2:	11 f4       	brne	.+4      	; 0xea8 <__floatsisf+0x36>
     ea4:	60 ff       	sbrs	r22, 0
     ea6:	1b c0       	rjmp	.+54     	; 0xede <__floatsisf+0x6c>
     ea8:	6f 5f       	subi	r22, 0xFF	; 255
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
     eac:	8f 4f       	sbci	r24, 0xFF	; 255
     eae:	9f 4f       	sbci	r25, 0xFF	; 255
     eb0:	16 c0       	rjmp	.+44     	; 0xede <__floatsisf+0x6c>
     eb2:	88 23       	and	r24, r24
     eb4:	11 f0       	breq	.+4      	; 0xeba <__floatsisf+0x48>
     eb6:	96 e9       	ldi	r25, 0x96	; 150
     eb8:	11 c0       	rjmp	.+34     	; 0xedc <__floatsisf+0x6a>
     eba:	77 23       	and	r23, r23
     ebc:	21 f0       	breq	.+8      	; 0xec6 <__floatsisf+0x54>
     ebe:	9e e8       	ldi	r25, 0x8E	; 142
     ec0:	87 2f       	mov	r24, r23
     ec2:	76 2f       	mov	r23, r22
     ec4:	05 c0       	rjmp	.+10     	; 0xed0 <__floatsisf+0x5e>
     ec6:	66 23       	and	r22, r22
     ec8:	71 f0       	breq	.+28     	; 0xee6 <__floatsisf+0x74>
     eca:	96 e8       	ldi	r25, 0x86	; 134
     ecc:	86 2f       	mov	r24, r22
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	2a f0       	brmi	.+10     	; 0xede <__floatsisf+0x6c>
     ed4:	9a 95       	dec	r25
     ed6:	66 0f       	add	r22, r22
     ed8:	77 1f       	adc	r23, r23
     eda:	88 1f       	adc	r24, r24
     edc:	da f7       	brpl	.-10     	; 0xed4 <__floatsisf+0x62>
     ede:	88 0f       	add	r24, r24
     ee0:	96 95       	lsr	r25
     ee2:	87 95       	ror	r24
     ee4:	97 f9       	bld	r25, 7
     ee6:	08 95       	ret

00000ee8 <__fp_inf>:
     ee8:	97 f9       	bld	r25, 7
     eea:	9f 67       	ori	r25, 0x7F	; 127
     eec:	80 e8       	ldi	r24, 0x80	; 128
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	08 95       	ret

00000ef4 <__fp_nan>:
     ef4:	9f ef       	ldi	r25, 0xFF	; 255
     ef6:	80 ec       	ldi	r24, 0xC0	; 192
     ef8:	08 95       	ret

00000efa <__fp_powser>:
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	1f 93       	push	r17
     f00:	0f 93       	push	r16
     f02:	ff 92       	push	r15
     f04:	ef 92       	push	r14
     f06:	df 92       	push	r13
     f08:	7b 01       	movw	r14, r22
     f0a:	8c 01       	movw	r16, r24
     f0c:	68 94       	set
     f0e:	05 c0       	rjmp	.+10     	; 0xf1a <__fp_powser+0x20>
     f10:	da 2e       	mov	r13, r26
     f12:	ef 01       	movw	r28, r30
     f14:	72 d0       	rcall	.+228    	; 0xffa <__mulsf3x>
     f16:	fe 01       	movw	r30, r28
     f18:	e8 94       	clt
     f1a:	a5 91       	lpm	r26, Z+
     f1c:	25 91       	lpm	r18, Z+
     f1e:	35 91       	lpm	r19, Z+
     f20:	45 91       	lpm	r20, Z+
     f22:	55 91       	lpm	r21, Z+
     f24:	ae f3       	brts	.-22     	; 0xf10 <__fp_powser+0x16>
     f26:	ef 01       	movw	r28, r30
     f28:	54 de       	rcall	.-856    	; 0xbd2 <__addsf3x>
     f2a:	fe 01       	movw	r30, r28
     f2c:	97 01       	movw	r18, r14
     f2e:	a8 01       	movw	r20, r16
     f30:	da 94       	dec	r13
     f32:	79 f7       	brne	.-34     	; 0xf12 <__fp_powser+0x18>
     f34:	df 90       	pop	r13
     f36:	ef 90       	pop	r14
     f38:	ff 90       	pop	r15
     f3a:	0f 91       	pop	r16
     f3c:	1f 91       	pop	r17
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <__fp_pscA>:
     f44:	00 24       	eor	r0, r0
     f46:	0a 94       	dec	r0
     f48:	16 16       	cp	r1, r22
     f4a:	17 06       	cpc	r1, r23
     f4c:	18 06       	cpc	r1, r24
     f4e:	09 06       	cpc	r0, r25
     f50:	08 95       	ret

00000f52 <__fp_pscB>:
     f52:	00 24       	eor	r0, r0
     f54:	0a 94       	dec	r0
     f56:	12 16       	cp	r1, r18
     f58:	13 06       	cpc	r1, r19
     f5a:	14 06       	cpc	r1, r20
     f5c:	05 06       	cpc	r0, r21
     f5e:	08 95       	ret

00000f60 <__fp_round>:
     f60:	09 2e       	mov	r0, r25
     f62:	03 94       	inc	r0
     f64:	00 0c       	add	r0, r0
     f66:	11 f4       	brne	.+4      	; 0xf6c <__fp_round+0xc>
     f68:	88 23       	and	r24, r24
     f6a:	52 f0       	brmi	.+20     	; 0xf80 <__fp_round+0x20>
     f6c:	bb 0f       	add	r27, r27
     f6e:	40 f4       	brcc	.+16     	; 0xf80 <__fp_round+0x20>
     f70:	bf 2b       	or	r27, r31
     f72:	11 f4       	brne	.+4      	; 0xf78 <__fp_round+0x18>
     f74:	60 ff       	sbrs	r22, 0
     f76:	04 c0       	rjmp	.+8      	; 0xf80 <__fp_round+0x20>
     f78:	6f 5f       	subi	r22, 0xFF	; 255
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	8f 4f       	sbci	r24, 0xFF	; 255
     f7e:	9f 4f       	sbci	r25, 0xFF	; 255
     f80:	08 95       	ret

00000f82 <__fp_split3>:
     f82:	57 fd       	sbrc	r21, 7
     f84:	90 58       	subi	r25, 0x80	; 128
     f86:	44 0f       	add	r20, r20
     f88:	55 1f       	adc	r21, r21
     f8a:	59 f0       	breq	.+22     	; 0xfa2 <__fp_splitA+0x10>
     f8c:	5f 3f       	cpi	r21, 0xFF	; 255
     f8e:	71 f0       	breq	.+28     	; 0xfac <__fp_splitA+0x1a>
     f90:	47 95       	ror	r20

00000f92 <__fp_splitA>:
     f92:	88 0f       	add	r24, r24
     f94:	97 fb       	bst	r25, 7
     f96:	99 1f       	adc	r25, r25
     f98:	61 f0       	breq	.+24     	; 0xfb2 <__fp_splitA+0x20>
     f9a:	9f 3f       	cpi	r25, 0xFF	; 255
     f9c:	79 f0       	breq	.+30     	; 0xfbc <__fp_splitA+0x2a>
     f9e:	87 95       	ror	r24
     fa0:	08 95       	ret
     fa2:	12 16       	cp	r1, r18
     fa4:	13 06       	cpc	r1, r19
     fa6:	14 06       	cpc	r1, r20
     fa8:	55 1f       	adc	r21, r21
     faa:	f2 cf       	rjmp	.-28     	; 0xf90 <__fp_split3+0xe>
     fac:	46 95       	lsr	r20
     fae:	f1 df       	rcall	.-30     	; 0xf92 <__fp_splitA>
     fb0:	08 c0       	rjmp	.+16     	; 0xfc2 <__fp_splitA+0x30>
     fb2:	16 16       	cp	r1, r22
     fb4:	17 06       	cpc	r1, r23
     fb6:	18 06       	cpc	r1, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	f1 cf       	rjmp	.-30     	; 0xf9e <__fp_splitA+0xc>
     fbc:	86 95       	lsr	r24
     fbe:	71 05       	cpc	r23, r1
     fc0:	61 05       	cpc	r22, r1
     fc2:	08 94       	sec
     fc4:	08 95       	ret

00000fc6 <__fp_zero>:
     fc6:	e8 94       	clt

00000fc8 <__fp_szero>:
     fc8:	bb 27       	eor	r27, r27
     fca:	66 27       	eor	r22, r22
     fcc:	77 27       	eor	r23, r23
     fce:	cb 01       	movw	r24, r22
     fd0:	97 f9       	bld	r25, 7
     fd2:	08 95       	ret

00000fd4 <inverse>:
     fd4:	9b 01       	movw	r18, r22
     fd6:	ac 01       	movw	r20, r24
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	80 e8       	ldi	r24, 0x80	; 128
     fde:	9f e3       	ldi	r25, 0x3F	; 63
     fe0:	ad ce       	rjmp	.-678    	; 0xd3c <__divsf3>

00000fe2 <__mulsf3>:
     fe2:	0b d0       	rcall	.+22     	; 0xffa <__mulsf3x>
     fe4:	bd cf       	rjmp	.-134    	; 0xf60 <__fp_round>
     fe6:	ae df       	rcall	.-164    	; 0xf44 <__fp_pscA>
     fe8:	28 f0       	brcs	.+10     	; 0xff4 <__mulsf3+0x12>
     fea:	b3 df       	rcall	.-154    	; 0xf52 <__fp_pscB>
     fec:	18 f0       	brcs	.+6      	; 0xff4 <__mulsf3+0x12>
     fee:	95 23       	and	r25, r21
     ff0:	09 f0       	breq	.+2      	; 0xff4 <__mulsf3+0x12>
     ff2:	7a cf       	rjmp	.-268    	; 0xee8 <__fp_inf>
     ff4:	7f cf       	rjmp	.-258    	; 0xef4 <__fp_nan>
     ff6:	11 24       	eor	r1, r1
     ff8:	e7 cf       	rjmp	.-50     	; 0xfc8 <__fp_szero>

00000ffa <__mulsf3x>:
     ffa:	c3 df       	rcall	.-122    	; 0xf82 <__fp_split3>
     ffc:	a0 f3       	brcs	.-24     	; 0xfe6 <__mulsf3+0x4>

00000ffe <__mulsf3_pse>:
     ffe:	95 9f       	mul	r25, r21
    1000:	d1 f3       	breq	.-12     	; 0xff6 <__mulsf3+0x14>
    1002:	95 0f       	add	r25, r21
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	55 1f       	adc	r21, r21
    1008:	62 9f       	mul	r22, r18
    100a:	f0 01       	movw	r30, r0
    100c:	72 9f       	mul	r23, r18
    100e:	bb 27       	eor	r27, r27
    1010:	f0 0d       	add	r31, r0
    1012:	b1 1d       	adc	r27, r1
    1014:	63 9f       	mul	r22, r19
    1016:	aa 27       	eor	r26, r26
    1018:	f0 0d       	add	r31, r0
    101a:	b1 1d       	adc	r27, r1
    101c:	aa 1f       	adc	r26, r26
    101e:	64 9f       	mul	r22, r20
    1020:	66 27       	eor	r22, r22
    1022:	b0 0d       	add	r27, r0
    1024:	a1 1d       	adc	r26, r1
    1026:	66 1f       	adc	r22, r22
    1028:	82 9f       	mul	r24, r18
    102a:	22 27       	eor	r18, r18
    102c:	b0 0d       	add	r27, r0
    102e:	a1 1d       	adc	r26, r1
    1030:	62 1f       	adc	r22, r18
    1032:	73 9f       	mul	r23, r19
    1034:	b0 0d       	add	r27, r0
    1036:	a1 1d       	adc	r26, r1
    1038:	62 1f       	adc	r22, r18
    103a:	83 9f       	mul	r24, r19
    103c:	a0 0d       	add	r26, r0
    103e:	61 1d       	adc	r22, r1
    1040:	22 1f       	adc	r18, r18
    1042:	74 9f       	mul	r23, r20
    1044:	33 27       	eor	r19, r19
    1046:	a0 0d       	add	r26, r0
    1048:	61 1d       	adc	r22, r1
    104a:	23 1f       	adc	r18, r19
    104c:	84 9f       	mul	r24, r20
    104e:	60 0d       	add	r22, r0
    1050:	21 1d       	adc	r18, r1
    1052:	82 2f       	mov	r24, r18
    1054:	76 2f       	mov	r23, r22
    1056:	6a 2f       	mov	r22, r26
    1058:	11 24       	eor	r1, r1
    105a:	9f 57       	subi	r25, 0x7F	; 127
    105c:	50 40       	sbci	r21, 0x00	; 0
    105e:	8a f0       	brmi	.+34     	; 0x1082 <__mulsf3_pse+0x84>
    1060:	e1 f0       	breq	.+56     	; 0x109a <__mulsf3_pse+0x9c>
    1062:	88 23       	and	r24, r24
    1064:	4a f0       	brmi	.+18     	; 0x1078 <__mulsf3_pse+0x7a>
    1066:	ee 0f       	add	r30, r30
    1068:	ff 1f       	adc	r31, r31
    106a:	bb 1f       	adc	r27, r27
    106c:	66 1f       	adc	r22, r22
    106e:	77 1f       	adc	r23, r23
    1070:	88 1f       	adc	r24, r24
    1072:	91 50       	subi	r25, 0x01	; 1
    1074:	50 40       	sbci	r21, 0x00	; 0
    1076:	a9 f7       	brne	.-22     	; 0x1062 <__mulsf3_pse+0x64>
    1078:	9e 3f       	cpi	r25, 0xFE	; 254
    107a:	51 05       	cpc	r21, r1
    107c:	70 f0       	brcs	.+28     	; 0x109a <__mulsf3_pse+0x9c>
    107e:	34 cf       	rjmp	.-408    	; 0xee8 <__fp_inf>
    1080:	a3 cf       	rjmp	.-186    	; 0xfc8 <__fp_szero>
    1082:	5f 3f       	cpi	r21, 0xFF	; 255
    1084:	ec f3       	brlt	.-6      	; 0x1080 <__mulsf3_pse+0x82>
    1086:	98 3e       	cpi	r25, 0xE8	; 232
    1088:	dc f3       	brlt	.-10     	; 0x1080 <__mulsf3_pse+0x82>
    108a:	86 95       	lsr	r24
    108c:	77 95       	ror	r23
    108e:	67 95       	ror	r22
    1090:	b7 95       	ror	r27
    1092:	f7 95       	ror	r31
    1094:	e7 95       	ror	r30
    1096:	9f 5f       	subi	r25, 0xFF	; 255
    1098:	c1 f7       	brne	.-16     	; 0x108a <__mulsf3_pse+0x8c>
    109a:	fe 2b       	or	r31, r30
    109c:	88 0f       	add	r24, r24
    109e:	91 1d       	adc	r25, r1
    10a0:	96 95       	lsr	r25
    10a2:	87 95       	ror	r24
    10a4:	97 f9       	bld	r25, 7
    10a6:	08 95       	ret
    10a8:	11 f4       	brne	.+4      	; 0x10ae <__mulsf3_pse+0xb0>
    10aa:	0e f4       	brtc	.+2      	; 0x10ae <__mulsf3_pse+0xb0>
    10ac:	23 cf       	rjmp	.-442    	; 0xef4 <__fp_nan>
    10ae:	41 c0       	rjmp	.+130    	; 0x1132 <__fp_mpack>

000010b0 <sqrt>:
    10b0:	70 df       	rcall	.-288    	; 0xf92 <__fp_splitA>
    10b2:	d0 f3       	brcs	.-12     	; 0x10a8 <__mulsf3_pse+0xaa>
    10b4:	99 23       	and	r25, r25
    10b6:	d9 f3       	breq	.-10     	; 0x10ae <__mulsf3_pse+0xb0>
    10b8:	ce f3       	brts	.-14     	; 0x10ac <__mulsf3_pse+0xae>
    10ba:	9f 57       	subi	r25, 0x7F	; 127
    10bc:	55 0b       	sbc	r21, r21
    10be:	87 ff       	sbrs	r24, 7
    10c0:	46 d0       	rcall	.+140    	; 0x114e <__fp_norm2>
    10c2:	00 24       	eor	r0, r0
    10c4:	a0 e6       	ldi	r26, 0x60	; 96
    10c6:	40 ea       	ldi	r20, 0xA0	; 160
    10c8:	90 01       	movw	r18, r0
    10ca:	80 58       	subi	r24, 0x80	; 128
    10cc:	56 95       	lsr	r21
    10ce:	97 95       	ror	r25
    10d0:	28 f4       	brcc	.+10     	; 0x10dc <sqrt+0x2c>
    10d2:	80 5c       	subi	r24, 0xC0	; 192
    10d4:	66 0f       	add	r22, r22
    10d6:	77 1f       	adc	r23, r23
    10d8:	88 1f       	adc	r24, r24
    10da:	20 f0       	brcs	.+8      	; 0x10e4 <sqrt+0x34>
    10dc:	26 17       	cp	r18, r22
    10de:	37 07       	cpc	r19, r23
    10e0:	48 07       	cpc	r20, r24
    10e2:	30 f4       	brcc	.+12     	; 0x10f0 <sqrt+0x40>
    10e4:	62 1b       	sub	r22, r18
    10e6:	73 0b       	sbc	r23, r19
    10e8:	84 0b       	sbc	r24, r20
    10ea:	20 29       	or	r18, r0
    10ec:	31 29       	or	r19, r1
    10ee:	4a 2b       	or	r20, r26
    10f0:	a6 95       	lsr	r26
    10f2:	17 94       	ror	r1
    10f4:	07 94       	ror	r0
    10f6:	20 25       	eor	r18, r0
    10f8:	31 25       	eor	r19, r1
    10fa:	4a 27       	eor	r20, r26
    10fc:	58 f7       	brcc	.-42     	; 0x10d4 <sqrt+0x24>
    10fe:	66 0f       	add	r22, r22
    1100:	77 1f       	adc	r23, r23
    1102:	88 1f       	adc	r24, r24
    1104:	20 f0       	brcs	.+8      	; 0x110e <sqrt+0x5e>
    1106:	26 17       	cp	r18, r22
    1108:	37 07       	cpc	r19, r23
    110a:	48 07       	cpc	r20, r24
    110c:	30 f4       	brcc	.+12     	; 0x111a <sqrt+0x6a>
    110e:	62 0b       	sbc	r22, r18
    1110:	73 0b       	sbc	r23, r19
    1112:	84 0b       	sbc	r24, r20
    1114:	20 0d       	add	r18, r0
    1116:	31 1d       	adc	r19, r1
    1118:	41 1d       	adc	r20, r1
    111a:	a0 95       	com	r26
    111c:	81 f7       	brne	.-32     	; 0x10fe <sqrt+0x4e>
    111e:	b9 01       	movw	r22, r18
    1120:	84 2f       	mov	r24, r20
    1122:	91 58       	subi	r25, 0x81	; 129
    1124:	88 0f       	add	r24, r24
    1126:	96 95       	lsr	r25
    1128:	87 95       	ror	r24
    112a:	08 95       	ret

0000112c <square>:
    112c:	9b 01       	movw	r18, r22
    112e:	ac 01       	movw	r20, r24
    1130:	58 cf       	rjmp	.-336    	; 0xfe2 <__mulsf3>

00001132 <__fp_mpack>:
    1132:	9f 3f       	cpi	r25, 0xFF	; 255
    1134:	31 f0       	breq	.+12     	; 0x1142 <__fp_mpack_finite+0xc>

00001136 <__fp_mpack_finite>:
    1136:	91 50       	subi	r25, 0x01	; 1
    1138:	20 f4       	brcc	.+8      	; 0x1142 <__fp_mpack_finite+0xc>
    113a:	87 95       	ror	r24
    113c:	77 95       	ror	r23
    113e:	67 95       	ror	r22
    1140:	b7 95       	ror	r27
    1142:	88 0f       	add	r24, r24
    1144:	91 1d       	adc	r25, r1
    1146:	96 95       	lsr	r25
    1148:	87 95       	ror	r24
    114a:	97 f9       	bld	r25, 7
    114c:	08 95       	ret

0000114e <__fp_norm2>:
    114e:	91 50       	subi	r25, 0x01	; 1
    1150:	50 40       	sbci	r21, 0x00	; 0
    1152:	66 0f       	add	r22, r22
    1154:	77 1f       	adc	r23, r23
    1156:	88 1f       	adc	r24, r24
    1158:	d2 f7       	brpl	.-12     	; 0x114e <__fp_norm2>
    115a:	08 95       	ret

0000115c <__udivmodsi4>:
    115c:	a1 e2       	ldi	r26, 0x21	; 33
    115e:	1a 2e       	mov	r1, r26
    1160:	aa 1b       	sub	r26, r26
    1162:	bb 1b       	sub	r27, r27
    1164:	fd 01       	movw	r30, r26
    1166:	0d c0       	rjmp	.+26     	; 0x1182 <__udivmodsi4_ep>

00001168 <__udivmodsi4_loop>:
    1168:	aa 1f       	adc	r26, r26
    116a:	bb 1f       	adc	r27, r27
    116c:	ee 1f       	adc	r30, r30
    116e:	ff 1f       	adc	r31, r31
    1170:	a2 17       	cp	r26, r18
    1172:	b3 07       	cpc	r27, r19
    1174:	e4 07       	cpc	r30, r20
    1176:	f5 07       	cpc	r31, r21
    1178:	20 f0       	brcs	.+8      	; 0x1182 <__udivmodsi4_ep>
    117a:	a2 1b       	sub	r26, r18
    117c:	b3 0b       	sbc	r27, r19
    117e:	e4 0b       	sbc	r30, r20
    1180:	f5 0b       	sbc	r31, r21

00001182 <__udivmodsi4_ep>:
    1182:	66 1f       	adc	r22, r22
    1184:	77 1f       	adc	r23, r23
    1186:	88 1f       	adc	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	1a 94       	dec	r1
    118c:	69 f7       	brne	.-38     	; 0x1168 <__udivmodsi4_loop>
    118e:	60 95       	com	r22
    1190:	70 95       	com	r23
    1192:	80 95       	com	r24
    1194:	90 95       	com	r25
    1196:	9b 01       	movw	r18, r22
    1198:	ac 01       	movw	r20, r24
    119a:	bd 01       	movw	r22, r26
    119c:	cf 01       	movw	r24, r30
    119e:	08 95       	ret

000011a0 <__tablejump2__>:
    11a0:	ee 0f       	add	r30, r30
    11a2:	ff 1f       	adc	r31, r31
    11a4:	88 1f       	adc	r24, r24
    11a6:	8b bf       	out	0x3b, r24	; 59
    11a8:	07 90       	elpm	r0, Z+
    11aa:	f6 91       	elpm	r31, Z
    11ac:	e0 2d       	mov	r30, r0
    11ae:	19 94       	eijmp

000011b0 <__itoa_ncheck>:
    11b0:	bb 27       	eor	r27, r27
    11b2:	4a 30       	cpi	r20, 0x0A	; 10
    11b4:	31 f4       	brne	.+12     	; 0x11c2 <__itoa_ncheck+0x12>
    11b6:	99 23       	and	r25, r25
    11b8:	22 f4       	brpl	.+8      	; 0x11c2 <__itoa_ncheck+0x12>
    11ba:	bd e2       	ldi	r27, 0x2D	; 45
    11bc:	90 95       	com	r25
    11be:	81 95       	neg	r24
    11c0:	9f 4f       	sbci	r25, 0xFF	; 255
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <__utoa_common>

000011c4 <__utoa_ncheck>:
    11c4:	bb 27       	eor	r27, r27

000011c6 <__utoa_common>:
    11c6:	fb 01       	movw	r30, r22
    11c8:	55 27       	eor	r21, r21
    11ca:	aa 27       	eor	r26, r26
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	aa 1f       	adc	r26, r26
    11d2:	a4 17       	cp	r26, r20
    11d4:	10 f0       	brcs	.+4      	; 0x11da <__utoa_common+0x14>
    11d6:	a4 1b       	sub	r26, r20
    11d8:	83 95       	inc	r24
    11da:	50 51       	subi	r21, 0x10	; 16
    11dc:	b9 f7       	brne	.-18     	; 0x11cc <__utoa_common+0x6>
    11de:	a0 5d       	subi	r26, 0xD0	; 208
    11e0:	aa 33       	cpi	r26, 0x3A	; 58
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <__utoa_common+0x20>
    11e4:	a9 5d       	subi	r26, 0xD9	; 217
    11e6:	a1 93       	st	Z+, r26
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	79 f7       	brne	.-34     	; 0x11ca <__utoa_common+0x4>
    11ec:	b1 11       	cpse	r27, r1
    11ee:	b1 93       	st	Z+, r27
    11f0:	11 92       	st	Z+, r1
    11f2:	cb 01       	movw	r24, r22
    11f4:	00 c0       	rjmp	.+0      	; 0x11f6 <strrev>

000011f6 <strrev>:
    11f6:	dc 01       	movw	r26, r24
    11f8:	fc 01       	movw	r30, r24
    11fa:	67 2f       	mov	r22, r23
    11fc:	71 91       	ld	r23, Z+
    11fe:	77 23       	and	r23, r23
    1200:	e1 f7       	brne	.-8      	; 0x11fa <strrev+0x4>
    1202:	32 97       	sbiw	r30, 0x02	; 2
    1204:	04 c0       	rjmp	.+8      	; 0x120e <strrev+0x18>
    1206:	7c 91       	ld	r23, X
    1208:	6d 93       	st	X+, r22
    120a:	70 83       	st	Z, r23
    120c:	62 91       	ld	r22, -Z
    120e:	ae 17       	cp	r26, r30
    1210:	bf 07       	cpc	r27, r31
    1212:	c8 f3       	brcs	.-14     	; 0x1206 <strrev+0x10>
    1214:	08 95       	ret

00001216 <_exit>:
    1216:	f8 94       	cli

00001218 <__stop_program>:
    1218:	ff cf       	rjmp	.-2      	; 0x1218 <__stop_program>
