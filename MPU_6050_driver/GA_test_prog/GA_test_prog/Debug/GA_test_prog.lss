
GA_test_prog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800200  00001140  000011d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001140  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  008002b2  008002b2  00001286  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001286  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023b7  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f4  00000000  00000000  000037ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c6d  00000000  00000000  000049e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00005650  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a91  00000000  00000000  0000591c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007f3  00000000  00000000  000063ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00006ba0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	96 c0       	rjmp	.+300    	; 0x12e <__ctors_end>
       2:	00 00       	nop
       4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	00 00       	nop
      30:	9d c0       	rjmp	.+314    	; 0x16c <__bad_interrupt>
      32:	00 00       	nop
      34:	9b c0       	rjmp	.+310    	; 0x16c <__bad_interrupt>
      36:	00 00       	nop
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	00 00       	nop
      40:	95 c0       	rjmp	.+298    	; 0x16c <__bad_interrupt>
      42:	00 00       	nop
      44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
      52:	00 00       	nop
      54:	8b c0       	rjmp	.+278    	; 0x16c <__bad_interrupt>
      56:	00 00       	nop
      58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c0       	rjmp	.+270    	; 0x16c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
      62:	00 00       	nop
      64:	83 c0       	rjmp	.+262    	; 0x16c <__bad_interrupt>
      66:	00 00       	nop
      68:	81 c0       	rjmp	.+258    	; 0x16c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
      6e:	00 00       	nop
      70:	7d c0       	rjmp	.+250    	; 0x16c <__bad_interrupt>
      72:	00 00       	nop
      74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6f c0       	rjmp	.+222    	; 0x16c <__bad_interrupt>
      8e:	00 00       	nop
      90:	6d c0       	rjmp	.+218    	; 0x16c <__bad_interrupt>
      92:	00 00       	nop
      94:	6b c0       	rjmp	.+214    	; 0x16c <__bad_interrupt>
      96:	00 00       	nop
      98:	69 c0       	rjmp	.+210    	; 0x16c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	67 c0       	rjmp	.+206    	; 0x16c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	65 c0       	rjmp	.+202    	; 0x16c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	63 c0       	rjmp	.+198    	; 0x16c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	61 c0       	rjmp	.+194    	; 0x16c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5f c0       	rjmp	.+190    	; 0x16c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5d c0       	rjmp	.+186    	; 0x16c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5b c0       	rjmp	.+182    	; 0x16c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	59 c0       	rjmp	.+178    	; 0x16c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	57 c0       	rjmp	.+174    	; 0x16c <__bad_interrupt>
      be:	00 00       	nop
      c0:	55 c0       	rjmp	.+170    	; 0x16c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	53 c0       	rjmp	.+166    	; 0x16c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	51 c0       	rjmp	.+162    	; 0x16c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	4f c0       	rjmp	.+158    	; 0x16c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	4d c0       	rjmp	.+154    	; 0x16c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4b c0       	rjmp	.+150    	; 0x16c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	49 c0       	rjmp	.+146    	; 0x16c <__bad_interrupt>
      da:	00 00       	nop
      dc:	47 c0       	rjmp	.+142    	; 0x16c <__bad_interrupt>
      de:	00 00       	nop
      e0:	45 c0       	rjmp	.+138    	; 0x16c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	88 02       	muls	r24, r24
      e6:	8d 02       	muls	r24, r29
      e8:	96 02       	muls	r25, r22
      ea:	9b 02       	muls	r25, r27
      ec:	a4 02       	muls	r26, r20
      ee:	a9 02       	muls	r26, r25
      f0:	b2 02       	muls	r27, r18
      f2:	b7 02       	muls	r27, r23
      f4:	c0 02       	muls	r28, r16
      f6:	c5 02       	muls	r28, r21
      f8:	ce 02       	muls	r28, r30
      fa:	d3 02       	muls	r29, r19
      fc:	dc 02       	muls	r29, r28
      fe:	e1 02       	muls	r30, r17
     100:	08 4a       	sbci	r16, 0xA8	; 168
     102:	d7 3b       	cpi	r29, 0xB7	; 183
     104:	3b ce       	rjmp	.-906    	; 0xfffffd7c <__eeprom_end+0xff7efd7c>
     106:	01 6e       	ori	r16, 0xE1	; 225
     108:	84 bc       	out	0x24, r8	; 36
     10a:	bf fd       	.word	0xfdbf	; ????
     10c:	c1 2f       	mov	r28, r17
     10e:	3d 6c       	ori	r19, 0xCD	; 205
     110:	74 31       	cpi	r23, 0x14	; 20
     112:	9a bd       	out	0x2a, r25	; 42
     114:	56 83       	std	Z+6, r21	; 0x06
     116:	3d da       	rcall	.-2950   	; 0xfffff592 <__eeprom_end+0xff7ef592>
     118:	3d 00       	.word	0x003d	; ????
     11a:	c7 7f       	andi	r28, 0xF7	; 247
     11c:	11 be       	out	0x31, r1	; 49
     11e:	d9 e4       	ldi	r29, 0x49	; 73
     120:	bb 4c       	sbci	r27, 0xCB	; 203
     122:	3e 91       	ld	r19, -X
     124:	6b aa       	std	Y+51, r6	; 0x33
     126:	aa be       	out	0x3a, r10	; 58
     128:	00 00       	nop
     12a:	00 80       	ld	r0, Z
     12c:	3f 00       	.word	0x003f	; ????

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d1 e2       	ldi	r29, 0x21	; 33
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61
     13a:	00 e0       	ldi	r16, 0x00	; 0
     13c:	0c bf       	out	0x3c, r16	; 60

0000013e <__do_copy_data>:
     13e:	12 e0       	ldi	r17, 0x02	; 2
     140:	a0 e0       	ldi	r26, 0x00	; 0
     142:	b2 e0       	ldi	r27, 0x02	; 2
     144:	e0 e4       	ldi	r30, 0x40	; 64
     146:	f1 e1       	ldi	r31, 0x11	; 17
     148:	00 e0       	ldi	r16, 0x00	; 0
     14a:	0b bf       	out	0x3b, r16	; 59
     14c:	02 c0       	rjmp	.+4      	; 0x152 <__do_copy_data+0x14>
     14e:	07 90       	elpm	r0, Z+
     150:	0d 92       	st	X+, r0
     152:	a2 3b       	cpi	r26, 0xB2	; 178
     154:	b1 07       	cpc	r27, r17
     156:	d9 f7       	brne	.-10     	; 0x14e <__do_copy_data+0x10>

00000158 <__do_clear_bss>:
     158:	22 e0       	ldi	r18, 0x02	; 2
     15a:	a2 eb       	ldi	r26, 0xB2	; 178
     15c:	b2 e0       	ldi	r27, 0x02	; 2
     15e:	01 c0       	rjmp	.+2      	; 0x162 <.do_clear_bss_start>

00000160 <.do_clear_bss_loop>:
     160:	1d 92       	st	X+, r1

00000162 <.do_clear_bss_start>:
     162:	a1 3f       	cpi	r26, 0xF1	; 241
     164:	b2 07       	cpc	r27, r18
     166:	e1 f7       	brne	.-8      	; 0x160 <.do_clear_bss_loop>
     168:	4e d3       	rcall	.+1692   	; 0x806 <main>
     16a:	e8 c7       	rjmp	.+4048   	; 0x113c <_exit>

0000016c <__bad_interrupt>:
     16c:	49 cf       	rjmp	.-366    	; 0x0 <__vectors>

0000016e <init_s>:
**/
static uint16_t init_s(uint32_t SCL_f ,bool enable_interrupt) //freq is given in Hz
{
	
	//no internal pull up implemented so far
if (SCL_f <= 400000)
     16e:	61 38       	cpi	r22, 0x81	; 129
     170:	2a e1       	ldi	r18, 0x1A	; 26
     172:	72 07       	cpc	r23, r18
     174:	26 e0       	ldi	r18, 0x06	; 6
     176:	82 07       	cpc	r24, r18
     178:	91 05       	cpc	r25, r1
     17a:	08 f0       	brcs	.+2      	; 0x17e <init_s+0x10>
     17c:	4c c0       	rjmp	.+152    	; 0x216 <init_s+0xa8>
	{
		//enable TWI clock module 
	PRR0&=~(1<<PRTWI);
     17e:	e4 e6       	ldi	r30, 0x64	; 100
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	20 81       	ld	r18, Z
     184:	2f 77       	andi	r18, 0x7F	; 127
     186:	20 83       	st	Z, r18
	
	//enable TWI
	TWCR|=(1<<TWEN);	
     188:	ec eb       	ldi	r30, 0xBC	; 188
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	20 81       	ld	r18, Z
     18e:	24 60       	ori	r18, 0x04	; 4
     190:	20 83       	st	Z, r18
	
	//enable interrupt
	int_is_enabled=enable_interrupt;
     192:	40 93 b4 02 	sts	0x02B4, r20	; 0x8002b4 <int_is_enabled>
	if (int_is_enabled)
     196:	44 23       	and	r20, r20
     198:	19 f0       	breq	.+6      	; 0x1a0 <init_s+0x32>
	{
		TWCR|=(1<<TWIE);
     19a:	20 81       	ld	r18, Z
     19c:	21 60       	ori	r18, 0x01	; 1
     19e:	20 83       	st	Z, r18
	
	//constants pre calculated from mathcad 
	uint16_t TWBR_1=1;
	
	
	if(SCL_f==400000)
     1a0:	60 38       	cpi	r22, 0x80	; 128
     1a2:	2a e1       	ldi	r18, 0x1A	; 26
     1a4:	72 07       	cpc	r23, r18
     1a6:	26 e0       	ldi	r18, 0x06	; 6
     1a8:	82 07       	cpc	r24, r18
     1aa:	91 05       	cpc	r25, r1
     1ac:	d9 f0       	breq	.+54     	; 0x1e4 <init_s+0x76>
	{
		TWBR_1= 3;
	}
	else if(SCL_f>=333333)
     1ae:	65 31       	cpi	r22, 0x15	; 21
     1b0:	26 e1       	ldi	r18, 0x16	; 22
     1b2:	72 07       	cpc	r23, r18
     1b4:	25 e0       	ldi	r18, 0x05	; 5
     1b6:	82 07       	cpc	r24, r18
     1b8:	91 05       	cpc	r25, r1
     1ba:	b8 f4       	brcc	.+46     	; 0x1ea <init_s+0x7c>
	{
		TWBR_1= 4;
	}
	else if(SCL_f>=5000)
     1bc:	68 38       	cpi	r22, 0x88	; 136
     1be:	23 e1       	ldi	r18, 0x13	; 19
     1c0:	72 07       	cpc	r23, r18
     1c2:	81 05       	cpc	r24, r1
     1c4:	91 05       	cpc	r25, r1
     1c6:	a0 f4       	brcc	.+40     	; 0x1f0 <init_s+0x82>
	{
		TWBR_1= 398;
	}
	else if(SCL_f>=2000)
     1c8:	60 3d       	cpi	r22, 0xD0	; 208
     1ca:	27 e0       	ldi	r18, 0x07	; 7
     1cc:	72 07       	cpc	r23, r18
     1ce:	81 05       	cpc	r24, r1
     1d0:	91 05       	cpc	r25, r1
     1d2:	88 f4       	brcc	.+34     	; 0x1f6 <init_s+0x88>
	{
		TWBR_1= 1998;
	}
	else if(SCL_f>=1000)
     1d4:	68 3e       	cpi	r22, 0xE8	; 232
     1d6:	73 40       	sbci	r23, 0x03	; 3
     1d8:	81 05       	cpc	r24, r1
     1da:	91 05       	cpc	r25, r1
     1dc:	78 f0       	brcs	.+30     	; 0x1fc <init_s+0x8e>
	{
		TWBR_1= 998;
     1de:	86 ee       	ldi	r24, 0xE6	; 230
     1e0:	93 e0       	ldi	r25, 0x03	; 3
     1e2:	0e c0       	rjmp	.+28     	; 0x200 <init_s+0x92>
	uint16_t TWBR_1=1;
	
	
	if(SCL_f==400000)
	{
		TWBR_1= 3;
     1e4:	83 e0       	ldi	r24, 0x03	; 3
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0b c0       	rjmp	.+22     	; 0x200 <init_s+0x92>
	}
	else if(SCL_f>=333333)
	{
		TWBR_1= 4;
     1ea:	84 e0       	ldi	r24, 0x04	; 4
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	08 c0       	rjmp	.+16     	; 0x200 <init_s+0x92>
	}
	else if(SCL_f>=5000)
	{
		TWBR_1= 398;
     1f0:	8e e8       	ldi	r24, 0x8E	; 142
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	05 c0       	rjmp	.+10     	; 0x200 <init_s+0x92>
	}
	else if(SCL_f>=2000)
	{
		TWBR_1= 1998;
     1f6:	8e ec       	ldi	r24, 0xCE	; 206
     1f8:	97 e0       	ldi	r25, 0x07	; 7
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <init_s+0x92>
	{
		TWCR|=(1<<TWIE);
	}
	
	//constants pre calculated from mathcad 
	uint16_t TWBR_1=1;
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
	else if(SCL_f>=1000)
	{
		TWBR_1= 998;
	}

	TWSR&=~(1<<TWPS0);
     200:	e9 eb       	ldi	r30, 0xB9	; 185
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	20 81       	ld	r18, Z
     206:	2e 7f       	andi	r18, 0xFE	; 254
     208:	20 83       	st	Z, r18
	TWSR&=~(1<<TWPS1);
     20a:	20 81       	ld	r18, Z
     20c:	2d 7f       	andi	r18, 0xFD	; 253
     20e:	20 83       	st	Z, r18
	
	
	TWBR = TWBR_1;
     210:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
	return TWBR_1;
     214:	08 95       	ret
	}
else
	{
	return 69;
     216:	85 e4       	ldi	r24, 0x45	; 69
     218:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     21a:	08 95       	ret

0000021c <disable_s>:
----------------description-----------------------------------------------------------------
Disables any i2c activity, activity, 'init_s()' does not need to be followed before starting new transfer
-------------function description end-------------------------------------------------------
**/
static void disable_s(void)
{
     21c:	08 95       	ret

0000021e <start_s>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static void start_s(void)
{
	TWCR=0;
     21e:	ec eb       	ldi	r30, 0xBC	; 188
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	10 82       	st	Z, r1
	TWCR |= (1<<TWSTA)|(1<<TWEN)|(1<<TWINT); //TWSTA sends start bit 
     224:	80 81       	ld	r24, Z
     226:	84 6a       	ori	r24, 0xA4	; 164
     228:	80 83       	st	Z, r24

	if (!int_is_enabled)
     22a:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <int_is_enabled>
     22e:	81 11       	cpse	r24, r1
     230:	03 c0       	rjmp	.+6      	; 0x238 <start_s+0x1a>
	{
		while ((TWCR & (1<<TWINT)) == 0)
     232:	80 81       	ld	r24, Z
     234:	88 23       	and	r24, r24
     236:	ec f7       	brge	.-6      	; 0x232 <start_s+0x14>
     238:	08 95       	ret

0000023a <stop_s>:
stops i2c, no polling needed
-------------function description end-------------------------------------------------------
**/
static void stop_s()
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     23a:	84 e9       	ldi	r24, 0x94	; 148
     23c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     240:	08 95       	ret

00000242 <selectMode_s>:
-------------function description end-------------------------------------------------------
**/
static void selectMode_s(uint8_t SLA_addr,I2C_MODE_t p_mode) //SLA_x is SLA+R/W
{
	//must send address now
	if(p_mode==I2C_WRITE_MODE)
     242:	61 11       	cpse	r22, r1
     244:	04 c0       	rjmp	.+8      	; 0x24e <selectMode_s+0xc>
	{
		TWDR=((SLA_addr<<1)&(~0b1));
     246:	88 0f       	add	r24, r24
     248:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     24c:	06 c0       	rjmp	.+12     	; 0x25a <selectMode_s+0x18>
	}
	else if(p_mode==I2C_READ_MODE)
     24e:	61 30       	cpi	r22, 0x01	; 1
     250:	21 f4       	brne	.+8      	; 0x25a <selectMode_s+0x18>
	{
		TWDR=((SLA_addr<<1)|(0b1));
     252:	88 0f       	add	r24, r24
     254:	81 60       	ori	r24, 0x01	; 1
     256:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	}
	TWCR |= (1<<TWINT);
     25a:	ec eb       	ldi	r30, 0xBC	; 188
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	80 68       	ori	r24, 0x80	; 128
     262:	80 83       	st	Z, r24
	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     264:	80 81       	ld	r24, Z
     266:	84 6a       	ori	r24, 0xA4	; 164
     268:	80 83       	st	Z, r24
	if (!int_is_enabled)
     26a:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <int_is_enabled>
     26e:	81 11       	cpse	r24, r1
     270:	03 c0       	rjmp	.+6      	; 0x278 <selectMode_s+0x36>
	{
	  while ((TWCR & (1<<TWINT)) == 0) //poll
     272:	80 81       	ld	r24, Z
     274:	88 23       	and	r24, r24
     276:	ec f7       	brge	.-6      	; 0x272 <selectMode_s+0x30>
     278:	08 95       	ret

0000027a <write_s>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static void write_s(uint8_t data)
{
	TWDR = data;
     27a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT)|(1<<TWEN);
     27e:	84 e8       	ldi	r24, 0x84	; 132
     280:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	if (!int_is_enabled)
     284:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <int_is_enabled>
     288:	81 11       	cpse	r24, r1
     28a:	05 c0       	rjmp	.+10     	; 0x296 <write_s+0x1c>
	{
		while ((TWCR & (1<<TWINT)) == 0)
     28c:	ec eb       	ldi	r30, 0xBC	; 188
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	80 81       	ld	r24, Z
     292:	88 23       	and	r24, r24
     294:	ec f7       	brge	.-6      	; 0x290 <write_s+0x16>
     296:	08 95       	ret

00000298 <read_s>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static uint8_t read_s (bool isLast)
{
	if (!isLast ) //If we want to read more than 1 byte
     298:	81 11       	cpse	r24, r1
     29a:	04 c0       	rjmp	.+8      	; 0x2a4 <read_s+0xc>
	{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     29c:	84 ec       	ldi	r24, 0xC4	; 196
     29e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     2a2:	03 c0       	rjmp	.+6      	; 0x2aa <read_s+0x12>
	}

	else             //If we want to read only one byte
	{
		TWCR = (1<<TWINT) | (1<<TWEN);
     2a4:	84 e8       	ldi	r24, 0x84	; 132
     2a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	}
	
	if (!int_is_enabled)
     2aa:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <int_is_enabled>
     2ae:	81 11       	cpse	r24, r1
     2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <read_s+0x2a>
	{
	  while ((TWCR & (1<<TWINT)) == 0)
     2b2:	ec eb       	ldi	r30, 0xBC	; 188
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	88 23       	and	r24, r24
     2ba:	ec f7       	brge	.-6      	; 0x2b6 <read_s+0x1e>
	  {}
	{}
	return TWDR;
     2bc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     2c0:	08 95       	ret
	}

	return 0;
     2c2:	80 e0       	ldi	r24, 0x00	; 0
}
     2c4:	08 95       	ret

000002c6 <setBusy_s>:

static bool setBusy_s(bool status)
{	
	busy_flag=status;
     2c6:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <__data_end>
	return  busy_flag;
}
     2ca:	08 95       	ret

000002cc <getBusy_s>:


static bool getBusy_s(void)
{
	return busy_flag;
}
     2cc:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <__data_end>
     2d0:	08 95       	ret

000002d2 <getStatus_s>:

static uint8_t getStatus_s(void)
{
	return (TWSR)&(0b11111000);
     2d2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     2d6:	88 7f       	andi	r24, 0xF8	; 248
     2d8:	08 95       	ret

000002da <get_i2c_interface>:
-------------function description end-------------------------------------------------------
**/
i2c_t* get_i2c_interface(void)
{
	
 if (!initialized)
     2da:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <initialized>
     2de:	81 11       	cpse	r24, r1
     2e0:	2d c0       	rjmp	.+90     	; 0x33c <get_i2c_interface+0x62>
 {
	i2c_interface.init				=	init_s;
     2e2:	e5 eb       	ldi	r30, 0xB5	; 181
     2e4:	f2 e0       	ldi	r31, 0x02	; 2
     2e6:	87 eb       	ldi	r24, 0xB7	; 183
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	91 83       	std	Z+1, r25	; 0x01
     2ec:	80 83       	st	Z, r24
	i2c_interface.disable			=	disable_s;
     2ee:	8e e0       	ldi	r24, 0x0E	; 14
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	93 83       	std	Z+3, r25	; 0x03
     2f4:	82 83       	std	Z+2, r24	; 0x02
	i2c_interface.start				=	start_s;
     2f6:	8f e0       	ldi	r24, 0x0F	; 15
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	95 83       	std	Z+5, r25	; 0x05
     2fc:	84 83       	std	Z+4, r24	; 0x04
	i2c_interface.stop				=	stop_s;
     2fe:	8d e1       	ldi	r24, 0x1D	; 29
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	97 83       	std	Z+7, r25	; 0x07
     304:	86 83       	std	Z+6, r24	; 0x06
	i2c_interface.selectmode		=	selectMode_s;
     306:	81 e2       	ldi	r24, 0x21	; 33
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	91 87       	std	Z+9, r25	; 0x09
     30c:	80 87       	std	Z+8, r24	; 0x08
	i2c_interface.write				=	write_s;
     30e:	8d e3       	ldi	r24, 0x3D	; 61
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	93 87       	std	Z+11, r25	; 0x0b
     314:	82 87       	std	Z+10, r24	; 0x0a
	i2c_interface.read				=	read_s;
     316:	8c e4       	ldi	r24, 0x4C	; 76
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	95 87       	std	Z+13, r25	; 0x0d
     31c:	84 87       	std	Z+12, r24	; 0x0c
	i2c_interface.setBusy			=	setBusy_s;
     31e:	83 e6       	ldi	r24, 0x63	; 99
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	97 87       	std	Z+15, r25	; 0x0f
     324:	86 87       	std	Z+14, r24	; 0x0e
	i2c_interface.getBusy			=	getBusy_s;
     326:	86 e6       	ldi	r24, 0x66	; 102
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	91 8b       	std	Z+17, r25	; 0x11
     32c:	80 8b       	std	Z+16, r24	; 0x10
	i2c_interface.getStatus			=	getStatus_s;
     32e:	89 e6       	ldi	r24, 0x69	; 105
     330:	91 e0       	ldi	r25, 0x01	; 1
     332:	93 8b       	std	Z+19, r25	; 0x13
     334:	82 8b       	std	Z+18, r24	; 0x12
	initialized=true;
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <initialized>
	
 }
	return &i2c_interface;
}
     33c:	85 eb       	ldi	r24, 0xB5	; 181
     33e:	92 e0       	ldi	r25, 0x02	; 2
     340:	08 95       	ret

00000342 <InitUART>:
  // Wait for new character received
  while ( (UCSRnA & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDRn;
}
     342:	0f 93       	push	r16
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	ec 01       	movw	r28, r24
     34a:	db 01       	movw	r26, r22
     34c:	ca 01       	movw	r24, r20
     34e:	8c 52       	subi	r24, 0x2C	; 44
     350:	91 40       	sbci	r25, 0x01	; 1
     352:	a1 09       	sbc	r26, r1
     354:	b1 09       	sbc	r27, r1
     356:	85 3d       	cpi	r24, 0xD5	; 213
     358:	90 4c       	sbci	r25, 0xC0	; 192
     35a:	a1 40       	sbci	r26, 0x01	; 1
     35c:	b1 05       	cpc	r27, r1
     35e:	08 f0       	brcs	.+2      	; 0x362 <InitUART+0x20>
     360:	3f c0       	rjmp	.+126    	; 0x3e0 <InitUART+0x9e>
     362:	25 50       	subi	r18, 0x05	; 5
     364:	24 30       	cpi	r18, 0x04	; 4
     366:	e0 f5       	brcc	.+120    	; 0x3e0 <InitUART+0x9e>
     368:	80 e2       	ldi	r24, 0x20	; 32
     36a:	88 83       	st	Y, r24
     36c:	88 e1       	ldi	r24, 0x18	; 24
     36e:	89 83       	std	Y+1, r24	; 0x01
     370:	22 0f       	add	r18, r18
     372:	2a 83       	std	Y+2, r18	; 0x02
     374:	05 34       	cpi	r16, 0x45	; 69
     376:	21 f4       	brne	.+8      	; 0x380 <InitUART+0x3e>
     378:	8a 81       	ldd	r24, Y+2	; 0x02
     37a:	80 62       	ori	r24, 0x20	; 32
     37c:	8a 83       	std	Y+2, r24	; 0x02
     37e:	05 c0       	rjmp	.+10     	; 0x38a <InitUART+0x48>
     380:	0f 34       	cpi	r16, 0x4F	; 79
     382:	19 f4       	brne	.+6      	; 0x38a <InitUART+0x48>
     384:	8a 81       	ldd	r24, Y+2	; 0x02
     386:	80 63       	ori	r24, 0x30	; 48
     388:	8a 83       	std	Y+2, r24	; 0x02
     38a:	db 01       	movw	r26, r22
     38c:	ca 01       	movw	r24, r20
     38e:	80 58       	subi	r24, 0x80	; 128
     390:	9b 47       	sbci	r25, 0x7B	; 123
     392:	a1 4e       	sbci	r26, 0xE1	; 225
     394:	bf 4f       	sbci	r27, 0xFF	; 255
     396:	88 0f       	add	r24, r24
     398:	99 1f       	adc	r25, r25
     39a:	aa 1f       	adc	r26, r26
     39c:	bb 1f       	adc	r27, r27
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	aa 1f       	adc	r26, r26
     3a4:	bb 1f       	adc	r27, r27
     3a6:	88 0f       	add	r24, r24
     3a8:	99 1f       	adc	r25, r25
     3aa:	aa 1f       	adc	r26, r26
     3ac:	bb 1f       	adc	r27, r27
     3ae:	44 0f       	add	r20, r20
     3b0:	55 1f       	adc	r21, r21
     3b2:	66 1f       	adc	r22, r22
     3b4:	77 1f       	adc	r23, r23
     3b6:	44 0f       	add	r20, r20
     3b8:	55 1f       	adc	r21, r21
     3ba:	66 1f       	adc	r22, r22
     3bc:	77 1f       	adc	r23, r23
     3be:	9a 01       	movw	r18, r20
     3c0:	ab 01       	movw	r20, r22
     3c2:	22 0f       	add	r18, r18
     3c4:	33 1f       	adc	r19, r19
     3c6:	44 1f       	adc	r20, r20
     3c8:	55 1f       	adc	r21, r21
     3ca:	22 0f       	add	r18, r18
     3cc:	33 1f       	adc	r19, r19
     3ce:	44 1f       	adc	r20, r20
     3d0:	55 1f       	adc	r21, r21
     3d2:	bc 01       	movw	r22, r24
     3d4:	cd 01       	movw	r24, r26
     3d6:	55 d6       	rcall	.+3242   	; 0x1082 <__udivmodsi4>
     3d8:	21 50       	subi	r18, 0x01	; 1
     3da:	31 09       	sbc	r19, r1
     3dc:	3d 83       	std	Y+5, r19	; 0x05
     3de:	2c 83       	std	Y+4, r18	; 0x04
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	0f 91       	pop	r16
     3e6:	08 95       	ret

000003e8 <SendChar>:
Then send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(unsigned int UART_adr, char Tegn)
{
     3e8:	fc 01       	movw	r30, r24
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRnA & (1<<5)) == 0 )
     3ea:	90 81       	ld	r25, Z
     3ec:	95 ff       	sbrs	r25, 5
     3ee:	fd cf       	rjmp	.-6      	; 0x3ea <SendChar+0x2>
  {}
  // Then send the character
  UDRn = Tegn;
     3f0:	66 83       	std	Z+6, r22	; 0x06
     3f2:	08 95       	ret

000003f4 <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	eb 01       	movw	r28, r22
  // Repeat until zero-termination
  while (*Streng != 0)
     3fe:	68 81       	ld	r22, Y
     400:	66 23       	and	r22, r22
     402:	39 f0       	breq	.+14     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     404:	8c 01       	movw	r16, r24
     406:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
     408:	c8 01       	movw	r24, r16
     40a:	ee df       	rcall	.-36     	; 0x3e8 <SendChar>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
     40c:	69 91       	ld	r22, Y+
     40e:	61 11       	cpse	r22, r1
     410:	fb cf       	rjmp	.-10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
    // Advance the pointer one step
    Streng++;
  }
}
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	08 95       	ret

0000041c <SendInteger>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(unsigned int UART_adr, int Tal)
{
     41c:	0f 93       	push	r16
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
     428:	27 97       	sbiw	r28, 0x07	; 7
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
     434:	8c 01       	movw	r16, r24
     436:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     438:	4a e0       	ldi	r20, 0x0A	; 10
     43a:	be 01       	movw	r22, r28
     43c:	6f 5f       	subi	r22, 0xFF	; 255
     43e:	7f 4f       	sbci	r23, 0xFF	; 255
     440:	4a d6       	rcall	.+3220   	; 0x10d6 <__itoa_ncheck>
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Tal, array, 10);
  // - then send the string
  SendString(UART_adr, array);
     442:	be 01       	movw	r22, r28
     444:	6f 5f       	subi	r22, 0xFF	; 255
     446:	7f 4f       	sbci	r23, 0xFF	; 255
     448:	c8 01       	movw	r24, r16
     44a:	d4 df       	rcall	.-88     	; 0x3f4 <SendString>
}
     44c:	27 96       	adiw	r28, 0x07	; 7
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	f8 94       	cli
     452:	de bf       	out	0x3e, r29	; 62
     454:	0f be       	out	0x3f, r0	; 63
     456:	cd bf       	out	0x3d, r28	; 61
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	08 95       	ret

00000462 <start_s>:
	return &GA_interface; 
}

static uint8_t start_s(void)
{
	i2c->start();
     462:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <i2c>
     466:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <i2c+0x1>
     46a:	04 80       	ldd	r0, Z+4	; 0x04
     46c:	f5 81       	ldd	r31, Z+5	; 0x05
     46e:	e0 2d       	mov	r30, r0
     470:	19 95       	eicall
	{
		//if busy
		return 0;
	}
	**/
}
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	08 95       	ret

00000476 <stop_s>:
static void stop_s(void)
{
	i2c->stop();
     476:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <i2c>
     47a:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <i2c+0x1>
     47e:	06 80       	ldd	r0, Z+6	; 0x06
     480:	f7 81       	ldd	r31, Z+7	; 0x07
     482:	e0 2d       	mov	r30, r0
     484:	19 95       	eicall
     486:	08 95       	ret

00000488 <enterWrite_s>:
}
static void enterWrite_s(void)
{
	
	i2c->selectmode(ADDR_0,I2C_WRITE_MODE);
     488:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <i2c>
     48c:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <i2c+0x1>
     490:	00 84       	ldd	r0, Z+8	; 0x08
     492:	f1 85       	ldd	r31, Z+9	; 0x09
     494:	e0 2d       	mov	r30, r0
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	88 e6       	ldi	r24, 0x68	; 104
     49a:	19 95       	eicall
     49c:	08 95       	ret

0000049e <enterRead_s>:
	
}
static void enterRead_s(void)
{

	i2c->selectmode(ADDR_0,I2C_READ_MODE);
     49e:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <i2c>
     4a2:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <i2c+0x1>
     4a6:	00 84       	ldd	r0, Z+8	; 0x08
     4a8:	f1 85       	ldd	r31, Z+9	; 0x09
     4aa:	e0 2d       	mov	r30, r0
     4ac:	61 e0       	ldi	r22, 0x01	; 1
     4ae:	88 e6       	ldi	r24, 0x68	; 104
     4b0:	19 95       	eicall
     4b2:	08 95       	ret

000004b4 <selectRegister_s>:
	
}
static void selectRegister_s(reg_addr_t reg_addr)
{
	currentAddr=reg_addr;
     4b4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	i2c->write(reg_addr);
     4b8:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <i2c>
     4bc:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <i2c+0x1>
     4c0:	02 84       	ldd	r0, Z+10	; 0x0a
     4c2:	f3 85       	ldd	r31, Z+11	; 0x0b
     4c4:	e0 2d       	mov	r30, r0
     4c6:	19 95       	eicall
     4c8:	08 95       	ret

000004ca <write_s>:
}
static void write_s(uint8_t data)
{
	i2c->write(data);
     4ca:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <i2c>
     4ce:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <i2c+0x1>
     4d2:	02 84       	ldd	r0, Z+10	; 0x0a
     4d4:	f3 85       	ldd	r31, Z+11	; 0x0b
     4d6:	e0 2d       	mov	r30, r0
     4d8:	19 95       	eicall
     4da:	08 95       	ret

000004dc <read_s>:
}
static uint8_t read_s(bool is_last)
{
	int16_t temp=i2c->read(is_last);
     4dc:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <i2c>
     4e0:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <i2c+0x1>
     4e4:	04 84       	ldd	r0, Z+12	; 0x0c
     4e6:	f5 85       	ldd	r31, Z+13	; 0x0d
     4e8:	e0 2d       	mov	r30, r0
     4ea:	19 95       	eicall
     4ec:	28 2f       	mov	r18, r24
     4ee:	a8 2f       	mov	r26, r24
     4f0:	b0 e0       	ldi	r27, 0x00	; 0
	
	switch (currentAddr)
     4f2:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     4f6:	49 2f       	mov	r20, r25
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	fa 01       	movw	r30, r20
     4fc:	fb 97       	sbiw	r30, 0x3b	; 59
     4fe:	ee 30       	cpi	r30, 0x0E	; 14
     500:	f1 05       	cpc	r31, r1
     502:	08 f0       	brcs	.+2      	; 0x506 <read_s+0x2a>
     504:	66 c0       	rjmp	.+204    	; 0x5d2 <read_s+0xf6>
     506:	88 27       	eor	r24, r24
     508:	ee 58       	subi	r30, 0x8E	; 142
     50a:	ff 4f       	sbci	r31, 0xFF	; 255
     50c:	8f 4f       	sbci	r24, 0xFF	; 255
     50e:	db c5       	rjmp	.+2998   	; 0x10c6 <__tablejump2__>
	{
		//accelerometer
		case ACCEL_XOUT_H:
			data_struct.accel_x=temp<<8;
     510:	ed ed       	ldi	r30, 0xDD	; 221
     512:	f2 e0       	ldi	r31, 0x02	; 2
     514:	10 82       	st	Z, r1
     516:	21 83       	std	Z+1, r18	; 0x01
		break;
     518:	5c c0       	rjmp	.+184    	; 0x5d2 <read_s+0xf6>
		
		case ACCEL_XOUT_L:
		data_struct.accel_x|=temp;
     51a:	ed ed       	ldi	r30, 0xDD	; 221
     51c:	f2 e0       	ldi	r31, 0x02	; 2
     51e:	40 81       	ld	r20, Z
     520:	51 81       	ldd	r21, Z+1	; 0x01
     522:	a4 2b       	or	r26, r20
     524:	b5 2b       	or	r27, r21
     526:	b1 83       	std	Z+1, r27	; 0x01
     528:	a0 83       	st	Z, r26
		break;
     52a:	53 c0       	rjmp	.+166    	; 0x5d2 <read_s+0xf6>
		
		case ACCEL_YOUT_H:
			data_struct.accel_y=temp<<8;
     52c:	ed ed       	ldi	r30, 0xDD	; 221
     52e:	f2 e0       	ldi	r31, 0x02	; 2
     530:	12 82       	std	Z+2, r1	; 0x02
     532:	23 83       	std	Z+3, r18	; 0x03
		break;
     534:	4e c0       	rjmp	.+156    	; 0x5d2 <read_s+0xf6>
		
		case ACCEL_YOUT_L:
			data_struct.accel_y|=temp;
     536:	ed ed       	ldi	r30, 0xDD	; 221
     538:	f2 e0       	ldi	r31, 0x02	; 2
     53a:	42 81       	ldd	r20, Z+2	; 0x02
     53c:	53 81       	ldd	r21, Z+3	; 0x03
     53e:	a4 2b       	or	r26, r20
     540:	b5 2b       	or	r27, r21
     542:	b3 83       	std	Z+3, r27	; 0x03
     544:	a2 83       	std	Z+2, r26	; 0x02
		break;
     546:	45 c0       	rjmp	.+138    	; 0x5d2 <read_s+0xf6>
		
		case ACCEL_ZOUT_H:
			data_struct.accel_z=temp<<8;
     548:	ed ed       	ldi	r30, 0xDD	; 221
     54a:	f2 e0       	ldi	r31, 0x02	; 2
     54c:	14 82       	std	Z+4, r1	; 0x04
     54e:	25 83       	std	Z+5, r18	; 0x05
		break;
     550:	40 c0       	rjmp	.+128    	; 0x5d2 <read_s+0xf6>
		
		case ACCEL_ZOUT_L:
			data_struct.accel_z|=temp;
     552:	ed ed       	ldi	r30, 0xDD	; 221
     554:	f2 e0       	ldi	r31, 0x02	; 2
     556:	44 81       	ldd	r20, Z+4	; 0x04
     558:	55 81       	ldd	r21, Z+5	; 0x05
     55a:	a4 2b       	or	r26, r20
     55c:	b5 2b       	or	r27, r21
     55e:	b5 83       	std	Z+5, r27	; 0x05
     560:	a4 83       	std	Z+4, r26	; 0x04
		break;
     562:	37 c0       	rjmp	.+110    	; 0x5d2 <read_s+0xf6>
		
		//temperature
		case TEMP_OUT_H:
			data_struct.temp=temp<<8;
     564:	ed ed       	ldi	r30, 0xDD	; 221
     566:	f2 e0       	ldi	r31, 0x02	; 2
     568:	16 82       	std	Z+6, r1	; 0x06
     56a:	27 83       	std	Z+7, r18	; 0x07
		break;
     56c:	32 c0       	rjmp	.+100    	; 0x5d2 <read_s+0xf6>
		
		case TEMP_OUT_L:
			data_struct.temp|=temp;
     56e:	ed ed       	ldi	r30, 0xDD	; 221
     570:	f2 e0       	ldi	r31, 0x02	; 2
     572:	46 81       	ldd	r20, Z+6	; 0x06
     574:	57 81       	ldd	r21, Z+7	; 0x07
     576:	a4 2b       	or	r26, r20
     578:	b5 2b       	or	r27, r21
     57a:	b7 83       	std	Z+7, r27	; 0x07
     57c:	a6 83       	std	Z+6, r26	; 0x06
		break;
     57e:	29 c0       	rjmp	.+82     	; 0x5d2 <read_s+0xf6>
		
		//Gyro
		case GYRO_XOUT_H:
			data_struct.gyro_x=temp<<8;
     580:	ed ed       	ldi	r30, 0xDD	; 221
     582:	f2 e0       	ldi	r31, 0x02	; 2
     584:	10 86       	std	Z+8, r1	; 0x08
     586:	21 87       	std	Z+9, r18	; 0x09
		break;
     588:	24 c0       	rjmp	.+72     	; 0x5d2 <read_s+0xf6>
		
		case GYRO_XOUT_L:
			data_struct.gyro_x|=temp;
     58a:	ed ed       	ldi	r30, 0xDD	; 221
     58c:	f2 e0       	ldi	r31, 0x02	; 2
     58e:	40 85       	ldd	r20, Z+8	; 0x08
     590:	51 85       	ldd	r21, Z+9	; 0x09
     592:	a4 2b       	or	r26, r20
     594:	b5 2b       	or	r27, r21
     596:	b1 87       	std	Z+9, r27	; 0x09
     598:	a0 87       	std	Z+8, r26	; 0x08
		break;
     59a:	1b c0       	rjmp	.+54     	; 0x5d2 <read_s+0xf6>
		
		case GYRO_YOUT_H:
			data_struct.gyro_y=temp<<8;
     59c:	ed ed       	ldi	r30, 0xDD	; 221
     59e:	f2 e0       	ldi	r31, 0x02	; 2
     5a0:	12 86       	std	Z+10, r1	; 0x0a
     5a2:	23 87       	std	Z+11, r18	; 0x0b
		break;
     5a4:	16 c0       	rjmp	.+44     	; 0x5d2 <read_s+0xf6>
		
		case GYRO_YOUT_L:
			data_struct.gyro_y|=temp;
     5a6:	ed ed       	ldi	r30, 0xDD	; 221
     5a8:	f2 e0       	ldi	r31, 0x02	; 2
     5aa:	42 85       	ldd	r20, Z+10	; 0x0a
     5ac:	53 85       	ldd	r21, Z+11	; 0x0b
     5ae:	a4 2b       	or	r26, r20
     5b0:	b5 2b       	or	r27, r21
     5b2:	b3 87       	std	Z+11, r27	; 0x0b
     5b4:	a2 87       	std	Z+10, r26	; 0x0a
		break;
     5b6:	0d c0       	rjmp	.+26     	; 0x5d2 <read_s+0xf6>
			
		case GYRO_ZOUT_H:
			data_struct.gyro_z=temp<<8;
     5b8:	ed ed       	ldi	r30, 0xDD	; 221
     5ba:	f2 e0       	ldi	r31, 0x02	; 2
     5bc:	14 86       	std	Z+12, r1	; 0x0c
     5be:	25 87       	std	Z+13, r18	; 0x0d
		break;
     5c0:	08 c0       	rjmp	.+16     	; 0x5d2 <read_s+0xf6>
				
		case GYRO_ZOUT_L:
			data_struct.gyro_z|=temp;
     5c2:	ed ed       	ldi	r30, 0xDD	; 221
     5c4:	f2 e0       	ldi	r31, 0x02	; 2
     5c6:	44 85       	ldd	r20, Z+12	; 0x0c
     5c8:	55 85       	ldd	r21, Z+13	; 0x0d
     5ca:	a4 2b       	or	r26, r20
     5cc:	b5 2b       	or	r27, r21
     5ce:	b5 87       	std	Z+13, r27	; 0x0d
     5d0:	a4 87       	std	Z+12, r26	; 0x0c
		default:
		//de nada
		break;
	}
	
	currentAddr++;
     5d2:	9f 5f       	subi	r25, 0xFF	; 255
     5d4:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
	//SendInteger(UART0,currentAddr);
	//SendString(UART0,"\n");
return temp;
}
     5d8:	82 2f       	mov	r24, r18
     5da:	08 95       	ret

000005dc <getAccelXYZ_s>:

static void getAccelXYZ_s(int16_t* XYZ)
{
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	ec 01       	movw	r28, r24
XYZ[0]=(int16_t)((data_struct.accel_x)/8.192);
     5e6:	0d ed       	ldi	r16, 0xDD	; 221
     5e8:	12 e0       	ldi	r17, 0x02	; 2
     5ea:	f8 01       	movw	r30, r16
     5ec:	60 81       	ld	r22, Z
     5ee:	71 81       	ldd	r23, Z+1	; 0x01
     5f0:	07 2e       	mov	r0, r23
     5f2:	00 0c       	add	r0, r0
     5f4:	88 0b       	sbc	r24, r24
     5f6:	99 0b       	sbc	r25, r25
     5f8:	cf d3       	rcall	.+1950   	; 0xd98 <__floatsisf>
     5fa:	2f e6       	ldi	r18, 0x6F	; 111
     5fc:	32 e1       	ldi	r19, 0x12	; 18
     5fe:	43 e0       	ldi	r20, 0x03	; 3
     600:	51 e4       	ldi	r21, 0x41	; 65
     602:	2f d3       	rcall	.+1630   	; 0xc62 <__divsf3>
     604:	96 d3       	rcall	.+1836   	; 0xd32 <__fixsfsi>
     606:	79 83       	std	Y+1, r23	; 0x01
     608:	68 83       	st	Y, r22
XYZ[1]=(int16_t)((data_struct.accel_y)/8.192);
     60a:	f8 01       	movw	r30, r16
     60c:	62 81       	ldd	r22, Z+2	; 0x02
     60e:	73 81       	ldd	r23, Z+3	; 0x03
     610:	07 2e       	mov	r0, r23
     612:	00 0c       	add	r0, r0
     614:	88 0b       	sbc	r24, r24
     616:	99 0b       	sbc	r25, r25
     618:	bf d3       	rcall	.+1918   	; 0xd98 <__floatsisf>
     61a:	2f e6       	ldi	r18, 0x6F	; 111
     61c:	32 e1       	ldi	r19, 0x12	; 18
     61e:	43 e0       	ldi	r20, 0x03	; 3
     620:	51 e4       	ldi	r21, 0x41	; 65
     622:	1f d3       	rcall	.+1598   	; 0xc62 <__divsf3>
     624:	86 d3       	rcall	.+1804   	; 0xd32 <__fixsfsi>
     626:	7b 83       	std	Y+3, r23	; 0x03
     628:	6a 83       	std	Y+2, r22	; 0x02
XYZ[2]=(int16_t)((data_struct.accel_z)/8.192);
     62a:	f8 01       	movw	r30, r16
     62c:	64 81       	ldd	r22, Z+4	; 0x04
     62e:	75 81       	ldd	r23, Z+5	; 0x05
     630:	07 2e       	mov	r0, r23
     632:	00 0c       	add	r0, r0
     634:	88 0b       	sbc	r24, r24
     636:	99 0b       	sbc	r25, r25
     638:	af d3       	rcall	.+1886   	; 0xd98 <__floatsisf>
     63a:	2f e6       	ldi	r18, 0x6F	; 111
     63c:	32 e1       	ldi	r19, 0x12	; 18
     63e:	43 e0       	ldi	r20, 0x03	; 3
     640:	51 e4       	ldi	r21, 0x41	; 65
     642:	0f d3       	rcall	.+1566   	; 0xc62 <__divsf3>
     644:	76 d3       	rcall	.+1772   	; 0xd32 <__fixsfsi>
     646:	7d 83       	std	Y+5, r23	; 0x05
     648:	6c 83       	std	Y+4, r22	; 0x04
}
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	08 95       	ret

00000654 <getPitchRoll_s>:

static void getPitchRoll_s(double *pitchRoll)
{	
     654:	4f 92       	push	r4
     656:	5f 92       	push	r5
     658:	6f 92       	push	r6
     65a:	7f 92       	push	r7
     65c:	8f 92       	push	r8
     65e:	9f 92       	push	r9
     660:	af 92       	push	r10
     662:	bf 92       	push	r11
     664:	cf 92       	push	r12
     666:	df 92       	push	r13
     668:	ef 92       	push	r14
     66a:	ff 92       	push	r15
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	00 d0       	rcall	.+0      	; 0x676 <getPitchRoll_s+0x22>
     676:	1f 92       	push	r1
     678:	cd b7       	in	r28, 0x3d	; 61
     67a:	de b7       	in	r29, 0x3e	; 62
     67c:	8c 01       	movw	r16, r24
		pitchRoll[0] = (atan(((data_struct.accel_y)/16384.0) / sqrt(pow(((data_struct.accel_x)/16384.0), 2) + pow(((data_struct.accel_z)/16384), 2))) * PI_DIV_180) - 0.58;
     67e:	60 91 df 02 	lds	r22, 0x02DF	; 0x8002df <data_struct+0x2>
     682:	70 91 e0 02 	lds	r23, 0x02E0	; 0x8002e0 <data_struct+0x3>
     686:	07 2e       	mov	r0, r23
     688:	00 0c       	add	r0, r0
     68a:	88 0b       	sbc	r24, r24
     68c:	99 0b       	sbc	r25, r25
     68e:	84 d3       	rcall	.+1800   	; 0xd98 <__floatsisf>
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	40 e8       	ldi	r20, 0x80	; 128
     696:	58 e3       	ldi	r21, 0x38	; 56
     698:	37 d4       	rcall	.+2158   	; 0xf08 <__mulsf3>
     69a:	6b 01       	movw	r12, r22
     69c:	7c 01       	movw	r14, r24
     69e:	ed ed       	ldi	r30, 0xDD	; 221
     6a0:	f2 e0       	ldi	r31, 0x02	; 2
     6a2:	60 81       	ld	r22, Z
     6a4:	71 81       	ldd	r23, Z+1	; 0x01
     6a6:	07 2e       	mov	r0, r23
     6a8:	00 0c       	add	r0, r0
     6aa:	88 0b       	sbc	r24, r24
     6ac:	99 0b       	sbc	r25, r25
     6ae:	74 d3       	rcall	.+1768   	; 0xd98 <__floatsisf>
     6b0:	4b 01       	movw	r8, r22
     6b2:	5c 01       	movw	r10, r24
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	40 e8       	ldi	r20, 0x80	; 128
     6ba:	58 e3       	ldi	r21, 0x38	; 56
     6bc:	25 d4       	rcall	.+2122   	; 0xf08 <__mulsf3>
     6be:	2b 01       	movw	r4, r22
     6c0:	3c 01       	movw	r6, r24
     6c2:	60 91 e1 02 	lds	r22, 0x02E1	; 0x8002e1 <data_struct+0x4>
     6c6:	70 91 e2 02 	lds	r23, 0x02E2	; 0x8002e2 <data_struct+0x5>
     6ca:	77 23       	and	r23, r23
     6cc:	14 f4       	brge	.+4      	; 0x6d2 <getPitchRoll_s+0x7e>
     6ce:	61 50       	subi	r22, 0x01	; 1
     6d0:	70 4c       	sbci	r23, 0xC0	; 192
     6d2:	77 0f       	add	r23, r23
     6d4:	66 0b       	sbc	r22, r22
     6d6:	77 0f       	add	r23, r23
     6d8:	76 2f       	mov	r23, r22
     6da:	66 1f       	adc	r22, r22
     6dc:	07 2e       	mov	r0, r23
     6de:	00 0c       	add	r0, r0
     6e0:	88 0b       	sbc	r24, r24
     6e2:	99 0b       	sbc	r25, r25
     6e4:	59 d3       	rcall	.+1714   	; 0xd98 <__floatsisf>
     6e6:	9b 01       	movw	r18, r22
     6e8:	ac 01       	movw	r20, r24
     6ea:	0e d4       	rcall	.+2076   	; 0xf08 <__mulsf3>
     6ec:	69 83       	std	Y+1, r22	; 0x01
     6ee:	7a 83       	std	Y+2, r23	; 0x02
     6f0:	8b 83       	std	Y+3, r24	; 0x03
     6f2:	9c 83       	std	Y+4, r25	; 0x04
     6f4:	a3 01       	movw	r20, r6
     6f6:	92 01       	movw	r18, r4
     6f8:	c3 01       	movw	r24, r6
     6fa:	b2 01       	movw	r22, r4
     6fc:	05 d4       	rcall	.+2058   	; 0xf08 <__mulsf3>
     6fe:	29 81       	ldd	r18, Y+1	; 0x01
     700:	3a 81       	ldd	r19, Y+2	; 0x02
     702:	4b 81       	ldd	r20, Y+3	; 0x03
     704:	5c 81       	ldd	r21, Y+4	; 0x04
     706:	21 d2       	rcall	.+1090   	; 0xb4a <__addsf3>
     708:	66 d4       	rcall	.+2252   	; 0xfd6 <sqrt>
     70a:	9b 01       	movw	r18, r22
     70c:	ac 01       	movw	r20, r24
     70e:	c7 01       	movw	r24, r14
     710:	b6 01       	movw	r22, r12
     712:	a7 d2       	rcall	.+1358   	; 0xc62 <__divsf3>
     714:	7e d2       	rcall	.+1276   	; 0xc12 <atan>
     716:	21 ee       	ldi	r18, 0xE1	; 225
     718:	3e e2       	ldi	r19, 0x2E	; 46
     71a:	45 e6       	ldi	r20, 0x65	; 101
     71c:	52 e4       	ldi	r21, 0x42	; 66
     71e:	f4 d3       	rcall	.+2024   	; 0xf08 <__mulsf3>
     720:	21 ee       	ldi	r18, 0xE1	; 225
     722:	3a e7       	ldi	r19, 0x7A	; 122
     724:	44 e1       	ldi	r20, 0x14	; 20
     726:	5f e3       	ldi	r21, 0x3F	; 63
     728:	0f d2       	rcall	.+1054   	; 0xb48 <__subsf3>
     72a:	f8 01       	movw	r30, r16
     72c:	60 83       	st	Z, r22
     72e:	71 83       	std	Z+1, r23	; 0x01
     730:	82 83       	std	Z+2, r24	; 0x02
     732:	93 83       	std	Z+3, r25	; 0x03
	pitchRoll[1] = (atan((-1.0*(data_struct.accel_x)/16384.0) / sqrt(pow(((data_struct.accel_y)/16384.0), 2) + pow(((data_struct.accel_z)/16384), 2))) * PI_DIV_180) + 0.58;
     734:	a7 01       	movw	r20, r14
     736:	96 01       	movw	r18, r12
     738:	c7 01       	movw	r24, r14
     73a:	b6 01       	movw	r22, r12
     73c:	e5 d3       	rcall	.+1994   	; 0xf08 <__mulsf3>
     73e:	29 81       	ldd	r18, Y+1	; 0x01
     740:	3a 81       	ldd	r19, Y+2	; 0x02
     742:	4b 81       	ldd	r20, Y+3	; 0x03
     744:	5c 81       	ldd	r21, Y+4	; 0x04
     746:	01 d2       	rcall	.+1026   	; 0xb4a <__addsf3>
     748:	46 d4       	rcall	.+2188   	; 0xfd6 <sqrt>
     74a:	6b 01       	movw	r12, r22
     74c:	7c 01       	movw	r14, r24
     74e:	c5 01       	movw	r24, r10
     750:	b4 01       	movw	r22, r8
     752:	90 58       	subi	r25, 0x80	; 128
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	40 e8       	ldi	r20, 0x80	; 128
     75a:	58 e3       	ldi	r21, 0x38	; 56
     75c:	d5 d3       	rcall	.+1962   	; 0xf08 <__mulsf3>
     75e:	a7 01       	movw	r20, r14
     760:	96 01       	movw	r18, r12
     762:	7f d2       	rcall	.+1278   	; 0xc62 <__divsf3>
     764:	56 d2       	rcall	.+1196   	; 0xc12 <atan>
     766:	21 ee       	ldi	r18, 0xE1	; 225
     768:	3e e2       	ldi	r19, 0x2E	; 46
     76a:	45 e6       	ldi	r20, 0x65	; 101
     76c:	52 e4       	ldi	r21, 0x42	; 66
     76e:	cc d3       	rcall	.+1944   	; 0xf08 <__mulsf3>
     770:	21 ee       	ldi	r18, 0xE1	; 225
     772:	3a e7       	ldi	r19, 0x7A	; 122
     774:	44 e1       	ldi	r20, 0x14	; 20
     776:	5f e3       	ldi	r21, 0x3F	; 63
     778:	e8 d1       	rcall	.+976    	; 0xb4a <__addsf3>
     77a:	f8 01       	movw	r30, r16
     77c:	64 83       	std	Z+4, r22	; 0x04
     77e:	75 83       	std	Z+5, r23	; 0x05
     780:	86 83       	std	Z+6, r24	; 0x06
     782:	97 83       	std	Z+7, r25	; 0x07
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
}
     78a:	0f 90       	pop	r0
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	ff 90       	pop	r15
     796:	ef 90       	pop	r14
     798:	df 90       	pop	r13
     79a:	cf 90       	pop	r12
     79c:	bf 90       	pop	r11
     79e:	af 90       	pop	r10
     7a0:	9f 90       	pop	r9
     7a2:	8f 90       	pop	r8
     7a4:	7f 90       	pop	r7
     7a6:	6f 90       	pop	r6
     7a8:	5f 90       	pop	r5
     7aa:	4f 90       	pop	r4
     7ac:	08 95       	ret

000007ae <get_GA_interface>:
     7ae:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <i2c+0x1>
     7b2:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <i2c>
	
	if (!initialized)
	{
		i2c=i2c_interface;
		
			GA_interface.start					=	start_s;
     7b6:	e9 ec       	ldi	r30, 0xC9	; 201
     7b8:	f2 e0       	ldi	r31, 0x02	; 2
     7ba:	81 e3       	ldi	r24, 0x31	; 49
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	91 83       	std	Z+1, r25	; 0x01
     7c0:	80 83       	st	Z, r24
			GA_interface.stop					=	stop_s;
     7c2:	8b e3       	ldi	r24, 0x3B	; 59
     7c4:	92 e0       	ldi	r25, 0x02	; 2
     7c6:	93 83       	std	Z+3, r25	; 0x03
     7c8:	82 83       	std	Z+2, r24	; 0x02
			GA_interface.enterWrite				=	enterWrite_s;
     7ca:	84 e4       	ldi	r24, 0x44	; 68
     7cc:	92 e0       	ldi	r25, 0x02	; 2
     7ce:	95 83       	std	Z+5, r25	; 0x05
     7d0:	84 83       	std	Z+4, r24	; 0x04
			GA_interface.enterRead				=	enterRead_s;
     7d2:	8f e4       	ldi	r24, 0x4F	; 79
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	97 83       	std	Z+7, r25	; 0x07
     7d8:	86 83       	std	Z+6, r24	; 0x06
			GA_interface.selectRegister			=	selectRegister_s;
     7da:	8a e5       	ldi	r24, 0x5A	; 90
     7dc:	92 e0       	ldi	r25, 0x02	; 2
     7de:	91 87       	std	Z+9, r25	; 0x09
     7e0:	80 87       	std	Z+8, r24	; 0x08
			GA_interface.write					=	write_s;
     7e2:	85 e6       	ldi	r24, 0x65	; 101
     7e4:	92 e0       	ldi	r25, 0x02	; 2
     7e6:	93 87       	std	Z+11, r25	; 0x0b
     7e8:	82 87       	std	Z+10, r24	; 0x0a
			GA_interface.read					=	read_s;
     7ea:	8e e6       	ldi	r24, 0x6E	; 110
     7ec:	92 e0       	ldi	r25, 0x02	; 2
     7ee:	95 87       	std	Z+13, r25	; 0x0d
     7f0:	84 87       	std	Z+12, r24	; 0x0c
			GA_interface.getPitchRoll 			=	getPitchRoll_s;
     7f2:	8a e2       	ldi	r24, 0x2A	; 42
     7f4:	93 e0       	ldi	r25, 0x03	; 3
     7f6:	97 87       	std	Z+15, r25	; 0x0f
     7f8:	86 87       	std	Z+14, r24	; 0x0e
			GA_interface.getAccelXYZ			=	getAccelXYZ_s;			
     7fa:	8e ee       	ldi	r24, 0xEE	; 238
     7fc:	92 e0       	ldi	r25, 0x02	; 2
     7fe:	91 8b       	std	Z+17, r25	; 0x11
     800:	80 8b       	std	Z+16, r24	; 0x10
	}
	return &GA_interface; 
}
     802:	cf 01       	movw	r24, r30
     804:	08 95       	ret

00000806 <main>:
}
**/
#define UARTADDR UART0

int main(void)
{
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	00 d0       	rcall	.+0      	; 0x80c <main+0x6>
     80c:	00 d0       	rcall	.+0      	; 0x80e <main+0x8>
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     812:	2f ef       	ldi	r18, 0xFF	; 255
     814:	43 ed       	ldi	r20, 0xD3	; 211
     816:	80 e3       	ldi	r24, 0x30	; 48
     818:	21 50       	subi	r18, 0x01	; 1
     81a:	40 40       	sbci	r20, 0x00	; 0
     81c:	80 40       	sbci	r24, 0x00	; 0
     81e:	e1 f7       	brne	.-8      	; 0x818 <main+0x12>
     820:	00 c0       	rjmp	.+0      	; 0x822 <main+0x1c>
     822:	00 00       	nop
     824:	9f ef       	ldi	r25, 0xFF	; 255
     826:	e3 ed       	ldi	r30, 0xD3	; 211
     828:	f0 e3       	ldi	r31, 0x30	; 48
     82a:	91 50       	subi	r25, 0x01	; 1
     82c:	e0 40       	sbci	r30, 0x00	; 0
     82e:	f0 40       	sbci	r31, 0x00	; 0
     830:	e1 f7       	brne	.-8      	; 0x82a <main+0x24>
     832:	00 c0       	rjmp	.+0      	; 0x834 <main+0x2e>
     834:	00 00       	nop
	{
		_delay_ms(1000);
	}
	
	
	InitUART(UARTADDR, 9600, 8,0);
     836:	00 e0       	ldi	r16, 0x00	; 0
     838:	28 e0       	ldi	r18, 0x08	; 8
     83a:	40 e8       	ldi	r20, 0x80	; 128
     83c:	55 e2       	ldi	r21, 0x25	; 37
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	80 ec       	ldi	r24, 0xC0	; 192
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	7d dd       	rcall	.-1286   	; 0x342 <InitUART>
	SendString(UARTADDR,"\n \n \n");
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	72 e0       	ldi	r23, 0x02	; 2
     84c:	80 ec       	ldi	r24, 0xC0	; 192
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	d1 dd       	rcall	.-1118   	; 0x3f4 <SendString>
	SendInteger(UARTADDR,32000);
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	7d e7       	ldi	r23, 0x7D	; 125
     856:	80 ec       	ldi	r24, 0xC0	; 192
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	e0 dd       	rcall	.-1088   	; 0x41c <SendInteger>
	SendString(UARTADDR,"\n");
     85c:	65 e0       	ldi	r22, 0x05	; 5
     85e:	72 e0       	ldi	r23, 0x02	; 2
     860:	80 ec       	ldi	r24, 0xC0	; 192
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	c7 dd       	rcall	.-1138   	; 0x3f4 <SendString>
	SendString(UARTADDR,"creating objects \n");
     866:	67 e0       	ldi	r22, 0x07	; 7
     868:	72 e0       	ldi	r23, 0x02	; 2
     86a:	80 ec       	ldi	r24, 0xC0	; 192
     86c:	90 e0       	ldi	r25, 0x00	; 0
	
	i2c_obj=get_i2c_interface();
     86e:	c2 dd       	rcall	.-1148   	; 0x3f4 <SendString>
     870:	34 dd       	rcall	.-1432   	; 0x2da <get_i2c_interface>
     872:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <i2c_obj+0x1>
     876:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <i2c_obj>
	
	GA_obj=get_GA_interface(i2c_obj);
     87a:	99 df       	rcall	.-206    	; 0x7ae <get_GA_interface>
     87c:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <GA_obj+0x1>
     880:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <GA_obj>
	
	SendString(UARTADDR,"init i2c: ");
     884:	6a e1       	ldi	r22, 0x1A	; 26
     886:	72 e0       	ldi	r23, 0x02	; 2
     888:	80 ec       	ldi	r24, 0xC0	; 192
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	b3 dd       	rcall	.-1178   	; 0x3f4 <SendString>
	SendInteger(UARTADDR,i2c_obj->init(10000,false));
     88e:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <i2c_obj>
     892:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <i2c_obj+0x1>
     896:	01 90       	ld	r0, Z+
     898:	f0 81       	ld	r31, Z
     89a:	e0 2d       	mov	r30, r0
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	60 e1       	ldi	r22, 0x10	; 16
     8a0:	77 e2       	ldi	r23, 0x27	; 39
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	19 95       	eicall
     8a8:	bc 01       	movw	r22, r24
     8aa:	80 ec       	ldi	r24, 0xC0	; 192
     8ac:	90 e0       	ldi	r25, 0x00	; 0
	
	
	
	
	SendString(UARTADDR,"\n start transfer: ");
     8ae:	b6 dd       	rcall	.-1172   	; 0x41c <SendInteger>
     8b0:	65 e2       	ldi	r22, 0x25	; 37
     8b2:	72 e0       	ldi	r23, 0x02	; 2
     8b4:	80 ec       	ldi	r24, 0xC0	; 192
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	9d dd       	rcall	.-1222   	; 0x3f4 <SendString>
	GA_obj->start();
     8ba:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
     8be:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     8c2:	80 81       	ld	r24, Z
     8c4:	91 81       	ldd	r25, Z+1	; 0x01
     8c6:	fc 01       	movw	r30, r24
	SendInteger(UARTADDR,(TWSR)&(0b11111000));
     8c8:	19 95       	eicall
     8ca:	09 eb       	ldi	r16, 0xB9	; 185
     8cc:	10 e0       	ldi	r17, 0x00	; 0
     8ce:	f8 01       	movw	r30, r16
     8d0:	60 81       	ld	r22, Z
     8d2:	68 7f       	andi	r22, 0xF8	; 248
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	80 ec       	ldi	r24, 0xC0	; 192
     8d8:	90 e0       	ldi	r25, 0x00	; 0
	SendString(UARTADDR,"\n enter write: ");
     8da:	a0 dd       	rcall	.-1216   	; 0x41c <SendInteger>
     8dc:	68 e3       	ldi	r22, 0x38	; 56
     8de:	72 e0       	ldi	r23, 0x02	; 2
     8e0:	80 ec       	ldi	r24, 0xC0	; 192
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	87 dd       	rcall	.-1266   	; 0x3f4 <SendString>
	GA_obj->enterWrite();
     8e6:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
     8ea:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     8ee:	04 80       	ldd	r0, Z+4	; 0x04
     8f0:	f5 81       	ldd	r31, Z+5	; 0x05
     8f2:	e0 2d       	mov	r30, r0
	SendInteger(UARTADDR,(TWSR)&(0b11111000));
     8f4:	19 95       	eicall
     8f6:	f8 01       	movw	r30, r16
     8f8:	60 81       	ld	r22, Z
     8fa:	68 7f       	andi	r22, 0xF8	; 248
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	80 ec       	ldi	r24, 0xC0	; 192
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	8c dd       	rcall	.-1256   	; 0x41c <SendInteger>
	SendString(UARTADDR,"\n select reg: ");
     904:	68 e4       	ldi	r22, 0x48	; 72
     906:	72 e0       	ldi	r23, 0x02	; 2
     908:	80 ec       	ldi	r24, 0xC0	; 192
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	73 dd       	rcall	.-1306   	; 0x3f4 <SendString>
     90e:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
	GA_obj->selectRegister(0x6B);
     912:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     916:	00 84       	ldd	r0, Z+8	; 0x08
     918:	f1 85       	ldd	r31, Z+9	; 0x09
     91a:	e0 2d       	mov	r30, r0
     91c:	8b e6       	ldi	r24, 0x6B	; 107
	SendInteger(UARTADDR,(TWSR)&(0b11111000));
     91e:	19 95       	eicall
     920:	f8 01       	movw	r30, r16
     922:	60 81       	ld	r22, Z
     924:	68 7f       	andi	r22, 0xF8	; 248
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	80 ec       	ldi	r24, 0xC0	; 192
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	77 dd       	rcall	.-1298   	; 0x41c <SendInteger>
	SendString(UARTADDR,"\n about to start: ");
     92e:	67 e5       	ldi	r22, 0x57	; 87
     930:	72 e0       	ldi	r23, 0x02	; 2
     932:	80 ec       	ldi	r24, 0xC0	; 192
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	5e dd       	rcall	.-1348   	; 0x3f4 <SendString>
     938:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
	GA_obj->write(0x00);
     93c:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     940:	02 84       	ldd	r0, Z+10	; 0x0a
     942:	f3 85       	ldd	r31, Z+11	; 0x0b
     944:	e0 2d       	mov	r30, r0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	19 95       	eicall
	GA_obj->stop();
     94a:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
     94e:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     952:	02 80       	ldd	r0, Z+2	; 0x02
     954:	f3 81       	ldd	r31, Z+3	; 0x03
     956:	e0 2d       	mov	r30, r0
	SendString(UARTADDR,"\n is reset \n ");
     958:	19 95       	eicall
     95a:	6a e6       	ldi	r22, 0x6A	; 106
     95c:	72 e0       	ldi	r23, 0x02	; 2
     95e:	80 ec       	ldi	r24, 0xC0	; 192
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	48 dd       	rcall	.-1392   	; 0x3f4 <SendString>
	

//Set to +- 4G

	SendString(UARTADDR,"\n start transfer: ");
     964:	65 e2       	ldi	r22, 0x25	; 37
     966:	72 e0       	ldi	r23, 0x02	; 2
     968:	80 ec       	ldi	r24, 0xC0	; 192
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	43 dd       	rcall	.-1402   	; 0x3f4 <SendString>
	GA_obj->start();
     96e:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
     972:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     976:	80 81       	ld	r24, Z
     978:	91 81       	ldd	r25, Z+1	; 0x01
     97a:	fc 01       	movw	r30, r24
	SendInteger(UARTADDR,(TWSR)&(0b11111000));
     97c:	19 95       	eicall
     97e:	f8 01       	movw	r30, r16
     980:	60 81       	ld	r22, Z
     982:	68 7f       	andi	r22, 0xF8	; 248
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	80 ec       	ldi	r24, 0xC0	; 192
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	48 dd       	rcall	.-1392   	; 0x41c <SendInteger>
	SendString(UARTADDR,"\n enter write: ");
     98c:	68 e3       	ldi	r22, 0x38	; 56
     98e:	72 e0       	ldi	r23, 0x02	; 2
     990:	80 ec       	ldi	r24, 0xC0	; 192
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	2f dd       	rcall	.-1442   	; 0x3f4 <SendString>
	GA_obj->enterWrite();
     996:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
     99a:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     99e:	04 80       	ldd	r0, Z+4	; 0x04
     9a0:	f5 81       	ldd	r31, Z+5	; 0x05
     9a2:	e0 2d       	mov	r30, r0
     9a4:	19 95       	eicall
	SendInteger(UARTADDR,(TWSR)&(0b11111000));
     9a6:	f8 01       	movw	r30, r16
     9a8:	60 81       	ld	r22, Z
     9aa:	68 7f       	andi	r22, 0xF8	; 248
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	80 ec       	ldi	r24, 0xC0	; 192
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	34 dd       	rcall	.-1432   	; 0x41c <SendInteger>
	SendString(UARTADDR,"\n select reg: ");
     9b4:	68 e4       	ldi	r22, 0x48	; 72
     9b6:	72 e0       	ldi	r23, 0x02	; 2
     9b8:	80 ec       	ldi	r24, 0xC0	; 192
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	1b dd       	rcall	.-1482   	; 0x3f4 <SendString>
	GA_obj->selectRegister(28);
     9be:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
     9c2:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     9c6:	00 84       	ldd	r0, Z+8	; 0x08
     9c8:	f1 85       	ldd	r31, Z+9	; 0x09
     9ca:	e0 2d       	mov	r30, r0
     9cc:	8c e1       	ldi	r24, 0x1C	; 28
     9ce:	19 95       	eicall
	SendInteger(UARTADDR,(TWSR)&(0b11111000));
     9d0:	f8 01       	movw	r30, r16
     9d2:	60 81       	ld	r22, Z
     9d4:	68 7f       	andi	r22, 0xF8	; 248
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	80 ec       	ldi	r24, 0xC0	; 192
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	1f dd       	rcall	.-1474   	; 0x41c <SendInteger>
     9de:	67 e5       	ldi	r22, 0x57	; 87
	SendString(UARTADDR,"\n about to start: ");
     9e0:	72 e0       	ldi	r23, 0x02	; 2
     9e2:	80 ec       	ldi	r24, 0xC0	; 192
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	06 dd       	rcall	.-1524   	; 0x3f4 <SendString>
     9e8:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
	GA_obj->write(0b00001000);
     9ec:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     9f0:	02 84       	ldd	r0, Z+10	; 0x0a
     9f2:	f3 85       	ldd	r31, Z+11	; 0x0b
     9f4:	e0 2d       	mov	r30, r0
     9f6:	88 e0       	ldi	r24, 0x08	; 8
     9f8:	19 95       	eicall
     9fa:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
	GA_obj->stop();
     9fe:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     a02:	02 80       	ldd	r0, Z+2	; 0x02
     a04:	f3 81       	ldd	r31, Z+3	; 0x03
     a06:	e0 2d       	mov	r30, r0
     a08:	19 95       	eicall
     a0a:	68 e7       	ldi	r22, 0x78	; 120
	SendString(UARTADDR,"\n set to 4g \n ");
     a0c:	72 e0       	ldi	r23, 0x02	; 2
     a0e:	80 ec       	ldi	r24, 0xC0	; 192
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	f0 dc       	rcall	.-1568   	; 0x3f4 <SendString>
     a14:	ff ef       	ldi	r31, 0xFF	; 255
     a16:	24 e3       	ldi	r18, 0x34	; 52
     a18:	4c e0       	ldi	r20, 0x0C	; 12
     a1a:	f1 50       	subi	r31, 0x01	; 1
     a1c:	20 40       	sbci	r18, 0x00	; 0
     a1e:	40 40       	sbci	r20, 0x00	; 0
     a20:	e1 f7       	brne	.-8      	; 0xa1a <main+0x214>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <main+0x21e>
     a24:	00 00       	nop
     a26:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
    while (1) 
    {
	_delay_ms(250);

	//SendString(UARTADDR,"\n start transfer: ");
	GA_obj->start();
     a2a:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     a2e:	01 90       	ld	r0, Z+
     a30:	f0 81       	ld	r31, Z
     a32:	e0 2d       	mov	r30, r0
     a34:	19 95       	eicall
     a36:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
	
	//SendInteger(UARTADDR,(TWSR)&(0b11111000));
	//SendString(UARTADDR,"\n enter write: ");
	GA_obj->enterWrite();
     a3a:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     a3e:	04 80       	ldd	r0, Z+4	; 0x04
     a40:	f5 81       	ldd	r31, Z+5	; 0x05
     a42:	e0 2d       	mov	r30, r0
     a44:	19 95       	eicall
     a46:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
	//SendInteger(UARTADDR,(TWSR)&(0b11111000));
	//SendString(UARTADDR,"\n select reg: ");
	GA_obj->selectRegister(ACCEL_XOUT_H);
     a4a:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     a4e:	00 84       	ldd	r0, Z+8	; 0x08
     a50:	f1 85       	ldd	r31, Z+9	; 0x09
     a52:	e0 2d       	mov	r30, r0
     a54:	8b e3       	ldi	r24, 0x3B	; 59
     a56:	19 95       	eicall
     a58:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
	//SendInteger(UARTADDR,(TWSR)&(0b11111000));
	//SendString(UARTADDR,"\n about to start: ");
	GA_obj->start();
     a5c:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     a60:	01 90       	ld	r0, Z+
     a62:	f0 81       	ld	r31, Z
     a64:	e0 2d       	mov	r30, r0
     a66:	19 95       	eicall
     a68:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
	//SendInteger(UARTADDR,(TWSR)&(0b11111000));
	//SendString(UARTADDR,"\n enter read: ");
	GA_obj->enterRead();
     a6c:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     a70:	06 80       	ldd	r0, Z+6	; 0x06
     a72:	f7 81       	ldd	r31, Z+7	; 0x07
     a74:	e0 2d       	mov	r30, r0
     a76:	19 95       	eicall
     a78:	0d e0       	ldi	r16, 0x0D	; 13
     a7a:	10 e0       	ldi	r17, 0x00	; 0
     a7c:	29 c0       	rjmp	.+82     	; 0xad0 <main+0x2ca>
     a7e:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
	//uint16_t data[13];
	for(i=0;i<14;++i)
	{
		if(i==13)
		{
			GA_obj->read(true);
     a82:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     a86:	04 84       	ldd	r0, Z+12	; 0x0c
     a88:	f5 85       	ldd	r31, Z+13	; 0x0d
     a8a:	e0 2d       	mov	r30, r0
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	19 95       	eicall
     a90:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
		else
		{
			GA_obj->read(false);
		}
	}
	GA_obj->stop();
     a94:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     a98:	02 80       	ldd	r0, Z+2	; 0x02
     a9a:	f3 81       	ldd	r31, Z+3	; 0x03
     a9c:	e0 2d       	mov	r30, r0
     a9e:	19 95       	eicall
     aa0:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
    int16_t data[3];
	//char outstring[10];
	GA_obj->getAccelXYZ(data);
     aa4:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     aa8:	00 88       	ldd	r0, Z+16	; 0x10
     aaa:	f1 89       	ldd	r31, Z+17	; 0x11
     aac:	e0 2d       	mov	r30, r0
     aae:	ce 01       	movw	r24, r28
     ab0:	01 96       	adiw	r24, 0x01	; 1
     ab2:	19 95       	eicall
     ab4:	65 e0       	ldi	r22, 0x05	; 5
	SendInteger(UARTADDR,data[1]);	
	SendString(UARTADDR,",");
	SendInteger(UARTADDR,data[2]);	
	SendString(UARTADDR,"\n");
**/
SendString(UARTADDR,"\n");
     ab6:	72 e0       	ldi	r23, 0x02	; 2
     ab8:	80 ec       	ldi	r24, 0xC0	; 192
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	9b dc       	rcall	.-1738   	; 0x3f4 <SendString>
     abe:	8d 81       	ldd	r24, Y+5	; 0x05
     ac0:	9e 81       	ldd	r25, Y+6	; 0x06

if (data[2]>3800 ||data[2]<(-3800))
     ac2:	9c 01       	movw	r18, r24
     ac4:	28 52       	subi	r18, 0x28	; 40
     ac6:	31 4f       	sbci	r19, 0xF1	; 241
     ac8:	21 3b       	cpi	r18, 0xB1	; 177
     aca:	3d 41       	sbci	r19, 0x1D	; 29
     acc:	a0 f0       	brcs	.+40     	; 0xaf6 <main+0x2f0>
     ace:	0d c0       	rjmp	.+26     	; 0xaea <main+0x2e4>
     ad0:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
		{
			GA_obj->read(true);
		}
		else
		{
			GA_obj->read(false);
     ad4:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     ad8:	04 84       	ldd	r0, Z+12	; 0x0c
     ada:	f5 85       	ldd	r31, Z+13	; 0x0d
     adc:	e0 2d       	mov	r30, r0
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	19 95       	eicall
     ae2:	01 50       	subi	r16, 0x01	; 1
     ae4:	11 09       	sbc	r17, r1
	
	
	//uint16_t data[13];
	for(i=0;i<14;++i)
	{
		if(i==13)
     ae6:	a1 f7       	brne	.-24     	; 0xad0 <main+0x2ca>
     ae8:	ca cf       	rjmp	.-108    	; 0xa7e <main+0x278>
**/
SendString(UARTADDR,"\n");

if (data[2]>3800 ||data[2]<(-3800))
{
	SendString(UARTADDR,"8======D~~~ ~ ~~  ");
     aea:	67 e8       	ldi	r22, 0x87	; 135
     aec:	72 e0       	ldi	r23, 0x02	; 2
     aee:	80 ec       	ldi	r24, 0xC0	; 192
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	80 dc       	rcall	.-1792   	; 0x3f4 <SendString>
     af4:	8f cf       	rjmp	.-226    	; 0xa14 <main+0x20e>
} 
else if (data[2]>3000 ||data[2]<(-3000))
     af6:	9c 01       	movw	r18, r24
     af8:	28 54       	subi	r18, 0x48	; 72
     afa:	34 4f       	sbci	r19, 0xF4	; 244
     afc:	21 37       	cpi	r18, 0x71	; 113
     afe:	37 41       	sbci	r19, 0x17	; 23
     b00:	30 f0       	brcs	.+12     	; 0xb0e <main+0x308>
{
	SendString(UARTADDR,"8=====D");	
     b02:	6a e9       	ldi	r22, 0x9A	; 154
     b04:	72 e0       	ldi	r23, 0x02	; 2
     b06:	80 ec       	ldi	r24, 0xC0	; 192
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	74 dc       	rcall	.-1816   	; 0x3f4 <SendString>
     b0c:	83 cf       	rjmp	.-250    	; 0xa14 <main+0x20e>
}
else if(data[2]>2000 ||data[2]<(-2000))
     b0e:	9c 01       	movw	r18, r24
     b10:	20 53       	subi	r18, 0x30	; 48
     b12:	38 4f       	sbci	r19, 0xF8	; 248
     b14:	21 3a       	cpi	r18, 0xA1	; 161
     b16:	3f 40       	sbci	r19, 0x0F	; 15
     b18:	30 f0       	brcs	.+12     	; 0xb26 <main+0x320>
{
	SendString(UARTADDR,"8===D");	
     b1a:	62 ea       	ldi	r22, 0xA2	; 162
     b1c:	72 e0       	ldi	r23, 0x02	; 2
     b1e:	80 ec       	ldi	r24, 0xC0	; 192
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	68 dc       	rcall	.-1840   	; 0x3f4 <SendString>
     b24:	77 cf       	rjmp	.-274    	; 0xa14 <main+0x20e>
     b26:	80 5e       	subi	r24, 0xE0	; 224
}
else if (data[2]>800 ||data[2]<(-800))
     b28:	9c 4f       	sbci	r25, 0xFC	; 252
     b2a:	81 34       	cpi	r24, 0x41	; 65
     b2c:	96 40       	sbci	r25, 0x06	; 6
     b2e:	30 f0       	brcs	.+12     	; 0xb3c <main+0x336>
     b30:	68 ea       	ldi	r22, 0xA8	; 168
{
	
	SendString(UARTADDR,"8==D");	
     b32:	72 e0       	ldi	r23, 0x02	; 2
     b34:	80 ec       	ldi	r24, 0xC0	; 192
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	5d dc       	rcall	.-1862   	; 0x3f4 <SendString>
     b3a:	6c cf       	rjmp	.-296    	; 0xa14 <main+0x20e>
     b3c:	6d ea       	ldi	r22, 0xAD	; 173
     b3e:	72 e0       	ldi	r23, 0x02	; 2
}
else
{
	SendString(UARTADDR,"8=D");	
     b40:	80 ec       	ldi	r24, 0xC0	; 192
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	57 dc       	rcall	.-1874   	; 0x3f4 <SendString>
     b46:	66 cf       	rjmp	.-308    	; 0xa14 <main+0x20e>

00000b48 <__subsf3>:
     b48:	50 58       	subi	r21, 0x80	; 128

00000b4a <__addsf3>:
     b4a:	bb 27       	eor	r27, r27
}

    }
     b4c:	aa 27       	eor	r26, r26
     b4e:	0e d0       	rcall	.+28     	; 0xb6c <__addsf3x>
     b50:	9a c1       	rjmp	.+820    	; 0xe86 <__fp_round>
     b52:	8b d1       	rcall	.+790    	; 0xe6a <__fp_pscA>
     b54:	30 f0       	brcs	.+12     	; 0xb62 <__addsf3+0x18>
     b56:	90 d1       	rcall	.+800    	; 0xe78 <__fp_pscB>
     b58:	20 f0       	brcs	.+8      	; 0xb62 <__addsf3+0x18>
     b5a:	31 f4       	brne	.+12     	; 0xb68 <__addsf3+0x1e>
     b5c:	9f 3f       	cpi	r25, 0xFF	; 255
     b5e:	11 f4       	brne	.+4      	; 0xb64 <__addsf3+0x1a>
     b60:	1e f4       	brtc	.+6      	; 0xb68 <__addsf3+0x1e>
     b62:	5b c1       	rjmp	.+694    	; 0xe1a <__fp_nan>
     b64:	0e f4       	brtc	.+2      	; 0xb68 <__addsf3+0x1e>
     b66:	e0 95       	com	r30
     b68:	e7 fb       	bst	r30, 7
     b6a:	51 c1       	rjmp	.+674    	; 0xe0e <__fp_inf>

00000b6c <__addsf3x>:
     b6c:	e9 2f       	mov	r30, r25
     b6e:	9c d1       	rcall	.+824    	; 0xea8 <__fp_split3>
     b70:	80 f3       	brcs	.-32     	; 0xb52 <__addsf3+0x8>
     b72:	ba 17       	cp	r27, r26
     b74:	62 07       	cpc	r22, r18
     b76:	73 07       	cpc	r23, r19
     b78:	84 07       	cpc	r24, r20
     b7a:	95 07       	cpc	r25, r21
     b7c:	18 f0       	brcs	.+6      	; 0xb84 <__addsf3x+0x18>
     b7e:	71 f4       	brne	.+28     	; 0xb9c <__addsf3x+0x30>
     b80:	9e f5       	brtc	.+102    	; 0xbe8 <__addsf3x+0x7c>
     b82:	b4 c1       	rjmp	.+872    	; 0xeec <__fp_zero>
     b84:	0e f4       	brtc	.+2      	; 0xb88 <__addsf3x+0x1c>
     b86:	e0 95       	com	r30
     b88:	0b 2e       	mov	r0, r27
     b8a:	ba 2f       	mov	r27, r26
     b8c:	a0 2d       	mov	r26, r0
     b8e:	0b 01       	movw	r0, r22
     b90:	b9 01       	movw	r22, r18
     b92:	90 01       	movw	r18, r0
     b94:	0c 01       	movw	r0, r24
     b96:	ca 01       	movw	r24, r20
     b98:	a0 01       	movw	r20, r0
     b9a:	11 24       	eor	r1, r1
     b9c:	ff 27       	eor	r31, r31
     b9e:	59 1b       	sub	r21, r25
     ba0:	99 f0       	breq	.+38     	; 0xbc8 <__addsf3x+0x5c>
     ba2:	59 3f       	cpi	r21, 0xF9	; 249
     ba4:	50 f4       	brcc	.+20     	; 0xbba <__addsf3x+0x4e>
     ba6:	50 3e       	cpi	r21, 0xE0	; 224
     ba8:	68 f1       	brcs	.+90     	; 0xc04 <__addsf3x+0x98>
     baa:	1a 16       	cp	r1, r26
     bac:	f0 40       	sbci	r31, 0x00	; 0
     bae:	a2 2f       	mov	r26, r18
     bb0:	23 2f       	mov	r18, r19
     bb2:	34 2f       	mov	r19, r20
     bb4:	44 27       	eor	r20, r20
     bb6:	58 5f       	subi	r21, 0xF8	; 248
     bb8:	f3 cf       	rjmp	.-26     	; 0xba0 <__addsf3x+0x34>
     bba:	46 95       	lsr	r20
     bbc:	37 95       	ror	r19
     bbe:	27 95       	ror	r18
     bc0:	a7 95       	ror	r26
     bc2:	f0 40       	sbci	r31, 0x00	; 0
     bc4:	53 95       	inc	r21
     bc6:	c9 f7       	brne	.-14     	; 0xbba <__addsf3x+0x4e>
     bc8:	7e f4       	brtc	.+30     	; 0xbe8 <__addsf3x+0x7c>
     bca:	1f 16       	cp	r1, r31
     bcc:	ba 0b       	sbc	r27, r26
     bce:	62 0b       	sbc	r22, r18
     bd0:	73 0b       	sbc	r23, r19
     bd2:	84 0b       	sbc	r24, r20
     bd4:	ba f0       	brmi	.+46     	; 0xc04 <__addsf3x+0x98>
     bd6:	91 50       	subi	r25, 0x01	; 1
     bd8:	a1 f0       	breq	.+40     	; 0xc02 <__addsf3x+0x96>
     bda:	ff 0f       	add	r31, r31
     bdc:	bb 1f       	adc	r27, r27
     bde:	66 1f       	adc	r22, r22
     be0:	77 1f       	adc	r23, r23
     be2:	88 1f       	adc	r24, r24
     be4:	c2 f7       	brpl	.-16     	; 0xbd6 <__addsf3x+0x6a>
     be6:	0e c0       	rjmp	.+28     	; 0xc04 <__addsf3x+0x98>
     be8:	ba 0f       	add	r27, r26
     bea:	62 1f       	adc	r22, r18
     bec:	73 1f       	adc	r23, r19
     bee:	84 1f       	adc	r24, r20
     bf0:	48 f4       	brcc	.+18     	; 0xc04 <__addsf3x+0x98>
     bf2:	87 95       	ror	r24
     bf4:	77 95       	ror	r23
     bf6:	67 95       	ror	r22
     bf8:	b7 95       	ror	r27
     bfa:	f7 95       	ror	r31
     bfc:	9e 3f       	cpi	r25, 0xFE	; 254
     bfe:	08 f0       	brcs	.+2      	; 0xc02 <__addsf3x+0x96>
     c00:	b3 cf       	rjmp	.-154    	; 0xb68 <__addsf3+0x1e>
     c02:	93 95       	inc	r25
     c04:	88 0f       	add	r24, r24
     c06:	08 f0       	brcs	.+2      	; 0xc0a <__addsf3x+0x9e>
     c08:	99 27       	eor	r25, r25
     c0a:	ee 0f       	add	r30, r30
     c0c:	97 95       	ror	r25
     c0e:	87 95       	ror	r24
     c10:	08 95       	ret

00000c12 <atan>:
     c12:	df 93       	push	r29
     c14:	dd 27       	eor	r29, r29
     c16:	b9 2f       	mov	r27, r25
     c18:	bf 77       	andi	r27, 0x7F	; 127
     c1a:	40 e8       	ldi	r20, 0x80	; 128
     c1c:	5f e3       	ldi	r21, 0x3F	; 63
     c1e:	16 16       	cp	r1, r22
     c20:	17 06       	cpc	r1, r23
     c22:	48 07       	cpc	r20, r24
     c24:	5b 07       	cpc	r21, r27
     c26:	10 f4       	brcc	.+4      	; 0xc2c <atan+0x1a>
     c28:	d9 2f       	mov	r29, r25
     c2a:	67 d1       	rcall	.+718    	; 0xefa <inverse>
     c2c:	9f 93       	push	r25
     c2e:	8f 93       	push	r24
     c30:	7f 93       	push	r23
     c32:	6f 93       	push	r22
     c34:	0e d2       	rcall	.+1052   	; 0x1052 <square>
     c36:	e0 e0       	ldi	r30, 0x00	; 0
     c38:	f1 e0       	ldi	r31, 0x01	; 1
     c3a:	f2 d0       	rcall	.+484    	; 0xe20 <__fp_powser>
     c3c:	24 d1       	rcall	.+584    	; 0xe86 <__fp_round>
     c3e:	2f 91       	pop	r18
     c40:	3f 91       	pop	r19
     c42:	4f 91       	pop	r20
     c44:	5f 91       	pop	r21
     c46:	6c d1       	rcall	.+728    	; 0xf20 <__mulsf3x>
     c48:	dd 23       	and	r29, r29
     c4a:	49 f0       	breq	.+18     	; 0xc5e <atan+0x4c>
     c4c:	90 58       	subi	r25, 0x80	; 128
     c4e:	a2 ea       	ldi	r26, 0xA2	; 162
     c50:	2a ed       	ldi	r18, 0xDA	; 218
     c52:	3f e0       	ldi	r19, 0x0F	; 15
     c54:	49 ec       	ldi	r20, 0xC9	; 201
     c56:	5f e3       	ldi	r21, 0x3F	; 63
     c58:	d0 78       	andi	r29, 0x80	; 128
     c5a:	5d 27       	eor	r21, r29
     c5c:	87 df       	rcall	.-242    	; 0xb6c <__addsf3x>
     c5e:	df 91       	pop	r29
     c60:	12 c1       	rjmp	.+548    	; 0xe86 <__fp_round>

00000c62 <__divsf3>:
     c62:	0c d0       	rcall	.+24     	; 0xc7c <__divsf3x>
     c64:	10 c1       	rjmp	.+544    	; 0xe86 <__fp_round>
     c66:	08 d1       	rcall	.+528    	; 0xe78 <__fp_pscB>
     c68:	40 f0       	brcs	.+16     	; 0xc7a <__divsf3+0x18>
     c6a:	ff d0       	rcall	.+510    	; 0xe6a <__fp_pscA>
     c6c:	30 f0       	brcs	.+12     	; 0xc7a <__divsf3+0x18>
     c6e:	21 f4       	brne	.+8      	; 0xc78 <__divsf3+0x16>
     c70:	5f 3f       	cpi	r21, 0xFF	; 255
     c72:	19 f0       	breq	.+6      	; 0xc7a <__divsf3+0x18>
     c74:	cc c0       	rjmp	.+408    	; 0xe0e <__fp_inf>
     c76:	51 11       	cpse	r21, r1
     c78:	3a c1       	rjmp	.+628    	; 0xeee <__fp_szero>
     c7a:	cf c0       	rjmp	.+414    	; 0xe1a <__fp_nan>

00000c7c <__divsf3x>:
     c7c:	15 d1       	rcall	.+554    	; 0xea8 <__fp_split3>
     c7e:	98 f3       	brcs	.-26     	; 0xc66 <__divsf3+0x4>

00000c80 <__divsf3_pse>:
     c80:	99 23       	and	r25, r25
     c82:	c9 f3       	breq	.-14     	; 0xc76 <__divsf3+0x14>
     c84:	55 23       	and	r21, r21
     c86:	b1 f3       	breq	.-20     	; 0xc74 <__divsf3+0x12>
     c88:	95 1b       	sub	r25, r21
     c8a:	55 0b       	sbc	r21, r21
     c8c:	bb 27       	eor	r27, r27
     c8e:	aa 27       	eor	r26, r26
     c90:	62 17       	cp	r22, r18
     c92:	73 07       	cpc	r23, r19
     c94:	84 07       	cpc	r24, r20
     c96:	38 f0       	brcs	.+14     	; 0xca6 <__divsf3_pse+0x26>
     c98:	9f 5f       	subi	r25, 0xFF	; 255
     c9a:	5f 4f       	sbci	r21, 0xFF	; 255
     c9c:	22 0f       	add	r18, r18
     c9e:	33 1f       	adc	r19, r19
     ca0:	44 1f       	adc	r20, r20
     ca2:	aa 1f       	adc	r26, r26
     ca4:	a9 f3       	breq	.-22     	; 0xc90 <__divsf3_pse+0x10>
     ca6:	33 d0       	rcall	.+102    	; 0xd0e <__divsf3_pse+0x8e>
     ca8:	0e 2e       	mov	r0, r30
     caa:	3a f0       	brmi	.+14     	; 0xcba <__divsf3_pse+0x3a>
     cac:	e0 e8       	ldi	r30, 0x80	; 128
     cae:	30 d0       	rcall	.+96     	; 0xd10 <__divsf3_pse+0x90>
     cb0:	91 50       	subi	r25, 0x01	; 1
     cb2:	50 40       	sbci	r21, 0x00	; 0
     cb4:	e6 95       	lsr	r30
     cb6:	00 1c       	adc	r0, r0
     cb8:	ca f7       	brpl	.-14     	; 0xcac <__divsf3_pse+0x2c>
     cba:	29 d0       	rcall	.+82     	; 0xd0e <__divsf3_pse+0x8e>
     cbc:	fe 2f       	mov	r31, r30
     cbe:	27 d0       	rcall	.+78     	; 0xd0e <__divsf3_pse+0x8e>
     cc0:	66 0f       	add	r22, r22
     cc2:	77 1f       	adc	r23, r23
     cc4:	88 1f       	adc	r24, r24
     cc6:	bb 1f       	adc	r27, r27
     cc8:	26 17       	cp	r18, r22
     cca:	37 07       	cpc	r19, r23
     ccc:	48 07       	cpc	r20, r24
     cce:	ab 07       	cpc	r26, r27
     cd0:	b0 e8       	ldi	r27, 0x80	; 128
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <__divsf3_pse+0x56>
     cd4:	bb 0b       	sbc	r27, r27
     cd6:	80 2d       	mov	r24, r0
     cd8:	bf 01       	movw	r22, r30
     cda:	ff 27       	eor	r31, r31
     cdc:	93 58       	subi	r25, 0x83	; 131
     cde:	5f 4f       	sbci	r21, 0xFF	; 255
     ce0:	2a f0       	brmi	.+10     	; 0xcec <__divsf3_pse+0x6c>
     ce2:	9e 3f       	cpi	r25, 0xFE	; 254
     ce4:	51 05       	cpc	r21, r1
     ce6:	68 f0       	brcs	.+26     	; 0xd02 <__divsf3_pse+0x82>
     ce8:	92 c0       	rjmp	.+292    	; 0xe0e <__fp_inf>
     cea:	01 c1       	rjmp	.+514    	; 0xeee <__fp_szero>
     cec:	5f 3f       	cpi	r21, 0xFF	; 255
     cee:	ec f3       	brlt	.-6      	; 0xcea <__divsf3_pse+0x6a>
     cf0:	98 3e       	cpi	r25, 0xE8	; 232
     cf2:	dc f3       	brlt	.-10     	; 0xcea <__divsf3_pse+0x6a>
     cf4:	86 95       	lsr	r24
     cf6:	77 95       	ror	r23
     cf8:	67 95       	ror	r22
     cfa:	b7 95       	ror	r27
     cfc:	f7 95       	ror	r31
     cfe:	9f 5f       	subi	r25, 0xFF	; 255
     d00:	c9 f7       	brne	.-14     	; 0xcf4 <__divsf3_pse+0x74>
     d02:	88 0f       	add	r24, r24
     d04:	91 1d       	adc	r25, r1
     d06:	96 95       	lsr	r25
     d08:	87 95       	ror	r24
     d0a:	97 f9       	bld	r25, 7
     d0c:	08 95       	ret
     d0e:	e1 e0       	ldi	r30, 0x01	; 1
     d10:	66 0f       	add	r22, r22
     d12:	77 1f       	adc	r23, r23
     d14:	88 1f       	adc	r24, r24
     d16:	bb 1f       	adc	r27, r27
     d18:	62 17       	cp	r22, r18
     d1a:	73 07       	cpc	r23, r19
     d1c:	84 07       	cpc	r24, r20
     d1e:	ba 07       	cpc	r27, r26
     d20:	20 f0       	brcs	.+8      	; 0xd2a <__divsf3_pse+0xaa>
     d22:	62 1b       	sub	r22, r18
     d24:	73 0b       	sbc	r23, r19
     d26:	84 0b       	sbc	r24, r20
     d28:	ba 0b       	sbc	r27, r26
     d2a:	ee 1f       	adc	r30, r30
     d2c:	88 f7       	brcc	.-30     	; 0xd10 <__divsf3_pse+0x90>
     d2e:	e0 95       	com	r30
     d30:	08 95       	ret

00000d32 <__fixsfsi>:
     d32:	04 d0       	rcall	.+8      	; 0xd3c <__fixunssfsi>
     d34:	68 94       	set
     d36:	b1 11       	cpse	r27, r1
     d38:	da c0       	rjmp	.+436    	; 0xeee <__fp_szero>
     d3a:	08 95       	ret

00000d3c <__fixunssfsi>:
     d3c:	bd d0       	rcall	.+378    	; 0xeb8 <__fp_splitA>
     d3e:	88 f0       	brcs	.+34     	; 0xd62 <__fixunssfsi+0x26>
     d40:	9f 57       	subi	r25, 0x7F	; 127
     d42:	90 f0       	brcs	.+36     	; 0xd68 <__fixunssfsi+0x2c>
     d44:	b9 2f       	mov	r27, r25
     d46:	99 27       	eor	r25, r25
     d48:	b7 51       	subi	r27, 0x17	; 23
     d4a:	a0 f0       	brcs	.+40     	; 0xd74 <__fixunssfsi+0x38>
     d4c:	d1 f0       	breq	.+52     	; 0xd82 <__fixunssfsi+0x46>
     d4e:	66 0f       	add	r22, r22
     d50:	77 1f       	adc	r23, r23
     d52:	88 1f       	adc	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	1a f0       	brmi	.+6      	; 0xd5e <__fixunssfsi+0x22>
     d58:	ba 95       	dec	r27
     d5a:	c9 f7       	brne	.-14     	; 0xd4e <__fixunssfsi+0x12>
     d5c:	12 c0       	rjmp	.+36     	; 0xd82 <__fixunssfsi+0x46>
     d5e:	b1 30       	cpi	r27, 0x01	; 1
     d60:	81 f0       	breq	.+32     	; 0xd82 <__fixunssfsi+0x46>
     d62:	c4 d0       	rcall	.+392    	; 0xeec <__fp_zero>
     d64:	b1 e0       	ldi	r27, 0x01	; 1
     d66:	08 95       	ret
     d68:	c1 c0       	rjmp	.+386    	; 0xeec <__fp_zero>
     d6a:	67 2f       	mov	r22, r23
     d6c:	78 2f       	mov	r23, r24
     d6e:	88 27       	eor	r24, r24
     d70:	b8 5f       	subi	r27, 0xF8	; 248
     d72:	39 f0       	breq	.+14     	; 0xd82 <__fixunssfsi+0x46>
     d74:	b9 3f       	cpi	r27, 0xF9	; 249
     d76:	cc f3       	brlt	.-14     	; 0xd6a <__fixunssfsi+0x2e>
     d78:	86 95       	lsr	r24
     d7a:	77 95       	ror	r23
     d7c:	67 95       	ror	r22
     d7e:	b3 95       	inc	r27
     d80:	d9 f7       	brne	.-10     	; 0xd78 <__fixunssfsi+0x3c>
     d82:	3e f4       	brtc	.+14     	; 0xd92 <__fixunssfsi+0x56>
     d84:	90 95       	com	r25
     d86:	80 95       	com	r24
     d88:	70 95       	com	r23
     d8a:	61 95       	neg	r22
     d8c:	7f 4f       	sbci	r23, 0xFF	; 255
     d8e:	8f 4f       	sbci	r24, 0xFF	; 255
     d90:	9f 4f       	sbci	r25, 0xFF	; 255
     d92:	08 95       	ret

00000d94 <__floatunsisf>:
     d94:	e8 94       	clt
     d96:	09 c0       	rjmp	.+18     	; 0xdaa <__floatsisf+0x12>

00000d98 <__floatsisf>:
     d98:	97 fb       	bst	r25, 7
     d9a:	3e f4       	brtc	.+14     	; 0xdaa <__floatsisf+0x12>
     d9c:	90 95       	com	r25
     d9e:	80 95       	com	r24
     da0:	70 95       	com	r23
     da2:	61 95       	neg	r22
     da4:	7f 4f       	sbci	r23, 0xFF	; 255
     da6:	8f 4f       	sbci	r24, 0xFF	; 255
     da8:	9f 4f       	sbci	r25, 0xFF	; 255
     daa:	99 23       	and	r25, r25
     dac:	a9 f0       	breq	.+42     	; 0xdd8 <__floatsisf+0x40>
     dae:	f9 2f       	mov	r31, r25
     db0:	96 e9       	ldi	r25, 0x96	; 150
     db2:	bb 27       	eor	r27, r27
     db4:	93 95       	inc	r25
     db6:	f6 95       	lsr	r31
     db8:	87 95       	ror	r24
     dba:	77 95       	ror	r23
     dbc:	67 95       	ror	r22
     dbe:	b7 95       	ror	r27
     dc0:	f1 11       	cpse	r31, r1
     dc2:	f8 cf       	rjmp	.-16     	; 0xdb4 <__floatsisf+0x1c>
     dc4:	fa f4       	brpl	.+62     	; 0xe04 <__floatsisf+0x6c>
     dc6:	bb 0f       	add	r27, r27
     dc8:	11 f4       	brne	.+4      	; 0xdce <__floatsisf+0x36>
     dca:	60 ff       	sbrs	r22, 0
     dcc:	1b c0       	rjmp	.+54     	; 0xe04 <__floatsisf+0x6c>
     dce:	6f 5f       	subi	r22, 0xFF	; 255
     dd0:	7f 4f       	sbci	r23, 0xFF	; 255
     dd2:	8f 4f       	sbci	r24, 0xFF	; 255
     dd4:	9f 4f       	sbci	r25, 0xFF	; 255
     dd6:	16 c0       	rjmp	.+44     	; 0xe04 <__floatsisf+0x6c>
     dd8:	88 23       	and	r24, r24
     dda:	11 f0       	breq	.+4      	; 0xde0 <__floatsisf+0x48>
     ddc:	96 e9       	ldi	r25, 0x96	; 150
     dde:	11 c0       	rjmp	.+34     	; 0xe02 <__floatsisf+0x6a>
     de0:	77 23       	and	r23, r23
     de2:	21 f0       	breq	.+8      	; 0xdec <__floatsisf+0x54>
     de4:	9e e8       	ldi	r25, 0x8E	; 142
     de6:	87 2f       	mov	r24, r23
     de8:	76 2f       	mov	r23, r22
     dea:	05 c0       	rjmp	.+10     	; 0xdf6 <__floatsisf+0x5e>
     dec:	66 23       	and	r22, r22
     dee:	71 f0       	breq	.+28     	; 0xe0c <__floatsisf+0x74>
     df0:	96 e8       	ldi	r25, 0x86	; 134
     df2:	86 2f       	mov	r24, r22
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	2a f0       	brmi	.+10     	; 0xe04 <__floatsisf+0x6c>
     dfa:	9a 95       	dec	r25
     dfc:	66 0f       	add	r22, r22
     dfe:	77 1f       	adc	r23, r23
     e00:	88 1f       	adc	r24, r24
     e02:	da f7       	brpl	.-10     	; 0xdfa <__floatsisf+0x62>
     e04:	88 0f       	add	r24, r24
     e06:	96 95       	lsr	r25
     e08:	87 95       	ror	r24
     e0a:	97 f9       	bld	r25, 7
     e0c:	08 95       	ret

00000e0e <__fp_inf>:
     e0e:	97 f9       	bld	r25, 7
     e10:	9f 67       	ori	r25, 0x7F	; 127
     e12:	80 e8       	ldi	r24, 0x80	; 128
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	08 95       	ret

00000e1a <__fp_nan>:
     e1a:	9f ef       	ldi	r25, 0xFF	; 255
     e1c:	80 ec       	ldi	r24, 0xC0	; 192
     e1e:	08 95       	ret

00000e20 <__fp_powser>:
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	1f 93       	push	r17
     e26:	0f 93       	push	r16
     e28:	ff 92       	push	r15
     e2a:	ef 92       	push	r14
     e2c:	df 92       	push	r13
     e2e:	7b 01       	movw	r14, r22
     e30:	8c 01       	movw	r16, r24
     e32:	68 94       	set
     e34:	05 c0       	rjmp	.+10     	; 0xe40 <__fp_powser+0x20>
     e36:	da 2e       	mov	r13, r26
     e38:	ef 01       	movw	r28, r30
     e3a:	72 d0       	rcall	.+228    	; 0xf20 <__mulsf3x>
     e3c:	fe 01       	movw	r30, r28
     e3e:	e8 94       	clt
     e40:	a5 91       	lpm	r26, Z+
     e42:	25 91       	lpm	r18, Z+
     e44:	35 91       	lpm	r19, Z+
     e46:	45 91       	lpm	r20, Z+
     e48:	55 91       	lpm	r21, Z+
     e4a:	ae f3       	brts	.-22     	; 0xe36 <__fp_powser+0x16>
     e4c:	ef 01       	movw	r28, r30
     e4e:	8e de       	rcall	.-740    	; 0xb6c <__addsf3x>
     e50:	fe 01       	movw	r30, r28
     e52:	97 01       	movw	r18, r14
     e54:	a8 01       	movw	r20, r16
     e56:	da 94       	dec	r13
     e58:	79 f7       	brne	.-34     	; 0xe38 <__fp_powser+0x18>
     e5a:	df 90       	pop	r13
     e5c:	ef 90       	pop	r14
     e5e:	ff 90       	pop	r15
     e60:	0f 91       	pop	r16
     e62:	1f 91       	pop	r17
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <__fp_pscA>:
     e6a:	00 24       	eor	r0, r0
     e6c:	0a 94       	dec	r0
     e6e:	16 16       	cp	r1, r22
     e70:	17 06       	cpc	r1, r23
     e72:	18 06       	cpc	r1, r24
     e74:	09 06       	cpc	r0, r25
     e76:	08 95       	ret

00000e78 <__fp_pscB>:
     e78:	00 24       	eor	r0, r0
     e7a:	0a 94       	dec	r0
     e7c:	12 16       	cp	r1, r18
     e7e:	13 06       	cpc	r1, r19
     e80:	14 06       	cpc	r1, r20
     e82:	05 06       	cpc	r0, r21
     e84:	08 95       	ret

00000e86 <__fp_round>:
     e86:	09 2e       	mov	r0, r25
     e88:	03 94       	inc	r0
     e8a:	00 0c       	add	r0, r0
     e8c:	11 f4       	brne	.+4      	; 0xe92 <__fp_round+0xc>
     e8e:	88 23       	and	r24, r24
     e90:	52 f0       	brmi	.+20     	; 0xea6 <__fp_round+0x20>
     e92:	bb 0f       	add	r27, r27
     e94:	40 f4       	brcc	.+16     	; 0xea6 <__fp_round+0x20>
     e96:	bf 2b       	or	r27, r31
     e98:	11 f4       	brne	.+4      	; 0xe9e <__fp_round+0x18>
     e9a:	60 ff       	sbrs	r22, 0
     e9c:	04 c0       	rjmp	.+8      	; 0xea6 <__fp_round+0x20>
     e9e:	6f 5f       	subi	r22, 0xFF	; 255
     ea0:	7f 4f       	sbci	r23, 0xFF	; 255
     ea2:	8f 4f       	sbci	r24, 0xFF	; 255
     ea4:	9f 4f       	sbci	r25, 0xFF	; 255
     ea6:	08 95       	ret

00000ea8 <__fp_split3>:
     ea8:	57 fd       	sbrc	r21, 7
     eaa:	90 58       	subi	r25, 0x80	; 128
     eac:	44 0f       	add	r20, r20
     eae:	55 1f       	adc	r21, r21
     eb0:	59 f0       	breq	.+22     	; 0xec8 <__fp_splitA+0x10>
     eb2:	5f 3f       	cpi	r21, 0xFF	; 255
     eb4:	71 f0       	breq	.+28     	; 0xed2 <__fp_splitA+0x1a>
     eb6:	47 95       	ror	r20

00000eb8 <__fp_splitA>:
     eb8:	88 0f       	add	r24, r24
     eba:	97 fb       	bst	r25, 7
     ebc:	99 1f       	adc	r25, r25
     ebe:	61 f0       	breq	.+24     	; 0xed8 <__fp_splitA+0x20>
     ec0:	9f 3f       	cpi	r25, 0xFF	; 255
     ec2:	79 f0       	breq	.+30     	; 0xee2 <__fp_splitA+0x2a>
     ec4:	87 95       	ror	r24
     ec6:	08 95       	ret
     ec8:	12 16       	cp	r1, r18
     eca:	13 06       	cpc	r1, r19
     ecc:	14 06       	cpc	r1, r20
     ece:	55 1f       	adc	r21, r21
     ed0:	f2 cf       	rjmp	.-28     	; 0xeb6 <__fp_split3+0xe>
     ed2:	46 95       	lsr	r20
     ed4:	f1 df       	rcall	.-30     	; 0xeb8 <__fp_splitA>
     ed6:	08 c0       	rjmp	.+16     	; 0xee8 <__fp_splitA+0x30>
     ed8:	16 16       	cp	r1, r22
     eda:	17 06       	cpc	r1, r23
     edc:	18 06       	cpc	r1, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	f1 cf       	rjmp	.-30     	; 0xec4 <__fp_splitA+0xc>
     ee2:	86 95       	lsr	r24
     ee4:	71 05       	cpc	r23, r1
     ee6:	61 05       	cpc	r22, r1
     ee8:	08 94       	sec
     eea:	08 95       	ret

00000eec <__fp_zero>:
     eec:	e8 94       	clt

00000eee <__fp_szero>:
     eee:	bb 27       	eor	r27, r27
     ef0:	66 27       	eor	r22, r22
     ef2:	77 27       	eor	r23, r23
     ef4:	cb 01       	movw	r24, r22
     ef6:	97 f9       	bld	r25, 7
     ef8:	08 95       	ret

00000efa <inverse>:
     efa:	9b 01       	movw	r18, r22
     efc:	ac 01       	movw	r20, r24
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	80 e8       	ldi	r24, 0x80	; 128
     f04:	9f e3       	ldi	r25, 0x3F	; 63
     f06:	ad ce       	rjmp	.-678    	; 0xc62 <__divsf3>

00000f08 <__mulsf3>:
     f08:	0b d0       	rcall	.+22     	; 0xf20 <__mulsf3x>
     f0a:	bd cf       	rjmp	.-134    	; 0xe86 <__fp_round>
     f0c:	ae df       	rcall	.-164    	; 0xe6a <__fp_pscA>
     f0e:	28 f0       	brcs	.+10     	; 0xf1a <__mulsf3+0x12>
     f10:	b3 df       	rcall	.-154    	; 0xe78 <__fp_pscB>
     f12:	18 f0       	brcs	.+6      	; 0xf1a <__mulsf3+0x12>
     f14:	95 23       	and	r25, r21
     f16:	09 f0       	breq	.+2      	; 0xf1a <__mulsf3+0x12>
     f18:	7a cf       	rjmp	.-268    	; 0xe0e <__fp_inf>
     f1a:	7f cf       	rjmp	.-258    	; 0xe1a <__fp_nan>
     f1c:	11 24       	eor	r1, r1
     f1e:	e7 cf       	rjmp	.-50     	; 0xeee <__fp_szero>

00000f20 <__mulsf3x>:
     f20:	c3 df       	rcall	.-122    	; 0xea8 <__fp_split3>
     f22:	a0 f3       	brcs	.-24     	; 0xf0c <__mulsf3+0x4>

00000f24 <__mulsf3_pse>:
     f24:	95 9f       	mul	r25, r21
     f26:	d1 f3       	breq	.-12     	; 0xf1c <__mulsf3+0x14>
     f28:	95 0f       	add	r25, r21
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	55 1f       	adc	r21, r21
     f2e:	62 9f       	mul	r22, r18
     f30:	f0 01       	movw	r30, r0
     f32:	72 9f       	mul	r23, r18
     f34:	bb 27       	eor	r27, r27
     f36:	f0 0d       	add	r31, r0
     f38:	b1 1d       	adc	r27, r1
     f3a:	63 9f       	mul	r22, r19
     f3c:	aa 27       	eor	r26, r26
     f3e:	f0 0d       	add	r31, r0
     f40:	b1 1d       	adc	r27, r1
     f42:	aa 1f       	adc	r26, r26
     f44:	64 9f       	mul	r22, r20
     f46:	66 27       	eor	r22, r22
     f48:	b0 0d       	add	r27, r0
     f4a:	a1 1d       	adc	r26, r1
     f4c:	66 1f       	adc	r22, r22
     f4e:	82 9f       	mul	r24, r18
     f50:	22 27       	eor	r18, r18
     f52:	b0 0d       	add	r27, r0
     f54:	a1 1d       	adc	r26, r1
     f56:	62 1f       	adc	r22, r18
     f58:	73 9f       	mul	r23, r19
     f5a:	b0 0d       	add	r27, r0
     f5c:	a1 1d       	adc	r26, r1
     f5e:	62 1f       	adc	r22, r18
     f60:	83 9f       	mul	r24, r19
     f62:	a0 0d       	add	r26, r0
     f64:	61 1d       	adc	r22, r1
     f66:	22 1f       	adc	r18, r18
     f68:	74 9f       	mul	r23, r20
     f6a:	33 27       	eor	r19, r19
     f6c:	a0 0d       	add	r26, r0
     f6e:	61 1d       	adc	r22, r1
     f70:	23 1f       	adc	r18, r19
     f72:	84 9f       	mul	r24, r20
     f74:	60 0d       	add	r22, r0
     f76:	21 1d       	adc	r18, r1
     f78:	82 2f       	mov	r24, r18
     f7a:	76 2f       	mov	r23, r22
     f7c:	6a 2f       	mov	r22, r26
     f7e:	11 24       	eor	r1, r1
     f80:	9f 57       	subi	r25, 0x7F	; 127
     f82:	50 40       	sbci	r21, 0x00	; 0
     f84:	8a f0       	brmi	.+34     	; 0xfa8 <__mulsf3_pse+0x84>
     f86:	e1 f0       	breq	.+56     	; 0xfc0 <__mulsf3_pse+0x9c>
     f88:	88 23       	and	r24, r24
     f8a:	4a f0       	brmi	.+18     	; 0xf9e <__mulsf3_pse+0x7a>
     f8c:	ee 0f       	add	r30, r30
     f8e:	ff 1f       	adc	r31, r31
     f90:	bb 1f       	adc	r27, r27
     f92:	66 1f       	adc	r22, r22
     f94:	77 1f       	adc	r23, r23
     f96:	88 1f       	adc	r24, r24
     f98:	91 50       	subi	r25, 0x01	; 1
     f9a:	50 40       	sbci	r21, 0x00	; 0
     f9c:	a9 f7       	brne	.-22     	; 0xf88 <__mulsf3_pse+0x64>
     f9e:	9e 3f       	cpi	r25, 0xFE	; 254
     fa0:	51 05       	cpc	r21, r1
     fa2:	70 f0       	brcs	.+28     	; 0xfc0 <__mulsf3_pse+0x9c>
     fa4:	34 cf       	rjmp	.-408    	; 0xe0e <__fp_inf>
     fa6:	a3 cf       	rjmp	.-186    	; 0xeee <__fp_szero>
     fa8:	5f 3f       	cpi	r21, 0xFF	; 255
     faa:	ec f3       	brlt	.-6      	; 0xfa6 <__mulsf3_pse+0x82>
     fac:	98 3e       	cpi	r25, 0xE8	; 232
     fae:	dc f3       	brlt	.-10     	; 0xfa6 <__mulsf3_pse+0x82>
     fb0:	86 95       	lsr	r24
     fb2:	77 95       	ror	r23
     fb4:	67 95       	ror	r22
     fb6:	b7 95       	ror	r27
     fb8:	f7 95       	ror	r31
     fba:	e7 95       	ror	r30
     fbc:	9f 5f       	subi	r25, 0xFF	; 255
     fbe:	c1 f7       	brne	.-16     	; 0xfb0 <__mulsf3_pse+0x8c>
     fc0:	fe 2b       	or	r31, r30
     fc2:	88 0f       	add	r24, r24
     fc4:	91 1d       	adc	r25, r1
     fc6:	96 95       	lsr	r25
     fc8:	87 95       	ror	r24
     fca:	97 f9       	bld	r25, 7
     fcc:	08 95       	ret
     fce:	11 f4       	brne	.+4      	; 0xfd4 <__mulsf3_pse+0xb0>
     fd0:	0e f4       	brtc	.+2      	; 0xfd4 <__mulsf3_pse+0xb0>
     fd2:	23 cf       	rjmp	.-442    	; 0xe1a <__fp_nan>
     fd4:	41 c0       	rjmp	.+130    	; 0x1058 <__fp_mpack>

00000fd6 <sqrt>:
     fd6:	70 df       	rcall	.-288    	; 0xeb8 <__fp_splitA>
     fd8:	d0 f3       	brcs	.-12     	; 0xfce <__mulsf3_pse+0xaa>
     fda:	99 23       	and	r25, r25
     fdc:	d9 f3       	breq	.-10     	; 0xfd4 <__mulsf3_pse+0xb0>
     fde:	ce f3       	brts	.-14     	; 0xfd2 <__mulsf3_pse+0xae>
     fe0:	9f 57       	subi	r25, 0x7F	; 127
     fe2:	55 0b       	sbc	r21, r21
     fe4:	87 ff       	sbrs	r24, 7
     fe6:	46 d0       	rcall	.+140    	; 0x1074 <__fp_norm2>
     fe8:	00 24       	eor	r0, r0
     fea:	a0 e6       	ldi	r26, 0x60	; 96
     fec:	40 ea       	ldi	r20, 0xA0	; 160
     fee:	90 01       	movw	r18, r0
     ff0:	80 58       	subi	r24, 0x80	; 128
     ff2:	56 95       	lsr	r21
     ff4:	97 95       	ror	r25
     ff6:	28 f4       	brcc	.+10     	; 0x1002 <sqrt+0x2c>
     ff8:	80 5c       	subi	r24, 0xC0	; 192
     ffa:	66 0f       	add	r22, r22
     ffc:	77 1f       	adc	r23, r23
     ffe:	88 1f       	adc	r24, r24
    1000:	20 f0       	brcs	.+8      	; 0x100a <sqrt+0x34>
    1002:	26 17       	cp	r18, r22
    1004:	37 07       	cpc	r19, r23
    1006:	48 07       	cpc	r20, r24
    1008:	30 f4       	brcc	.+12     	; 0x1016 <sqrt+0x40>
    100a:	62 1b       	sub	r22, r18
    100c:	73 0b       	sbc	r23, r19
    100e:	84 0b       	sbc	r24, r20
    1010:	20 29       	or	r18, r0
    1012:	31 29       	or	r19, r1
    1014:	4a 2b       	or	r20, r26
    1016:	a6 95       	lsr	r26
    1018:	17 94       	ror	r1
    101a:	07 94       	ror	r0
    101c:	20 25       	eor	r18, r0
    101e:	31 25       	eor	r19, r1
    1020:	4a 27       	eor	r20, r26
    1022:	58 f7       	brcc	.-42     	; 0xffa <sqrt+0x24>
    1024:	66 0f       	add	r22, r22
    1026:	77 1f       	adc	r23, r23
    1028:	88 1f       	adc	r24, r24
    102a:	20 f0       	brcs	.+8      	; 0x1034 <sqrt+0x5e>
    102c:	26 17       	cp	r18, r22
    102e:	37 07       	cpc	r19, r23
    1030:	48 07       	cpc	r20, r24
    1032:	30 f4       	brcc	.+12     	; 0x1040 <sqrt+0x6a>
    1034:	62 0b       	sbc	r22, r18
    1036:	73 0b       	sbc	r23, r19
    1038:	84 0b       	sbc	r24, r20
    103a:	20 0d       	add	r18, r0
    103c:	31 1d       	adc	r19, r1
    103e:	41 1d       	adc	r20, r1
    1040:	a0 95       	com	r26
    1042:	81 f7       	brne	.-32     	; 0x1024 <sqrt+0x4e>
    1044:	b9 01       	movw	r22, r18
    1046:	84 2f       	mov	r24, r20
    1048:	91 58       	subi	r25, 0x81	; 129
    104a:	88 0f       	add	r24, r24
    104c:	96 95       	lsr	r25
    104e:	87 95       	ror	r24
    1050:	08 95       	ret

00001052 <square>:
    1052:	9b 01       	movw	r18, r22
    1054:	ac 01       	movw	r20, r24
    1056:	58 cf       	rjmp	.-336    	; 0xf08 <__mulsf3>

00001058 <__fp_mpack>:
    1058:	9f 3f       	cpi	r25, 0xFF	; 255
    105a:	31 f0       	breq	.+12     	; 0x1068 <__fp_mpack_finite+0xc>

0000105c <__fp_mpack_finite>:
    105c:	91 50       	subi	r25, 0x01	; 1
    105e:	20 f4       	brcc	.+8      	; 0x1068 <__fp_mpack_finite+0xc>
    1060:	87 95       	ror	r24
    1062:	77 95       	ror	r23
    1064:	67 95       	ror	r22
    1066:	b7 95       	ror	r27
    1068:	88 0f       	add	r24, r24
    106a:	91 1d       	adc	r25, r1
    106c:	96 95       	lsr	r25
    106e:	87 95       	ror	r24
    1070:	97 f9       	bld	r25, 7
    1072:	08 95       	ret

00001074 <__fp_norm2>:
    1074:	91 50       	subi	r25, 0x01	; 1
    1076:	50 40       	sbci	r21, 0x00	; 0
    1078:	66 0f       	add	r22, r22
    107a:	77 1f       	adc	r23, r23
    107c:	88 1f       	adc	r24, r24
    107e:	d2 f7       	brpl	.-12     	; 0x1074 <__fp_norm2>
    1080:	08 95       	ret

00001082 <__udivmodsi4>:
    1082:	a1 e2       	ldi	r26, 0x21	; 33
    1084:	1a 2e       	mov	r1, r26
    1086:	aa 1b       	sub	r26, r26
    1088:	bb 1b       	sub	r27, r27
    108a:	fd 01       	movw	r30, r26
    108c:	0d c0       	rjmp	.+26     	; 0x10a8 <__udivmodsi4_ep>

0000108e <__udivmodsi4_loop>:
    108e:	aa 1f       	adc	r26, r26
    1090:	bb 1f       	adc	r27, r27
    1092:	ee 1f       	adc	r30, r30
    1094:	ff 1f       	adc	r31, r31
    1096:	a2 17       	cp	r26, r18
    1098:	b3 07       	cpc	r27, r19
    109a:	e4 07       	cpc	r30, r20
    109c:	f5 07       	cpc	r31, r21
    109e:	20 f0       	brcs	.+8      	; 0x10a8 <__udivmodsi4_ep>
    10a0:	a2 1b       	sub	r26, r18
    10a2:	b3 0b       	sbc	r27, r19
    10a4:	e4 0b       	sbc	r30, r20
    10a6:	f5 0b       	sbc	r31, r21

000010a8 <__udivmodsi4_ep>:
    10a8:	66 1f       	adc	r22, r22
    10aa:	77 1f       	adc	r23, r23
    10ac:	88 1f       	adc	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	1a 94       	dec	r1
    10b2:	69 f7       	brne	.-38     	; 0x108e <__udivmodsi4_loop>
    10b4:	60 95       	com	r22
    10b6:	70 95       	com	r23
    10b8:	80 95       	com	r24
    10ba:	90 95       	com	r25
    10bc:	9b 01       	movw	r18, r22
    10be:	ac 01       	movw	r20, r24
    10c0:	bd 01       	movw	r22, r26
    10c2:	cf 01       	movw	r24, r30
    10c4:	08 95       	ret

000010c6 <__tablejump2__>:
    10c6:	ee 0f       	add	r30, r30
    10c8:	ff 1f       	adc	r31, r31
    10ca:	88 1f       	adc	r24, r24
    10cc:	8b bf       	out	0x3b, r24	; 59
    10ce:	07 90       	elpm	r0, Z+
    10d0:	f6 91       	elpm	r31, Z
    10d2:	e0 2d       	mov	r30, r0
    10d4:	19 94       	eijmp

000010d6 <__itoa_ncheck>:
    10d6:	bb 27       	eor	r27, r27
    10d8:	4a 30       	cpi	r20, 0x0A	; 10
    10da:	31 f4       	brne	.+12     	; 0x10e8 <__itoa_ncheck+0x12>
    10dc:	99 23       	and	r25, r25
    10de:	22 f4       	brpl	.+8      	; 0x10e8 <__itoa_ncheck+0x12>
    10e0:	bd e2       	ldi	r27, 0x2D	; 45
    10e2:	90 95       	com	r25
    10e4:	81 95       	neg	r24
    10e6:	9f 4f       	sbci	r25, 0xFF	; 255
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <__utoa_common>

000010ea <__utoa_ncheck>:
    10ea:	bb 27       	eor	r27, r27

000010ec <__utoa_common>:
    10ec:	fb 01       	movw	r30, r22
    10ee:	55 27       	eor	r21, r21
    10f0:	aa 27       	eor	r26, r26
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	aa 1f       	adc	r26, r26
    10f8:	a4 17       	cp	r26, r20
    10fa:	10 f0       	brcs	.+4      	; 0x1100 <__utoa_common+0x14>
    10fc:	a4 1b       	sub	r26, r20
    10fe:	83 95       	inc	r24
    1100:	50 51       	subi	r21, 0x10	; 16
    1102:	b9 f7       	brne	.-18     	; 0x10f2 <__utoa_common+0x6>
    1104:	a0 5d       	subi	r26, 0xD0	; 208
    1106:	aa 33       	cpi	r26, 0x3A	; 58
    1108:	08 f0       	brcs	.+2      	; 0x110c <__utoa_common+0x20>
    110a:	a9 5d       	subi	r26, 0xD9	; 217
    110c:	a1 93       	st	Z+, r26
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	79 f7       	brne	.-34     	; 0x10f0 <__utoa_common+0x4>
    1112:	b1 11       	cpse	r27, r1
    1114:	b1 93       	st	Z+, r27
    1116:	11 92       	st	Z+, r1
    1118:	cb 01       	movw	r24, r22
    111a:	00 c0       	rjmp	.+0      	; 0x111c <strrev>

0000111c <strrev>:
    111c:	dc 01       	movw	r26, r24
    111e:	fc 01       	movw	r30, r24
    1120:	67 2f       	mov	r22, r23
    1122:	71 91       	ld	r23, Z+
    1124:	77 23       	and	r23, r23
    1126:	e1 f7       	brne	.-8      	; 0x1120 <strrev+0x4>
    1128:	32 97       	sbiw	r30, 0x02	; 2
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <strrev+0x18>
    112c:	7c 91       	ld	r23, X
    112e:	6d 93       	st	X+, r22
    1130:	70 83       	st	Z, r23
    1132:	62 91       	ld	r22, -Z
    1134:	ae 17       	cp	r26, r30
    1136:	bf 07       	cpc	r27, r31
    1138:	c8 f3       	brcs	.-14     	; 0x112c <strrev+0x10>
    113a:	08 95       	ret

0000113c <_exit>:
    113c:	f8 94       	cli

0000113e <__stop_program>:
    113e:	ff cf       	rjmp	.-2      	; 0x113e <__stop_program>
