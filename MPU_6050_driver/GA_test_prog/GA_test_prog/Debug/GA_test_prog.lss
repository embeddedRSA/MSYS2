
GA_test_prog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800200  00001128  000011bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001128  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  008002b2  008002b2  0000126e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000126e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022ce  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011dc  00000000  00000000  000036ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c5b  00000000  00000000  000048ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00005528  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a41  00000000  00000000  000057f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e6  00000000  00000000  00006235  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00006a1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	96 c0       	rjmp	.+300    	; 0x12e <__ctors_end>
       2:	00 00       	nop
       4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	00 00       	nop
      30:	9d c0       	rjmp	.+314    	; 0x16c <__bad_interrupt>
      32:	00 00       	nop
      34:	9b c0       	rjmp	.+310    	; 0x16c <__bad_interrupt>
      36:	00 00       	nop
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	00 00       	nop
      40:	95 c0       	rjmp	.+298    	; 0x16c <__bad_interrupt>
      42:	00 00       	nop
      44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
      52:	00 00       	nop
      54:	8b c0       	rjmp	.+278    	; 0x16c <__bad_interrupt>
      56:	00 00       	nop
      58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c0       	rjmp	.+270    	; 0x16c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
      62:	00 00       	nop
      64:	83 c0       	rjmp	.+262    	; 0x16c <__bad_interrupt>
      66:	00 00       	nop
      68:	81 c0       	rjmp	.+258    	; 0x16c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
      6e:	00 00       	nop
      70:	7d c0       	rjmp	.+250    	; 0x16c <__bad_interrupt>
      72:	00 00       	nop
      74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6f c0       	rjmp	.+222    	; 0x16c <__bad_interrupt>
      8e:	00 00       	nop
      90:	6d c0       	rjmp	.+218    	; 0x16c <__bad_interrupt>
      92:	00 00       	nop
      94:	6b c0       	rjmp	.+214    	; 0x16c <__bad_interrupt>
      96:	00 00       	nop
      98:	69 c0       	rjmp	.+210    	; 0x16c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	67 c0       	rjmp	.+206    	; 0x16c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	65 c0       	rjmp	.+202    	; 0x16c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	63 c0       	rjmp	.+198    	; 0x16c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	61 c0       	rjmp	.+194    	; 0x16c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5f c0       	rjmp	.+190    	; 0x16c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5d c0       	rjmp	.+186    	; 0x16c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5b c0       	rjmp	.+182    	; 0x16c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	59 c0       	rjmp	.+178    	; 0x16c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	57 c0       	rjmp	.+174    	; 0x16c <__bad_interrupt>
      be:	00 00       	nop
      c0:	55 c0       	rjmp	.+170    	; 0x16c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	53 c0       	rjmp	.+166    	; 0x16c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	51 c0       	rjmp	.+162    	; 0x16c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	4f c0       	rjmp	.+158    	; 0x16c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	4d c0       	rjmp	.+154    	; 0x16c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4b c0       	rjmp	.+150    	; 0x16c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	49 c0       	rjmp	.+146    	; 0x16c <__bad_interrupt>
      da:	00 00       	nop
      dc:	47 c0       	rjmp	.+142    	; 0x16c <__bad_interrupt>
      de:	00 00       	nop
      e0:	45 c0       	rjmp	.+138    	; 0x16c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	7c 02       	muls	r23, r28
      e6:	81 02       	muls	r24, r17
      e8:	8a 02       	muls	r24, r26
      ea:	8f 02       	muls	r24, r31
      ec:	98 02       	muls	r25, r24
      ee:	9d 02       	muls	r25, r29
      f0:	a6 02       	muls	r26, r22
      f2:	ab 02       	muls	r26, r27
      f4:	b4 02       	muls	r27, r20
      f6:	b9 02       	muls	r27, r25
      f8:	c2 02       	muls	r28, r18
      fa:	c7 02       	muls	r28, r23
      fc:	d0 02       	muls	r29, r16
      fe:	d5 02       	muls	r29, r21
     100:	08 4a       	sbci	r16, 0xA8	; 168
     102:	d7 3b       	cpi	r29, 0xB7	; 183
     104:	3b ce       	rjmp	.-906    	; 0xfffffd7c <__eeprom_end+0xff7efd7c>
     106:	01 6e       	ori	r16, 0xE1	; 225
     108:	84 bc       	out	0x24, r8	; 36
     10a:	bf fd       	.word	0xfdbf	; ????
     10c:	c1 2f       	mov	r28, r17
     10e:	3d 6c       	ori	r19, 0xCD	; 205
     110:	74 31       	cpi	r23, 0x14	; 20
     112:	9a bd       	out	0x2a, r25	; 42
     114:	56 83       	std	Z+6, r21	; 0x06
     116:	3d da       	rcall	.-2950   	; 0xfffff592 <__eeprom_end+0xff7ef592>
     118:	3d 00       	.word	0x003d	; ????
     11a:	c7 7f       	andi	r28, 0xF7	; 247
     11c:	11 be       	out	0x31, r1	; 49
     11e:	d9 e4       	ldi	r29, 0x49	; 73
     120:	bb 4c       	sbci	r27, 0xCB	; 203
     122:	3e 91       	ld	r19, -X
     124:	6b aa       	std	Y+51, r6	; 0x33
     126:	aa be       	out	0x3a, r10	; 58
     128:	00 00       	nop
     12a:	00 80       	ld	r0, Z
     12c:	3f 00       	.word	0x003f	; ????

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d1 e2       	ldi	r29, 0x21	; 33
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61
     13a:	00 e0       	ldi	r16, 0x00	; 0
     13c:	0c bf       	out	0x3c, r16	; 60

0000013e <__do_copy_data>:
     13e:	12 e0       	ldi	r17, 0x02	; 2
     140:	a0 e0       	ldi	r26, 0x00	; 0
     142:	b2 e0       	ldi	r27, 0x02	; 2
     144:	e8 e2       	ldi	r30, 0x28	; 40
     146:	f1 e1       	ldi	r31, 0x11	; 17
     148:	00 e0       	ldi	r16, 0x00	; 0
     14a:	0b bf       	out	0x3b, r16	; 59
     14c:	02 c0       	rjmp	.+4      	; 0x152 <__do_copy_data+0x14>
     14e:	07 90       	elpm	r0, Z+
     150:	0d 92       	st	X+, r0
     152:	a2 3b       	cpi	r26, 0xB2	; 178
     154:	b1 07       	cpc	r27, r17
     156:	d9 f7       	brne	.-10     	; 0x14e <__do_copy_data+0x10>

00000158 <__do_clear_bss>:
     158:	22 e0       	ldi	r18, 0x02	; 2
     15a:	a2 eb       	ldi	r26, 0xB2	; 178
     15c:	b2 e0       	ldi	r27, 0x02	; 2
     15e:	01 c0       	rjmp	.+2      	; 0x162 <.do_clear_bss_start>

00000160 <.do_clear_bss_loop>:
     160:	1d 92       	st	X+, r1

00000162 <.do_clear_bss_start>:
     162:	a1 3f       	cpi	r26, 0xF1	; 241
     164:	b2 07       	cpc	r27, r18
     166:	e1 f7       	brne	.-8      	; 0x160 <.do_clear_bss_loop>
     168:	42 d3       	rcall	.+1668   	; 0x7ee <main>
     16a:	dc c7       	rjmp	.+4024   	; 0x1124 <_exit>

0000016c <__bad_interrupt>:
     16c:	49 cf       	rjmp	.-366    	; 0x0 <__vectors>

0000016e <init_s>:
**/
static uint16_t init_s(uint32_t SCL_f ,bool enable_interrupt) //freq is given in Hz
{
	
	//no internal pull up implemented so far
if (SCL_f <= 400000)
     16e:	61 38       	cpi	r22, 0x81	; 129
     170:	2a e1       	ldi	r18, 0x1A	; 26
     172:	72 07       	cpc	r23, r18
     174:	26 e0       	ldi	r18, 0x06	; 6
     176:	82 07       	cpc	r24, r18
     178:	91 05       	cpc	r25, r1
     17a:	08 f0       	brcs	.+2      	; 0x17e <init_s+0x10>
     17c:	4c c0       	rjmp	.+152    	; 0x216 <init_s+0xa8>
	{
		//enable TWI clock module 
	PRR0&=~(1<<PRTWI);
     17e:	e4 e6       	ldi	r30, 0x64	; 100
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	20 81       	ld	r18, Z
     184:	2f 77       	andi	r18, 0x7F	; 127
     186:	20 83       	st	Z, r18
	
	//enable TWI
	TWCR|=(1<<TWEN);	
     188:	ec eb       	ldi	r30, 0xBC	; 188
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	20 81       	ld	r18, Z
     18e:	24 60       	ori	r18, 0x04	; 4
     190:	20 83       	st	Z, r18
	
	//enable interrupt
	int_is_enabled=enable_interrupt;
     192:	40 93 b4 02 	sts	0x02B4, r20	; 0x8002b4 <int_is_enabled>
	if (int_is_enabled)
     196:	44 23       	and	r20, r20
     198:	19 f0       	breq	.+6      	; 0x1a0 <init_s+0x32>
	{
		TWCR|=(1<<TWIE);
     19a:	20 81       	ld	r18, Z
     19c:	21 60       	ori	r18, 0x01	; 1
     19e:	20 83       	st	Z, r18
	
	//constants pre calculated from mathcad 
	uint16_t TWBR_1=1;
	
	
	if(SCL_f==400000)
     1a0:	60 38       	cpi	r22, 0x80	; 128
     1a2:	2a e1       	ldi	r18, 0x1A	; 26
     1a4:	72 07       	cpc	r23, r18
     1a6:	26 e0       	ldi	r18, 0x06	; 6
     1a8:	82 07       	cpc	r24, r18
     1aa:	91 05       	cpc	r25, r1
     1ac:	d9 f0       	breq	.+54     	; 0x1e4 <init_s+0x76>
	{
		TWBR_1= 3;
	}
	else if(SCL_f>=333333)
     1ae:	65 31       	cpi	r22, 0x15	; 21
     1b0:	26 e1       	ldi	r18, 0x16	; 22
     1b2:	72 07       	cpc	r23, r18
     1b4:	25 e0       	ldi	r18, 0x05	; 5
     1b6:	82 07       	cpc	r24, r18
     1b8:	91 05       	cpc	r25, r1
     1ba:	b8 f4       	brcc	.+46     	; 0x1ea <init_s+0x7c>
	{
		TWBR_1= 4;
	}
	else if(SCL_f>=5000)
     1bc:	68 38       	cpi	r22, 0x88	; 136
     1be:	23 e1       	ldi	r18, 0x13	; 19
     1c0:	72 07       	cpc	r23, r18
     1c2:	81 05       	cpc	r24, r1
     1c4:	91 05       	cpc	r25, r1
     1c6:	a0 f4       	brcc	.+40     	; 0x1f0 <init_s+0x82>
	{
		TWBR_1= 398;
	}
	else if(SCL_f>=2000)
     1c8:	60 3d       	cpi	r22, 0xD0	; 208
     1ca:	27 e0       	ldi	r18, 0x07	; 7
     1cc:	72 07       	cpc	r23, r18
     1ce:	81 05       	cpc	r24, r1
     1d0:	91 05       	cpc	r25, r1
     1d2:	88 f4       	brcc	.+34     	; 0x1f6 <init_s+0x88>
	{
		TWBR_1= 1998;
	}
	else if(SCL_f>=1000)
     1d4:	68 3e       	cpi	r22, 0xE8	; 232
     1d6:	73 40       	sbci	r23, 0x03	; 3
     1d8:	81 05       	cpc	r24, r1
     1da:	91 05       	cpc	r25, r1
     1dc:	78 f0       	brcs	.+30     	; 0x1fc <init_s+0x8e>
	{
		TWBR_1= 998;
     1de:	86 ee       	ldi	r24, 0xE6	; 230
     1e0:	93 e0       	ldi	r25, 0x03	; 3
     1e2:	0e c0       	rjmp	.+28     	; 0x200 <init_s+0x92>
	uint16_t TWBR_1=1;
	
	
	if(SCL_f==400000)
	{
		TWBR_1= 3;
     1e4:	83 e0       	ldi	r24, 0x03	; 3
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0b c0       	rjmp	.+22     	; 0x200 <init_s+0x92>
	}
	else if(SCL_f>=333333)
	{
		TWBR_1= 4;
     1ea:	84 e0       	ldi	r24, 0x04	; 4
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	08 c0       	rjmp	.+16     	; 0x200 <init_s+0x92>
	}
	else if(SCL_f>=5000)
	{
		TWBR_1= 398;
     1f0:	8e e8       	ldi	r24, 0x8E	; 142
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	05 c0       	rjmp	.+10     	; 0x200 <init_s+0x92>
	}
	else if(SCL_f>=2000)
	{
		TWBR_1= 1998;
     1f6:	8e ec       	ldi	r24, 0xCE	; 206
     1f8:	97 e0       	ldi	r25, 0x07	; 7
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <init_s+0x92>
	{
		TWCR|=(1<<TWIE);
	}
	
	//constants pre calculated from mathcad 
	uint16_t TWBR_1=1;
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
	else if(SCL_f>=1000)
	{
		TWBR_1= 998;
	}

	TWSR&=~(1<<TWPS0);
     200:	e9 eb       	ldi	r30, 0xB9	; 185
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	20 81       	ld	r18, Z
     206:	2e 7f       	andi	r18, 0xFE	; 254
     208:	20 83       	st	Z, r18
	TWSR&=~(1<<TWPS1);
     20a:	20 81       	ld	r18, Z
     20c:	2d 7f       	andi	r18, 0xFD	; 253
     20e:	20 83       	st	Z, r18
	
	
	TWBR = TWBR_1;
     210:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
	return TWBR_1;
     214:	08 95       	ret
	}
else
	{
	return 69;
     216:	85 e4       	ldi	r24, 0x45	; 69
     218:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     21a:	08 95       	ret

0000021c <disable_s>:
----------------description-----------------------------------------------------------------
Disables any i2c activity, activity, 'init_s()' does not need to be followed before starting new transfer
-------------function description end-------------------------------------------------------
**/
static void disable_s(void)
{
     21c:	08 95       	ret

0000021e <start_s>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static void start_s(void)
{
	TWCR=0;
     21e:	ec eb       	ldi	r30, 0xBC	; 188
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	10 82       	st	Z, r1
	TWCR |= (1<<TWSTA)|(1<<TWEN)|(1<<TWINT); //TWSTA sends start bit 
     224:	80 81       	ld	r24, Z
     226:	84 6a       	ori	r24, 0xA4	; 164
     228:	80 83       	st	Z, r24

	if (!int_is_enabled)
     22a:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <int_is_enabled>
     22e:	81 11       	cpse	r24, r1
     230:	03 c0       	rjmp	.+6      	; 0x238 <start_s+0x1a>
	{
		while ((TWCR & (1<<TWINT)) == 0)
     232:	80 81       	ld	r24, Z
     234:	88 23       	and	r24, r24
     236:	ec f7       	brge	.-6      	; 0x232 <start_s+0x14>
     238:	08 95       	ret

0000023a <stop_s>:
stops i2c, no polling needed
-------------function description end-------------------------------------------------------
**/
static void stop_s()
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     23a:	84 e9       	ldi	r24, 0x94	; 148
     23c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     240:	08 95       	ret

00000242 <selectMode_s>:
-------------function description end-------------------------------------------------------
**/
static void selectMode_s(uint8_t SLA_x) //SLA_x is SLA+R/W
{
	//must send address now
	TWDR=SLA_x;
     242:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR |= (1<<TWINT);
     246:	ec eb       	ldi	r30, 0xBC	; 188
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	80 68       	ori	r24, 0x80	; 128
     24e:	80 83       	st	Z, r24
	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     250:	80 81       	ld	r24, Z
     252:	84 6a       	ori	r24, 0xA4	; 164
     254:	80 83       	st	Z, r24
	if (!int_is_enabled)
     256:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <int_is_enabled>
     25a:	81 11       	cpse	r24, r1
     25c:	03 c0       	rjmp	.+6      	; 0x264 <selectMode_s+0x22>
	{
	  while ((TWCR & (1<<TWINT)) == 0) //poll
     25e:	80 81       	ld	r24, Z
     260:	88 23       	and	r24, r24
     262:	ec f7       	brge	.-6      	; 0x25e <selectMode_s+0x1c>
     264:	08 95       	ret

00000266 <write_s>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static void write_s(uint8_t data)
{
	TWDR = data;
     266:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT)|(1<<TWEN);
     26a:	84 e8       	ldi	r24, 0x84	; 132
     26c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	if (!int_is_enabled)
     270:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <int_is_enabled>
     274:	81 11       	cpse	r24, r1
     276:	05 c0       	rjmp	.+10     	; 0x282 <write_s+0x1c>
	{
		while ((TWCR & (1<<TWINT)) == 0)
     278:	ec eb       	ldi	r30, 0xBC	; 188
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	80 81       	ld	r24, Z
     27e:	88 23       	and	r24, r24
     280:	ec f7       	brge	.-6      	; 0x27c <write_s+0x16>
     282:	08 95       	ret

00000284 <read_s>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static uint8_t read_s (bool isLast)
{
	if (!isLast ) //If we want to read more than 1 byte
     284:	81 11       	cpse	r24, r1
     286:	04 c0       	rjmp	.+8      	; 0x290 <read_s+0xc>
	{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     288:	84 ec       	ldi	r24, 0xC4	; 196
     28a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     28e:	03 c0       	rjmp	.+6      	; 0x296 <read_s+0x12>
	}

	else             //If we want to read only one byte
	{
		TWCR = (1<<TWINT) | (1<<TWEN);
     290:	84 e8       	ldi	r24, 0x84	; 132
     292:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	}
	
	if (!int_is_enabled)
     296:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <int_is_enabled>
     29a:	81 11       	cpse	r24, r1
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <read_s+0x2a>
	{
	  while ((TWCR & (1<<TWINT)) == 0)
     29e:	ec eb       	ldi	r30, 0xBC	; 188
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	88 23       	and	r24, r24
     2a6:	ec f7       	brge	.-6      	; 0x2a2 <read_s+0x1e>
	  {}
	{}
	return TWDR;
     2a8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
     2ac:	08 95       	ret
	}

	return 0;
     2ae:	80 e0       	ldi	r24, 0x00	; 0
}
     2b0:	08 95       	ret

000002b2 <setBusy_s>:

static bool setBusy_s(bool status)
{	
	busy_flag=status;
     2b2:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <__data_end>
	return  busy_flag;
}
     2b6:	08 95       	ret

000002b8 <getBusy_s>:


static bool getBusy_s(void)
{
	return busy_flag;
}
     2b8:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <__data_end>
     2bc:	08 95       	ret

000002be <getStatus_s>:

static uint8_t getStatus_s(void)
{
	return (TWSR)&(0b11111000);
     2be:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
     2c2:	88 7f       	andi	r24, 0xF8	; 248
     2c4:	08 95       	ret

000002c6 <get_i2c_interface>:
-------------function description end-------------------------------------------------------
**/
i2c_t* get_i2c_interface(void)
{
	
 if (!initialized)
     2c6:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <initialized>
     2ca:	81 11       	cpse	r24, r1
     2cc:	2d c0       	rjmp	.+90     	; 0x328 <get_i2c_interface+0x62>
 {
	i2c_interface.init				=	init_s;
     2ce:	e5 eb       	ldi	r30, 0xB5	; 181
     2d0:	f2 e0       	ldi	r31, 0x02	; 2
     2d2:	87 eb       	ldi	r24, 0xB7	; 183
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	91 83       	std	Z+1, r25	; 0x01
     2d8:	80 83       	st	Z, r24
	i2c_interface.disable			=	disable_s;
     2da:	8e e0       	ldi	r24, 0x0E	; 14
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	93 83       	std	Z+3, r25	; 0x03
     2e0:	82 83       	std	Z+2, r24	; 0x02
	i2c_interface.start				=	start_s;
     2e2:	8f e0       	ldi	r24, 0x0F	; 15
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	95 83       	std	Z+5, r25	; 0x05
     2e8:	84 83       	std	Z+4, r24	; 0x04
	i2c_interface.stop				=	stop_s;
     2ea:	8d e1       	ldi	r24, 0x1D	; 29
     2ec:	91 e0       	ldi	r25, 0x01	; 1
     2ee:	97 83       	std	Z+7, r25	; 0x07
     2f0:	86 83       	std	Z+6, r24	; 0x06
	i2c_interface.selectmode		=	selectMode_s;
     2f2:	81 e2       	ldi	r24, 0x21	; 33
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	91 87       	std	Z+9, r25	; 0x09
     2f8:	80 87       	std	Z+8, r24	; 0x08
	i2c_interface.write				=	write_s;
     2fa:	83 e3       	ldi	r24, 0x33	; 51
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	93 87       	std	Z+11, r25	; 0x0b
     300:	82 87       	std	Z+10, r24	; 0x0a
	i2c_interface.read				=	read_s;
     302:	82 e4       	ldi	r24, 0x42	; 66
     304:	91 e0       	ldi	r25, 0x01	; 1
     306:	95 87       	std	Z+13, r25	; 0x0d
     308:	84 87       	std	Z+12, r24	; 0x0c
	i2c_interface.setBusy			=	setBusy_s;
     30a:	89 e5       	ldi	r24, 0x59	; 89
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	97 87       	std	Z+15, r25	; 0x0f
     310:	86 87       	std	Z+14, r24	; 0x0e
	i2c_interface.getBusy			=	getBusy_s;
     312:	8c e5       	ldi	r24, 0x5C	; 92
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	91 8b       	std	Z+17, r25	; 0x11
     318:	80 8b       	std	Z+16, r24	; 0x10
	i2c_interface.getStatus			=	getStatus_s;
     31a:	8f e5       	ldi	r24, 0x5F	; 95
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	93 8b       	std	Z+19, r25	; 0x13
     320:	82 8b       	std	Z+18, r24	; 0x12
	initialized=true;
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <initialized>
	
 }
	return &i2c_interface;
}
     328:	85 eb       	ldi	r24, 0xB5	; 181
     32a:	92 e0       	ldi	r25, 0x02	; 2
     32c:	08 95       	ret

0000032e <InitUART>:
  // Wait for new character received
  while ( (UCSRnA & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDRn;
}
     32e:	0f 93       	push	r16
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	ec 01       	movw	r28, r24
     336:	db 01       	movw	r26, r22
     338:	ca 01       	movw	r24, r20
     33a:	8c 52       	subi	r24, 0x2C	; 44
     33c:	91 40       	sbci	r25, 0x01	; 1
     33e:	a1 09       	sbc	r26, r1
     340:	b1 09       	sbc	r27, r1
     342:	85 3d       	cpi	r24, 0xD5	; 213
     344:	90 4c       	sbci	r25, 0xC0	; 192
     346:	a1 40       	sbci	r26, 0x01	; 1
     348:	b1 05       	cpc	r27, r1
     34a:	08 f0       	brcs	.+2      	; 0x34e <InitUART+0x20>
     34c:	3f c0       	rjmp	.+126    	; 0x3cc <InitUART+0x9e>
     34e:	25 50       	subi	r18, 0x05	; 5
     350:	24 30       	cpi	r18, 0x04	; 4
     352:	e0 f5       	brcc	.+120    	; 0x3cc <InitUART+0x9e>
     354:	80 e2       	ldi	r24, 0x20	; 32
     356:	88 83       	st	Y, r24
     358:	88 e1       	ldi	r24, 0x18	; 24
     35a:	89 83       	std	Y+1, r24	; 0x01
     35c:	22 0f       	add	r18, r18
     35e:	2a 83       	std	Y+2, r18	; 0x02
     360:	05 34       	cpi	r16, 0x45	; 69
     362:	21 f4       	brne	.+8      	; 0x36c <InitUART+0x3e>
     364:	8a 81       	ldd	r24, Y+2	; 0x02
     366:	80 62       	ori	r24, 0x20	; 32
     368:	8a 83       	std	Y+2, r24	; 0x02
     36a:	05 c0       	rjmp	.+10     	; 0x376 <InitUART+0x48>
     36c:	0f 34       	cpi	r16, 0x4F	; 79
     36e:	19 f4       	brne	.+6      	; 0x376 <InitUART+0x48>
     370:	8a 81       	ldd	r24, Y+2	; 0x02
     372:	80 63       	ori	r24, 0x30	; 48
     374:	8a 83       	std	Y+2, r24	; 0x02
     376:	db 01       	movw	r26, r22
     378:	ca 01       	movw	r24, r20
     37a:	80 58       	subi	r24, 0x80	; 128
     37c:	9b 47       	sbci	r25, 0x7B	; 123
     37e:	a1 4e       	sbci	r26, 0xE1	; 225
     380:	bf 4f       	sbci	r27, 0xFF	; 255
     382:	88 0f       	add	r24, r24
     384:	99 1f       	adc	r25, r25
     386:	aa 1f       	adc	r26, r26
     388:	bb 1f       	adc	r27, r27
     38a:	88 0f       	add	r24, r24
     38c:	99 1f       	adc	r25, r25
     38e:	aa 1f       	adc	r26, r26
     390:	bb 1f       	adc	r27, r27
     392:	88 0f       	add	r24, r24
     394:	99 1f       	adc	r25, r25
     396:	aa 1f       	adc	r26, r26
     398:	bb 1f       	adc	r27, r27
     39a:	44 0f       	add	r20, r20
     39c:	55 1f       	adc	r21, r21
     39e:	66 1f       	adc	r22, r22
     3a0:	77 1f       	adc	r23, r23
     3a2:	44 0f       	add	r20, r20
     3a4:	55 1f       	adc	r21, r21
     3a6:	66 1f       	adc	r22, r22
     3a8:	77 1f       	adc	r23, r23
     3aa:	9a 01       	movw	r18, r20
     3ac:	ab 01       	movw	r20, r22
     3ae:	22 0f       	add	r18, r18
     3b0:	33 1f       	adc	r19, r19
     3b2:	44 1f       	adc	r20, r20
     3b4:	55 1f       	adc	r21, r21
     3b6:	22 0f       	add	r18, r18
     3b8:	33 1f       	adc	r19, r19
     3ba:	44 1f       	adc	r20, r20
     3bc:	55 1f       	adc	r21, r21
     3be:	bc 01       	movw	r22, r24
     3c0:	cd 01       	movw	r24, r26
     3c2:	53 d6       	rcall	.+3238   	; 0x106a <__udivmodsi4>
     3c4:	21 50       	subi	r18, 0x01	; 1
     3c6:	31 09       	sbc	r19, r1
     3c8:	3d 83       	std	Y+5, r19	; 0x05
     3ca:	2c 83       	std	Y+4, r18	; 0x04
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	0f 91       	pop	r16
     3d2:	08 95       	ret

000003d4 <SendChar>:
Then send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(unsigned int UART_adr, char Tegn)
{
     3d4:	fc 01       	movw	r30, r24
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRnA & (1<<5)) == 0 )
     3d6:	90 81       	ld	r25, Z
     3d8:	95 ff       	sbrs	r25, 5
     3da:	fd cf       	rjmp	.-6      	; 0x3d6 <SendChar+0x2>
  {}
  // Then send the character
  UDRn = Tegn;
     3dc:	66 83       	std	Z+6, r22	; 0x06
     3de:	08 95       	ret

000003e0 <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
     3e0:	0f 93       	push	r16
     3e2:	1f 93       	push	r17
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	eb 01       	movw	r28, r22
  // Repeat until zero-termination
  while (*Streng != 0)
     3ea:	68 81       	ld	r22, Y
     3ec:	66 23       	and	r22, r22
     3ee:	39 f0       	breq	.+14     	; 0x3fe <SendString+0x1e>
     3f0:	8c 01       	movw	r16, r24
     3f2:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
     3f4:	c8 01       	movw	r24, r16
     3f6:	ee df       	rcall	.-36     	; 0x3d4 <SendChar>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
     3f8:	69 91       	ld	r22, Y+
     3fa:	61 11       	cpse	r22, r1
     3fc:	fb cf       	rjmp	.-10     	; 0x3f4 <SendString+0x14>
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
    // Advance the pointer one step
    Streng++;
  }
}
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	08 95       	ret

00000408 <SendInteger>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(unsigned int UART_adr, int Tal)
{
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	27 97       	sbiw	r28, 0x07	; 7
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	f8 94       	cli
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	cd bf       	out	0x3d, r28	; 61
     420:	8c 01       	movw	r16, r24
     422:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     424:	4a e0       	ldi	r20, 0x0A	; 10
     426:	be 01       	movw	r22, r28
     428:	6f 5f       	subi	r22, 0xFF	; 255
     42a:	7f 4f       	sbci	r23, 0xFF	; 255
     42c:	48 d6       	rcall	.+3216   	; 0x10be <__itoa_ncheck>
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Tal, array, 10);
  // - then send the string
  SendString(UART_adr, array);
     42e:	be 01       	movw	r22, r28
     430:	6f 5f       	subi	r22, 0xFF	; 255
     432:	7f 4f       	sbci	r23, 0xFF	; 255
     434:	c8 01       	movw	r24, r16
     436:	d4 df       	rcall	.-88     	; 0x3e0 <SendString>
}
     438:	27 96       	adiw	r28, 0x07	; 7
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	08 95       	ret

0000044e <start_s>:
	return &GA_interface; 
}

static uint8_t start_s(void)
{
	i2c->start();
     44e:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <i2c>
     452:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <i2c+0x1>
     456:	04 80       	ldd	r0, Z+4	; 0x04
     458:	f5 81       	ldd	r31, Z+5	; 0x05
     45a:	e0 2d       	mov	r30, r0
     45c:	19 95       	eicall
	{
		//if busy
		return 0;
	}
	**/
}
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	08 95       	ret

00000462 <stop_s>:
static void stop_s(void)
{
	i2c->stop();
     462:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <i2c>
     466:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <i2c+0x1>
     46a:	06 80       	ldd	r0, Z+6	; 0x06
     46c:	f7 81       	ldd	r31, Z+7	; 0x07
     46e:	e0 2d       	mov	r30, r0
     470:	19 95       	eicall
     472:	08 95       	ret

00000474 <enterWrite_s>:
}
static void enterWrite_s(void)
{
	
	i2c->selectmode((ADDR_0<<1)&(~0b1));
     474:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <i2c>
     478:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <i2c+0x1>
     47c:	00 84       	ldd	r0, Z+8	; 0x08
     47e:	f1 85       	ldd	r31, Z+9	; 0x09
     480:	e0 2d       	mov	r30, r0
     482:	80 ed       	ldi	r24, 0xD0	; 208
     484:	19 95       	eicall
     486:	08 95       	ret

00000488 <enterRead_s>:
	
}
static void enterRead_s(void)
{

	i2c->selectmode((ADDR_0<<1)|0b1);
     488:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <i2c>
     48c:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <i2c+0x1>
     490:	00 84       	ldd	r0, Z+8	; 0x08
     492:	f1 85       	ldd	r31, Z+9	; 0x09
     494:	e0 2d       	mov	r30, r0
     496:	81 ed       	ldi	r24, 0xD1	; 209
     498:	19 95       	eicall
     49a:	08 95       	ret

0000049c <selectRegister_s>:
	
}
static void selectRegister_s(reg_addr_t reg_addr)
{
	currentAddr=reg_addr;
     49c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	i2c->write(reg_addr);
     4a0:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <i2c>
     4a4:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <i2c+0x1>
     4a8:	02 84       	ldd	r0, Z+10	; 0x0a
     4aa:	f3 85       	ldd	r31, Z+11	; 0x0b
     4ac:	e0 2d       	mov	r30, r0
     4ae:	19 95       	eicall
     4b0:	08 95       	ret

000004b2 <write_s>:
}
static void write_s(uint8_t data)
{
	i2c->write(data);
     4b2:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <i2c>
     4b6:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <i2c+0x1>
     4ba:	02 84       	ldd	r0, Z+10	; 0x0a
     4bc:	f3 85       	ldd	r31, Z+11	; 0x0b
     4be:	e0 2d       	mov	r30, r0
     4c0:	19 95       	eicall
     4c2:	08 95       	ret

000004c4 <read_s>:
}
static uint8_t read_s(bool is_last)
{
	int16_t temp=i2c->read(is_last);
     4c4:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <i2c>
     4c8:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <i2c+0x1>
     4cc:	04 84       	ldd	r0, Z+12	; 0x0c
     4ce:	f5 85       	ldd	r31, Z+13	; 0x0d
     4d0:	e0 2d       	mov	r30, r0
     4d2:	19 95       	eicall
     4d4:	28 2f       	mov	r18, r24
     4d6:	a8 2f       	mov	r26, r24
     4d8:	b0 e0       	ldi	r27, 0x00	; 0
	
	switch (currentAddr)
     4da:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     4de:	49 2f       	mov	r20, r25
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	fa 01       	movw	r30, r20
     4e4:	fb 97       	sbiw	r30, 0x3b	; 59
     4e6:	ee 30       	cpi	r30, 0x0E	; 14
     4e8:	f1 05       	cpc	r31, r1
     4ea:	08 f0       	brcs	.+2      	; 0x4ee <read_s+0x2a>
     4ec:	66 c0       	rjmp	.+204    	; 0x5ba <read_s+0xf6>
     4ee:	88 27       	eor	r24, r24
     4f0:	ee 58       	subi	r30, 0x8E	; 142
     4f2:	ff 4f       	sbci	r31, 0xFF	; 255
     4f4:	8f 4f       	sbci	r24, 0xFF	; 255
     4f6:	db c5       	rjmp	.+2998   	; 0x10ae <__tablejump2__>
	{
		//accelerometer
		case ACCEL_XOUT_H:
			data_struct.accel_x=temp<<8;
     4f8:	ed ed       	ldi	r30, 0xDD	; 221
     4fa:	f2 e0       	ldi	r31, 0x02	; 2
     4fc:	10 82       	st	Z, r1
     4fe:	21 83       	std	Z+1, r18	; 0x01
		break;
     500:	5c c0       	rjmp	.+184    	; 0x5ba <read_s+0xf6>
		
		case ACCEL_XOUT_L:
		data_struct.accel_x|=temp;
     502:	ed ed       	ldi	r30, 0xDD	; 221
     504:	f2 e0       	ldi	r31, 0x02	; 2
     506:	40 81       	ld	r20, Z
     508:	51 81       	ldd	r21, Z+1	; 0x01
     50a:	a4 2b       	or	r26, r20
     50c:	b5 2b       	or	r27, r21
     50e:	b1 83       	std	Z+1, r27	; 0x01
     510:	a0 83       	st	Z, r26
		break;
     512:	53 c0       	rjmp	.+166    	; 0x5ba <read_s+0xf6>
		
		case ACCEL_YOUT_H:
			data_struct.accel_y=temp<<8;
     514:	ed ed       	ldi	r30, 0xDD	; 221
     516:	f2 e0       	ldi	r31, 0x02	; 2
     518:	12 82       	std	Z+2, r1	; 0x02
     51a:	23 83       	std	Z+3, r18	; 0x03
		break;
     51c:	4e c0       	rjmp	.+156    	; 0x5ba <read_s+0xf6>
		
		case ACCEL_YOUT_L:
			data_struct.accel_y|=temp;
     51e:	ed ed       	ldi	r30, 0xDD	; 221
     520:	f2 e0       	ldi	r31, 0x02	; 2
     522:	42 81       	ldd	r20, Z+2	; 0x02
     524:	53 81       	ldd	r21, Z+3	; 0x03
     526:	a4 2b       	or	r26, r20
     528:	b5 2b       	or	r27, r21
     52a:	b3 83       	std	Z+3, r27	; 0x03
     52c:	a2 83       	std	Z+2, r26	; 0x02
		break;
     52e:	45 c0       	rjmp	.+138    	; 0x5ba <read_s+0xf6>
		
		case ACCEL_ZOUT_H:
			data_struct.accel_z=temp<<8;
     530:	ed ed       	ldi	r30, 0xDD	; 221
     532:	f2 e0       	ldi	r31, 0x02	; 2
     534:	14 82       	std	Z+4, r1	; 0x04
     536:	25 83       	std	Z+5, r18	; 0x05
		break;
     538:	40 c0       	rjmp	.+128    	; 0x5ba <read_s+0xf6>
		
		case ACCEL_ZOUT_L:
			data_struct.accel_z|=temp;
     53a:	ed ed       	ldi	r30, 0xDD	; 221
     53c:	f2 e0       	ldi	r31, 0x02	; 2
     53e:	44 81       	ldd	r20, Z+4	; 0x04
     540:	55 81       	ldd	r21, Z+5	; 0x05
     542:	a4 2b       	or	r26, r20
     544:	b5 2b       	or	r27, r21
     546:	b5 83       	std	Z+5, r27	; 0x05
     548:	a4 83       	std	Z+4, r26	; 0x04
		break;
     54a:	37 c0       	rjmp	.+110    	; 0x5ba <read_s+0xf6>
		
		//temperature
		case TEMP_OUT_H:
			data_struct.temp=temp<<8;
     54c:	ed ed       	ldi	r30, 0xDD	; 221
     54e:	f2 e0       	ldi	r31, 0x02	; 2
     550:	16 82       	std	Z+6, r1	; 0x06
     552:	27 83       	std	Z+7, r18	; 0x07
		break;
     554:	32 c0       	rjmp	.+100    	; 0x5ba <read_s+0xf6>
		
		case TEMP_OUT_L:
			data_struct.temp|=temp;
     556:	ed ed       	ldi	r30, 0xDD	; 221
     558:	f2 e0       	ldi	r31, 0x02	; 2
     55a:	46 81       	ldd	r20, Z+6	; 0x06
     55c:	57 81       	ldd	r21, Z+7	; 0x07
     55e:	a4 2b       	or	r26, r20
     560:	b5 2b       	or	r27, r21
     562:	b7 83       	std	Z+7, r27	; 0x07
     564:	a6 83       	std	Z+6, r26	; 0x06
		break;
     566:	29 c0       	rjmp	.+82     	; 0x5ba <read_s+0xf6>
		
		//Gyro
		case GYRO_XOUT_H:
			data_struct.gyro_x=temp<<8;
     568:	ed ed       	ldi	r30, 0xDD	; 221
     56a:	f2 e0       	ldi	r31, 0x02	; 2
     56c:	10 86       	std	Z+8, r1	; 0x08
     56e:	21 87       	std	Z+9, r18	; 0x09
		break;
     570:	24 c0       	rjmp	.+72     	; 0x5ba <read_s+0xf6>
		
		case GYRO_XOUT_L:
			data_struct.gyro_x|=temp;
     572:	ed ed       	ldi	r30, 0xDD	; 221
     574:	f2 e0       	ldi	r31, 0x02	; 2
     576:	40 85       	ldd	r20, Z+8	; 0x08
     578:	51 85       	ldd	r21, Z+9	; 0x09
     57a:	a4 2b       	or	r26, r20
     57c:	b5 2b       	or	r27, r21
     57e:	b1 87       	std	Z+9, r27	; 0x09
     580:	a0 87       	std	Z+8, r26	; 0x08
		break;
     582:	1b c0       	rjmp	.+54     	; 0x5ba <read_s+0xf6>
		
		case GYRO_YOUT_H:
			data_struct.gyro_y=temp<<8;
     584:	ed ed       	ldi	r30, 0xDD	; 221
     586:	f2 e0       	ldi	r31, 0x02	; 2
     588:	12 86       	std	Z+10, r1	; 0x0a
     58a:	23 87       	std	Z+11, r18	; 0x0b
		break;
     58c:	16 c0       	rjmp	.+44     	; 0x5ba <read_s+0xf6>
		
		case GYRO_YOUT_L:
			data_struct.gyro_y|=temp;
     58e:	ed ed       	ldi	r30, 0xDD	; 221
     590:	f2 e0       	ldi	r31, 0x02	; 2
     592:	42 85       	ldd	r20, Z+10	; 0x0a
     594:	53 85       	ldd	r21, Z+11	; 0x0b
     596:	a4 2b       	or	r26, r20
     598:	b5 2b       	or	r27, r21
     59a:	b3 87       	std	Z+11, r27	; 0x0b
     59c:	a2 87       	std	Z+10, r26	; 0x0a
		break;
     59e:	0d c0       	rjmp	.+26     	; 0x5ba <read_s+0xf6>
			
		case GYRO_ZOUT_H:
			data_struct.gyro_z=temp<<8;
     5a0:	ed ed       	ldi	r30, 0xDD	; 221
     5a2:	f2 e0       	ldi	r31, 0x02	; 2
     5a4:	14 86       	std	Z+12, r1	; 0x0c
     5a6:	25 87       	std	Z+13, r18	; 0x0d
		break;
     5a8:	08 c0       	rjmp	.+16     	; 0x5ba <read_s+0xf6>
				
		case GYRO_ZOUT_L:
			data_struct.gyro_z|=temp;
     5aa:	ed ed       	ldi	r30, 0xDD	; 221
     5ac:	f2 e0       	ldi	r31, 0x02	; 2
     5ae:	44 85       	ldd	r20, Z+12	; 0x0c
     5b0:	55 85       	ldd	r21, Z+13	; 0x0d
     5b2:	a4 2b       	or	r26, r20
     5b4:	b5 2b       	or	r27, r21
     5b6:	b5 87       	std	Z+13, r27	; 0x0d
     5b8:	a4 87       	std	Z+12, r26	; 0x0c
		default:
		//de nada
		break;
	}
	
	currentAddr++;
     5ba:	9f 5f       	subi	r25, 0xFF	; 255
     5bc:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
	//SendInteger(UART0,currentAddr);
	//SendString(UART0,"\n");
return temp;
}
     5c0:	82 2f       	mov	r24, r18
     5c2:	08 95       	ret

000005c4 <getAccelXYZ_s>:

static void getAccelXYZ_s(int16_t* XYZ)
{
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	ec 01       	movw	r28, r24
XYZ[0]=(int16_t)((data_struct.accel_x)/8.192);
     5ce:	0d ed       	ldi	r16, 0xDD	; 221
     5d0:	12 e0       	ldi	r17, 0x02	; 2
     5d2:	f8 01       	movw	r30, r16
     5d4:	60 81       	ld	r22, Z
     5d6:	71 81       	ldd	r23, Z+1	; 0x01
     5d8:	07 2e       	mov	r0, r23
     5da:	00 0c       	add	r0, r0
     5dc:	88 0b       	sbc	r24, r24
     5de:	99 0b       	sbc	r25, r25
     5e0:	cf d3       	rcall	.+1950   	; 0xd80 <__floatsisf>
     5e2:	2f e6       	ldi	r18, 0x6F	; 111
     5e4:	32 e1       	ldi	r19, 0x12	; 18
     5e6:	43 e0       	ldi	r20, 0x03	; 3
     5e8:	51 e4       	ldi	r21, 0x41	; 65
     5ea:	2f d3       	rcall	.+1630   	; 0xc4a <__divsf3>
     5ec:	96 d3       	rcall	.+1836   	; 0xd1a <__fixsfsi>
     5ee:	79 83       	std	Y+1, r23	; 0x01
     5f0:	68 83       	st	Y, r22
XYZ[1]=(int16_t)((data_struct.accel_y)/8.192);
     5f2:	f8 01       	movw	r30, r16
     5f4:	62 81       	ldd	r22, Z+2	; 0x02
     5f6:	73 81       	ldd	r23, Z+3	; 0x03
     5f8:	07 2e       	mov	r0, r23
     5fa:	00 0c       	add	r0, r0
     5fc:	88 0b       	sbc	r24, r24
     5fe:	99 0b       	sbc	r25, r25
     600:	bf d3       	rcall	.+1918   	; 0xd80 <__floatsisf>
     602:	2f e6       	ldi	r18, 0x6F	; 111
     604:	32 e1       	ldi	r19, 0x12	; 18
     606:	43 e0       	ldi	r20, 0x03	; 3
     608:	51 e4       	ldi	r21, 0x41	; 65
     60a:	1f d3       	rcall	.+1598   	; 0xc4a <__divsf3>
     60c:	86 d3       	rcall	.+1804   	; 0xd1a <__fixsfsi>
     60e:	7b 83       	std	Y+3, r23	; 0x03
     610:	6a 83       	std	Y+2, r22	; 0x02
XYZ[2]=(int16_t)((data_struct.accel_z)/8.192);
     612:	f8 01       	movw	r30, r16
     614:	64 81       	ldd	r22, Z+4	; 0x04
     616:	75 81       	ldd	r23, Z+5	; 0x05
     618:	07 2e       	mov	r0, r23
     61a:	00 0c       	add	r0, r0
     61c:	88 0b       	sbc	r24, r24
     61e:	99 0b       	sbc	r25, r25
     620:	af d3       	rcall	.+1886   	; 0xd80 <__floatsisf>
     622:	2f e6       	ldi	r18, 0x6F	; 111
     624:	32 e1       	ldi	r19, 0x12	; 18
     626:	43 e0       	ldi	r20, 0x03	; 3
     628:	51 e4       	ldi	r21, 0x41	; 65
     62a:	0f d3       	rcall	.+1566   	; 0xc4a <__divsf3>
     62c:	76 d3       	rcall	.+1772   	; 0xd1a <__fixsfsi>
     62e:	7d 83       	std	Y+5, r23	; 0x05
     630:	6c 83       	std	Y+4, r22	; 0x04
}
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	08 95       	ret

0000063c <getPitchRoll_s>:

static void getPitchRoll_s(double *pitchRoll)
{	
     63c:	4f 92       	push	r4
     63e:	5f 92       	push	r5
     640:	6f 92       	push	r6
     642:	7f 92       	push	r7
     644:	8f 92       	push	r8
     646:	9f 92       	push	r9
     648:	af 92       	push	r10
     64a:	bf 92       	push	r11
     64c:	cf 92       	push	r12
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	00 d0       	rcall	.+0      	; 0x65e <getPitchRoll_s+0x22>
     65e:	1f 92       	push	r1
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	8c 01       	movw	r16, r24
		pitchRoll[0] = (atan(((data_struct.accel_y)/16384.0) / sqrt(pow(((data_struct.accel_x)/16384.0), 2) + pow(((data_struct.accel_z)/16384), 2))) * PI_DIV_180) - 0.58;
     666:	60 91 df 02 	lds	r22, 0x02DF	; 0x8002df <data_struct+0x2>
     66a:	70 91 e0 02 	lds	r23, 0x02E0	; 0x8002e0 <data_struct+0x3>
     66e:	07 2e       	mov	r0, r23
     670:	00 0c       	add	r0, r0
     672:	88 0b       	sbc	r24, r24
     674:	99 0b       	sbc	r25, r25
     676:	84 d3       	rcall	.+1800   	; 0xd80 <__floatsisf>
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	40 e8       	ldi	r20, 0x80	; 128
     67e:	58 e3       	ldi	r21, 0x38	; 56
     680:	37 d4       	rcall	.+2158   	; 0xef0 <__mulsf3>
     682:	6b 01       	movw	r12, r22
     684:	7c 01       	movw	r14, r24
     686:	ed ed       	ldi	r30, 0xDD	; 221
     688:	f2 e0       	ldi	r31, 0x02	; 2
     68a:	60 81       	ld	r22, Z
     68c:	71 81       	ldd	r23, Z+1	; 0x01
     68e:	07 2e       	mov	r0, r23
     690:	00 0c       	add	r0, r0
     692:	88 0b       	sbc	r24, r24
     694:	99 0b       	sbc	r25, r25
     696:	74 d3       	rcall	.+1768   	; 0xd80 <__floatsisf>
     698:	4b 01       	movw	r8, r22
     69a:	5c 01       	movw	r10, r24
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	40 e8       	ldi	r20, 0x80	; 128
     6a2:	58 e3       	ldi	r21, 0x38	; 56
     6a4:	25 d4       	rcall	.+2122   	; 0xef0 <__mulsf3>
     6a6:	2b 01       	movw	r4, r22
     6a8:	3c 01       	movw	r6, r24
     6aa:	60 91 e1 02 	lds	r22, 0x02E1	; 0x8002e1 <data_struct+0x4>
     6ae:	70 91 e2 02 	lds	r23, 0x02E2	; 0x8002e2 <data_struct+0x5>
     6b2:	77 23       	and	r23, r23
     6b4:	14 f4       	brge	.+4      	; 0x6ba <getPitchRoll_s+0x7e>
     6b6:	61 50       	subi	r22, 0x01	; 1
     6b8:	70 4c       	sbci	r23, 0xC0	; 192
     6ba:	77 0f       	add	r23, r23
     6bc:	66 0b       	sbc	r22, r22
     6be:	77 0f       	add	r23, r23
     6c0:	76 2f       	mov	r23, r22
     6c2:	66 1f       	adc	r22, r22
     6c4:	07 2e       	mov	r0, r23
     6c6:	00 0c       	add	r0, r0
     6c8:	88 0b       	sbc	r24, r24
     6ca:	99 0b       	sbc	r25, r25
     6cc:	59 d3       	rcall	.+1714   	; 0xd80 <__floatsisf>
     6ce:	9b 01       	movw	r18, r22
     6d0:	ac 01       	movw	r20, r24
     6d2:	0e d4       	rcall	.+2076   	; 0xef0 <__mulsf3>
     6d4:	69 83       	std	Y+1, r22	; 0x01
     6d6:	7a 83       	std	Y+2, r23	; 0x02
     6d8:	8b 83       	std	Y+3, r24	; 0x03
     6da:	9c 83       	std	Y+4, r25	; 0x04
     6dc:	a3 01       	movw	r20, r6
     6de:	92 01       	movw	r18, r4
     6e0:	c3 01       	movw	r24, r6
     6e2:	b2 01       	movw	r22, r4
     6e4:	05 d4       	rcall	.+2058   	; 0xef0 <__mulsf3>
     6e6:	29 81       	ldd	r18, Y+1	; 0x01
     6e8:	3a 81       	ldd	r19, Y+2	; 0x02
     6ea:	4b 81       	ldd	r20, Y+3	; 0x03
     6ec:	5c 81       	ldd	r21, Y+4	; 0x04
     6ee:	21 d2       	rcall	.+1090   	; 0xb32 <__addsf3>
     6f0:	66 d4       	rcall	.+2252   	; 0xfbe <sqrt>
     6f2:	9b 01       	movw	r18, r22
     6f4:	ac 01       	movw	r20, r24
     6f6:	c7 01       	movw	r24, r14
     6f8:	b6 01       	movw	r22, r12
     6fa:	a7 d2       	rcall	.+1358   	; 0xc4a <__divsf3>
     6fc:	7e d2       	rcall	.+1276   	; 0xbfa <atan>
     6fe:	21 ee       	ldi	r18, 0xE1	; 225
     700:	3e e2       	ldi	r19, 0x2E	; 46
     702:	45 e6       	ldi	r20, 0x65	; 101
     704:	52 e4       	ldi	r21, 0x42	; 66
     706:	f4 d3       	rcall	.+2024   	; 0xef0 <__mulsf3>
     708:	21 ee       	ldi	r18, 0xE1	; 225
     70a:	3a e7       	ldi	r19, 0x7A	; 122
     70c:	44 e1       	ldi	r20, 0x14	; 20
     70e:	5f e3       	ldi	r21, 0x3F	; 63
     710:	0f d2       	rcall	.+1054   	; 0xb30 <__subsf3>
     712:	f8 01       	movw	r30, r16
     714:	60 83       	st	Z, r22
     716:	71 83       	std	Z+1, r23	; 0x01
     718:	82 83       	std	Z+2, r24	; 0x02
     71a:	93 83       	std	Z+3, r25	; 0x03
	pitchRoll[1] = (atan((-1.0*(data_struct.accel_x)/16384.0) / sqrt(pow(((data_struct.accel_y)/16384.0), 2) + pow(((data_struct.accel_z)/16384), 2))) * PI_DIV_180) + 0.58;
     71c:	a7 01       	movw	r20, r14
     71e:	96 01       	movw	r18, r12
     720:	c7 01       	movw	r24, r14
     722:	b6 01       	movw	r22, r12
     724:	e5 d3       	rcall	.+1994   	; 0xef0 <__mulsf3>
     726:	29 81       	ldd	r18, Y+1	; 0x01
     728:	3a 81       	ldd	r19, Y+2	; 0x02
     72a:	4b 81       	ldd	r20, Y+3	; 0x03
     72c:	5c 81       	ldd	r21, Y+4	; 0x04
     72e:	01 d2       	rcall	.+1026   	; 0xb32 <__addsf3>
     730:	46 d4       	rcall	.+2188   	; 0xfbe <sqrt>
     732:	6b 01       	movw	r12, r22
     734:	7c 01       	movw	r14, r24
     736:	c5 01       	movw	r24, r10
     738:	b4 01       	movw	r22, r8
     73a:	90 58       	subi	r25, 0x80	; 128
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 e8       	ldi	r20, 0x80	; 128
     742:	58 e3       	ldi	r21, 0x38	; 56
     744:	d5 d3       	rcall	.+1962   	; 0xef0 <__mulsf3>
     746:	a7 01       	movw	r20, r14
     748:	96 01       	movw	r18, r12
     74a:	7f d2       	rcall	.+1278   	; 0xc4a <__divsf3>
     74c:	56 d2       	rcall	.+1196   	; 0xbfa <atan>
     74e:	21 ee       	ldi	r18, 0xE1	; 225
     750:	3e e2       	ldi	r19, 0x2E	; 46
     752:	45 e6       	ldi	r20, 0x65	; 101
     754:	52 e4       	ldi	r21, 0x42	; 66
     756:	cc d3       	rcall	.+1944   	; 0xef0 <__mulsf3>
     758:	21 ee       	ldi	r18, 0xE1	; 225
     75a:	3a e7       	ldi	r19, 0x7A	; 122
     75c:	44 e1       	ldi	r20, 0x14	; 20
     75e:	5f e3       	ldi	r21, 0x3F	; 63
     760:	e8 d1       	rcall	.+976    	; 0xb32 <__addsf3>
     762:	f8 01       	movw	r30, r16
     764:	64 83       	std	Z+4, r22	; 0x04
     766:	75 83       	std	Z+5, r23	; 0x05
     768:	86 83       	std	Z+6, r24	; 0x06
     76a:	97 83       	std	Z+7, r25	; 0x07
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
}
     772:	0f 90       	pop	r0
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	0f 91       	pop	r16
     77c:	ff 90       	pop	r15
     77e:	ef 90       	pop	r14
     780:	df 90       	pop	r13
     782:	cf 90       	pop	r12
     784:	bf 90       	pop	r11
     786:	af 90       	pop	r10
     788:	9f 90       	pop	r9
     78a:	8f 90       	pop	r8
     78c:	7f 90       	pop	r7
     78e:	6f 90       	pop	r6
     790:	5f 90       	pop	r5
     792:	4f 90       	pop	r4
     794:	08 95       	ret

00000796 <get_GA_interface>:
     796:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <i2c+0x1>
     79a:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <i2c>
	
	if (!initialized)
	{
		i2c=i2c_interface;
		
			GA_interface.start					=	start_s;
     79e:	e9 ec       	ldi	r30, 0xC9	; 201
     7a0:	f2 e0       	ldi	r31, 0x02	; 2
     7a2:	87 e2       	ldi	r24, 0x27	; 39
     7a4:	92 e0       	ldi	r25, 0x02	; 2
     7a6:	91 83       	std	Z+1, r25	; 0x01
     7a8:	80 83       	st	Z, r24
			GA_interface.stop					=	stop_s;
     7aa:	81 e3       	ldi	r24, 0x31	; 49
     7ac:	92 e0       	ldi	r25, 0x02	; 2
     7ae:	93 83       	std	Z+3, r25	; 0x03
     7b0:	82 83       	std	Z+2, r24	; 0x02
			GA_interface.enterWrite				=	enterWrite_s;
     7b2:	8a e3       	ldi	r24, 0x3A	; 58
     7b4:	92 e0       	ldi	r25, 0x02	; 2
     7b6:	95 83       	std	Z+5, r25	; 0x05
     7b8:	84 83       	std	Z+4, r24	; 0x04
			GA_interface.enterRead				=	enterRead_s;
     7ba:	84 e4       	ldi	r24, 0x44	; 68
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	97 83       	std	Z+7, r25	; 0x07
     7c0:	86 83       	std	Z+6, r24	; 0x06
			GA_interface.selectRegister			=	selectRegister_s;
     7c2:	8e e4       	ldi	r24, 0x4E	; 78
     7c4:	92 e0       	ldi	r25, 0x02	; 2
     7c6:	91 87       	std	Z+9, r25	; 0x09
     7c8:	80 87       	std	Z+8, r24	; 0x08
			GA_interface.write					=	write_s;
     7ca:	89 e5       	ldi	r24, 0x59	; 89
     7cc:	92 e0       	ldi	r25, 0x02	; 2
     7ce:	93 87       	std	Z+11, r25	; 0x0b
     7d0:	82 87       	std	Z+10, r24	; 0x0a
			GA_interface.read					=	read_s;
     7d2:	82 e6       	ldi	r24, 0x62	; 98
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	95 87       	std	Z+13, r25	; 0x0d
     7d8:	84 87       	std	Z+12, r24	; 0x0c
			GA_interface.getPitchRoll 			=	getPitchRoll_s;
     7da:	8e e1       	ldi	r24, 0x1E	; 30
     7dc:	93 e0       	ldi	r25, 0x03	; 3
     7de:	97 87       	std	Z+15, r25	; 0x0f
     7e0:	86 87       	std	Z+14, r24	; 0x0e
			GA_interface.getAccelXYZ			=	getAccelXYZ_s;			
     7e2:	82 ee       	ldi	r24, 0xE2	; 226
     7e4:	92 e0       	ldi	r25, 0x02	; 2
     7e6:	91 8b       	std	Z+17, r25	; 0x11
     7e8:	80 8b       	std	Z+16, r24	; 0x10
	}
	return &GA_interface; 
}
     7ea:	cf 01       	movw	r24, r30
     7ec:	08 95       	ret

000007ee <main>:
}
**/
#define UARTADDR UART0

int main(void)
{
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	00 d0       	rcall	.+0      	; 0x7f4 <main+0x6>
     7f4:	00 d0       	rcall	.+0      	; 0x7f6 <main+0x8>
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7fa:	2f ef       	ldi	r18, 0xFF	; 255
     7fc:	43 ed       	ldi	r20, 0xD3	; 211
     7fe:	80 e3       	ldi	r24, 0x30	; 48
     800:	21 50       	subi	r18, 0x01	; 1
     802:	40 40       	sbci	r20, 0x00	; 0
     804:	80 40       	sbci	r24, 0x00	; 0
     806:	e1 f7       	brne	.-8      	; 0x800 <main+0x12>
     808:	00 c0       	rjmp	.+0      	; 0x80a <main+0x1c>
     80a:	00 00       	nop
     80c:	9f ef       	ldi	r25, 0xFF	; 255
     80e:	e3 ed       	ldi	r30, 0xD3	; 211
     810:	f0 e3       	ldi	r31, 0x30	; 48
     812:	91 50       	subi	r25, 0x01	; 1
     814:	e0 40       	sbci	r30, 0x00	; 0
     816:	f0 40       	sbci	r31, 0x00	; 0
     818:	e1 f7       	brne	.-8      	; 0x812 <main+0x24>
     81a:	00 c0       	rjmp	.+0      	; 0x81c <main+0x2e>
     81c:	00 00       	nop
	{
		_delay_ms(1000);
	}
	
	
	InitUART(UARTADDR, 9600, 8,0);
     81e:	00 e0       	ldi	r16, 0x00	; 0
     820:	28 e0       	ldi	r18, 0x08	; 8
     822:	40 e8       	ldi	r20, 0x80	; 128
     824:	55 e2       	ldi	r21, 0x25	; 37
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	80 ec       	ldi	r24, 0xC0	; 192
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	7f dd       	rcall	.-1282   	; 0x32e <InitUART>
	SendString(UARTADDR,"\n \n \n");
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	72 e0       	ldi	r23, 0x02	; 2
     834:	80 ec       	ldi	r24, 0xC0	; 192
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	d3 dd       	rcall	.-1114   	; 0x3e0 <SendString>
	SendInteger(UARTADDR,32000);
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	7d e7       	ldi	r23, 0x7D	; 125
     83e:	80 ec       	ldi	r24, 0xC0	; 192
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	e2 dd       	rcall	.-1084   	; 0x408 <SendInteger>
	SendString(UARTADDR,"\n");
     844:	65 e0       	ldi	r22, 0x05	; 5
     846:	72 e0       	ldi	r23, 0x02	; 2
     848:	80 ec       	ldi	r24, 0xC0	; 192
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	c9 dd       	rcall	.-1134   	; 0x3e0 <SendString>
	SendString(UARTADDR,"creating objects \n");
     84e:	67 e0       	ldi	r22, 0x07	; 7
     850:	72 e0       	ldi	r23, 0x02	; 2
     852:	80 ec       	ldi	r24, 0xC0	; 192
     854:	90 e0       	ldi	r25, 0x00	; 0
	
	i2c_obj=get_i2c_interface();
     856:	c4 dd       	rcall	.-1144   	; 0x3e0 <SendString>
     858:	36 dd       	rcall	.-1428   	; 0x2c6 <get_i2c_interface>
     85a:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <i2c_obj+0x1>
     85e:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <i2c_obj>
	
	GA_obj=get_GA_interface(i2c_obj);
     862:	99 df       	rcall	.-206    	; 0x796 <get_GA_interface>
     864:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <GA_obj+0x1>
     868:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <GA_obj>
	
	SendString(UARTADDR,"init i2c: ");
     86c:	6a e1       	ldi	r22, 0x1A	; 26
     86e:	72 e0       	ldi	r23, 0x02	; 2
     870:	80 ec       	ldi	r24, 0xC0	; 192
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	b5 dd       	rcall	.-1174   	; 0x3e0 <SendString>
	SendInteger(UARTADDR,i2c_obj->init(10000,false));
     876:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <i2c_obj>
     87a:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <i2c_obj+0x1>
     87e:	01 90       	ld	r0, Z+
     880:	f0 81       	ld	r31, Z
     882:	e0 2d       	mov	r30, r0
     884:	40 e0       	ldi	r20, 0x00	; 0
     886:	60 e1       	ldi	r22, 0x10	; 16
     888:	77 e2       	ldi	r23, 0x27	; 39
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	19 95       	eicall
     890:	bc 01       	movw	r22, r24
     892:	80 ec       	ldi	r24, 0xC0	; 192
     894:	90 e0       	ldi	r25, 0x00	; 0
	
	
	
	
	SendString(UARTADDR,"\n start transfer: ");
     896:	b8 dd       	rcall	.-1168   	; 0x408 <SendInteger>
     898:	65 e2       	ldi	r22, 0x25	; 37
     89a:	72 e0       	ldi	r23, 0x02	; 2
     89c:	80 ec       	ldi	r24, 0xC0	; 192
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	9f dd       	rcall	.-1218   	; 0x3e0 <SendString>
	GA_obj->start();
     8a2:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
     8a6:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     8aa:	80 81       	ld	r24, Z
     8ac:	91 81       	ldd	r25, Z+1	; 0x01
     8ae:	fc 01       	movw	r30, r24
	SendInteger(UARTADDR,(TWSR)&(0b11111000));
     8b0:	19 95       	eicall
     8b2:	09 eb       	ldi	r16, 0xB9	; 185
     8b4:	10 e0       	ldi	r17, 0x00	; 0
     8b6:	f8 01       	movw	r30, r16
     8b8:	60 81       	ld	r22, Z
     8ba:	68 7f       	andi	r22, 0xF8	; 248
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	80 ec       	ldi	r24, 0xC0	; 192
     8c0:	90 e0       	ldi	r25, 0x00	; 0
	SendString(UARTADDR,"\n enter write: ");
     8c2:	a2 dd       	rcall	.-1212   	; 0x408 <SendInteger>
     8c4:	68 e3       	ldi	r22, 0x38	; 56
     8c6:	72 e0       	ldi	r23, 0x02	; 2
     8c8:	80 ec       	ldi	r24, 0xC0	; 192
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	89 dd       	rcall	.-1262   	; 0x3e0 <SendString>
	GA_obj->enterWrite();
     8ce:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
     8d2:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     8d6:	04 80       	ldd	r0, Z+4	; 0x04
     8d8:	f5 81       	ldd	r31, Z+5	; 0x05
     8da:	e0 2d       	mov	r30, r0
	SendInteger(UARTADDR,(TWSR)&(0b11111000));
     8dc:	19 95       	eicall
     8de:	f8 01       	movw	r30, r16
     8e0:	60 81       	ld	r22, Z
     8e2:	68 7f       	andi	r22, 0xF8	; 248
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	80 ec       	ldi	r24, 0xC0	; 192
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	8e dd       	rcall	.-1252   	; 0x408 <SendInteger>
	SendString(UARTADDR,"\n select reg: ");
     8ec:	68 e4       	ldi	r22, 0x48	; 72
     8ee:	72 e0       	ldi	r23, 0x02	; 2
     8f0:	80 ec       	ldi	r24, 0xC0	; 192
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	75 dd       	rcall	.-1302   	; 0x3e0 <SendString>
     8f6:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
	GA_obj->selectRegister(0x6B);
     8fa:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     8fe:	00 84       	ldd	r0, Z+8	; 0x08
     900:	f1 85       	ldd	r31, Z+9	; 0x09
     902:	e0 2d       	mov	r30, r0
     904:	8b e6       	ldi	r24, 0x6B	; 107
	SendInteger(UARTADDR,(TWSR)&(0b11111000));
     906:	19 95       	eicall
     908:	f8 01       	movw	r30, r16
     90a:	60 81       	ld	r22, Z
     90c:	68 7f       	andi	r22, 0xF8	; 248
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	80 ec       	ldi	r24, 0xC0	; 192
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	79 dd       	rcall	.-1294   	; 0x408 <SendInteger>
	SendString(UARTADDR,"\n about to start: ");
     916:	67 e5       	ldi	r22, 0x57	; 87
     918:	72 e0       	ldi	r23, 0x02	; 2
     91a:	80 ec       	ldi	r24, 0xC0	; 192
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	60 dd       	rcall	.-1344   	; 0x3e0 <SendString>
     920:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
	GA_obj->write(0x00);
     924:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     928:	02 84       	ldd	r0, Z+10	; 0x0a
     92a:	f3 85       	ldd	r31, Z+11	; 0x0b
     92c:	e0 2d       	mov	r30, r0
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	19 95       	eicall
	GA_obj->stop();
     932:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
     936:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     93a:	02 80       	ldd	r0, Z+2	; 0x02
     93c:	f3 81       	ldd	r31, Z+3	; 0x03
     93e:	e0 2d       	mov	r30, r0
	SendString(UARTADDR,"\n is reset \n ");
     940:	19 95       	eicall
     942:	6a e6       	ldi	r22, 0x6A	; 106
     944:	72 e0       	ldi	r23, 0x02	; 2
     946:	80 ec       	ldi	r24, 0xC0	; 192
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	4a dd       	rcall	.-1388   	; 0x3e0 <SendString>
	

//Set to +- 4G

	SendString(UARTADDR,"\n start transfer: ");
     94c:	65 e2       	ldi	r22, 0x25	; 37
     94e:	72 e0       	ldi	r23, 0x02	; 2
     950:	80 ec       	ldi	r24, 0xC0	; 192
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	45 dd       	rcall	.-1398   	; 0x3e0 <SendString>
	GA_obj->start();
     956:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
     95a:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     95e:	80 81       	ld	r24, Z
     960:	91 81       	ldd	r25, Z+1	; 0x01
     962:	fc 01       	movw	r30, r24
	SendInteger(UARTADDR,(TWSR)&(0b11111000));
     964:	19 95       	eicall
     966:	f8 01       	movw	r30, r16
     968:	60 81       	ld	r22, Z
     96a:	68 7f       	andi	r22, 0xF8	; 248
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	80 ec       	ldi	r24, 0xC0	; 192
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	4a dd       	rcall	.-1388   	; 0x408 <SendInteger>
	SendString(UARTADDR,"\n enter write: ");
     974:	68 e3       	ldi	r22, 0x38	; 56
     976:	72 e0       	ldi	r23, 0x02	; 2
     978:	80 ec       	ldi	r24, 0xC0	; 192
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	31 dd       	rcall	.-1438   	; 0x3e0 <SendString>
	GA_obj->enterWrite();
     97e:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
     982:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     986:	04 80       	ldd	r0, Z+4	; 0x04
     988:	f5 81       	ldd	r31, Z+5	; 0x05
     98a:	e0 2d       	mov	r30, r0
     98c:	19 95       	eicall
	SendInteger(UARTADDR,(TWSR)&(0b11111000));
     98e:	f8 01       	movw	r30, r16
     990:	60 81       	ld	r22, Z
     992:	68 7f       	andi	r22, 0xF8	; 248
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	80 ec       	ldi	r24, 0xC0	; 192
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	36 dd       	rcall	.-1428   	; 0x408 <SendInteger>
	SendString(UARTADDR,"\n select reg: ");
     99c:	68 e4       	ldi	r22, 0x48	; 72
     99e:	72 e0       	ldi	r23, 0x02	; 2
     9a0:	80 ec       	ldi	r24, 0xC0	; 192
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	1d dd       	rcall	.-1478   	; 0x3e0 <SendString>
	GA_obj->selectRegister(28);
     9a6:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
     9aa:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     9ae:	00 84       	ldd	r0, Z+8	; 0x08
     9b0:	f1 85       	ldd	r31, Z+9	; 0x09
     9b2:	e0 2d       	mov	r30, r0
     9b4:	8c e1       	ldi	r24, 0x1C	; 28
     9b6:	19 95       	eicall
	SendInteger(UARTADDR,(TWSR)&(0b11111000));
     9b8:	f8 01       	movw	r30, r16
     9ba:	60 81       	ld	r22, Z
     9bc:	68 7f       	andi	r22, 0xF8	; 248
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	80 ec       	ldi	r24, 0xC0	; 192
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	21 dd       	rcall	.-1470   	; 0x408 <SendInteger>
     9c6:	67 e5       	ldi	r22, 0x57	; 87
	SendString(UARTADDR,"\n about to start: ");
     9c8:	72 e0       	ldi	r23, 0x02	; 2
     9ca:	80 ec       	ldi	r24, 0xC0	; 192
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	08 dd       	rcall	.-1520   	; 0x3e0 <SendString>
     9d0:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
	GA_obj->write(0b00001000);
     9d4:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     9d8:	02 84       	ldd	r0, Z+10	; 0x0a
     9da:	f3 85       	ldd	r31, Z+11	; 0x0b
     9dc:	e0 2d       	mov	r30, r0
     9de:	88 e0       	ldi	r24, 0x08	; 8
     9e0:	19 95       	eicall
     9e2:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
	GA_obj->stop();
     9e6:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     9ea:	02 80       	ldd	r0, Z+2	; 0x02
     9ec:	f3 81       	ldd	r31, Z+3	; 0x03
     9ee:	e0 2d       	mov	r30, r0
     9f0:	19 95       	eicall
     9f2:	68 e7       	ldi	r22, 0x78	; 120
	SendString(UARTADDR,"\n set to 4g \n ");
     9f4:	72 e0       	ldi	r23, 0x02	; 2
     9f6:	80 ec       	ldi	r24, 0xC0	; 192
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	f2 dc       	rcall	.-1564   	; 0x3e0 <SendString>
     9fc:	ff ef       	ldi	r31, 0xFF	; 255
     9fe:	24 e3       	ldi	r18, 0x34	; 52
     a00:	4c e0       	ldi	r20, 0x0C	; 12
     a02:	f1 50       	subi	r31, 0x01	; 1
     a04:	20 40       	sbci	r18, 0x00	; 0
     a06:	40 40       	sbci	r20, 0x00	; 0
     a08:	e1 f7       	brne	.-8      	; 0xa02 <main+0x214>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <main+0x21e>
     a0c:	00 00       	nop
     a0e:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
    while (1) 
    {
	_delay_ms(250);

	//SendString(UARTADDR,"\n start transfer: ");
	GA_obj->start();
     a12:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     a16:	01 90       	ld	r0, Z+
     a18:	f0 81       	ld	r31, Z
     a1a:	e0 2d       	mov	r30, r0
     a1c:	19 95       	eicall
     a1e:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
	
	//SendInteger(UARTADDR,(TWSR)&(0b11111000));
	//SendString(UARTADDR,"\n enter write: ");
	GA_obj->enterWrite();
     a22:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     a26:	04 80       	ldd	r0, Z+4	; 0x04
     a28:	f5 81       	ldd	r31, Z+5	; 0x05
     a2a:	e0 2d       	mov	r30, r0
     a2c:	19 95       	eicall
     a2e:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
	//SendInteger(UARTADDR,(TWSR)&(0b11111000));
	//SendString(UARTADDR,"\n select reg: ");
	GA_obj->selectRegister(ACCEL_XOUT_H);
     a32:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     a36:	00 84       	ldd	r0, Z+8	; 0x08
     a38:	f1 85       	ldd	r31, Z+9	; 0x09
     a3a:	e0 2d       	mov	r30, r0
     a3c:	8b e3       	ldi	r24, 0x3B	; 59
     a3e:	19 95       	eicall
     a40:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
	//SendInteger(UARTADDR,(TWSR)&(0b11111000));
	//SendString(UARTADDR,"\n about to start: ");
	GA_obj->start();
     a44:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     a48:	01 90       	ld	r0, Z+
     a4a:	f0 81       	ld	r31, Z
     a4c:	e0 2d       	mov	r30, r0
     a4e:	19 95       	eicall
     a50:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
	//SendInteger(UARTADDR,(TWSR)&(0b11111000));
	//SendString(UARTADDR,"\n enter read: ");
	GA_obj->enterRead();
     a54:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     a58:	06 80       	ldd	r0, Z+6	; 0x06
     a5a:	f7 81       	ldd	r31, Z+7	; 0x07
     a5c:	e0 2d       	mov	r30, r0
     a5e:	19 95       	eicall
     a60:	0d e0       	ldi	r16, 0x0D	; 13
     a62:	10 e0       	ldi	r17, 0x00	; 0
     a64:	29 c0       	rjmp	.+82     	; 0xab8 <main+0x2ca>
     a66:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
	//uint16_t data[13];
	for(i=0;i<14;++i)
	{
		if(i==13)
		{
			GA_obj->read(true);
     a6a:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     a6e:	04 84       	ldd	r0, Z+12	; 0x0c
     a70:	f5 85       	ldd	r31, Z+13	; 0x0d
     a72:	e0 2d       	mov	r30, r0
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	19 95       	eicall
     a78:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
		else
		{
			GA_obj->read(false);
		}
	}
	GA_obj->stop();
     a7c:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     a80:	02 80       	ldd	r0, Z+2	; 0x02
     a82:	f3 81       	ldd	r31, Z+3	; 0x03
     a84:	e0 2d       	mov	r30, r0
     a86:	19 95       	eicall
     a88:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
    int16_t data[3];
	//char outstring[10];
	GA_obj->getAccelXYZ(data);
     a8c:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     a90:	00 88       	ldd	r0, Z+16	; 0x10
     a92:	f1 89       	ldd	r31, Z+17	; 0x11
     a94:	e0 2d       	mov	r30, r0
     a96:	ce 01       	movw	r24, r28
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	19 95       	eicall
     a9c:	65 e0       	ldi	r22, 0x05	; 5
	SendInteger(UARTADDR,data[1]);	
	SendString(UARTADDR,",");
	SendInteger(UARTADDR,data[2]);	
	SendString(UARTADDR,"\n");
**/
SendString(UARTADDR,"\n");
     a9e:	72 e0       	ldi	r23, 0x02	; 2
     aa0:	80 ec       	ldi	r24, 0xC0	; 192
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	9d dc       	rcall	.-1734   	; 0x3e0 <SendString>
     aa6:	8d 81       	ldd	r24, Y+5	; 0x05
     aa8:	9e 81       	ldd	r25, Y+6	; 0x06

if (data[2]>3800 ||data[2]<(-3800))
     aaa:	9c 01       	movw	r18, r24
     aac:	28 52       	subi	r18, 0x28	; 40
     aae:	31 4f       	sbci	r19, 0xF1	; 241
     ab0:	21 3b       	cpi	r18, 0xB1	; 177
     ab2:	3d 41       	sbci	r19, 0x1D	; 29
     ab4:	a0 f0       	brcs	.+40     	; 0xade <main+0x2f0>
     ab6:	0d c0       	rjmp	.+26     	; 0xad2 <main+0x2e4>
     ab8:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <GA_obj>
		{
			GA_obj->read(true);
		}
		else
		{
			GA_obj->read(false);
     abc:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <GA_obj+0x1>
     ac0:	04 84       	ldd	r0, Z+12	; 0x0c
     ac2:	f5 85       	ldd	r31, Z+13	; 0x0d
     ac4:	e0 2d       	mov	r30, r0
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	19 95       	eicall
     aca:	01 50       	subi	r16, 0x01	; 1
     acc:	11 09       	sbc	r17, r1
	
	
	//uint16_t data[13];
	for(i=0;i<14;++i)
	{
		if(i==13)
     ace:	a1 f7       	brne	.-24     	; 0xab8 <main+0x2ca>
     ad0:	ca cf       	rjmp	.-108    	; 0xa66 <main+0x278>
**/
SendString(UARTADDR,"\n");

if (data[2]>3800 ||data[2]<(-3800))
{
	SendString(UARTADDR,"8======D~~~ ~ ~~  ");
     ad2:	67 e8       	ldi	r22, 0x87	; 135
     ad4:	72 e0       	ldi	r23, 0x02	; 2
     ad6:	80 ec       	ldi	r24, 0xC0	; 192
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	82 dc       	rcall	.-1788   	; 0x3e0 <SendString>
     adc:	8f cf       	rjmp	.-226    	; 0x9fc <main+0x20e>
} 
else if (data[2]>3000 ||data[2]<(-3000))
     ade:	9c 01       	movw	r18, r24
     ae0:	28 54       	subi	r18, 0x48	; 72
     ae2:	34 4f       	sbci	r19, 0xF4	; 244
     ae4:	21 37       	cpi	r18, 0x71	; 113
     ae6:	37 41       	sbci	r19, 0x17	; 23
     ae8:	30 f0       	brcs	.+12     	; 0xaf6 <main+0x308>
{
	SendString(UARTADDR,"8=====D");	
     aea:	6a e9       	ldi	r22, 0x9A	; 154
     aec:	72 e0       	ldi	r23, 0x02	; 2
     aee:	80 ec       	ldi	r24, 0xC0	; 192
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	76 dc       	rcall	.-1812   	; 0x3e0 <SendString>
     af4:	83 cf       	rjmp	.-250    	; 0x9fc <main+0x20e>
}
else if(data[2]>2000 ||data[2]<(-2000))
     af6:	9c 01       	movw	r18, r24
     af8:	20 53       	subi	r18, 0x30	; 48
     afa:	38 4f       	sbci	r19, 0xF8	; 248
     afc:	21 3a       	cpi	r18, 0xA1	; 161
     afe:	3f 40       	sbci	r19, 0x0F	; 15
     b00:	30 f0       	brcs	.+12     	; 0xb0e <main+0x320>
{
	SendString(UARTADDR,"8===D");	
     b02:	62 ea       	ldi	r22, 0xA2	; 162
     b04:	72 e0       	ldi	r23, 0x02	; 2
     b06:	80 ec       	ldi	r24, 0xC0	; 192
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	6a dc       	rcall	.-1836   	; 0x3e0 <SendString>
     b0c:	77 cf       	rjmp	.-274    	; 0x9fc <main+0x20e>
     b0e:	80 5e       	subi	r24, 0xE0	; 224
}
else if (data[2]>800 ||data[2]<(-800))
     b10:	9c 4f       	sbci	r25, 0xFC	; 252
     b12:	81 34       	cpi	r24, 0x41	; 65
     b14:	96 40       	sbci	r25, 0x06	; 6
     b16:	30 f0       	brcs	.+12     	; 0xb24 <main+0x336>
     b18:	68 ea       	ldi	r22, 0xA8	; 168
{
	
	SendString(UARTADDR,"8==D");	
     b1a:	72 e0       	ldi	r23, 0x02	; 2
     b1c:	80 ec       	ldi	r24, 0xC0	; 192
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	5f dc       	rcall	.-1858   	; 0x3e0 <SendString>
     b22:	6c cf       	rjmp	.-296    	; 0x9fc <main+0x20e>
     b24:	6d ea       	ldi	r22, 0xAD	; 173
     b26:	72 e0       	ldi	r23, 0x02	; 2
}
else
{
	SendString(UARTADDR,"8=D");	
     b28:	80 ec       	ldi	r24, 0xC0	; 192
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	59 dc       	rcall	.-1870   	; 0x3e0 <SendString>
     b2e:	66 cf       	rjmp	.-308    	; 0x9fc <main+0x20e>

00000b30 <__subsf3>:
     b30:	50 58       	subi	r21, 0x80	; 128

00000b32 <__addsf3>:
     b32:	bb 27       	eor	r27, r27
}

    }
     b34:	aa 27       	eor	r26, r26
     b36:	0e d0       	rcall	.+28     	; 0xb54 <__addsf3x>
     b38:	9a c1       	rjmp	.+820    	; 0xe6e <__fp_round>
     b3a:	8b d1       	rcall	.+790    	; 0xe52 <__fp_pscA>
     b3c:	30 f0       	brcs	.+12     	; 0xb4a <__addsf3+0x18>
     b3e:	90 d1       	rcall	.+800    	; 0xe60 <__fp_pscB>
     b40:	20 f0       	brcs	.+8      	; 0xb4a <__addsf3+0x18>
     b42:	31 f4       	brne	.+12     	; 0xb50 <__addsf3+0x1e>
     b44:	9f 3f       	cpi	r25, 0xFF	; 255
     b46:	11 f4       	brne	.+4      	; 0xb4c <__addsf3+0x1a>
     b48:	1e f4       	brtc	.+6      	; 0xb50 <__addsf3+0x1e>
     b4a:	5b c1       	rjmp	.+694    	; 0xe02 <__fp_nan>
     b4c:	0e f4       	brtc	.+2      	; 0xb50 <__addsf3+0x1e>
     b4e:	e0 95       	com	r30
     b50:	e7 fb       	bst	r30, 7
     b52:	51 c1       	rjmp	.+674    	; 0xdf6 <__fp_inf>

00000b54 <__addsf3x>:
     b54:	e9 2f       	mov	r30, r25
     b56:	9c d1       	rcall	.+824    	; 0xe90 <__fp_split3>
     b58:	80 f3       	brcs	.-32     	; 0xb3a <__addsf3+0x8>
     b5a:	ba 17       	cp	r27, r26
     b5c:	62 07       	cpc	r22, r18
     b5e:	73 07       	cpc	r23, r19
     b60:	84 07       	cpc	r24, r20
     b62:	95 07       	cpc	r25, r21
     b64:	18 f0       	brcs	.+6      	; 0xb6c <__addsf3x+0x18>
     b66:	71 f4       	brne	.+28     	; 0xb84 <__addsf3x+0x30>
     b68:	9e f5       	brtc	.+102    	; 0xbd0 <__addsf3x+0x7c>
     b6a:	b4 c1       	rjmp	.+872    	; 0xed4 <__fp_zero>
     b6c:	0e f4       	brtc	.+2      	; 0xb70 <__addsf3x+0x1c>
     b6e:	e0 95       	com	r30
     b70:	0b 2e       	mov	r0, r27
     b72:	ba 2f       	mov	r27, r26
     b74:	a0 2d       	mov	r26, r0
     b76:	0b 01       	movw	r0, r22
     b78:	b9 01       	movw	r22, r18
     b7a:	90 01       	movw	r18, r0
     b7c:	0c 01       	movw	r0, r24
     b7e:	ca 01       	movw	r24, r20
     b80:	a0 01       	movw	r20, r0
     b82:	11 24       	eor	r1, r1
     b84:	ff 27       	eor	r31, r31
     b86:	59 1b       	sub	r21, r25
     b88:	99 f0       	breq	.+38     	; 0xbb0 <__addsf3x+0x5c>
     b8a:	59 3f       	cpi	r21, 0xF9	; 249
     b8c:	50 f4       	brcc	.+20     	; 0xba2 <__addsf3x+0x4e>
     b8e:	50 3e       	cpi	r21, 0xE0	; 224
     b90:	68 f1       	brcs	.+90     	; 0xbec <__addsf3x+0x98>
     b92:	1a 16       	cp	r1, r26
     b94:	f0 40       	sbci	r31, 0x00	; 0
     b96:	a2 2f       	mov	r26, r18
     b98:	23 2f       	mov	r18, r19
     b9a:	34 2f       	mov	r19, r20
     b9c:	44 27       	eor	r20, r20
     b9e:	58 5f       	subi	r21, 0xF8	; 248
     ba0:	f3 cf       	rjmp	.-26     	; 0xb88 <__addsf3x+0x34>
     ba2:	46 95       	lsr	r20
     ba4:	37 95       	ror	r19
     ba6:	27 95       	ror	r18
     ba8:	a7 95       	ror	r26
     baa:	f0 40       	sbci	r31, 0x00	; 0
     bac:	53 95       	inc	r21
     bae:	c9 f7       	brne	.-14     	; 0xba2 <__addsf3x+0x4e>
     bb0:	7e f4       	brtc	.+30     	; 0xbd0 <__addsf3x+0x7c>
     bb2:	1f 16       	cp	r1, r31
     bb4:	ba 0b       	sbc	r27, r26
     bb6:	62 0b       	sbc	r22, r18
     bb8:	73 0b       	sbc	r23, r19
     bba:	84 0b       	sbc	r24, r20
     bbc:	ba f0       	brmi	.+46     	; 0xbec <__addsf3x+0x98>
     bbe:	91 50       	subi	r25, 0x01	; 1
     bc0:	a1 f0       	breq	.+40     	; 0xbea <__addsf3x+0x96>
     bc2:	ff 0f       	add	r31, r31
     bc4:	bb 1f       	adc	r27, r27
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	88 1f       	adc	r24, r24
     bcc:	c2 f7       	brpl	.-16     	; 0xbbe <__addsf3x+0x6a>
     bce:	0e c0       	rjmp	.+28     	; 0xbec <__addsf3x+0x98>
     bd0:	ba 0f       	add	r27, r26
     bd2:	62 1f       	adc	r22, r18
     bd4:	73 1f       	adc	r23, r19
     bd6:	84 1f       	adc	r24, r20
     bd8:	48 f4       	brcc	.+18     	; 0xbec <__addsf3x+0x98>
     bda:	87 95       	ror	r24
     bdc:	77 95       	ror	r23
     bde:	67 95       	ror	r22
     be0:	b7 95       	ror	r27
     be2:	f7 95       	ror	r31
     be4:	9e 3f       	cpi	r25, 0xFE	; 254
     be6:	08 f0       	brcs	.+2      	; 0xbea <__addsf3x+0x96>
     be8:	b3 cf       	rjmp	.-154    	; 0xb50 <__addsf3+0x1e>
     bea:	93 95       	inc	r25
     bec:	88 0f       	add	r24, r24
     bee:	08 f0       	brcs	.+2      	; 0xbf2 <__addsf3x+0x9e>
     bf0:	99 27       	eor	r25, r25
     bf2:	ee 0f       	add	r30, r30
     bf4:	97 95       	ror	r25
     bf6:	87 95       	ror	r24
     bf8:	08 95       	ret

00000bfa <atan>:
     bfa:	df 93       	push	r29
     bfc:	dd 27       	eor	r29, r29
     bfe:	b9 2f       	mov	r27, r25
     c00:	bf 77       	andi	r27, 0x7F	; 127
     c02:	40 e8       	ldi	r20, 0x80	; 128
     c04:	5f e3       	ldi	r21, 0x3F	; 63
     c06:	16 16       	cp	r1, r22
     c08:	17 06       	cpc	r1, r23
     c0a:	48 07       	cpc	r20, r24
     c0c:	5b 07       	cpc	r21, r27
     c0e:	10 f4       	brcc	.+4      	; 0xc14 <atan+0x1a>
     c10:	d9 2f       	mov	r29, r25
     c12:	67 d1       	rcall	.+718    	; 0xee2 <inverse>
     c14:	9f 93       	push	r25
     c16:	8f 93       	push	r24
     c18:	7f 93       	push	r23
     c1a:	6f 93       	push	r22
     c1c:	0e d2       	rcall	.+1052   	; 0x103a <square>
     c1e:	e0 e0       	ldi	r30, 0x00	; 0
     c20:	f1 e0       	ldi	r31, 0x01	; 1
     c22:	f2 d0       	rcall	.+484    	; 0xe08 <__fp_powser>
     c24:	24 d1       	rcall	.+584    	; 0xe6e <__fp_round>
     c26:	2f 91       	pop	r18
     c28:	3f 91       	pop	r19
     c2a:	4f 91       	pop	r20
     c2c:	5f 91       	pop	r21
     c2e:	6c d1       	rcall	.+728    	; 0xf08 <__mulsf3x>
     c30:	dd 23       	and	r29, r29
     c32:	49 f0       	breq	.+18     	; 0xc46 <atan+0x4c>
     c34:	90 58       	subi	r25, 0x80	; 128
     c36:	a2 ea       	ldi	r26, 0xA2	; 162
     c38:	2a ed       	ldi	r18, 0xDA	; 218
     c3a:	3f e0       	ldi	r19, 0x0F	; 15
     c3c:	49 ec       	ldi	r20, 0xC9	; 201
     c3e:	5f e3       	ldi	r21, 0x3F	; 63
     c40:	d0 78       	andi	r29, 0x80	; 128
     c42:	5d 27       	eor	r21, r29
     c44:	87 df       	rcall	.-242    	; 0xb54 <__addsf3x>
     c46:	df 91       	pop	r29
     c48:	12 c1       	rjmp	.+548    	; 0xe6e <__fp_round>

00000c4a <__divsf3>:
     c4a:	0c d0       	rcall	.+24     	; 0xc64 <__divsf3x>
     c4c:	10 c1       	rjmp	.+544    	; 0xe6e <__fp_round>
     c4e:	08 d1       	rcall	.+528    	; 0xe60 <__fp_pscB>
     c50:	40 f0       	brcs	.+16     	; 0xc62 <__divsf3+0x18>
     c52:	ff d0       	rcall	.+510    	; 0xe52 <__fp_pscA>
     c54:	30 f0       	brcs	.+12     	; 0xc62 <__divsf3+0x18>
     c56:	21 f4       	brne	.+8      	; 0xc60 <__divsf3+0x16>
     c58:	5f 3f       	cpi	r21, 0xFF	; 255
     c5a:	19 f0       	breq	.+6      	; 0xc62 <__divsf3+0x18>
     c5c:	cc c0       	rjmp	.+408    	; 0xdf6 <__fp_inf>
     c5e:	51 11       	cpse	r21, r1
     c60:	3a c1       	rjmp	.+628    	; 0xed6 <__fp_szero>
     c62:	cf c0       	rjmp	.+414    	; 0xe02 <__fp_nan>

00000c64 <__divsf3x>:
     c64:	15 d1       	rcall	.+554    	; 0xe90 <__fp_split3>
     c66:	98 f3       	brcs	.-26     	; 0xc4e <__divsf3+0x4>

00000c68 <__divsf3_pse>:
     c68:	99 23       	and	r25, r25
     c6a:	c9 f3       	breq	.-14     	; 0xc5e <__divsf3+0x14>
     c6c:	55 23       	and	r21, r21
     c6e:	b1 f3       	breq	.-20     	; 0xc5c <__divsf3+0x12>
     c70:	95 1b       	sub	r25, r21
     c72:	55 0b       	sbc	r21, r21
     c74:	bb 27       	eor	r27, r27
     c76:	aa 27       	eor	r26, r26
     c78:	62 17       	cp	r22, r18
     c7a:	73 07       	cpc	r23, r19
     c7c:	84 07       	cpc	r24, r20
     c7e:	38 f0       	brcs	.+14     	; 0xc8e <__divsf3_pse+0x26>
     c80:	9f 5f       	subi	r25, 0xFF	; 255
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	22 0f       	add	r18, r18
     c86:	33 1f       	adc	r19, r19
     c88:	44 1f       	adc	r20, r20
     c8a:	aa 1f       	adc	r26, r26
     c8c:	a9 f3       	breq	.-22     	; 0xc78 <__divsf3_pse+0x10>
     c8e:	33 d0       	rcall	.+102    	; 0xcf6 <__divsf3_pse+0x8e>
     c90:	0e 2e       	mov	r0, r30
     c92:	3a f0       	brmi	.+14     	; 0xca2 <__divsf3_pse+0x3a>
     c94:	e0 e8       	ldi	r30, 0x80	; 128
     c96:	30 d0       	rcall	.+96     	; 0xcf8 <__divsf3_pse+0x90>
     c98:	91 50       	subi	r25, 0x01	; 1
     c9a:	50 40       	sbci	r21, 0x00	; 0
     c9c:	e6 95       	lsr	r30
     c9e:	00 1c       	adc	r0, r0
     ca0:	ca f7       	brpl	.-14     	; 0xc94 <__divsf3_pse+0x2c>
     ca2:	29 d0       	rcall	.+82     	; 0xcf6 <__divsf3_pse+0x8e>
     ca4:	fe 2f       	mov	r31, r30
     ca6:	27 d0       	rcall	.+78     	; 0xcf6 <__divsf3_pse+0x8e>
     ca8:	66 0f       	add	r22, r22
     caa:	77 1f       	adc	r23, r23
     cac:	88 1f       	adc	r24, r24
     cae:	bb 1f       	adc	r27, r27
     cb0:	26 17       	cp	r18, r22
     cb2:	37 07       	cpc	r19, r23
     cb4:	48 07       	cpc	r20, r24
     cb6:	ab 07       	cpc	r26, r27
     cb8:	b0 e8       	ldi	r27, 0x80	; 128
     cba:	09 f0       	breq	.+2      	; 0xcbe <__divsf3_pse+0x56>
     cbc:	bb 0b       	sbc	r27, r27
     cbe:	80 2d       	mov	r24, r0
     cc0:	bf 01       	movw	r22, r30
     cc2:	ff 27       	eor	r31, r31
     cc4:	93 58       	subi	r25, 0x83	; 131
     cc6:	5f 4f       	sbci	r21, 0xFF	; 255
     cc8:	2a f0       	brmi	.+10     	; 0xcd4 <__divsf3_pse+0x6c>
     cca:	9e 3f       	cpi	r25, 0xFE	; 254
     ccc:	51 05       	cpc	r21, r1
     cce:	68 f0       	brcs	.+26     	; 0xcea <__divsf3_pse+0x82>
     cd0:	92 c0       	rjmp	.+292    	; 0xdf6 <__fp_inf>
     cd2:	01 c1       	rjmp	.+514    	; 0xed6 <__fp_szero>
     cd4:	5f 3f       	cpi	r21, 0xFF	; 255
     cd6:	ec f3       	brlt	.-6      	; 0xcd2 <__divsf3_pse+0x6a>
     cd8:	98 3e       	cpi	r25, 0xE8	; 232
     cda:	dc f3       	brlt	.-10     	; 0xcd2 <__divsf3_pse+0x6a>
     cdc:	86 95       	lsr	r24
     cde:	77 95       	ror	r23
     ce0:	67 95       	ror	r22
     ce2:	b7 95       	ror	r27
     ce4:	f7 95       	ror	r31
     ce6:	9f 5f       	subi	r25, 0xFF	; 255
     ce8:	c9 f7       	brne	.-14     	; 0xcdc <__divsf3_pse+0x74>
     cea:	88 0f       	add	r24, r24
     cec:	91 1d       	adc	r25, r1
     cee:	96 95       	lsr	r25
     cf0:	87 95       	ror	r24
     cf2:	97 f9       	bld	r25, 7
     cf4:	08 95       	ret
     cf6:	e1 e0       	ldi	r30, 0x01	; 1
     cf8:	66 0f       	add	r22, r22
     cfa:	77 1f       	adc	r23, r23
     cfc:	88 1f       	adc	r24, r24
     cfe:	bb 1f       	adc	r27, r27
     d00:	62 17       	cp	r22, r18
     d02:	73 07       	cpc	r23, r19
     d04:	84 07       	cpc	r24, r20
     d06:	ba 07       	cpc	r27, r26
     d08:	20 f0       	brcs	.+8      	; 0xd12 <__divsf3_pse+0xaa>
     d0a:	62 1b       	sub	r22, r18
     d0c:	73 0b       	sbc	r23, r19
     d0e:	84 0b       	sbc	r24, r20
     d10:	ba 0b       	sbc	r27, r26
     d12:	ee 1f       	adc	r30, r30
     d14:	88 f7       	brcc	.-30     	; 0xcf8 <__divsf3_pse+0x90>
     d16:	e0 95       	com	r30
     d18:	08 95       	ret

00000d1a <__fixsfsi>:
     d1a:	04 d0       	rcall	.+8      	; 0xd24 <__fixunssfsi>
     d1c:	68 94       	set
     d1e:	b1 11       	cpse	r27, r1
     d20:	da c0       	rjmp	.+436    	; 0xed6 <__fp_szero>
     d22:	08 95       	ret

00000d24 <__fixunssfsi>:
     d24:	bd d0       	rcall	.+378    	; 0xea0 <__fp_splitA>
     d26:	88 f0       	brcs	.+34     	; 0xd4a <__fixunssfsi+0x26>
     d28:	9f 57       	subi	r25, 0x7F	; 127
     d2a:	90 f0       	brcs	.+36     	; 0xd50 <__fixunssfsi+0x2c>
     d2c:	b9 2f       	mov	r27, r25
     d2e:	99 27       	eor	r25, r25
     d30:	b7 51       	subi	r27, 0x17	; 23
     d32:	a0 f0       	brcs	.+40     	; 0xd5c <__fixunssfsi+0x38>
     d34:	d1 f0       	breq	.+52     	; 0xd6a <__fixunssfsi+0x46>
     d36:	66 0f       	add	r22, r22
     d38:	77 1f       	adc	r23, r23
     d3a:	88 1f       	adc	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	1a f0       	brmi	.+6      	; 0xd46 <__fixunssfsi+0x22>
     d40:	ba 95       	dec	r27
     d42:	c9 f7       	brne	.-14     	; 0xd36 <__fixunssfsi+0x12>
     d44:	12 c0       	rjmp	.+36     	; 0xd6a <__fixunssfsi+0x46>
     d46:	b1 30       	cpi	r27, 0x01	; 1
     d48:	81 f0       	breq	.+32     	; 0xd6a <__fixunssfsi+0x46>
     d4a:	c4 d0       	rcall	.+392    	; 0xed4 <__fp_zero>
     d4c:	b1 e0       	ldi	r27, 0x01	; 1
     d4e:	08 95       	ret
     d50:	c1 c0       	rjmp	.+386    	; 0xed4 <__fp_zero>
     d52:	67 2f       	mov	r22, r23
     d54:	78 2f       	mov	r23, r24
     d56:	88 27       	eor	r24, r24
     d58:	b8 5f       	subi	r27, 0xF8	; 248
     d5a:	39 f0       	breq	.+14     	; 0xd6a <__fixunssfsi+0x46>
     d5c:	b9 3f       	cpi	r27, 0xF9	; 249
     d5e:	cc f3       	brlt	.-14     	; 0xd52 <__fixunssfsi+0x2e>
     d60:	86 95       	lsr	r24
     d62:	77 95       	ror	r23
     d64:	67 95       	ror	r22
     d66:	b3 95       	inc	r27
     d68:	d9 f7       	brne	.-10     	; 0xd60 <__fixunssfsi+0x3c>
     d6a:	3e f4       	brtc	.+14     	; 0xd7a <__fixunssfsi+0x56>
     d6c:	90 95       	com	r25
     d6e:	80 95       	com	r24
     d70:	70 95       	com	r23
     d72:	61 95       	neg	r22
     d74:	7f 4f       	sbci	r23, 0xFF	; 255
     d76:	8f 4f       	sbci	r24, 0xFF	; 255
     d78:	9f 4f       	sbci	r25, 0xFF	; 255
     d7a:	08 95       	ret

00000d7c <__floatunsisf>:
     d7c:	e8 94       	clt
     d7e:	09 c0       	rjmp	.+18     	; 0xd92 <__floatsisf+0x12>

00000d80 <__floatsisf>:
     d80:	97 fb       	bst	r25, 7
     d82:	3e f4       	brtc	.+14     	; 0xd92 <__floatsisf+0x12>
     d84:	90 95       	com	r25
     d86:	80 95       	com	r24
     d88:	70 95       	com	r23
     d8a:	61 95       	neg	r22
     d8c:	7f 4f       	sbci	r23, 0xFF	; 255
     d8e:	8f 4f       	sbci	r24, 0xFF	; 255
     d90:	9f 4f       	sbci	r25, 0xFF	; 255
     d92:	99 23       	and	r25, r25
     d94:	a9 f0       	breq	.+42     	; 0xdc0 <__floatsisf+0x40>
     d96:	f9 2f       	mov	r31, r25
     d98:	96 e9       	ldi	r25, 0x96	; 150
     d9a:	bb 27       	eor	r27, r27
     d9c:	93 95       	inc	r25
     d9e:	f6 95       	lsr	r31
     da0:	87 95       	ror	r24
     da2:	77 95       	ror	r23
     da4:	67 95       	ror	r22
     da6:	b7 95       	ror	r27
     da8:	f1 11       	cpse	r31, r1
     daa:	f8 cf       	rjmp	.-16     	; 0xd9c <__floatsisf+0x1c>
     dac:	fa f4       	brpl	.+62     	; 0xdec <__floatsisf+0x6c>
     dae:	bb 0f       	add	r27, r27
     db0:	11 f4       	brne	.+4      	; 0xdb6 <__floatsisf+0x36>
     db2:	60 ff       	sbrs	r22, 0
     db4:	1b c0       	rjmp	.+54     	; 0xdec <__floatsisf+0x6c>
     db6:	6f 5f       	subi	r22, 0xFF	; 255
     db8:	7f 4f       	sbci	r23, 0xFF	; 255
     dba:	8f 4f       	sbci	r24, 0xFF	; 255
     dbc:	9f 4f       	sbci	r25, 0xFF	; 255
     dbe:	16 c0       	rjmp	.+44     	; 0xdec <__floatsisf+0x6c>
     dc0:	88 23       	and	r24, r24
     dc2:	11 f0       	breq	.+4      	; 0xdc8 <__floatsisf+0x48>
     dc4:	96 e9       	ldi	r25, 0x96	; 150
     dc6:	11 c0       	rjmp	.+34     	; 0xdea <__floatsisf+0x6a>
     dc8:	77 23       	and	r23, r23
     dca:	21 f0       	breq	.+8      	; 0xdd4 <__floatsisf+0x54>
     dcc:	9e e8       	ldi	r25, 0x8E	; 142
     dce:	87 2f       	mov	r24, r23
     dd0:	76 2f       	mov	r23, r22
     dd2:	05 c0       	rjmp	.+10     	; 0xdde <__floatsisf+0x5e>
     dd4:	66 23       	and	r22, r22
     dd6:	71 f0       	breq	.+28     	; 0xdf4 <__floatsisf+0x74>
     dd8:	96 e8       	ldi	r25, 0x86	; 134
     dda:	86 2f       	mov	r24, r22
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	2a f0       	brmi	.+10     	; 0xdec <__floatsisf+0x6c>
     de2:	9a 95       	dec	r25
     de4:	66 0f       	add	r22, r22
     de6:	77 1f       	adc	r23, r23
     de8:	88 1f       	adc	r24, r24
     dea:	da f7       	brpl	.-10     	; 0xde2 <__floatsisf+0x62>
     dec:	88 0f       	add	r24, r24
     dee:	96 95       	lsr	r25
     df0:	87 95       	ror	r24
     df2:	97 f9       	bld	r25, 7
     df4:	08 95       	ret

00000df6 <__fp_inf>:
     df6:	97 f9       	bld	r25, 7
     df8:	9f 67       	ori	r25, 0x7F	; 127
     dfa:	80 e8       	ldi	r24, 0x80	; 128
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	08 95       	ret

00000e02 <__fp_nan>:
     e02:	9f ef       	ldi	r25, 0xFF	; 255
     e04:	80 ec       	ldi	r24, 0xC0	; 192
     e06:	08 95       	ret

00000e08 <__fp_powser>:
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	1f 93       	push	r17
     e0e:	0f 93       	push	r16
     e10:	ff 92       	push	r15
     e12:	ef 92       	push	r14
     e14:	df 92       	push	r13
     e16:	7b 01       	movw	r14, r22
     e18:	8c 01       	movw	r16, r24
     e1a:	68 94       	set
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fp_powser+0x20>
     e1e:	da 2e       	mov	r13, r26
     e20:	ef 01       	movw	r28, r30
     e22:	72 d0       	rcall	.+228    	; 0xf08 <__mulsf3x>
     e24:	fe 01       	movw	r30, r28
     e26:	e8 94       	clt
     e28:	a5 91       	lpm	r26, Z+
     e2a:	25 91       	lpm	r18, Z+
     e2c:	35 91       	lpm	r19, Z+
     e2e:	45 91       	lpm	r20, Z+
     e30:	55 91       	lpm	r21, Z+
     e32:	ae f3       	brts	.-22     	; 0xe1e <__fp_powser+0x16>
     e34:	ef 01       	movw	r28, r30
     e36:	8e de       	rcall	.-740    	; 0xb54 <__addsf3x>
     e38:	fe 01       	movw	r30, r28
     e3a:	97 01       	movw	r18, r14
     e3c:	a8 01       	movw	r20, r16
     e3e:	da 94       	dec	r13
     e40:	79 f7       	brne	.-34     	; 0xe20 <__fp_powser+0x18>
     e42:	df 90       	pop	r13
     e44:	ef 90       	pop	r14
     e46:	ff 90       	pop	r15
     e48:	0f 91       	pop	r16
     e4a:	1f 91       	pop	r17
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <__fp_pscA>:
     e52:	00 24       	eor	r0, r0
     e54:	0a 94       	dec	r0
     e56:	16 16       	cp	r1, r22
     e58:	17 06       	cpc	r1, r23
     e5a:	18 06       	cpc	r1, r24
     e5c:	09 06       	cpc	r0, r25
     e5e:	08 95       	ret

00000e60 <__fp_pscB>:
     e60:	00 24       	eor	r0, r0
     e62:	0a 94       	dec	r0
     e64:	12 16       	cp	r1, r18
     e66:	13 06       	cpc	r1, r19
     e68:	14 06       	cpc	r1, r20
     e6a:	05 06       	cpc	r0, r21
     e6c:	08 95       	ret

00000e6e <__fp_round>:
     e6e:	09 2e       	mov	r0, r25
     e70:	03 94       	inc	r0
     e72:	00 0c       	add	r0, r0
     e74:	11 f4       	brne	.+4      	; 0xe7a <__fp_round+0xc>
     e76:	88 23       	and	r24, r24
     e78:	52 f0       	brmi	.+20     	; 0xe8e <__fp_round+0x20>
     e7a:	bb 0f       	add	r27, r27
     e7c:	40 f4       	brcc	.+16     	; 0xe8e <__fp_round+0x20>
     e7e:	bf 2b       	or	r27, r31
     e80:	11 f4       	brne	.+4      	; 0xe86 <__fp_round+0x18>
     e82:	60 ff       	sbrs	r22, 0
     e84:	04 c0       	rjmp	.+8      	; 0xe8e <__fp_round+0x20>
     e86:	6f 5f       	subi	r22, 0xFF	; 255
     e88:	7f 4f       	sbci	r23, 0xFF	; 255
     e8a:	8f 4f       	sbci	r24, 0xFF	; 255
     e8c:	9f 4f       	sbci	r25, 0xFF	; 255
     e8e:	08 95       	ret

00000e90 <__fp_split3>:
     e90:	57 fd       	sbrc	r21, 7
     e92:	90 58       	subi	r25, 0x80	; 128
     e94:	44 0f       	add	r20, r20
     e96:	55 1f       	adc	r21, r21
     e98:	59 f0       	breq	.+22     	; 0xeb0 <__fp_splitA+0x10>
     e9a:	5f 3f       	cpi	r21, 0xFF	; 255
     e9c:	71 f0       	breq	.+28     	; 0xeba <__fp_splitA+0x1a>
     e9e:	47 95       	ror	r20

00000ea0 <__fp_splitA>:
     ea0:	88 0f       	add	r24, r24
     ea2:	97 fb       	bst	r25, 7
     ea4:	99 1f       	adc	r25, r25
     ea6:	61 f0       	breq	.+24     	; 0xec0 <__fp_splitA+0x20>
     ea8:	9f 3f       	cpi	r25, 0xFF	; 255
     eaa:	79 f0       	breq	.+30     	; 0xeca <__fp_splitA+0x2a>
     eac:	87 95       	ror	r24
     eae:	08 95       	ret
     eb0:	12 16       	cp	r1, r18
     eb2:	13 06       	cpc	r1, r19
     eb4:	14 06       	cpc	r1, r20
     eb6:	55 1f       	adc	r21, r21
     eb8:	f2 cf       	rjmp	.-28     	; 0xe9e <__fp_split3+0xe>
     eba:	46 95       	lsr	r20
     ebc:	f1 df       	rcall	.-30     	; 0xea0 <__fp_splitA>
     ebe:	08 c0       	rjmp	.+16     	; 0xed0 <__fp_splitA+0x30>
     ec0:	16 16       	cp	r1, r22
     ec2:	17 06       	cpc	r1, r23
     ec4:	18 06       	cpc	r1, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	f1 cf       	rjmp	.-30     	; 0xeac <__fp_splitA+0xc>
     eca:	86 95       	lsr	r24
     ecc:	71 05       	cpc	r23, r1
     ece:	61 05       	cpc	r22, r1
     ed0:	08 94       	sec
     ed2:	08 95       	ret

00000ed4 <__fp_zero>:
     ed4:	e8 94       	clt

00000ed6 <__fp_szero>:
     ed6:	bb 27       	eor	r27, r27
     ed8:	66 27       	eor	r22, r22
     eda:	77 27       	eor	r23, r23
     edc:	cb 01       	movw	r24, r22
     ede:	97 f9       	bld	r25, 7
     ee0:	08 95       	ret

00000ee2 <inverse>:
     ee2:	9b 01       	movw	r18, r22
     ee4:	ac 01       	movw	r20, r24
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	80 e8       	ldi	r24, 0x80	; 128
     eec:	9f e3       	ldi	r25, 0x3F	; 63
     eee:	ad ce       	rjmp	.-678    	; 0xc4a <__divsf3>

00000ef0 <__mulsf3>:
     ef0:	0b d0       	rcall	.+22     	; 0xf08 <__mulsf3x>
     ef2:	bd cf       	rjmp	.-134    	; 0xe6e <__fp_round>
     ef4:	ae df       	rcall	.-164    	; 0xe52 <__fp_pscA>
     ef6:	28 f0       	brcs	.+10     	; 0xf02 <__mulsf3+0x12>
     ef8:	b3 df       	rcall	.-154    	; 0xe60 <__fp_pscB>
     efa:	18 f0       	brcs	.+6      	; 0xf02 <__mulsf3+0x12>
     efc:	95 23       	and	r25, r21
     efe:	09 f0       	breq	.+2      	; 0xf02 <__mulsf3+0x12>
     f00:	7a cf       	rjmp	.-268    	; 0xdf6 <__fp_inf>
     f02:	7f cf       	rjmp	.-258    	; 0xe02 <__fp_nan>
     f04:	11 24       	eor	r1, r1
     f06:	e7 cf       	rjmp	.-50     	; 0xed6 <__fp_szero>

00000f08 <__mulsf3x>:
     f08:	c3 df       	rcall	.-122    	; 0xe90 <__fp_split3>
     f0a:	a0 f3       	brcs	.-24     	; 0xef4 <__mulsf3+0x4>

00000f0c <__mulsf3_pse>:
     f0c:	95 9f       	mul	r25, r21
     f0e:	d1 f3       	breq	.-12     	; 0xf04 <__mulsf3+0x14>
     f10:	95 0f       	add	r25, r21
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	55 1f       	adc	r21, r21
     f16:	62 9f       	mul	r22, r18
     f18:	f0 01       	movw	r30, r0
     f1a:	72 9f       	mul	r23, r18
     f1c:	bb 27       	eor	r27, r27
     f1e:	f0 0d       	add	r31, r0
     f20:	b1 1d       	adc	r27, r1
     f22:	63 9f       	mul	r22, r19
     f24:	aa 27       	eor	r26, r26
     f26:	f0 0d       	add	r31, r0
     f28:	b1 1d       	adc	r27, r1
     f2a:	aa 1f       	adc	r26, r26
     f2c:	64 9f       	mul	r22, r20
     f2e:	66 27       	eor	r22, r22
     f30:	b0 0d       	add	r27, r0
     f32:	a1 1d       	adc	r26, r1
     f34:	66 1f       	adc	r22, r22
     f36:	82 9f       	mul	r24, r18
     f38:	22 27       	eor	r18, r18
     f3a:	b0 0d       	add	r27, r0
     f3c:	a1 1d       	adc	r26, r1
     f3e:	62 1f       	adc	r22, r18
     f40:	73 9f       	mul	r23, r19
     f42:	b0 0d       	add	r27, r0
     f44:	a1 1d       	adc	r26, r1
     f46:	62 1f       	adc	r22, r18
     f48:	83 9f       	mul	r24, r19
     f4a:	a0 0d       	add	r26, r0
     f4c:	61 1d       	adc	r22, r1
     f4e:	22 1f       	adc	r18, r18
     f50:	74 9f       	mul	r23, r20
     f52:	33 27       	eor	r19, r19
     f54:	a0 0d       	add	r26, r0
     f56:	61 1d       	adc	r22, r1
     f58:	23 1f       	adc	r18, r19
     f5a:	84 9f       	mul	r24, r20
     f5c:	60 0d       	add	r22, r0
     f5e:	21 1d       	adc	r18, r1
     f60:	82 2f       	mov	r24, r18
     f62:	76 2f       	mov	r23, r22
     f64:	6a 2f       	mov	r22, r26
     f66:	11 24       	eor	r1, r1
     f68:	9f 57       	subi	r25, 0x7F	; 127
     f6a:	50 40       	sbci	r21, 0x00	; 0
     f6c:	8a f0       	brmi	.+34     	; 0xf90 <__mulsf3_pse+0x84>
     f6e:	e1 f0       	breq	.+56     	; 0xfa8 <__mulsf3_pse+0x9c>
     f70:	88 23       	and	r24, r24
     f72:	4a f0       	brmi	.+18     	; 0xf86 <__mulsf3_pse+0x7a>
     f74:	ee 0f       	add	r30, r30
     f76:	ff 1f       	adc	r31, r31
     f78:	bb 1f       	adc	r27, r27
     f7a:	66 1f       	adc	r22, r22
     f7c:	77 1f       	adc	r23, r23
     f7e:	88 1f       	adc	r24, r24
     f80:	91 50       	subi	r25, 0x01	; 1
     f82:	50 40       	sbci	r21, 0x00	; 0
     f84:	a9 f7       	brne	.-22     	; 0xf70 <__mulsf3_pse+0x64>
     f86:	9e 3f       	cpi	r25, 0xFE	; 254
     f88:	51 05       	cpc	r21, r1
     f8a:	70 f0       	brcs	.+28     	; 0xfa8 <__mulsf3_pse+0x9c>
     f8c:	34 cf       	rjmp	.-408    	; 0xdf6 <__fp_inf>
     f8e:	a3 cf       	rjmp	.-186    	; 0xed6 <__fp_szero>
     f90:	5f 3f       	cpi	r21, 0xFF	; 255
     f92:	ec f3       	brlt	.-6      	; 0xf8e <__mulsf3_pse+0x82>
     f94:	98 3e       	cpi	r25, 0xE8	; 232
     f96:	dc f3       	brlt	.-10     	; 0xf8e <__mulsf3_pse+0x82>
     f98:	86 95       	lsr	r24
     f9a:	77 95       	ror	r23
     f9c:	67 95       	ror	r22
     f9e:	b7 95       	ror	r27
     fa0:	f7 95       	ror	r31
     fa2:	e7 95       	ror	r30
     fa4:	9f 5f       	subi	r25, 0xFF	; 255
     fa6:	c1 f7       	brne	.-16     	; 0xf98 <__mulsf3_pse+0x8c>
     fa8:	fe 2b       	or	r31, r30
     faa:	88 0f       	add	r24, r24
     fac:	91 1d       	adc	r25, r1
     fae:	96 95       	lsr	r25
     fb0:	87 95       	ror	r24
     fb2:	97 f9       	bld	r25, 7
     fb4:	08 95       	ret
     fb6:	11 f4       	brne	.+4      	; 0xfbc <__mulsf3_pse+0xb0>
     fb8:	0e f4       	brtc	.+2      	; 0xfbc <__mulsf3_pse+0xb0>
     fba:	23 cf       	rjmp	.-442    	; 0xe02 <__fp_nan>
     fbc:	41 c0       	rjmp	.+130    	; 0x1040 <__fp_mpack>

00000fbe <sqrt>:
     fbe:	70 df       	rcall	.-288    	; 0xea0 <__fp_splitA>
     fc0:	d0 f3       	brcs	.-12     	; 0xfb6 <__mulsf3_pse+0xaa>
     fc2:	99 23       	and	r25, r25
     fc4:	d9 f3       	breq	.-10     	; 0xfbc <__mulsf3_pse+0xb0>
     fc6:	ce f3       	brts	.-14     	; 0xfba <__mulsf3_pse+0xae>
     fc8:	9f 57       	subi	r25, 0x7F	; 127
     fca:	55 0b       	sbc	r21, r21
     fcc:	87 ff       	sbrs	r24, 7
     fce:	46 d0       	rcall	.+140    	; 0x105c <__fp_norm2>
     fd0:	00 24       	eor	r0, r0
     fd2:	a0 e6       	ldi	r26, 0x60	; 96
     fd4:	40 ea       	ldi	r20, 0xA0	; 160
     fd6:	90 01       	movw	r18, r0
     fd8:	80 58       	subi	r24, 0x80	; 128
     fda:	56 95       	lsr	r21
     fdc:	97 95       	ror	r25
     fde:	28 f4       	brcc	.+10     	; 0xfea <sqrt+0x2c>
     fe0:	80 5c       	subi	r24, 0xC0	; 192
     fe2:	66 0f       	add	r22, r22
     fe4:	77 1f       	adc	r23, r23
     fe6:	88 1f       	adc	r24, r24
     fe8:	20 f0       	brcs	.+8      	; 0xff2 <sqrt+0x34>
     fea:	26 17       	cp	r18, r22
     fec:	37 07       	cpc	r19, r23
     fee:	48 07       	cpc	r20, r24
     ff0:	30 f4       	brcc	.+12     	; 0xffe <sqrt+0x40>
     ff2:	62 1b       	sub	r22, r18
     ff4:	73 0b       	sbc	r23, r19
     ff6:	84 0b       	sbc	r24, r20
     ff8:	20 29       	or	r18, r0
     ffa:	31 29       	or	r19, r1
     ffc:	4a 2b       	or	r20, r26
     ffe:	a6 95       	lsr	r26
    1000:	17 94       	ror	r1
    1002:	07 94       	ror	r0
    1004:	20 25       	eor	r18, r0
    1006:	31 25       	eor	r19, r1
    1008:	4a 27       	eor	r20, r26
    100a:	58 f7       	brcc	.-42     	; 0xfe2 <sqrt+0x24>
    100c:	66 0f       	add	r22, r22
    100e:	77 1f       	adc	r23, r23
    1010:	88 1f       	adc	r24, r24
    1012:	20 f0       	brcs	.+8      	; 0x101c <sqrt+0x5e>
    1014:	26 17       	cp	r18, r22
    1016:	37 07       	cpc	r19, r23
    1018:	48 07       	cpc	r20, r24
    101a:	30 f4       	brcc	.+12     	; 0x1028 <sqrt+0x6a>
    101c:	62 0b       	sbc	r22, r18
    101e:	73 0b       	sbc	r23, r19
    1020:	84 0b       	sbc	r24, r20
    1022:	20 0d       	add	r18, r0
    1024:	31 1d       	adc	r19, r1
    1026:	41 1d       	adc	r20, r1
    1028:	a0 95       	com	r26
    102a:	81 f7       	brne	.-32     	; 0x100c <sqrt+0x4e>
    102c:	b9 01       	movw	r22, r18
    102e:	84 2f       	mov	r24, r20
    1030:	91 58       	subi	r25, 0x81	; 129
    1032:	88 0f       	add	r24, r24
    1034:	96 95       	lsr	r25
    1036:	87 95       	ror	r24
    1038:	08 95       	ret

0000103a <square>:
    103a:	9b 01       	movw	r18, r22
    103c:	ac 01       	movw	r20, r24
    103e:	58 cf       	rjmp	.-336    	; 0xef0 <__mulsf3>

00001040 <__fp_mpack>:
    1040:	9f 3f       	cpi	r25, 0xFF	; 255
    1042:	31 f0       	breq	.+12     	; 0x1050 <__fp_mpack_finite+0xc>

00001044 <__fp_mpack_finite>:
    1044:	91 50       	subi	r25, 0x01	; 1
    1046:	20 f4       	brcc	.+8      	; 0x1050 <__fp_mpack_finite+0xc>
    1048:	87 95       	ror	r24
    104a:	77 95       	ror	r23
    104c:	67 95       	ror	r22
    104e:	b7 95       	ror	r27
    1050:	88 0f       	add	r24, r24
    1052:	91 1d       	adc	r25, r1
    1054:	96 95       	lsr	r25
    1056:	87 95       	ror	r24
    1058:	97 f9       	bld	r25, 7
    105a:	08 95       	ret

0000105c <__fp_norm2>:
    105c:	91 50       	subi	r25, 0x01	; 1
    105e:	50 40       	sbci	r21, 0x00	; 0
    1060:	66 0f       	add	r22, r22
    1062:	77 1f       	adc	r23, r23
    1064:	88 1f       	adc	r24, r24
    1066:	d2 f7       	brpl	.-12     	; 0x105c <__fp_norm2>
    1068:	08 95       	ret

0000106a <__udivmodsi4>:
    106a:	a1 e2       	ldi	r26, 0x21	; 33
    106c:	1a 2e       	mov	r1, r26
    106e:	aa 1b       	sub	r26, r26
    1070:	bb 1b       	sub	r27, r27
    1072:	fd 01       	movw	r30, r26
    1074:	0d c0       	rjmp	.+26     	; 0x1090 <__udivmodsi4_ep>

00001076 <__udivmodsi4_loop>:
    1076:	aa 1f       	adc	r26, r26
    1078:	bb 1f       	adc	r27, r27
    107a:	ee 1f       	adc	r30, r30
    107c:	ff 1f       	adc	r31, r31
    107e:	a2 17       	cp	r26, r18
    1080:	b3 07       	cpc	r27, r19
    1082:	e4 07       	cpc	r30, r20
    1084:	f5 07       	cpc	r31, r21
    1086:	20 f0       	brcs	.+8      	; 0x1090 <__udivmodsi4_ep>
    1088:	a2 1b       	sub	r26, r18
    108a:	b3 0b       	sbc	r27, r19
    108c:	e4 0b       	sbc	r30, r20
    108e:	f5 0b       	sbc	r31, r21

00001090 <__udivmodsi4_ep>:
    1090:	66 1f       	adc	r22, r22
    1092:	77 1f       	adc	r23, r23
    1094:	88 1f       	adc	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	1a 94       	dec	r1
    109a:	69 f7       	brne	.-38     	; 0x1076 <__udivmodsi4_loop>
    109c:	60 95       	com	r22
    109e:	70 95       	com	r23
    10a0:	80 95       	com	r24
    10a2:	90 95       	com	r25
    10a4:	9b 01       	movw	r18, r22
    10a6:	ac 01       	movw	r20, r24
    10a8:	bd 01       	movw	r22, r26
    10aa:	cf 01       	movw	r24, r30
    10ac:	08 95       	ret

000010ae <__tablejump2__>:
    10ae:	ee 0f       	add	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	88 1f       	adc	r24, r24
    10b4:	8b bf       	out	0x3b, r24	; 59
    10b6:	07 90       	elpm	r0, Z+
    10b8:	f6 91       	elpm	r31, Z
    10ba:	e0 2d       	mov	r30, r0
    10bc:	19 94       	eijmp

000010be <__itoa_ncheck>:
    10be:	bb 27       	eor	r27, r27
    10c0:	4a 30       	cpi	r20, 0x0A	; 10
    10c2:	31 f4       	brne	.+12     	; 0x10d0 <__itoa_ncheck+0x12>
    10c4:	99 23       	and	r25, r25
    10c6:	22 f4       	brpl	.+8      	; 0x10d0 <__itoa_ncheck+0x12>
    10c8:	bd e2       	ldi	r27, 0x2D	; 45
    10ca:	90 95       	com	r25
    10cc:	81 95       	neg	r24
    10ce:	9f 4f       	sbci	r25, 0xFF	; 255
    10d0:	01 c0       	rjmp	.+2      	; 0x10d4 <__utoa_common>

000010d2 <__utoa_ncheck>:
    10d2:	bb 27       	eor	r27, r27

000010d4 <__utoa_common>:
    10d4:	fb 01       	movw	r30, r22
    10d6:	55 27       	eor	r21, r21
    10d8:	aa 27       	eor	r26, r26
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	aa 1f       	adc	r26, r26
    10e0:	a4 17       	cp	r26, r20
    10e2:	10 f0       	brcs	.+4      	; 0x10e8 <__utoa_common+0x14>
    10e4:	a4 1b       	sub	r26, r20
    10e6:	83 95       	inc	r24
    10e8:	50 51       	subi	r21, 0x10	; 16
    10ea:	b9 f7       	brne	.-18     	; 0x10da <__utoa_common+0x6>
    10ec:	a0 5d       	subi	r26, 0xD0	; 208
    10ee:	aa 33       	cpi	r26, 0x3A	; 58
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <__utoa_common+0x20>
    10f2:	a9 5d       	subi	r26, 0xD9	; 217
    10f4:	a1 93       	st	Z+, r26
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	79 f7       	brne	.-34     	; 0x10d8 <__utoa_common+0x4>
    10fa:	b1 11       	cpse	r27, r1
    10fc:	b1 93       	st	Z+, r27
    10fe:	11 92       	st	Z+, r1
    1100:	cb 01       	movw	r24, r22
    1102:	00 c0       	rjmp	.+0      	; 0x1104 <strrev>

00001104 <strrev>:
    1104:	dc 01       	movw	r26, r24
    1106:	fc 01       	movw	r30, r24
    1108:	67 2f       	mov	r22, r23
    110a:	71 91       	ld	r23, Z+
    110c:	77 23       	and	r23, r23
    110e:	e1 f7       	brne	.-8      	; 0x1108 <strrev+0x4>
    1110:	32 97       	sbiw	r30, 0x02	; 2
    1112:	04 c0       	rjmp	.+8      	; 0x111c <strrev+0x18>
    1114:	7c 91       	ld	r23, X
    1116:	6d 93       	st	X+, r22
    1118:	70 83       	st	Z, r23
    111a:	62 91       	ld	r22, -Z
    111c:	ae 17       	cp	r26, r30
    111e:	bf 07       	cpc	r27, r31
    1120:	c8 f3       	brcs	.-14     	; 0x1114 <strrev+0x10>
    1122:	08 95       	ret

00001124 <_exit>:
    1124:	f8 94       	cli

00001126 <__stop_program>:
    1126:	ff cf       	rjmp	.-2      	; 0x1126 <__stop_program>
