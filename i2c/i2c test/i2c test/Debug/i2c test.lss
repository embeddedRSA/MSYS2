
i2c test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800200  0000092a  000009be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000092a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  0080021a  0080021a  000009d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001786  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f54  00000000  00000000  000022a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000780  00000000  00000000  000031fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  0000397c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007fb  00000000  00000000  00003b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000430  00000000  00000000  00004313  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004743  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e2       	ldi	r30, 0x2A	; 42
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 31       	cpi	r26, 0x1A	; 26
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e1       	ldi	r26, 0x1A	; 26
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 33       	cpi	r26, 0x33	; 51
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	d2 d0       	rcall	.+420    	; 0x2c4 <main>
 120:	02 c4       	rjmp	.+2052   	; 0x926 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <s_init>:
this is also where polling is enabled by setting enable_interrupt = false.
is implemented 
-------------function description end-------------------------------------------------------
**/
static uint16_t s_init(uint32_t p_SCL_f ,bool p_enable_interrupt) //freq is given in Hz
{
 124:	61 38       	cpi	r22, 0x81	; 129
 126:	2a e1       	ldi	r18, 0x1A	; 26
 128:	72 07       	cpc	r23, r18
 12a:	26 e0       	ldi	r18, 0x06	; 6
 12c:	82 07       	cpc	r24, r18
 12e:	91 05       	cpc	r25, r1
 130:	20 f0       	brcs	.+8      	; 0x13a <s_init+0x16>
 132:	60 e8       	ldi	r22, 0x80	; 128
 134:	7a e1       	ldi	r23, 0x1A	; 26
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	90 e0       	ldi	r25, 0x00	; 0
if (!(p_SCL_f <= SCL_MAX))
	{
		p_SCL_f=SCL_MAX;
	}
		//enable TWI clock module 
	PRR0&=~(1<<PRTWI);
 13a:	e4 e6       	ldi	r30, 0x64	; 100
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	20 81       	ld	r18, Z
 140:	2f 77       	andi	r18, 0x7F	; 127
 142:	20 83       	st	Z, r18
	
	//enable TWI
	TWCR|=(1<<TWEN);	
 144:	ec eb       	ldi	r30, 0xBC	; 188
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	20 81       	ld	r18, Z
 14a:	24 60       	ori	r18, 0x04	; 4
 14c:	20 83       	st	Z, r18
	
	//enable interrupt
	s_int_is_enabled=p_enable_interrupt;
 14e:	40 93 1c 02 	sts	0x021C, r20	; 0x80021c <s_int_is_enabled>
	if (s_int_is_enabled)
 152:	44 23       	and	r20, r20
 154:	19 f0       	breq	.+6      	; 0x15c <s_init+0x38>
	{
		TWCR|=(1<<TWIE);
 156:	20 81       	ld	r18, Z
 158:	21 60       	ori	r18, 0x01	; 1
 15a:	20 83       	st	Z, r18
	}
	
	//constants pre calculated from mathcad 
			
		uint8_t TWBR_1= (uint8_t)((F_CPU/((double)8.0*p_SCL_f))-(double)2.0);
 15c:	9e d2       	rcall	.+1340   	; 0x69a <__floatunsisf>
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	51 e4       	ldi	r21, 0x41	; 65
 166:	27 d3       	rcall	.+1614   	; 0x7b6 <__mulsf3>
 168:	9b 01       	movw	r18, r22
 16a:	ac 01       	movw	r20, r24
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	74 e2       	ldi	r23, 0x24	; 36
 170:	84 e7       	ldi	r24, 0x74	; 116
 172:	9b e4       	ldi	r25, 0x4B	; 75
 174:	fe d1       	rcall	.+1020   	; 0x572 <__divsf3>
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	50 e4       	ldi	r21, 0x40	; 64
 17e:	94 d1       	rcall	.+808    	; 0x4a8 <__subsf3>
 180:	60 d2       	rcall	.+1216   	; 0x642 <__fixunssfsi>

	//set prescaler to 1 -> 0b00
		
	TWSR&=~(1<<TWPS1);
 182:	e9 eb       	ldi	r30, 0xB9	; 185
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	8d 7f       	andi	r24, 0xFD	; 253
 18a:	80 83       	st	Z, r24
		TWSR&=~(1<<TWPS0);
 18c:	80 81       	ld	r24, Z
 18e:	8e 7f       	andi	r24, 0xFE	; 254
 190:	80 83       	st	Z, r24
	//typecast to proper format and insert
	TWBR = TWBR_1;//TWBR_1;
 192:	e8 eb       	ldi	r30, 0xB8	; 184
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	60 83       	st	Z, r22
	return TWBR;
 198:	80 81       	ld	r24, Z
	
}
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	08 95       	ret

0000019e <s_disable>:
----------------description-----------------------------------------------------------------
Disables any i2c activity, activity, 'init_s()' does not need to be followed before starting new transfer
-------------function description end-------------------------------------------------------
**/
static void s_disable(void)
{
 19e:	08 95       	ret

000001a0 <s_start>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static void s_start(void)
{
	TWCR=0;
 1a0:	ec eb       	ldi	r30, 0xBC	; 188
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	10 82       	st	Z, r1
	TWCR |= (1<<TWSTA)|(1<<TWEN)|(1<<TWINT); //TWSTA sends start bit 
 1a6:	80 81       	ld	r24, Z
 1a8:	84 6a       	ori	r24, 0xA4	; 164
 1aa:	80 83       	st	Z, r24

	if (!s_int_is_enabled)
 1ac:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <s_int_is_enabled>
 1b0:	81 11       	cpse	r24, r1
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <s_start+0x1a>
	{
		while ((TWCR & (1<<TWINT)) == 0)
 1b4:	80 81       	ld	r24, Z
 1b6:	88 23       	and	r24, r24
 1b8:	ec f7       	brge	.-6      	; 0x1b4 <s_start+0x14>
 1ba:	08 95       	ret

000001bc <s_stop>:
stops i2c, no polling needed
-------------function description end-------------------------------------------------------
**/
static void s_stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 1bc:	84 e9       	ldi	r24, 0x94	; 148
 1be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 1c2:	08 95       	ret

000001c4 <s_selectMode>:
-------------function description end-------------------------------------------------------
**/
static void s_selectMode(uint8_t p_SLA_addr,I2C_MODE_t p_mode) //SLA_x is SLA+R/W
{
	//must send address now
	if(p_mode==I2C_WRITE_MODE)
 1c4:	61 11       	cpse	r22, r1
 1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <s_selectMode+0xc>
	{
		TWDR=((p_SLA_addr<<1)&(~0b1));
 1c8:	88 0f       	add	r24, r24
 1ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 1ce:	06 c0       	rjmp	.+12     	; 0x1dc <s_selectMode+0x18>
	}
	else if(p_mode==I2C_READ_MODE)
 1d0:	61 30       	cpi	r22, 0x01	; 1
 1d2:	21 f4       	brne	.+8      	; 0x1dc <s_selectMode+0x18>
	{
		TWDR=((p_SLA_addr<<1)|(0b1));
 1d4:	88 0f       	add	r24, r24
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	}
	TWCR |= (1<<TWINT);
 1dc:	ec eb       	ldi	r30, 0xBC	; 188
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	80 83       	st	Z, r24
	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 1e6:	80 81       	ld	r24, Z
 1e8:	84 6a       	ori	r24, 0xA4	; 164
 1ea:	80 83       	st	Z, r24
	if (!s_int_is_enabled)
 1ec:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <s_int_is_enabled>
 1f0:	81 11       	cpse	r24, r1
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <s_selectMode+0x36>
	{
	  while ((TWCR & (1<<TWINT)) == 0) //poll
 1f4:	80 81       	ld	r24, Z
 1f6:	88 23       	and	r24, r24
 1f8:	ec f7       	brge	.-6      	; 0x1f4 <s_selectMode+0x30>
 1fa:	08 95       	ret

000001fc <s_write>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static void s_write(uint8_t p_data)
{
	TWDR = p_data;
 1fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT)|(1<<TWEN);
 200:	84 e8       	ldi	r24, 0x84	; 132
 202:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	if (!s_int_is_enabled)
 206:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <s_int_is_enabled>
 20a:	81 11       	cpse	r24, r1
 20c:	05 c0       	rjmp	.+10     	; 0x218 <s_write+0x1c>
	{
		while ((TWCR & (1<<TWINT)) == 0)
 20e:	ec eb       	ldi	r30, 0xBC	; 188
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	88 23       	and	r24, r24
 216:	ec f7       	brge	.-6      	; 0x212 <s_write+0x16>
 218:	08 95       	ret

0000021a <s_read>:
Will poll if interrupt is disabled
-------------function description end-------------------------------------------------------
**/
static uint8_t s_read (bool p_isLast)
{
	if (!p_isLast ) //If we want to read more than 1 byte
 21a:	81 11       	cpse	r24, r1
 21c:	04 c0       	rjmp	.+8      	; 0x226 <s_read+0xc>
	{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 21e:	84 ec       	ldi	r24, 0xC4	; 196
 220:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
 224:	03 c0       	rjmp	.+6      	; 0x22c <s_read+0x12>
	}

	else             //If we want to read only one byte
	{
		TWCR = (1<<TWINT) | (1<<TWEN);
 226:	84 e8       	ldi	r24, 0x84	; 132
 228:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	}
	
	if (!s_int_is_enabled)
 22c:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <s_int_is_enabled>
 230:	81 11       	cpse	r24, r1
 232:	08 c0       	rjmp	.+16     	; 0x244 <s_read+0x2a>
	{
	  while ((TWCR & (1<<TWINT)) == 0)
 234:	ec eb       	ldi	r30, 0xBC	; 188
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	88 23       	and	r24, r24
 23c:	ec f7       	brge	.-6      	; 0x238 <s_read+0x1e>
	  {}
	{}
	return TWDR;
 23e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 242:	08 95       	ret
	}

	return 0;
 244:	80 e0       	ldi	r24, 0x00	; 0
}
 246:	08 95       	ret

00000248 <s_setBusy>:
may be used as a primitive mutex when using several i2c devices in isr
-------------function description end-------------------------------------------------------
**/
static bool s_setBusy(bool p_status)
{	
	s_busy_flag		=	p_status;
 248:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <__data_end>
	return  s_busy_flag;
}
 24c:	08 95       	ret

0000024e <s_getBusy>:
-------------function description end-------------------------------------------------------
**/
static bool s_getBusy(void)
{
	return s_busy_flag;
}
 24e:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
 252:	08 95       	ret

00000254 <s_getStatus>:
retiurns TWSR status code, is used for debugging purposes or ISR state machhines
-------------function description end-------------------------------------------------------
**/
static uint8_t s_getStatus(void)
{
	return (TWSR)&(0b11111000);
 254:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 258:	88 7f       	andi	r24, 0xF8	; 248
 25a:	08 95       	ret

0000025c <get_i2c_interface>:
-------------function description end-------------------------------------------------------
**/
i2c_t* get_i2c_interface(void)
{
	
 if (!s_initialized)
 25c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <s_initialized>
 260:	81 11       	cpse	r24, r1
 262:	2d c0       	rjmp	.+90     	; 0x2be <get_i2c_interface+0x62>
 {
	s_i2c_interface.init				=	s_init;
 264:	ed e1       	ldi	r30, 0x1D	; 29
 266:	f2 e0       	ldi	r31, 0x02	; 2
 268:	82 e9       	ldi	r24, 0x92	; 146
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	91 83       	std	Z+1, r25	; 0x01
 26e:	80 83       	st	Z, r24
	s_i2c_interface.disable				=	s_disable;
 270:	8f ec       	ldi	r24, 0xCF	; 207
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	93 83       	std	Z+3, r25	; 0x03
 276:	82 83       	std	Z+2, r24	; 0x02
	s_i2c_interface.start				=	s_start;
 278:	80 ed       	ldi	r24, 0xD0	; 208
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	95 83       	std	Z+5, r25	; 0x05
 27e:	84 83       	std	Z+4, r24	; 0x04
	s_i2c_interface.stop				=	s_stop;
 280:	8e ed       	ldi	r24, 0xDE	; 222
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	97 83       	std	Z+7, r25	; 0x07
 286:	86 83       	std	Z+6, r24	; 0x06
	s_i2c_interface.selectmode			=	s_selectMode;
 288:	82 ee       	ldi	r24, 0xE2	; 226
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	91 87       	std	Z+9, r25	; 0x09
 28e:	80 87       	std	Z+8, r24	; 0x08
	s_i2c_interface.write				=	s_write;
 290:	8e ef       	ldi	r24, 0xFE	; 254
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	93 87       	std	Z+11, r25	; 0x0b
 296:	82 87       	std	Z+10, r24	; 0x0a
	s_i2c_interface.read				=	s_read;
 298:	8d e0       	ldi	r24, 0x0D	; 13
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	95 87       	std	Z+13, r25	; 0x0d
 29e:	84 87       	std	Z+12, r24	; 0x0c
	s_i2c_interface.setBusy				=	s_setBusy;
 2a0:	84 e2       	ldi	r24, 0x24	; 36
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	97 87       	std	Z+15, r25	; 0x0f
 2a6:	86 87       	std	Z+14, r24	; 0x0e
	s_i2c_interface.getBusy				=	s_getBusy;
 2a8:	87 e2       	ldi	r24, 0x27	; 39
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	91 8b       	std	Z+17, r25	; 0x11
 2ae:	80 8b       	std	Z+16, r24	; 0x10
	s_i2c_interface.getStatus			=	s_getStatus;
 2b0:	8a e2       	ldi	r24, 0x2A	; 42
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	93 8b       	std	Z+19, r25	; 0x13
 2b6:	82 8b       	std	Z+18, r24	; 0x12
	s_initialized=true;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <s_initialized>
	
 }
	return &s_i2c_interface;
}
 2be:	8d e1       	ldi	r24, 0x1D	; 29
 2c0:	92 e0       	ldi	r25, 0x02	; 2
 2c2:	08 95       	ret

000002c4 <main>:
i2c_t* i2c_obj;
int main(void)
{
	
	
	InitUART(UARTADDR, 9600, 8,0);
 2c4:	00 e0       	ldi	r16, 0x00	; 0
 2c6:	28 e0       	ldi	r18, 0x08	; 8
 2c8:	40 e8       	ldi	r20, 0x80	; 128
 2ca:	55 e2       	ldi	r21, 0x25	; 37
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	80 ec       	ldi	r24, 0xC0	; 192
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	59 d0       	rcall	.+178    	; 0x388 <InitUART>
	SendString(UARTADDR,"\n \n \n");
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	72 e0       	ldi	r23, 0x02	; 2
 2da:	80 ec       	ldi	r24, 0xC0	; 192
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	ad d0       	rcall	.+346    	; 0x43a <SendString>
	SendInteger(UARTADDR,32000);
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	7d e7       	ldi	r23, 0x7D	; 125
 2e4:	80 ec       	ldi	r24, 0xC0	; 192
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	bc d0       	rcall	.+376    	; 0x462 <SendInteger>
	SendString(UARTADDR,"\n");
 2ea:	64 e0       	ldi	r22, 0x04	; 4
 2ec:	72 e0       	ldi	r23, 0x02	; 2
 2ee:	80 ec       	ldi	r24, 0xC0	; 192
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	a3 d0       	rcall	.+326    	; 0x43a <SendString>
	SendString(UARTADDR,"creating objects \n");
 2f4:	66 e0       	ldi	r22, 0x06	; 6
 2f6:	72 e0       	ldi	r23, 0x02	; 2
 2f8:	80 ec       	ldi	r24, 0xC0	; 192
 2fa:	90 e0       	ldi	r25, 0x00	; 0
	
i2c_obj = get_i2c_interface();
 2fc:	9e d0       	rcall	.+316    	; 0x43a <SendString>
 2fe:	ae df       	rcall	.-164    	; 0x25c <get_i2c_interface>
 300:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <i2c_obj+0x1>
 304:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <i2c_obj>
i2c_obj->init(F_SCL,false);
 308:	dc 01       	movw	r26, r24
 30a:	ed 91       	ld	r30, X+
 30c:	fc 91       	ld	r31, X
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	60 e9       	ldi	r22, 0x90	; 144
 312:	7c ed       	ldi	r23, 0xDC	; 220
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
	SendString(UARTADDR,"\n");
 318:	19 95       	eicall
 31a:	64 e0       	ldi	r22, 0x04	; 4
 31c:	72 e0       	ldi	r23, 0x02	; 2
 31e:	80 ec       	ldi	r24, 0xC0	; 192
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	8b d0       	rcall	.+278    	; 0x43a <SendString>
	SendInteger(UARTADDR,i2c_obj->init(F_SCL,false));
 324:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <i2c_obj>
 328:	f0 91 32 02 	lds	r31, 0x0232	; 0x800232 <i2c_obj+0x1>
 32c:	01 90       	ld	r0, Z+
 32e:	f0 81       	ld	r31, Z
 330:	e0 2d       	mov	r30, r0
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	60 e9       	ldi	r22, 0x90	; 144
 336:	7c ed       	ldi	r23, 0xDC	; 220
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	19 95       	eicall
 33e:	bc 01       	movw	r22, r24
 340:	80 ec       	ldi	r24, 0xC0	; 192
 342:	90 e0       	ldi	r25, 0x00	; 0
	SendString(UARTADDR,"\n");
 344:	8e d0       	rcall	.+284    	; 0x462 <SendInteger>
 346:	64 e0       	ldi	r22, 0x04	; 4
 348:	72 e0       	ldi	r23, 0x02	; 2
 34a:	80 ec       	ldi	r24, 0xC0	; 192
 34c:	90 e0       	ldi	r25, 0x00	; 0
	SendString(UARTADDR,"\n");
 34e:	75 d0       	rcall	.+234    	; 0x43a <SendString>
 350:	64 e0       	ldi	r22, 0x04	; 4
 352:	72 e0       	ldi	r23, 0x02	; 2
 354:	80 ec       	ldi	r24, 0xC0	; 192
 356:	90 e0       	ldi	r25, 0x00	; 0
	SendInteger(UARTADDR,	TWSR & 0b00000011);
 358:	70 d0       	rcall	.+224    	; 0x43a <SendString>
 35a:	60 91 b9 00 	lds	r22, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 35e:	63 70       	andi	r22, 0x03	; 3
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	80 ec       	ldi	r24, 0xC0	; 192
 364:	90 e0       	ldi	r25, 0x00	; 0
	SendString(UARTADDR,"\n");
 366:	7d d0       	rcall	.+250    	; 0x462 <SendInteger>
 368:	64 e0       	ldi	r22, 0x04	; 4
 36a:	72 e0       	ldi	r23, 0x02	; 2
 36c:	80 ec       	ldi	r24, 0xC0	; 192
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	64 d0       	rcall	.+200    	; 0x43a <SendString>

while (1)
{
i2c_obj->selectmode(0b11,I2C_WRITE_MODE);
 372:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <i2c_obj>
 376:	f0 91 32 02 	lds	r31, 0x0232	; 0x800232 <i2c_obj+0x1>
 37a:	00 84       	ldd	r0, Z+8	; 0x08
 37c:	f1 85       	ldd	r31, Z+9	; 0x09
 37e:	e0 2d       	mov	r30, r0
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	19 95       	eicall
 386:	f5 cf       	rjmp	.-22     	; 0x372 <main+0xae>

00000388 <InitUART>:
  // Wait for new character received
  while ( (UCSRnA & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDRn;
}
 388:	0f 93       	push	r16
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	ec 01       	movw	r28, r24
 390:	db 01       	movw	r26, r22
 392:	ca 01       	movw	r24, r20
 394:	8c 52       	subi	r24, 0x2C	; 44
 396:	91 40       	sbci	r25, 0x01	; 1
 398:	a1 09       	sbc	r26, r1
 39a:	b1 09       	sbc	r27, r1
 39c:	85 3d       	cpi	r24, 0xD5	; 213
 39e:	90 4c       	sbci	r25, 0xC0	; 192
 3a0:	a1 40       	sbci	r26, 0x01	; 1
 3a2:	b1 05       	cpc	r27, r1
 3a4:	08 f0       	brcs	.+2      	; 0x3a8 <InitUART+0x20>
 3a6:	3f c0       	rjmp	.+126    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3a8:	25 50       	subi	r18, 0x05	; 5
 3aa:	24 30       	cpi	r18, 0x04	; 4
 3ac:	e0 f5       	brcc	.+120    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3ae:	80 e2       	ldi	r24, 0x20	; 32
 3b0:	88 83       	st	Y, r24
 3b2:	88 e1       	ldi	r24, 0x18	; 24
 3b4:	89 83       	std	Y+1, r24	; 0x01
 3b6:	22 0f       	add	r18, r18
 3b8:	2a 83       	std	Y+2, r18	; 0x02
 3ba:	05 34       	cpi	r16, 0x45	; 69
 3bc:	21 f4       	brne	.+8      	; 0x3c6 <InitUART+0x3e>
 3be:	8a 81       	ldd	r24, Y+2	; 0x02
 3c0:	80 62       	ori	r24, 0x20	; 32
 3c2:	8a 83       	std	Y+2, r24	; 0x02
 3c4:	05 c0       	rjmp	.+10     	; 0x3d0 <InitUART+0x48>
 3c6:	0f 34       	cpi	r16, 0x4F	; 79
 3c8:	19 f4       	brne	.+6      	; 0x3d0 <InitUART+0x48>
 3ca:	8a 81       	ldd	r24, Y+2	; 0x02
 3cc:	80 63       	ori	r24, 0x30	; 48
 3ce:	8a 83       	std	Y+2, r24	; 0x02
 3d0:	db 01       	movw	r26, r22
 3d2:	ca 01       	movw	r24, r20
 3d4:	80 58       	subi	r24, 0x80	; 128
 3d6:	9b 47       	sbci	r25, 0x7B	; 123
 3d8:	a1 4e       	sbci	r26, 0xE1	; 225
 3da:	bf 4f       	sbci	r27, 0xFF	; 255
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	aa 1f       	adc	r26, r26
 3e2:	bb 1f       	adc	r27, r27
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	aa 1f       	adc	r26, r26
 3ea:	bb 1f       	adc	r27, r27
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	aa 1f       	adc	r26, r26
 3f2:	bb 1f       	adc	r27, r27
 3f4:	44 0f       	add	r20, r20
 3f6:	55 1f       	adc	r21, r21
 3f8:	66 1f       	adc	r22, r22
 3fa:	77 1f       	adc	r23, r23
 3fc:	44 0f       	add	r20, r20
 3fe:	55 1f       	adc	r21, r21
 400:	66 1f       	adc	r22, r22
 402:	77 1f       	adc	r23, r23
 404:	9a 01       	movw	r18, r20
 406:	ab 01       	movw	r20, r22
 408:	22 0f       	add	r18, r18
 40a:	33 1f       	adc	r19, r19
 40c:	44 1f       	adc	r20, r20
 40e:	55 1f       	adc	r21, r21
 410:	22 0f       	add	r18, r18
 412:	33 1f       	adc	r19, r19
 414:	44 1f       	adc	r20, r20
 416:	55 1f       	adc	r21, r21
 418:	bc 01       	movw	r22, r24
 41a:	cd 01       	movw	r24, r26
 41c:	2f d2       	rcall	.+1118   	; 0x87c <__udivmodsi4>
 41e:	21 50       	subi	r18, 0x01	; 1
 420:	31 09       	sbc	r19, r1
 422:	3d 83       	std	Y+5, r19	; 0x05
 424:	2c 83       	std	Y+4, r18	; 0x04
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	0f 91       	pop	r16
 42c:	08 95       	ret

0000042e <SendChar>:
Then send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(unsigned int UART_adr, char Tegn)
{
 42e:	fc 01       	movw	r30, r24
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRnA & (1<<5)) == 0 )
 430:	90 81       	ld	r25, Z
 432:	95 ff       	sbrs	r25, 5
 434:	fd cf       	rjmp	.-6      	; 0x430 <SendChar+0x2>
  {}
  // Then send the character
  UDRn = Tegn;
 436:	66 83       	std	Z+6, r22	; 0x06
 438:	08 95       	ret

0000043a <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	eb 01       	movw	r28, r22
  // Repeat until zero-termination
  while (*Streng != 0)
 444:	68 81       	ld	r22, Y
 446:	66 23       	and	r22, r22
 448:	39 f0       	breq	.+14     	; 0x458 <SendString+0x1e>
 44a:	8c 01       	movw	r16, r24
 44c:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
 44e:	c8 01       	movw	r24, r16
 450:	ee df       	rcall	.-36     	; 0x42e <SendChar>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 452:	69 91       	ld	r22, Y+
 454:	61 11       	cpse	r22, r1
 456:	fb cf       	rjmp	.-10     	; 0x44e <SendString+0x14>
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	08 95       	ret

00000462 <SendInteger>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(unsigned int UART_adr, int Tal)
{
 462:	0f 93       	push	r16
 464:	1f 93       	push	r17
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	27 97       	sbiw	r28, 0x07	; 7
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	f8 94       	cli
 474:	de bf       	out	0x3e, r29	; 62
 476:	0f be       	out	0x3f, r0	; 63
 478:	cd bf       	out	0x3d, r28	; 61
 47a:	8c 01       	movw	r16, r24
 47c:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 47e:	4a e0       	ldi	r20, 0x0A	; 10
 480:	be 01       	movw	r22, r28
 482:	6f 5f       	subi	r22, 0xFF	; 255
 484:	7f 4f       	sbci	r23, 0xFF	; 255
 486:	1c d2       	rcall	.+1080   	; 0x8c0 <__itoa_ncheck>
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Tal, array, 10);
  // - then send the string
  SendString(UART_adr, array);
 488:	be 01       	movw	r22, r28
 48a:	6f 5f       	subi	r22, 0xFF	; 255
 48c:	7f 4f       	sbci	r23, 0xFF	; 255
 48e:	c8 01       	movw	r24, r16
 490:	d4 df       	rcall	.-88     	; 0x43a <SendString>
}
 492:	27 96       	adiw	r28, 0x07	; 7
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	1f 91       	pop	r17
 4a4:	0f 91       	pop	r16
 4a6:	08 95       	ret

000004a8 <__subsf3>:
 4a8:	50 58       	subi	r21, 0x80	; 128

000004aa <__addsf3>:
 4aa:	bb 27       	eor	r27, r27
 4ac:	aa 27       	eor	r26, r26
 4ae:	0e d0       	rcall	.+28     	; 0x4cc <__addsf3x>
 4b0:	48 c1       	rjmp	.+656    	; 0x742 <__fp_round>
 4b2:	39 d1       	rcall	.+626    	; 0x726 <__fp_pscA>
 4b4:	30 f0       	brcs	.+12     	; 0x4c2 <__addsf3+0x18>
 4b6:	3e d1       	rcall	.+636    	; 0x734 <__fp_pscB>
 4b8:	20 f0       	brcs	.+8      	; 0x4c2 <__addsf3+0x18>
 4ba:	31 f4       	brne	.+12     	; 0x4c8 <__addsf3+0x1e>
 4bc:	9f 3f       	cpi	r25, 0xFF	; 255
 4be:	11 f4       	brne	.+4      	; 0x4c4 <__addsf3+0x1a>
 4c0:	1e f4       	brtc	.+6      	; 0x4c8 <__addsf3+0x1e>
 4c2:	2e c1       	rjmp	.+604    	; 0x720 <__fp_nan>
 4c4:	0e f4       	brtc	.+2      	; 0x4c8 <__addsf3+0x1e>
 4c6:	e0 95       	com	r30
 4c8:	e7 fb       	bst	r30, 7
 4ca:	24 c1       	rjmp	.+584    	; 0x714 <__fp_inf>

000004cc <__addsf3x>:
 4cc:	e9 2f       	mov	r30, r25
 4ce:	4a d1       	rcall	.+660    	; 0x764 <__fp_split3>
 4d0:	80 f3       	brcs	.-32     	; 0x4b2 <__addsf3+0x8>
 4d2:	ba 17       	cp	r27, r26
 4d4:	62 07       	cpc	r22, r18
 4d6:	73 07       	cpc	r23, r19
 4d8:	84 07       	cpc	r24, r20
 4da:	95 07       	cpc	r25, r21
 4dc:	18 f0       	brcs	.+6      	; 0x4e4 <__addsf3x+0x18>
 4de:	71 f4       	brne	.+28     	; 0x4fc <__addsf3x+0x30>
 4e0:	9e f5       	brtc	.+102    	; 0x548 <__addsf3x+0x7c>
 4e2:	62 c1       	rjmp	.+708    	; 0x7a8 <__fp_zero>
 4e4:	0e f4       	brtc	.+2      	; 0x4e8 <__addsf3x+0x1c>
 4e6:	e0 95       	com	r30
 4e8:	0b 2e       	mov	r0, r27
 4ea:	ba 2f       	mov	r27, r26
 4ec:	a0 2d       	mov	r26, r0
 4ee:	0b 01       	movw	r0, r22
 4f0:	b9 01       	movw	r22, r18
 4f2:	90 01       	movw	r18, r0
 4f4:	0c 01       	movw	r0, r24
 4f6:	ca 01       	movw	r24, r20
 4f8:	a0 01       	movw	r20, r0
 4fa:	11 24       	eor	r1, r1
 4fc:	ff 27       	eor	r31, r31
 4fe:	59 1b       	sub	r21, r25
 500:	99 f0       	breq	.+38     	; 0x528 <__addsf3x+0x5c>
 502:	59 3f       	cpi	r21, 0xF9	; 249
 504:	50 f4       	brcc	.+20     	; 0x51a <__addsf3x+0x4e>
 506:	50 3e       	cpi	r21, 0xE0	; 224
 508:	68 f1       	brcs	.+90     	; 0x564 <__addsf3x+0x98>
 50a:	1a 16       	cp	r1, r26
 50c:	f0 40       	sbci	r31, 0x00	; 0
 50e:	a2 2f       	mov	r26, r18
 510:	23 2f       	mov	r18, r19
 512:	34 2f       	mov	r19, r20
 514:	44 27       	eor	r20, r20
 516:	58 5f       	subi	r21, 0xF8	; 248
 518:	f3 cf       	rjmp	.-26     	; 0x500 <__addsf3x+0x34>
 51a:	46 95       	lsr	r20
 51c:	37 95       	ror	r19
 51e:	27 95       	ror	r18
 520:	a7 95       	ror	r26
 522:	f0 40       	sbci	r31, 0x00	; 0
 524:	53 95       	inc	r21
 526:	c9 f7       	brne	.-14     	; 0x51a <__addsf3x+0x4e>
 528:	7e f4       	brtc	.+30     	; 0x548 <__addsf3x+0x7c>
 52a:	1f 16       	cp	r1, r31
 52c:	ba 0b       	sbc	r27, r26
 52e:	62 0b       	sbc	r22, r18
 530:	73 0b       	sbc	r23, r19
 532:	84 0b       	sbc	r24, r20
 534:	ba f0       	brmi	.+46     	; 0x564 <__addsf3x+0x98>
 536:	91 50       	subi	r25, 0x01	; 1
 538:	a1 f0       	breq	.+40     	; 0x562 <__addsf3x+0x96>
 53a:	ff 0f       	add	r31, r31
 53c:	bb 1f       	adc	r27, r27
 53e:	66 1f       	adc	r22, r22
 540:	77 1f       	adc	r23, r23
 542:	88 1f       	adc	r24, r24
 544:	c2 f7       	brpl	.-16     	; 0x536 <__addsf3x+0x6a>
 546:	0e c0       	rjmp	.+28     	; 0x564 <__addsf3x+0x98>
 548:	ba 0f       	add	r27, r26
 54a:	62 1f       	adc	r22, r18
 54c:	73 1f       	adc	r23, r19
 54e:	84 1f       	adc	r24, r20
 550:	48 f4       	brcc	.+18     	; 0x564 <__addsf3x+0x98>
 552:	87 95       	ror	r24
 554:	77 95       	ror	r23
 556:	67 95       	ror	r22
 558:	b7 95       	ror	r27
 55a:	f7 95       	ror	r31
 55c:	9e 3f       	cpi	r25, 0xFE	; 254
 55e:	08 f0       	brcs	.+2      	; 0x562 <__addsf3x+0x96>
 560:	b3 cf       	rjmp	.-154    	; 0x4c8 <__addsf3+0x1e>
 562:	93 95       	inc	r25
 564:	88 0f       	add	r24, r24
 566:	08 f0       	brcs	.+2      	; 0x56a <__addsf3x+0x9e>
 568:	99 27       	eor	r25, r25
 56a:	ee 0f       	add	r30, r30
 56c:	97 95       	ror	r25
 56e:	87 95       	ror	r24
 570:	08 95       	ret

00000572 <__divsf3>:
 572:	0c d0       	rcall	.+24     	; 0x58c <__divsf3x>
 574:	e6 c0       	rjmp	.+460    	; 0x742 <__fp_round>
 576:	de d0       	rcall	.+444    	; 0x734 <__fp_pscB>
 578:	40 f0       	brcs	.+16     	; 0x58a <__divsf3+0x18>
 57a:	d5 d0       	rcall	.+426    	; 0x726 <__fp_pscA>
 57c:	30 f0       	brcs	.+12     	; 0x58a <__divsf3+0x18>
 57e:	21 f4       	brne	.+8      	; 0x588 <__divsf3+0x16>
 580:	5f 3f       	cpi	r21, 0xFF	; 255
 582:	19 f0       	breq	.+6      	; 0x58a <__divsf3+0x18>
 584:	c7 c0       	rjmp	.+398    	; 0x714 <__fp_inf>
 586:	51 11       	cpse	r21, r1
 588:	10 c1       	rjmp	.+544    	; 0x7aa <__fp_szero>
 58a:	ca c0       	rjmp	.+404    	; 0x720 <__fp_nan>

0000058c <__divsf3x>:
 58c:	eb d0       	rcall	.+470    	; 0x764 <__fp_split3>
 58e:	98 f3       	brcs	.-26     	; 0x576 <__divsf3+0x4>

00000590 <__divsf3_pse>:
 590:	99 23       	and	r25, r25
 592:	c9 f3       	breq	.-14     	; 0x586 <__divsf3+0x14>
 594:	55 23       	and	r21, r21
 596:	b1 f3       	breq	.-20     	; 0x584 <__divsf3+0x12>
 598:	95 1b       	sub	r25, r21
 59a:	55 0b       	sbc	r21, r21
 59c:	bb 27       	eor	r27, r27
 59e:	aa 27       	eor	r26, r26
 5a0:	62 17       	cp	r22, r18
 5a2:	73 07       	cpc	r23, r19
 5a4:	84 07       	cpc	r24, r20
 5a6:	38 f0       	brcs	.+14     	; 0x5b6 <__divsf3_pse+0x26>
 5a8:	9f 5f       	subi	r25, 0xFF	; 255
 5aa:	5f 4f       	sbci	r21, 0xFF	; 255
 5ac:	22 0f       	add	r18, r18
 5ae:	33 1f       	adc	r19, r19
 5b0:	44 1f       	adc	r20, r20
 5b2:	aa 1f       	adc	r26, r26
 5b4:	a9 f3       	breq	.-22     	; 0x5a0 <__divsf3_pse+0x10>
 5b6:	33 d0       	rcall	.+102    	; 0x61e <__divsf3_pse+0x8e>
 5b8:	0e 2e       	mov	r0, r30
 5ba:	3a f0       	brmi	.+14     	; 0x5ca <__divsf3_pse+0x3a>
 5bc:	e0 e8       	ldi	r30, 0x80	; 128
 5be:	30 d0       	rcall	.+96     	; 0x620 <__divsf3_pse+0x90>
 5c0:	91 50       	subi	r25, 0x01	; 1
 5c2:	50 40       	sbci	r21, 0x00	; 0
 5c4:	e6 95       	lsr	r30
 5c6:	00 1c       	adc	r0, r0
 5c8:	ca f7       	brpl	.-14     	; 0x5bc <__divsf3_pse+0x2c>
 5ca:	29 d0       	rcall	.+82     	; 0x61e <__divsf3_pse+0x8e>
 5cc:	fe 2f       	mov	r31, r30
 5ce:	27 d0       	rcall	.+78     	; 0x61e <__divsf3_pse+0x8e>
 5d0:	66 0f       	add	r22, r22
 5d2:	77 1f       	adc	r23, r23
 5d4:	88 1f       	adc	r24, r24
 5d6:	bb 1f       	adc	r27, r27
 5d8:	26 17       	cp	r18, r22
 5da:	37 07       	cpc	r19, r23
 5dc:	48 07       	cpc	r20, r24
 5de:	ab 07       	cpc	r26, r27
 5e0:	b0 e8       	ldi	r27, 0x80	; 128
 5e2:	09 f0       	breq	.+2      	; 0x5e6 <__divsf3_pse+0x56>
 5e4:	bb 0b       	sbc	r27, r27
 5e6:	80 2d       	mov	r24, r0
 5e8:	bf 01       	movw	r22, r30
 5ea:	ff 27       	eor	r31, r31
 5ec:	93 58       	subi	r25, 0x83	; 131
 5ee:	5f 4f       	sbci	r21, 0xFF	; 255
 5f0:	2a f0       	brmi	.+10     	; 0x5fc <__divsf3_pse+0x6c>
 5f2:	9e 3f       	cpi	r25, 0xFE	; 254
 5f4:	51 05       	cpc	r21, r1
 5f6:	68 f0       	brcs	.+26     	; 0x612 <__divsf3_pse+0x82>
 5f8:	8d c0       	rjmp	.+282    	; 0x714 <__fp_inf>
 5fa:	d7 c0       	rjmp	.+430    	; 0x7aa <__fp_szero>
 5fc:	5f 3f       	cpi	r21, 0xFF	; 255
 5fe:	ec f3       	brlt	.-6      	; 0x5fa <__divsf3_pse+0x6a>
 600:	98 3e       	cpi	r25, 0xE8	; 232
 602:	dc f3       	brlt	.-10     	; 0x5fa <__divsf3_pse+0x6a>
 604:	86 95       	lsr	r24
 606:	77 95       	ror	r23
 608:	67 95       	ror	r22
 60a:	b7 95       	ror	r27
 60c:	f7 95       	ror	r31
 60e:	9f 5f       	subi	r25, 0xFF	; 255
 610:	c9 f7       	brne	.-14     	; 0x604 <__divsf3_pse+0x74>
 612:	88 0f       	add	r24, r24
 614:	91 1d       	adc	r25, r1
 616:	96 95       	lsr	r25
 618:	87 95       	ror	r24
 61a:	97 f9       	bld	r25, 7
 61c:	08 95       	ret
 61e:	e1 e0       	ldi	r30, 0x01	; 1
 620:	66 0f       	add	r22, r22
 622:	77 1f       	adc	r23, r23
 624:	88 1f       	adc	r24, r24
 626:	bb 1f       	adc	r27, r27
 628:	62 17       	cp	r22, r18
 62a:	73 07       	cpc	r23, r19
 62c:	84 07       	cpc	r24, r20
 62e:	ba 07       	cpc	r27, r26
 630:	20 f0       	brcs	.+8      	; 0x63a <__divsf3_pse+0xaa>
 632:	62 1b       	sub	r22, r18
 634:	73 0b       	sbc	r23, r19
 636:	84 0b       	sbc	r24, r20
 638:	ba 0b       	sbc	r27, r26
 63a:	ee 1f       	adc	r30, r30
 63c:	88 f7       	brcc	.-30     	; 0x620 <__divsf3_pse+0x90>
 63e:	e0 95       	com	r30
 640:	08 95       	ret

00000642 <__fixunssfsi>:
 642:	98 d0       	rcall	.+304    	; 0x774 <__fp_splitA>
 644:	88 f0       	brcs	.+34     	; 0x668 <__fixunssfsi+0x26>
 646:	9f 57       	subi	r25, 0x7F	; 127
 648:	90 f0       	brcs	.+36     	; 0x66e <__fixunssfsi+0x2c>
 64a:	b9 2f       	mov	r27, r25
 64c:	99 27       	eor	r25, r25
 64e:	b7 51       	subi	r27, 0x17	; 23
 650:	a0 f0       	brcs	.+40     	; 0x67a <__fixunssfsi+0x38>
 652:	d1 f0       	breq	.+52     	; 0x688 <__fixunssfsi+0x46>
 654:	66 0f       	add	r22, r22
 656:	77 1f       	adc	r23, r23
 658:	88 1f       	adc	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	1a f0       	brmi	.+6      	; 0x664 <__fixunssfsi+0x22>
 65e:	ba 95       	dec	r27
 660:	c9 f7       	brne	.-14     	; 0x654 <__fixunssfsi+0x12>
 662:	12 c0       	rjmp	.+36     	; 0x688 <__fixunssfsi+0x46>
 664:	b1 30       	cpi	r27, 0x01	; 1
 666:	81 f0       	breq	.+32     	; 0x688 <__fixunssfsi+0x46>
 668:	9f d0       	rcall	.+318    	; 0x7a8 <__fp_zero>
 66a:	b1 e0       	ldi	r27, 0x01	; 1
 66c:	08 95       	ret
 66e:	9c c0       	rjmp	.+312    	; 0x7a8 <__fp_zero>
 670:	67 2f       	mov	r22, r23
 672:	78 2f       	mov	r23, r24
 674:	88 27       	eor	r24, r24
 676:	b8 5f       	subi	r27, 0xF8	; 248
 678:	39 f0       	breq	.+14     	; 0x688 <__fixunssfsi+0x46>
 67a:	b9 3f       	cpi	r27, 0xF9	; 249
 67c:	cc f3       	brlt	.-14     	; 0x670 <__fixunssfsi+0x2e>
 67e:	86 95       	lsr	r24
 680:	77 95       	ror	r23
 682:	67 95       	ror	r22
 684:	b3 95       	inc	r27
 686:	d9 f7       	brne	.-10     	; 0x67e <__fixunssfsi+0x3c>
 688:	3e f4       	brtc	.+14     	; 0x698 <__fixunssfsi+0x56>
 68a:	90 95       	com	r25
 68c:	80 95       	com	r24
 68e:	70 95       	com	r23
 690:	61 95       	neg	r22
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	8f 4f       	sbci	r24, 0xFF	; 255
 696:	9f 4f       	sbci	r25, 0xFF	; 255
 698:	08 95       	ret

0000069a <__floatunsisf>:
 69a:	e8 94       	clt
 69c:	09 c0       	rjmp	.+18     	; 0x6b0 <__floatsisf+0x12>

0000069e <__floatsisf>:
 69e:	97 fb       	bst	r25, 7
 6a0:	3e f4       	brtc	.+14     	; 0x6b0 <__floatsisf+0x12>
 6a2:	90 95       	com	r25
 6a4:	80 95       	com	r24
 6a6:	70 95       	com	r23
 6a8:	61 95       	neg	r22
 6aa:	7f 4f       	sbci	r23, 0xFF	; 255
 6ac:	8f 4f       	sbci	r24, 0xFF	; 255
 6ae:	9f 4f       	sbci	r25, 0xFF	; 255
 6b0:	99 23       	and	r25, r25
 6b2:	a9 f0       	breq	.+42     	; 0x6de <__floatsisf+0x40>
 6b4:	f9 2f       	mov	r31, r25
 6b6:	96 e9       	ldi	r25, 0x96	; 150
 6b8:	bb 27       	eor	r27, r27
 6ba:	93 95       	inc	r25
 6bc:	f6 95       	lsr	r31
 6be:	87 95       	ror	r24
 6c0:	77 95       	ror	r23
 6c2:	67 95       	ror	r22
 6c4:	b7 95       	ror	r27
 6c6:	f1 11       	cpse	r31, r1
 6c8:	f8 cf       	rjmp	.-16     	; 0x6ba <__floatsisf+0x1c>
 6ca:	fa f4       	brpl	.+62     	; 0x70a <__floatsisf+0x6c>
 6cc:	bb 0f       	add	r27, r27
 6ce:	11 f4       	brne	.+4      	; 0x6d4 <__floatsisf+0x36>
 6d0:	60 ff       	sbrs	r22, 0
 6d2:	1b c0       	rjmp	.+54     	; 0x70a <__floatsisf+0x6c>
 6d4:	6f 5f       	subi	r22, 0xFF	; 255
 6d6:	7f 4f       	sbci	r23, 0xFF	; 255
 6d8:	8f 4f       	sbci	r24, 0xFF	; 255
 6da:	9f 4f       	sbci	r25, 0xFF	; 255
 6dc:	16 c0       	rjmp	.+44     	; 0x70a <__floatsisf+0x6c>
 6de:	88 23       	and	r24, r24
 6e0:	11 f0       	breq	.+4      	; 0x6e6 <__floatsisf+0x48>
 6e2:	96 e9       	ldi	r25, 0x96	; 150
 6e4:	11 c0       	rjmp	.+34     	; 0x708 <__floatsisf+0x6a>
 6e6:	77 23       	and	r23, r23
 6e8:	21 f0       	breq	.+8      	; 0x6f2 <__floatsisf+0x54>
 6ea:	9e e8       	ldi	r25, 0x8E	; 142
 6ec:	87 2f       	mov	r24, r23
 6ee:	76 2f       	mov	r23, r22
 6f0:	05 c0       	rjmp	.+10     	; 0x6fc <__floatsisf+0x5e>
 6f2:	66 23       	and	r22, r22
 6f4:	71 f0       	breq	.+28     	; 0x712 <__floatsisf+0x74>
 6f6:	96 e8       	ldi	r25, 0x86	; 134
 6f8:	86 2f       	mov	r24, r22
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	60 e0       	ldi	r22, 0x00	; 0
 6fe:	2a f0       	brmi	.+10     	; 0x70a <__floatsisf+0x6c>
 700:	9a 95       	dec	r25
 702:	66 0f       	add	r22, r22
 704:	77 1f       	adc	r23, r23
 706:	88 1f       	adc	r24, r24
 708:	da f7       	brpl	.-10     	; 0x700 <__floatsisf+0x62>
 70a:	88 0f       	add	r24, r24
 70c:	96 95       	lsr	r25
 70e:	87 95       	ror	r24
 710:	97 f9       	bld	r25, 7
 712:	08 95       	ret

00000714 <__fp_inf>:
 714:	97 f9       	bld	r25, 7
 716:	9f 67       	ori	r25, 0x7F	; 127
 718:	80 e8       	ldi	r24, 0x80	; 128
 71a:	70 e0       	ldi	r23, 0x00	; 0
 71c:	60 e0       	ldi	r22, 0x00	; 0
 71e:	08 95       	ret

00000720 <__fp_nan>:
 720:	9f ef       	ldi	r25, 0xFF	; 255
 722:	80 ec       	ldi	r24, 0xC0	; 192
 724:	08 95       	ret

00000726 <__fp_pscA>:
 726:	00 24       	eor	r0, r0
 728:	0a 94       	dec	r0
 72a:	16 16       	cp	r1, r22
 72c:	17 06       	cpc	r1, r23
 72e:	18 06       	cpc	r1, r24
 730:	09 06       	cpc	r0, r25
 732:	08 95       	ret

00000734 <__fp_pscB>:
 734:	00 24       	eor	r0, r0
 736:	0a 94       	dec	r0
 738:	12 16       	cp	r1, r18
 73a:	13 06       	cpc	r1, r19
 73c:	14 06       	cpc	r1, r20
 73e:	05 06       	cpc	r0, r21
 740:	08 95       	ret

00000742 <__fp_round>:
 742:	09 2e       	mov	r0, r25
 744:	03 94       	inc	r0
 746:	00 0c       	add	r0, r0
 748:	11 f4       	brne	.+4      	; 0x74e <__fp_round+0xc>
 74a:	88 23       	and	r24, r24
 74c:	52 f0       	brmi	.+20     	; 0x762 <__fp_round+0x20>
 74e:	bb 0f       	add	r27, r27
 750:	40 f4       	brcc	.+16     	; 0x762 <__fp_round+0x20>
 752:	bf 2b       	or	r27, r31
 754:	11 f4       	brne	.+4      	; 0x75a <__fp_round+0x18>
 756:	60 ff       	sbrs	r22, 0
 758:	04 c0       	rjmp	.+8      	; 0x762 <__fp_round+0x20>
 75a:	6f 5f       	subi	r22, 0xFF	; 255
 75c:	7f 4f       	sbci	r23, 0xFF	; 255
 75e:	8f 4f       	sbci	r24, 0xFF	; 255
 760:	9f 4f       	sbci	r25, 0xFF	; 255
 762:	08 95       	ret

00000764 <__fp_split3>:
 764:	57 fd       	sbrc	r21, 7
 766:	90 58       	subi	r25, 0x80	; 128
 768:	44 0f       	add	r20, r20
 76a:	55 1f       	adc	r21, r21
 76c:	59 f0       	breq	.+22     	; 0x784 <__fp_splitA+0x10>
 76e:	5f 3f       	cpi	r21, 0xFF	; 255
 770:	71 f0       	breq	.+28     	; 0x78e <__fp_splitA+0x1a>
 772:	47 95       	ror	r20

00000774 <__fp_splitA>:
 774:	88 0f       	add	r24, r24
 776:	97 fb       	bst	r25, 7
 778:	99 1f       	adc	r25, r25
 77a:	61 f0       	breq	.+24     	; 0x794 <__fp_splitA+0x20>
 77c:	9f 3f       	cpi	r25, 0xFF	; 255
 77e:	79 f0       	breq	.+30     	; 0x79e <__fp_splitA+0x2a>
 780:	87 95       	ror	r24
 782:	08 95       	ret
 784:	12 16       	cp	r1, r18
 786:	13 06       	cpc	r1, r19
 788:	14 06       	cpc	r1, r20
 78a:	55 1f       	adc	r21, r21
 78c:	f2 cf       	rjmp	.-28     	; 0x772 <__fp_split3+0xe>
 78e:	46 95       	lsr	r20
 790:	f1 df       	rcall	.-30     	; 0x774 <__fp_splitA>
 792:	08 c0       	rjmp	.+16     	; 0x7a4 <__fp_splitA+0x30>
 794:	16 16       	cp	r1, r22
 796:	17 06       	cpc	r1, r23
 798:	18 06       	cpc	r1, r24
 79a:	99 1f       	adc	r25, r25
 79c:	f1 cf       	rjmp	.-30     	; 0x780 <__fp_splitA+0xc>
 79e:	86 95       	lsr	r24
 7a0:	71 05       	cpc	r23, r1
 7a2:	61 05       	cpc	r22, r1
 7a4:	08 94       	sec
 7a6:	08 95       	ret

000007a8 <__fp_zero>:
 7a8:	e8 94       	clt

000007aa <__fp_szero>:
 7aa:	bb 27       	eor	r27, r27
 7ac:	66 27       	eor	r22, r22
 7ae:	77 27       	eor	r23, r23
 7b0:	cb 01       	movw	r24, r22
 7b2:	97 f9       	bld	r25, 7
 7b4:	08 95       	ret

000007b6 <__mulsf3>:
 7b6:	0b d0       	rcall	.+22     	; 0x7ce <__mulsf3x>
 7b8:	c4 cf       	rjmp	.-120    	; 0x742 <__fp_round>
 7ba:	b5 df       	rcall	.-150    	; 0x726 <__fp_pscA>
 7bc:	28 f0       	brcs	.+10     	; 0x7c8 <__mulsf3+0x12>
 7be:	ba df       	rcall	.-140    	; 0x734 <__fp_pscB>
 7c0:	18 f0       	brcs	.+6      	; 0x7c8 <__mulsf3+0x12>
 7c2:	95 23       	and	r25, r21
 7c4:	09 f0       	breq	.+2      	; 0x7c8 <__mulsf3+0x12>
 7c6:	a6 cf       	rjmp	.-180    	; 0x714 <__fp_inf>
 7c8:	ab cf       	rjmp	.-170    	; 0x720 <__fp_nan>
 7ca:	11 24       	eor	r1, r1
 7cc:	ee cf       	rjmp	.-36     	; 0x7aa <__fp_szero>

000007ce <__mulsf3x>:
 7ce:	ca df       	rcall	.-108    	; 0x764 <__fp_split3>
 7d0:	a0 f3       	brcs	.-24     	; 0x7ba <__mulsf3+0x4>

000007d2 <__mulsf3_pse>:
 7d2:	95 9f       	mul	r25, r21
 7d4:	d1 f3       	breq	.-12     	; 0x7ca <__mulsf3+0x14>
 7d6:	95 0f       	add	r25, r21
 7d8:	50 e0       	ldi	r21, 0x00	; 0
 7da:	55 1f       	adc	r21, r21
 7dc:	62 9f       	mul	r22, r18
 7de:	f0 01       	movw	r30, r0
 7e0:	72 9f       	mul	r23, r18
 7e2:	bb 27       	eor	r27, r27
 7e4:	f0 0d       	add	r31, r0
 7e6:	b1 1d       	adc	r27, r1
 7e8:	63 9f       	mul	r22, r19
 7ea:	aa 27       	eor	r26, r26
 7ec:	f0 0d       	add	r31, r0
 7ee:	b1 1d       	adc	r27, r1
 7f0:	aa 1f       	adc	r26, r26
 7f2:	64 9f       	mul	r22, r20
 7f4:	66 27       	eor	r22, r22
 7f6:	b0 0d       	add	r27, r0
 7f8:	a1 1d       	adc	r26, r1
 7fa:	66 1f       	adc	r22, r22
 7fc:	82 9f       	mul	r24, r18
 7fe:	22 27       	eor	r18, r18
 800:	b0 0d       	add	r27, r0
 802:	a1 1d       	adc	r26, r1
 804:	62 1f       	adc	r22, r18
 806:	73 9f       	mul	r23, r19
 808:	b0 0d       	add	r27, r0
 80a:	a1 1d       	adc	r26, r1
 80c:	62 1f       	adc	r22, r18
 80e:	83 9f       	mul	r24, r19
 810:	a0 0d       	add	r26, r0
 812:	61 1d       	adc	r22, r1
 814:	22 1f       	adc	r18, r18
 816:	74 9f       	mul	r23, r20
 818:	33 27       	eor	r19, r19
 81a:	a0 0d       	add	r26, r0
 81c:	61 1d       	adc	r22, r1
 81e:	23 1f       	adc	r18, r19
 820:	84 9f       	mul	r24, r20
 822:	60 0d       	add	r22, r0
 824:	21 1d       	adc	r18, r1
 826:	82 2f       	mov	r24, r18
 828:	76 2f       	mov	r23, r22
 82a:	6a 2f       	mov	r22, r26
 82c:	11 24       	eor	r1, r1
 82e:	9f 57       	subi	r25, 0x7F	; 127
 830:	50 40       	sbci	r21, 0x00	; 0
 832:	8a f0       	brmi	.+34     	; 0x856 <__mulsf3_pse+0x84>
 834:	e1 f0       	breq	.+56     	; 0x86e <__mulsf3_pse+0x9c>
 836:	88 23       	and	r24, r24
 838:	4a f0       	brmi	.+18     	; 0x84c <__mulsf3_pse+0x7a>
 83a:	ee 0f       	add	r30, r30
 83c:	ff 1f       	adc	r31, r31
 83e:	bb 1f       	adc	r27, r27
 840:	66 1f       	adc	r22, r22
 842:	77 1f       	adc	r23, r23
 844:	88 1f       	adc	r24, r24
 846:	91 50       	subi	r25, 0x01	; 1
 848:	50 40       	sbci	r21, 0x00	; 0
 84a:	a9 f7       	brne	.-22     	; 0x836 <__mulsf3_pse+0x64>
 84c:	9e 3f       	cpi	r25, 0xFE	; 254
 84e:	51 05       	cpc	r21, r1
 850:	70 f0       	brcs	.+28     	; 0x86e <__mulsf3_pse+0x9c>
 852:	60 cf       	rjmp	.-320    	; 0x714 <__fp_inf>
 854:	aa cf       	rjmp	.-172    	; 0x7aa <__fp_szero>
 856:	5f 3f       	cpi	r21, 0xFF	; 255
 858:	ec f3       	brlt	.-6      	; 0x854 <__mulsf3_pse+0x82>
 85a:	98 3e       	cpi	r25, 0xE8	; 232
 85c:	dc f3       	brlt	.-10     	; 0x854 <__mulsf3_pse+0x82>
 85e:	86 95       	lsr	r24
 860:	77 95       	ror	r23
 862:	67 95       	ror	r22
 864:	b7 95       	ror	r27
 866:	f7 95       	ror	r31
 868:	e7 95       	ror	r30
 86a:	9f 5f       	subi	r25, 0xFF	; 255
 86c:	c1 f7       	brne	.-16     	; 0x85e <__mulsf3_pse+0x8c>
 86e:	fe 2b       	or	r31, r30
 870:	88 0f       	add	r24, r24
 872:	91 1d       	adc	r25, r1
 874:	96 95       	lsr	r25
 876:	87 95       	ror	r24
 878:	97 f9       	bld	r25, 7
 87a:	08 95       	ret

0000087c <__udivmodsi4>:
 87c:	a1 e2       	ldi	r26, 0x21	; 33
 87e:	1a 2e       	mov	r1, r26
 880:	aa 1b       	sub	r26, r26
 882:	bb 1b       	sub	r27, r27
 884:	fd 01       	movw	r30, r26
 886:	0d c0       	rjmp	.+26     	; 0x8a2 <__udivmodsi4_ep>

00000888 <__udivmodsi4_loop>:
 888:	aa 1f       	adc	r26, r26
 88a:	bb 1f       	adc	r27, r27
 88c:	ee 1f       	adc	r30, r30
 88e:	ff 1f       	adc	r31, r31
 890:	a2 17       	cp	r26, r18
 892:	b3 07       	cpc	r27, r19
 894:	e4 07       	cpc	r30, r20
 896:	f5 07       	cpc	r31, r21
 898:	20 f0       	brcs	.+8      	; 0x8a2 <__udivmodsi4_ep>
 89a:	a2 1b       	sub	r26, r18
 89c:	b3 0b       	sbc	r27, r19
 89e:	e4 0b       	sbc	r30, r20
 8a0:	f5 0b       	sbc	r31, r21

000008a2 <__udivmodsi4_ep>:
 8a2:	66 1f       	adc	r22, r22
 8a4:	77 1f       	adc	r23, r23
 8a6:	88 1f       	adc	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	1a 94       	dec	r1
 8ac:	69 f7       	brne	.-38     	; 0x888 <__udivmodsi4_loop>
 8ae:	60 95       	com	r22
 8b0:	70 95       	com	r23
 8b2:	80 95       	com	r24
 8b4:	90 95       	com	r25
 8b6:	9b 01       	movw	r18, r22
 8b8:	ac 01       	movw	r20, r24
 8ba:	bd 01       	movw	r22, r26
 8bc:	cf 01       	movw	r24, r30
 8be:	08 95       	ret

000008c0 <__itoa_ncheck>:
 8c0:	bb 27       	eor	r27, r27
 8c2:	4a 30       	cpi	r20, 0x0A	; 10
 8c4:	31 f4       	brne	.+12     	; 0x8d2 <__itoa_ncheck+0x12>
 8c6:	99 23       	and	r25, r25
 8c8:	22 f4       	brpl	.+8      	; 0x8d2 <__itoa_ncheck+0x12>
 8ca:	bd e2       	ldi	r27, 0x2D	; 45
 8cc:	90 95       	com	r25
 8ce:	81 95       	neg	r24
 8d0:	9f 4f       	sbci	r25, 0xFF	; 255
 8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <__utoa_common>

000008d4 <__utoa_ncheck>:
 8d4:	bb 27       	eor	r27, r27

000008d6 <__utoa_common>:
 8d6:	fb 01       	movw	r30, r22
 8d8:	55 27       	eor	r21, r21
 8da:	aa 27       	eor	r26, r26
 8dc:	88 0f       	add	r24, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	aa 1f       	adc	r26, r26
 8e2:	a4 17       	cp	r26, r20
 8e4:	10 f0       	brcs	.+4      	; 0x8ea <__utoa_common+0x14>
 8e6:	a4 1b       	sub	r26, r20
 8e8:	83 95       	inc	r24
 8ea:	50 51       	subi	r21, 0x10	; 16
 8ec:	b9 f7       	brne	.-18     	; 0x8dc <__utoa_common+0x6>
 8ee:	a0 5d       	subi	r26, 0xD0	; 208
 8f0:	aa 33       	cpi	r26, 0x3A	; 58
 8f2:	08 f0       	brcs	.+2      	; 0x8f6 <__utoa_common+0x20>
 8f4:	a9 5d       	subi	r26, 0xD9	; 217
 8f6:	a1 93       	st	Z+, r26
 8f8:	00 97       	sbiw	r24, 0x00	; 0
 8fa:	79 f7       	brne	.-34     	; 0x8da <__utoa_common+0x4>
 8fc:	b1 11       	cpse	r27, r1
 8fe:	b1 93       	st	Z+, r27
 900:	11 92       	st	Z+, r1
 902:	cb 01       	movw	r24, r22
 904:	00 c0       	rjmp	.+0      	; 0x906 <strrev>

00000906 <strrev>:
 906:	dc 01       	movw	r26, r24
 908:	fc 01       	movw	r30, r24
 90a:	67 2f       	mov	r22, r23
 90c:	71 91       	ld	r23, Z+
 90e:	77 23       	and	r23, r23
 910:	e1 f7       	brne	.-8      	; 0x90a <strrev+0x4>
 912:	32 97       	sbiw	r30, 0x02	; 2
 914:	04 c0       	rjmp	.+8      	; 0x91e <strrev+0x18>
 916:	7c 91       	ld	r23, X
 918:	6d 93       	st	X+, r22
 91a:	70 83       	st	Z, r23
 91c:	62 91       	ld	r22, -Z
 91e:	ae 17       	cp	r26, r30
 920:	bf 07       	cpc	r27, r31
 922:	c8 f3       	brcs	.-14     	; 0x916 <strrev+0x10>
 924:	08 95       	ret

00000926 <_exit>:
 926:	f8 94       	cli

00000928 <__stop_program>:
 928:	ff cf       	rjmp	.-2      	; 0x928 <__stop_program>
