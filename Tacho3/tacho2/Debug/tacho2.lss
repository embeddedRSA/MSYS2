
tacho2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  00000b2a  00000bde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b2a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800218  00800218  00000bf6  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  00000bf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000bfa  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c2c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000140  00000000  00000000  00000c70  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001899  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001018  00000000  00000000  00002649  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000009c8  00000000  00000000  00003661  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000210  00000000  00000000  0000402c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000819  00000000  00000000  0000423c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000714  00000000  00000000  00004a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000090  00000000  00000000  00005169  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	fb c0       	rjmp	.+502    	; 0x208 <__vector_4>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	18 c1       	rjmp	.+560    	; 0x26e <__vector_15>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e2       	ldi	r30, 0x2A	; 42
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 31       	cpi	r26, 0x18	; 24
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e1       	ldi	r26, 0x18	; 24
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 33       	cpi	r26, 0x3A	; 58
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	02 c5       	rjmp	.+2564   	; 0xb26 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
// Select the UART to test (UART0, UART1, UART2 or UART3)
#define myUART UART0

int main(void)
{
	checkpointCnt = 0;
 124:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <checkpointCnt>
	speedSensor = speedSensor_getDriver(65);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	82 e8       	ldi	r24, 0x82	; 130
 12e:	92 e4       	ldi	r25, 0x42	; 66
 130:	68 d1       	rcall	.+720    	; 0x402 <speedSensor_getDriver>
 132:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <__data_end+0x1>
 136:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__data_end>
	
	//uart setup
	InitUART(myUART, 9600, 8, 'N');
 13a:	0e e4       	ldi	r16, 0x4E	; 78
 13c:	28 e0       	ldi	r18, 0x08	; 8
 13e:	40 e8       	ldi	r20, 0x80	; 128
 140:	55 e2       	ldi	r21, 0x25	; 37
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	80 ec       	ldi	r24, 0xC0	; 192
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	c2 d1       	rcall	.+900    	; 0x4d0 <InitUART>
	
	while (1)
	{			
		PORTB &= ~(1<<PB5); //debug 
 14c:	2d 98       	cbi	0x05, 5	; 5
		
		SendString(myUART, "KMH: ");
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	72 e0       	ldi	r23, 0x02	; 2
 152:	80 ec       	ldi	r24, 0xC0	; 192
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	15 d2       	rcall	.+1066   	; 0x582 <SendString>
		float f = speedSensor->getSpeedInKmh();
 158:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__data_end>
 15c:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__data_end+0x1>
 160:	06 80       	ldd	r0, Z+6	; 0x06
 162:	f7 81       	ldd	r31, Z+7	; 0x07
 164:	e0 2d       	mov	r30, r0
 166:	19 95       	eicall
 168:	4b 01       	movw	r8, r22
		int r = (int)f;
 16a:	5c 01       	movw	r10, r24
 16c:	0e d3       	rcall	.+1564   	; 0x78a <__fixsfsi>
 16e:	6b 01       	movw	r12, r22
		int d = (f-r)*100;
		SendInteger(myUART,r);
 170:	7c 01       	movw	r14, r24
 172:	80 ec       	ldi	r24, 0xC0	; 192
 174:	90 e0       	ldi	r25, 0x00	; 0
		SendChar(myUART,'.');
 176:	19 d2       	rcall	.+1074   	; 0x5aa <SendInteger>
 178:	6e e2       	ldi	r22, 0x2E	; 46
 17a:	80 ec       	ldi	r24, 0xC0	; 192
 17c:	90 e0       	ldi	r25, 0x00	; 0
		SendInteger(myUART,d);
 17e:	fb d1       	rcall	.+1014   	; 0x576 <SendChar>
 180:	b6 01       	movw	r22, r12
 182:	dd 0c       	add	r13, r13
 184:	88 0b       	sbc	r24, r24
 186:	99 0b       	sbc	r25, r25
 188:	33 d3       	rcall	.+1638   	; 0x7f0 <__floatsisf>
 18a:	9b 01       	movw	r18, r22
 18c:	ac 01       	movw	r20, r24
 18e:	c5 01       	movw	r24, r10
 190:	b4 01       	movw	r22, r8
 192:	2e d2       	rcall	.+1116   	; 0x5f0 <__subsf3>
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	48 ec       	ldi	r20, 0xC8	; 200
 19a:	52 e4       	ldi	r21, 0x42	; 66
 19c:	b9 d3       	rcall	.+1906   	; 0x910 <__mulsf3>
 19e:	f5 d2       	rcall	.+1514   	; 0x78a <__fixsfsi>
 1a0:	80 ec       	ldi	r24, 0xC0	; 192
 1a2:	90 e0       	ldi	r25, 0x00	; 0
		
		SendString(myUART, "     KHM_TOTAL: ");
 1a4:	02 d2       	rcall	.+1028   	; 0x5aa <SendInteger>
 1a6:	66 e0       	ldi	r22, 0x06	; 6
 1a8:	72 e0       	ldi	r23, 0x02	; 2
 1aa:	80 ec       	ldi	r24, 0xC0	; 192
 1ac:	90 e0       	ldi	r25, 0x00	; 0
		f = speedSensor->getTripDistance();
 1ae:	e9 d1       	rcall	.+978    	; 0x582 <SendString>
 1b0:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__data_end>
 1b4:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__data_end+0x1>
 1b8:	00 84       	ldd	r0, Z+8	; 0x08
 1ba:	f1 85       	ldd	r31, Z+9	; 0x09
 1bc:	e0 2d       	mov	r30, r0
		r = (int)f;
 1be:	19 95       	eicall
 1c0:	4b 01       	movw	r8, r22
 1c2:	5c 01       	movw	r10, r24
		d = (f-r)*100;
		SendInteger(myUART,r);
 1c4:	e2 d2       	rcall	.+1476   	; 0x78a <__fixsfsi>
 1c6:	6b 01       	movw	r12, r22
 1c8:	7c 01       	movw	r14, r24
		SendChar(myUART,'.');
 1ca:	80 ec       	ldi	r24, 0xC0	; 192
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	ed d1       	rcall	.+986    	; 0x5aa <SendInteger>
 1d0:	6e e2       	ldi	r22, 0x2E	; 46
		SendInteger(myUART,d);
 1d2:	80 ec       	ldi	r24, 0xC0	; 192
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	cf d1       	rcall	.+926    	; 0x576 <SendChar>
 1d8:	b6 01       	movw	r22, r12
 1da:	dd 0c       	add	r13, r13
 1dc:	88 0b       	sbc	r24, r24
 1de:	99 0b       	sbc	r25, r25
 1e0:	07 d3       	rcall	.+1550   	; 0x7f0 <__floatsisf>
 1e2:	9b 01       	movw	r18, r22
 1e4:	ac 01       	movw	r20, r24
 1e6:	c5 01       	movw	r24, r10
 1e8:	b4 01       	movw	r22, r8
 1ea:	02 d2       	rcall	.+1028   	; 0x5f0 <__subsf3>
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	48 ec       	ldi	r20, 0xC8	; 200
 1f2:	52 e4       	ldi	r21, 0x42	; 66
 1f4:	8d d3       	rcall	.+1818   	; 0x910 <__mulsf3>
 1f6:	c9 d2       	rcall	.+1426   	; 0x78a <__fixsfsi>
 1f8:	80 ec       	ldi	r24, 0xC0	; 192
 1fa:	90 e0       	ldi	r25, 0x00	; 0
		SendChar(myUART,'\r'); //newline
 1fc:	d6 d1       	rcall	.+940    	; 0x5aa <SendInteger>
 1fe:	6d e0       	ldi	r22, 0x0D	; 13
 200:	80 ec       	ldi	r24, 0xC0	; 192
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	b8 d1       	rcall	.+880    	; 0x576 <SendChar>
 206:	a2 cf       	rjmp	.-188    	; 0x14c <main+0x28>

00000208 <__vector_4>:
	}
}


ISR(INT3_vect) //PE4 
{
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	0b b6       	in	r0, 0x3b	; 59
 214:	0f 92       	push	r0
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
	speedSensor->updateMilestoneCount();
 22e:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__data_end>
 232:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__data_end+0x1>
 236:	02 80       	ldd	r0, Z+2	; 0x02
 238:	f3 81       	ldd	r31, Z+3	; 0x03
 23a:	e0 2d       	mov	r30, r0
 23c:	19 95       	eicall
	revolutionsForCalc++; //Counts up the revolutions for speed calculation.
 23e:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <revolutionsForCalc>
 242:	8f 5f       	subi	r24, 0xFF	; 255
 244:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <revolutionsForCalc>
}
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0b be       	out	0x3b, r0	; 59
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <__vector_15>:


//TIMER 2 interrupts every second to measure how many revolutions the wheel has made.
ISR(TIMER2_OVF_vect)
{
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	0b b6       	in	r0, 0x3b	; 59
 27a:	0f 92       	push	r0
 27c:	2f 93       	push	r18
 27e:	3f 93       	push	r19
 280:	4f 93       	push	r20
 282:	5f 93       	push	r21
 284:	6f 93       	push	r22
 286:	7f 93       	push	r23
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
 28c:	af 93       	push	r26
 28e:	bf 93       	push	r27
 290:	ef 93       	push	r30
 292:	ff 93       	push	r31
	// After 62500 interrupts overflows the timer counts another timer to get other times. 
	// Because of CPU clock and prescaling 8bit timer overflows every 16.063 us. Delay=prescaler*(OCRn+1)/fcpu
	timerOverflows++;
 294:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <timerOverflows>
 298:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <timerOverflows+0x1>
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <timerOverflows+0x1>
 2a2:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <timerOverflows>
	
	if (timerOverflows == 62500)	// 16.063us*62500=1.004s
 2a6:	84 32       	cpi	r24, 0x24	; 36
 2a8:	94 4f       	sbci	r25, 0xF4	; 244
 2aa:	b1 f4       	brne	.+44     	; 0x2d8 <__vector_15+0x6a>
	{
		timerOverflows = 0; //reset timer
 2ac:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <timerOverflows+0x1>
 2b0:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <timerOverflows>
		PORTB |=(1<<PB5); //debug
 2b4:	2d 9a       	sbi	0x05, 5	; 5
		
		speedSensor->updateRevolutionCount(revolutionsForCalc);
 2b6:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__data_end>
 2ba:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__data_end+0x1>
 2be:	01 90       	ld	r0, Z+
 2c0:	f0 81       	ld	r31, Z
 2c2:	e0 2d       	mov	r30, r0
 2c4:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <revolutionsForCalc>
 2c8:	19 95       	eicall
		revolutionsForCalc = 0; //Resetting after getting value for KHM calculation  
 2ca:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <revolutionsForCalc>
		timerCount=0; //Resetting before getting value.
		checkpointCnt++;
 2ce:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <checkpointCnt>
 2d2:	8f 5f       	subi	r24, 0xFF	; 255
 2d4:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <checkpointCnt>
	}
	
	if (checkpointCnt>60) //Save milestone to EEPROM every minute
 2d8:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <checkpointCnt>
 2dc:	8d 33       	cpi	r24, 0x3D	; 61
 2de:	50 f0       	brcs	.+20     	; 0x2f4 <__vector_15+0x86>
	{
		checkpointCnt = 0;
 2e0:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <checkpointCnt>
		speedSensor->saveMilestoneCount();
 2e4:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__data_end>
 2e8:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__data_end+0x1>
 2ec:	04 80       	ldd	r0, Z+4	; 0x04
 2ee:	f5 81       	ldd	r31, Z+5	; 0x05
 2f0:	e0 2d       	mov	r30, r0
 2f2:	19 95       	eicall
	}

 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	bf 91       	pop	r27
 2fa:	af 91       	pop	r26
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	7f 91       	pop	r23
 302:	6f 91       	pop	r22
 304:	5f 91       	pop	r21
 306:	4f 91       	pop	r20
 308:	3f 91       	pop	r19
 30a:	2f 91       	pop	r18
 30c:	0f 90       	pop	r0
 30e:	0b be       	out	0x3b, r0	; 59
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <getTripDistance>:
}

static float getTripDistance(void)  //WORKS TESTED 
{ 
	float KMD = ((revLength*milestoneCount)/1000)+kmCount; //Total KM distance driven
	return KMD;
 31a:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <milestoneCount>
 31e:	70 91 33 02 	lds	r23, 0x0233	; 0x800233 <milestoneCount+0x1>
 322:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <milestoneCount+0x2>
 326:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <milestoneCount+0x3>
 32a:	60 d2       	rcall	.+1216   	; 0x7ec <__floatunsisf>
 32c:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <revLength>
 330:	30 91 20 02 	lds	r19, 0x0220	; 0x800220 <revLength+0x1>
 334:	40 91 21 02 	lds	r20, 0x0221	; 0x800221 <revLength+0x2>
 338:	50 91 22 02 	lds	r21, 0x0222	; 0x800222 <revLength+0x3>
 33c:	e9 d2       	rcall	.+1490   	; 0x910 <__mulsf3>
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	4a e7       	ldi	r20, 0x7A	; 122
 344:	54 e4       	ldi	r21, 0x44	; 68
 346:	b9 d1       	rcall	.+882    	; 0x6ba <__divsf3>
 348:	20 91 2e 02 	lds	r18, 0x022E	; 0x80022e <kmCount>
 34c:	30 91 2f 02 	lds	r19, 0x022F	; 0x80022f <kmCount+0x1>
 350:	40 91 30 02 	lds	r20, 0x0230	; 0x800230 <kmCount+0x2>
 354:	50 91 31 02 	lds	r21, 0x0231	; 0x800231 <kmCount+0x3>
 358:	4c c1       	rjmp	.+664    	; 0x5f2 <__addsf3>
}
 35a:	08 95       	ret

0000035c <updateMilestoneCount>:

static void updateMilestoneCount()
{
	milestoneCount += 1;
 35c:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <milestoneCount>
 360:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <milestoneCount+0x1>
 364:	a0 91 34 02 	lds	r26, 0x0234	; 0x800234 <milestoneCount+0x2>
 368:	b0 91 35 02 	lds	r27, 0x0235	; 0x800235 <milestoneCount+0x3>
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	a1 1d       	adc	r26, r1
 370:	b1 1d       	adc	r27, r1
 372:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <milestoneCount>
 376:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <milestoneCount+0x1>
 37a:	a0 93 34 02 	sts	0x0234, r26	; 0x800234 <milestoneCount+0x2>
 37e:	b0 93 35 02 	sts	0x0235, r27	; 0x800235 <milestoneCount+0x3>
 382:	08 95       	ret

00000384 <updateRevolutionCount>:
}

static void updateRevolutionCount(uint8_t revs)
{
	static uint8_t cnt = 0;
	revPerSec[cnt] = revs;
 384:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <cnt.1908>
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	f9 01       	movw	r30, r18
 38c:	ea 5c       	subi	r30, 0xCA	; 202
 38e:	fd 4f       	sbci	r31, 0xFD	; 253
 390:	80 83       	st	Z, r24
	cnt = (cnt+1) % 4;
 392:	c9 01       	movw	r24, r18
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	83 70       	andi	r24, 0x03	; 3
 398:	90 78       	andi	r25, 0x80	; 128
 39a:	99 23       	and	r25, r25
 39c:	24 f4       	brge	.+8      	; 0x3a6 <updateRevolutionCount+0x22>
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	8c 6f       	ori	r24, 0xFC	; 252
 3a2:	9f 6f       	ori	r25, 0xFF	; 255
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <cnt.1908>
 3aa:	08 95       	ret

000003ac <getSpeedKMH>:
{
	uint16_t retVal = 0;
	uint8_t i = 0;
	for (i = 0; i<4; i++)
	{
		retVal += revPerSec[i];
 3ac:	e6 e3       	ldi	r30, 0x36	; 54
 3ae:	f2 e0       	ldi	r31, 0x02	; 2
 3b0:	80 81       	ld	r24, Z
 3b2:	61 81       	ldd	r22, Z+1	; 0x01
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	68 0f       	add	r22, r24
 3b8:	71 1d       	adc	r23, r1
 3ba:	82 81       	ldd	r24, Z+2	; 0x02
 3bc:	68 0f       	add	r22, r24
 3be:	71 1d       	adc	r23, r1
{
	//char buffer[10];
	
	float KMH = ((float)sumRevolutions()/4)*revLength*3.6; // Revolutions per second times revolution length = m/s. time 3.6 = km/h
	
	return KMH; 
 3c0:	83 81       	ldd	r24, Z+3	; 0x03
 3c2:	68 0f       	add	r22, r24
 3c4:	71 1d       	adc	r23, r1
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	10 d2       	rcall	.+1056   	; 0x7ec <__floatunsisf>
 3cc:	20 e0       	ldi	r18, 0x00	; 0
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	40 e8       	ldi	r20, 0x80	; 128
 3d2:	5e e3       	ldi	r21, 0x3E	; 62
 3d4:	9d d2       	rcall	.+1338   	; 0x910 <__mulsf3>
 3d6:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <revLength>
 3da:	30 91 20 02 	lds	r19, 0x0220	; 0x800220 <revLength+0x1>
 3de:	40 91 21 02 	lds	r20, 0x0221	; 0x800221 <revLength+0x2>
 3e2:	50 91 22 02 	lds	r21, 0x0222	; 0x800222 <revLength+0x3>
 3e6:	94 d2       	rcall	.+1320   	; 0x910 <__mulsf3>
 3e8:	26 e6       	ldi	r18, 0x66	; 102
 3ea:	36 e6       	ldi	r19, 0x66	; 102
 3ec:	46 e6       	ldi	r20, 0x66	; 102
 3ee:	50 e4       	ldi	r21, 0x40	; 64
 3f0:	8f c2       	rjmp	.+1310   	; 0x910 <__mulsf3>
}
 3f2:	08 95       	ret

000003f4 <eepromSave>:
}


static void eepromSave(void)
{
	eeprom_update_float(&eepromKmCount,getTripDistance());
 3f4:	92 df       	rcall	.-220    	; 0x31a <getTripDistance>
 3f6:	ab 01       	movw	r20, r22
 3f8:	bc 01       	movw	r22, r24
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	69 c3       	rjmp	.+1746   	; 0xad2 <eeprom_update_dword>
 400:	08 95       	ret

00000402 <speedSensor_getDriver>:

static float getSpeedKMH(void);
static float getTripDistance(void);

speedSensorInterface_t* speedSensor_getDriver(float wheelDiameter)
{
 402:	cf 92       	push	r12
 404:	df 92       	push	r13
 406:	ef 92       	push	r14
 408:	ff 92       	push	r15
	if (!initialized)
 40a:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <initialized>
 40e:	21 11       	cpse	r18, r1
 410:	58 c0       	rjmp	.+176    	; 0x4c2 <speedSensor_getDriver+0xc0>
}

static void initSpeedSensor(float wheelDiameter)
{
	float wheelD=(wheelDiameter/200); //Calculations to meters centered ( /100 & /2)
	revLength=(wheelD*3.1415); //One revolution gives meters
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	48 e4       	ldi	r20, 0x48	; 72
 418:	53 e4       	ldi	r21, 0x43	; 67
 41a:	4f d1       	rcall	.+670    	; 0x6ba <__divsf3>
 41c:	26 e5       	ldi	r18, 0x56	; 86
 41e:	3e e0       	ldi	r19, 0x0E	; 14
 420:	49 e4       	ldi	r20, 0x49	; 73
 422:	50 e4       	ldi	r21, 0x40	; 64
 424:	75 d2       	rcall	.+1258   	; 0x910 <__mulsf3>
 426:	60 93 1f 02 	sts	0x021F, r22	; 0x80021f <revLength>
 42a:	70 93 20 02 	sts	0x0220, r23	; 0x800220 <revLength+0x1>
 42e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <revLength+0x2>
 432:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <revLength+0x3>
	eeprom_busy_wait();
 436:	f9 99       	sbic	0x1f, 1	; 31
 438:	fe cf       	rjmp	.-4      	; 0x436 <speedSensor_getDriver+0x34>
	kmCount = eeprom_read_float(&eepromKmCount);
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	44 d3       	rcall	.+1672   	; 0xac8 <eeprom_read_dword>
 440:	6b 01       	movw	r12, r22
 442:	7c 01       	movw	r14, r24
	if (kmCount > 10000)
 444:	20 e0       	ldi	r18, 0x00	; 0
 446:	30 e4       	ldi	r19, 0x40	; 64
 448:	4c e1       	ldi	r20, 0x1C	; 28
 44a:	56 e4       	ldi	r21, 0x46	; 70
 44c:	5d d2       	rcall	.+1210   	; 0x908 <__gesf2>
 44e:	18 16       	cp	r1, r24
 450:	4c f0       	brlt	.+18     	; 0x464 <speedSensor_getDriver+0x62>
static void initSpeedSensor(float wheelDiameter)
{
	float wheelD=(wheelDiameter/200); //Calculations to meters centered ( /100 & /2)
	revLength=(wheelD*3.1415); //One revolution gives meters
	eeprom_busy_wait();
	kmCount = eeprom_read_float(&eepromKmCount);
 452:	c0 92 2e 02 	sts	0x022E, r12	; 0x80022e <kmCount>
 456:	d0 92 2f 02 	sts	0x022F, r13	; 0x80022f <kmCount+0x1>
 45a:	e0 92 30 02 	sts	0x0230, r14	; 0x800230 <kmCount+0x2>
 45e:	f0 92 31 02 	sts	0x0231, r15	; 0x800231 <kmCount+0x3>
 462:	08 c0       	rjmp	.+16     	; 0x474 <speedSensor_getDriver+0x72>
	if (kmCount > 10000)
	{
		kmCount = 0;
 464:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <kmCount>
 468:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <kmCount+0x1>
 46c:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <kmCount+0x2>
 470:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <kmCount+0x3>
	}
	//Timer2 is used for keeping time of rpm measurement.
	// Timer2: Normal mode, No prescaling
	TCCR2A = 0b00000000;
 474:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	TCCR2B = 0b00000001;
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
	// Timer2 overflow interrupt enable
	TIMSK2 |= 0b00000001;
 47e:	e0 e7       	ldi	r30, 0x70	; 112
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	81 60       	ori	r24, 0x01	; 1
 486:	80 83       	st	Z, r24
	
	// INT3:Rising edge
	EICRA = 0b11000000;
 488:	80 ec       	ldi	r24, 0xC0	; 192
 48a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	// Enable extern interrupts INT3 
	EIMSK |= 0b00001000;
 48e:	eb 9a       	sbi	0x1d, 3	; 29
	
	// Global interrupt enable
	sei();
 490:	78 94       	sei
speedSensorInterface_t* speedSensor_getDriver(float wheelDiameter)
{
	if (!initialized)
	{
		initSpeedSensor(wheelDiameter);
		myInterface.getSpeedInKmh = getSpeedKMH;
 492:	e4 e2       	ldi	r30, 0x24	; 36
 494:	f2 e0       	ldi	r31, 0x02	; 2
 496:	26 ed       	ldi	r18, 0xD6	; 214
 498:	31 e0       	ldi	r19, 0x01	; 1
 49a:	37 83       	std	Z+7, r19	; 0x07
 49c:	26 83       	std	Z+6, r18	; 0x06
		myInterface.getTripDistance = getTripDistance;
 49e:	2d e8       	ldi	r18, 0x8D	; 141
 4a0:	31 e0       	ldi	r19, 0x01	; 1
 4a2:	31 87       	std	Z+9, r19	; 0x09
 4a4:	20 87       	std	Z+8, r18	; 0x08
		myInterface.saveMilestoneCount = eepromSave;
 4a6:	2a ef       	ldi	r18, 0xFA	; 250
 4a8:	31 e0       	ldi	r19, 0x01	; 1
 4aa:	35 83       	std	Z+5, r19	; 0x05
 4ac:	24 83       	std	Z+4, r18	; 0x04
		myInterface.updateMilestoneCount = updateMilestoneCount;
 4ae:	2e ea       	ldi	r18, 0xAE	; 174
 4b0:	31 e0       	ldi	r19, 0x01	; 1
 4b2:	33 83       	std	Z+3, r19	; 0x03
 4b4:	22 83       	std	Z+2, r18	; 0x02
		myInterface.updateRevolutionCount = updateRevolutionCount;
 4b6:	22 ec       	ldi	r18, 0xC2	; 194
 4b8:	31 e0       	ldi	r19, 0x01	; 1
 4ba:	31 83       	std	Z+1, r19	; 0x01
 4bc:	20 83       	st	Z, r18
		initialized = true;
 4be:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <initialized>
	}
	return &myInterface;
}
 4c2:	84 e2       	ldi	r24, 0x24	; 36
 4c4:	92 e0       	ldi	r25, 0x02	; 2
 4c6:	ff 90       	pop	r15
 4c8:	ef 90       	pop	r14
 4ca:	df 90       	pop	r13
 4cc:	cf 90       	pop	r12
 4ce:	08 95       	ret

000004d0 <InitUART>:
 4d0:	0f 93       	push	r16
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	ec 01       	movw	r28, r24
 4d8:	db 01       	movw	r26, r22
 4da:	ca 01       	movw	r24, r20
 4dc:	8c 52       	subi	r24, 0x2C	; 44
 4de:	91 40       	sbci	r25, 0x01	; 1
 4e0:	a1 09       	sbc	r26, r1
 4e2:	b1 09       	sbc	r27, r1
 4e4:	85 3d       	cpi	r24, 0xD5	; 213
 4e6:	90 4c       	sbci	r25, 0xC0	; 192
 4e8:	a1 40       	sbci	r26, 0x01	; 1
 4ea:	b1 05       	cpc	r27, r1
 4ec:	08 f0       	brcs	.+2      	; 0x4f0 <InitUART+0x20>
 4ee:	3f c0       	rjmp	.+126    	; 0x56e <InitUART+0x9e>
 4f0:	25 50       	subi	r18, 0x05	; 5
 4f2:	24 30       	cpi	r18, 0x04	; 4
 4f4:	e0 f5       	brcc	.+120    	; 0x56e <InitUART+0x9e>
 4f6:	80 e2       	ldi	r24, 0x20	; 32
 4f8:	88 83       	st	Y, r24
 4fa:	88 e1       	ldi	r24, 0x18	; 24
 4fc:	89 83       	std	Y+1, r24	; 0x01
 4fe:	22 0f       	add	r18, r18
 500:	2a 83       	std	Y+2, r18	; 0x02
 502:	05 34       	cpi	r16, 0x45	; 69
 504:	21 f4       	brne	.+8      	; 0x50e <InitUART+0x3e>
 506:	8a 81       	ldd	r24, Y+2	; 0x02
 508:	80 62       	ori	r24, 0x20	; 32
 50a:	8a 83       	std	Y+2, r24	; 0x02
 50c:	05 c0       	rjmp	.+10     	; 0x518 <InitUART+0x48>
 50e:	0f 34       	cpi	r16, 0x4F	; 79
 510:	19 f4       	brne	.+6      	; 0x518 <InitUART+0x48>
 512:	8a 81       	ldd	r24, Y+2	; 0x02
 514:	80 63       	ori	r24, 0x30	; 48
 516:	8a 83       	std	Y+2, r24	; 0x02
 518:	db 01       	movw	r26, r22
 51a:	ca 01       	movw	r24, r20
 51c:	80 58       	subi	r24, 0x80	; 128
 51e:	9b 47       	sbci	r25, 0x7B	; 123
 520:	a1 4e       	sbci	r26, 0xE1	; 225
 522:	bf 4f       	sbci	r27, 0xFF	; 255
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	aa 1f       	adc	r26, r26
 52a:	bb 1f       	adc	r27, r27
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	aa 1f       	adc	r26, r26
 532:	bb 1f       	adc	r27, r27
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	aa 1f       	adc	r26, r26
 53a:	bb 1f       	adc	r27, r27
 53c:	44 0f       	add	r20, r20
 53e:	55 1f       	adc	r21, r21
 540:	66 1f       	adc	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	44 0f       	add	r20, r20
 546:	55 1f       	adc	r21, r21
 548:	66 1f       	adc	r22, r22
 54a:	77 1f       	adc	r23, r23
 54c:	9a 01       	movw	r18, r20
 54e:	ab 01       	movw	r20, r22
 550:	22 0f       	add	r18, r18
 552:	33 1f       	adc	r19, r19
 554:	44 1f       	adc	r20, r20
 556:	55 1f       	adc	r21, r21
 558:	22 0f       	add	r18, r18
 55a:	33 1f       	adc	r19, r19
 55c:	44 1f       	adc	r20, r20
 55e:	55 1f       	adc	r21, r21
 560:	bc 01       	movw	r22, r24
 562:	cd 01       	movw	r24, r26
 564:	5c d2       	rcall	.+1208   	; 0xa1e <__udivmodsi4>
 566:	21 50       	subi	r18, 0x01	; 1
 568:	31 09       	sbc	r19, r1
 56a:	3d 83       	std	Y+5, r19	; 0x05
 56c:	2c 83       	std	Y+4, r18	; 0x04
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	0f 91       	pop	r16
 574:	08 95       	ret

00000576 <SendChar>:
 576:	fc 01       	movw	r30, r24
 578:	90 81       	ld	r25, Z
 57a:	95 ff       	sbrs	r25, 5
 57c:	fd cf       	rjmp	.-6      	; 0x578 <SendChar+0x2>
 57e:	66 83       	std	Z+6, r22	; 0x06
 580:	08 95       	ret

00000582 <SendString>:
 582:	0f 93       	push	r16
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	eb 01       	movw	r28, r22
 58c:	68 81       	ld	r22, Y
 58e:	66 23       	and	r22, r22
 590:	39 f0       	breq	.+14     	; 0x5a0 <SendString+0x1e>
 592:	8c 01       	movw	r16, r24
 594:	21 96       	adiw	r28, 0x01	; 1
 596:	c8 01       	movw	r24, r16
 598:	ee df       	rcall	.-36     	; 0x576 <SendChar>
 59a:	69 91       	ld	r22, Y+
 59c:	61 11       	cpse	r22, r1
 59e:	fb cf       	rjmp	.-10     	; 0x596 <SendString+0x14>
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	1f 91       	pop	r17
 5a6:	0f 91       	pop	r16
 5a8:	08 95       	ret

000005aa <SendInteger>:
 5aa:	0f 93       	push	r16
 5ac:	1f 93       	push	r17
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	cd b7       	in	r28, 0x3d	; 61
 5b4:	de b7       	in	r29, 0x3e	; 62
 5b6:	27 97       	sbiw	r28, 0x07	; 7
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	f8 94       	cli
 5bc:	de bf       	out	0x3e, r29	; 62
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	cd bf       	out	0x3d, r28	; 61
 5c2:	8c 01       	movw	r16, r24
 5c4:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 5c6:	4a e0       	ldi	r20, 0x0A	; 10
 5c8:	be 01       	movw	r22, r28
 5ca:	6f 5f       	subi	r22, 0xFF	; 255
 5cc:	7f 4f       	sbci	r23, 0xFF	; 255
 5ce:	49 d2       	rcall	.+1170   	; 0xa62 <__itoa_ncheck>
 5d0:	be 01       	movw	r22, r28
 5d2:	6f 5f       	subi	r22, 0xFF	; 255
 5d4:	7f 4f       	sbci	r23, 0xFF	; 255
 5d6:	c8 01       	movw	r24, r16
 5d8:	d4 df       	rcall	.-88     	; 0x582 <SendString>
 5da:	27 96       	adiw	r28, 0x07	; 7
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	f8 94       	cli
 5e0:	de bf       	out	0x3e, r29	; 62
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	cd bf       	out	0x3d, r28	; 61
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	1f 91       	pop	r17
 5ec:	0f 91       	pop	r16
 5ee:	08 95       	ret

000005f0 <__subsf3>:
 5f0:	50 58       	subi	r21, 0x80	; 128

000005f2 <__addsf3>:
 5f2:	bb 27       	eor	r27, r27
 5f4:	aa 27       	eor	r26, r26
 5f6:	0e d0       	rcall	.+28     	; 0x614 <__addsf3x>
 5f8:	4d c1       	rjmp	.+666    	; 0x894 <__fp_round>
 5fa:	3e d1       	rcall	.+636    	; 0x878 <__fp_pscA>
 5fc:	30 f0       	brcs	.+12     	; 0x60a <__addsf3+0x18>
 5fe:	43 d1       	rcall	.+646    	; 0x886 <__fp_pscB>
 600:	20 f0       	brcs	.+8      	; 0x60a <__addsf3+0x18>
 602:	31 f4       	brne	.+12     	; 0x610 <__addsf3+0x1e>
 604:	9f 3f       	cpi	r25, 0xFF	; 255
 606:	11 f4       	brne	.+4      	; 0x60c <__addsf3+0x1a>
 608:	1e f4       	brtc	.+6      	; 0x610 <__addsf3+0x1e>
 60a:	33 c1       	rjmp	.+614    	; 0x872 <__fp_nan>
 60c:	0e f4       	brtc	.+2      	; 0x610 <__addsf3+0x1e>
 60e:	e0 95       	com	r30
 610:	e7 fb       	bst	r30, 7
 612:	29 c1       	rjmp	.+594    	; 0x866 <__fp_inf>

00000614 <__addsf3x>:
 614:	e9 2f       	mov	r30, r25
 616:	4f d1       	rcall	.+670    	; 0x8b6 <__fp_split3>
 618:	80 f3       	brcs	.-32     	; 0x5fa <__addsf3+0x8>
 61a:	ba 17       	cp	r27, r26
 61c:	62 07       	cpc	r22, r18
 61e:	73 07       	cpc	r23, r19
 620:	84 07       	cpc	r24, r20
 622:	95 07       	cpc	r25, r21
 624:	18 f0       	brcs	.+6      	; 0x62c <__addsf3x+0x18>
 626:	71 f4       	brne	.+28     	; 0x644 <__addsf3x+0x30>
 628:	9e f5       	brtc	.+102    	; 0x690 <__addsf3x+0x7c>
 62a:	67 c1       	rjmp	.+718    	; 0x8fa <__fp_zero>
 62c:	0e f4       	brtc	.+2      	; 0x630 <__addsf3x+0x1c>
 62e:	e0 95       	com	r30
 630:	0b 2e       	mov	r0, r27
 632:	ba 2f       	mov	r27, r26
 634:	a0 2d       	mov	r26, r0
 636:	0b 01       	movw	r0, r22
 638:	b9 01       	movw	r22, r18
 63a:	90 01       	movw	r18, r0
 63c:	0c 01       	movw	r0, r24
 63e:	ca 01       	movw	r24, r20
 640:	a0 01       	movw	r20, r0
 642:	11 24       	eor	r1, r1
 644:	ff 27       	eor	r31, r31
 646:	59 1b       	sub	r21, r25
 648:	99 f0       	breq	.+38     	; 0x670 <__addsf3x+0x5c>
 64a:	59 3f       	cpi	r21, 0xF9	; 249
 64c:	50 f4       	brcc	.+20     	; 0x662 <__addsf3x+0x4e>
 64e:	50 3e       	cpi	r21, 0xE0	; 224
 650:	68 f1       	brcs	.+90     	; 0x6ac <__addsf3x+0x98>
 652:	1a 16       	cp	r1, r26
 654:	f0 40       	sbci	r31, 0x00	; 0
 656:	a2 2f       	mov	r26, r18
 658:	23 2f       	mov	r18, r19
 65a:	34 2f       	mov	r19, r20
 65c:	44 27       	eor	r20, r20
 65e:	58 5f       	subi	r21, 0xF8	; 248
 660:	f3 cf       	rjmp	.-26     	; 0x648 <__addsf3x+0x34>
 662:	46 95       	lsr	r20
 664:	37 95       	ror	r19
 666:	27 95       	ror	r18
 668:	a7 95       	ror	r26
 66a:	f0 40       	sbci	r31, 0x00	; 0
 66c:	53 95       	inc	r21
 66e:	c9 f7       	brne	.-14     	; 0x662 <__addsf3x+0x4e>
 670:	7e f4       	brtc	.+30     	; 0x690 <__addsf3x+0x7c>
 672:	1f 16       	cp	r1, r31
 674:	ba 0b       	sbc	r27, r26
 676:	62 0b       	sbc	r22, r18
 678:	73 0b       	sbc	r23, r19
 67a:	84 0b       	sbc	r24, r20
 67c:	ba f0       	brmi	.+46     	; 0x6ac <__addsf3x+0x98>
 67e:	91 50       	subi	r25, 0x01	; 1
 680:	a1 f0       	breq	.+40     	; 0x6aa <__addsf3x+0x96>
 682:	ff 0f       	add	r31, r31
 684:	bb 1f       	adc	r27, r27
 686:	66 1f       	adc	r22, r22
 688:	77 1f       	adc	r23, r23
 68a:	88 1f       	adc	r24, r24
 68c:	c2 f7       	brpl	.-16     	; 0x67e <__addsf3x+0x6a>
 68e:	0e c0       	rjmp	.+28     	; 0x6ac <__addsf3x+0x98>
 690:	ba 0f       	add	r27, r26
 692:	62 1f       	adc	r22, r18
 694:	73 1f       	adc	r23, r19
 696:	84 1f       	adc	r24, r20
 698:	48 f4       	brcc	.+18     	; 0x6ac <__addsf3x+0x98>
 69a:	87 95       	ror	r24
 69c:	77 95       	ror	r23
 69e:	67 95       	ror	r22
 6a0:	b7 95       	ror	r27
 6a2:	f7 95       	ror	r31
 6a4:	9e 3f       	cpi	r25, 0xFE	; 254
 6a6:	08 f0       	brcs	.+2      	; 0x6aa <__addsf3x+0x96>
 6a8:	b3 cf       	rjmp	.-154    	; 0x610 <__addsf3+0x1e>
 6aa:	93 95       	inc	r25
 6ac:	88 0f       	add	r24, r24
 6ae:	08 f0       	brcs	.+2      	; 0x6b2 <__addsf3x+0x9e>
 6b0:	99 27       	eor	r25, r25
 6b2:	ee 0f       	add	r30, r30
 6b4:	97 95       	ror	r25
 6b6:	87 95       	ror	r24
 6b8:	08 95       	ret

000006ba <__divsf3>:
 6ba:	0c d0       	rcall	.+24     	; 0x6d4 <__divsf3x>
 6bc:	eb c0       	rjmp	.+470    	; 0x894 <__fp_round>
 6be:	e3 d0       	rcall	.+454    	; 0x886 <__fp_pscB>
 6c0:	40 f0       	brcs	.+16     	; 0x6d2 <__divsf3+0x18>
 6c2:	da d0       	rcall	.+436    	; 0x878 <__fp_pscA>
 6c4:	30 f0       	brcs	.+12     	; 0x6d2 <__divsf3+0x18>
 6c6:	21 f4       	brne	.+8      	; 0x6d0 <__divsf3+0x16>
 6c8:	5f 3f       	cpi	r21, 0xFF	; 255
 6ca:	19 f0       	breq	.+6      	; 0x6d2 <__divsf3+0x18>
 6cc:	cc c0       	rjmp	.+408    	; 0x866 <__fp_inf>
 6ce:	51 11       	cpse	r21, r1
 6d0:	15 c1       	rjmp	.+554    	; 0x8fc <__fp_szero>
 6d2:	cf c0       	rjmp	.+414    	; 0x872 <__fp_nan>

000006d4 <__divsf3x>:
 6d4:	f0 d0       	rcall	.+480    	; 0x8b6 <__fp_split3>
 6d6:	98 f3       	brcs	.-26     	; 0x6be <__divsf3+0x4>

000006d8 <__divsf3_pse>:
 6d8:	99 23       	and	r25, r25
 6da:	c9 f3       	breq	.-14     	; 0x6ce <__divsf3+0x14>
 6dc:	55 23       	and	r21, r21
 6de:	b1 f3       	breq	.-20     	; 0x6cc <__divsf3+0x12>
 6e0:	95 1b       	sub	r25, r21
 6e2:	55 0b       	sbc	r21, r21
 6e4:	bb 27       	eor	r27, r27
 6e6:	aa 27       	eor	r26, r26
 6e8:	62 17       	cp	r22, r18
 6ea:	73 07       	cpc	r23, r19
 6ec:	84 07       	cpc	r24, r20
 6ee:	38 f0       	brcs	.+14     	; 0x6fe <__divsf3_pse+0x26>
 6f0:	9f 5f       	subi	r25, 0xFF	; 255
 6f2:	5f 4f       	sbci	r21, 0xFF	; 255
 6f4:	22 0f       	add	r18, r18
 6f6:	33 1f       	adc	r19, r19
 6f8:	44 1f       	adc	r20, r20
 6fa:	aa 1f       	adc	r26, r26
 6fc:	a9 f3       	breq	.-22     	; 0x6e8 <__divsf3_pse+0x10>
 6fe:	33 d0       	rcall	.+102    	; 0x766 <__divsf3_pse+0x8e>
 700:	0e 2e       	mov	r0, r30
 702:	3a f0       	brmi	.+14     	; 0x712 <__divsf3_pse+0x3a>
 704:	e0 e8       	ldi	r30, 0x80	; 128
 706:	30 d0       	rcall	.+96     	; 0x768 <__divsf3_pse+0x90>
 708:	91 50       	subi	r25, 0x01	; 1
 70a:	50 40       	sbci	r21, 0x00	; 0
 70c:	e6 95       	lsr	r30
 70e:	00 1c       	adc	r0, r0
 710:	ca f7       	brpl	.-14     	; 0x704 <__divsf3_pse+0x2c>
 712:	29 d0       	rcall	.+82     	; 0x766 <__divsf3_pse+0x8e>
 714:	fe 2f       	mov	r31, r30
 716:	27 d0       	rcall	.+78     	; 0x766 <__divsf3_pse+0x8e>
 718:	66 0f       	add	r22, r22
 71a:	77 1f       	adc	r23, r23
 71c:	88 1f       	adc	r24, r24
 71e:	bb 1f       	adc	r27, r27
 720:	26 17       	cp	r18, r22
 722:	37 07       	cpc	r19, r23
 724:	48 07       	cpc	r20, r24
 726:	ab 07       	cpc	r26, r27
 728:	b0 e8       	ldi	r27, 0x80	; 128
 72a:	09 f0       	breq	.+2      	; 0x72e <__divsf3_pse+0x56>
 72c:	bb 0b       	sbc	r27, r27
 72e:	80 2d       	mov	r24, r0
 730:	bf 01       	movw	r22, r30
 732:	ff 27       	eor	r31, r31
 734:	93 58       	subi	r25, 0x83	; 131
 736:	5f 4f       	sbci	r21, 0xFF	; 255
 738:	2a f0       	brmi	.+10     	; 0x744 <__divsf3_pse+0x6c>
 73a:	9e 3f       	cpi	r25, 0xFE	; 254
 73c:	51 05       	cpc	r21, r1
 73e:	68 f0       	brcs	.+26     	; 0x75a <__divsf3_pse+0x82>
 740:	92 c0       	rjmp	.+292    	; 0x866 <__fp_inf>
 742:	dc c0       	rjmp	.+440    	; 0x8fc <__fp_szero>
 744:	5f 3f       	cpi	r21, 0xFF	; 255
 746:	ec f3       	brlt	.-6      	; 0x742 <__divsf3_pse+0x6a>
 748:	98 3e       	cpi	r25, 0xE8	; 232
 74a:	dc f3       	brlt	.-10     	; 0x742 <__divsf3_pse+0x6a>
 74c:	86 95       	lsr	r24
 74e:	77 95       	ror	r23
 750:	67 95       	ror	r22
 752:	b7 95       	ror	r27
 754:	f7 95       	ror	r31
 756:	9f 5f       	subi	r25, 0xFF	; 255
 758:	c9 f7       	brne	.-14     	; 0x74c <__divsf3_pse+0x74>
 75a:	88 0f       	add	r24, r24
 75c:	91 1d       	adc	r25, r1
 75e:	96 95       	lsr	r25
 760:	87 95       	ror	r24
 762:	97 f9       	bld	r25, 7
 764:	08 95       	ret
 766:	e1 e0       	ldi	r30, 0x01	; 1
 768:	66 0f       	add	r22, r22
 76a:	77 1f       	adc	r23, r23
 76c:	88 1f       	adc	r24, r24
 76e:	bb 1f       	adc	r27, r27
 770:	62 17       	cp	r22, r18
 772:	73 07       	cpc	r23, r19
 774:	84 07       	cpc	r24, r20
 776:	ba 07       	cpc	r27, r26
 778:	20 f0       	brcs	.+8      	; 0x782 <__divsf3_pse+0xaa>
 77a:	62 1b       	sub	r22, r18
 77c:	73 0b       	sbc	r23, r19
 77e:	84 0b       	sbc	r24, r20
 780:	ba 0b       	sbc	r27, r26
 782:	ee 1f       	adc	r30, r30
 784:	88 f7       	brcc	.-30     	; 0x768 <__divsf3_pse+0x90>
 786:	e0 95       	com	r30
 788:	08 95       	ret

0000078a <__fixsfsi>:
 78a:	04 d0       	rcall	.+8      	; 0x794 <__fixunssfsi>
 78c:	68 94       	set
 78e:	b1 11       	cpse	r27, r1
 790:	b5 c0       	rjmp	.+362    	; 0x8fc <__fp_szero>
 792:	08 95       	ret

00000794 <__fixunssfsi>:
 794:	98 d0       	rcall	.+304    	; 0x8c6 <__fp_splitA>
 796:	88 f0       	brcs	.+34     	; 0x7ba <__fixunssfsi+0x26>
 798:	9f 57       	subi	r25, 0x7F	; 127
 79a:	90 f0       	brcs	.+36     	; 0x7c0 <__fixunssfsi+0x2c>
 79c:	b9 2f       	mov	r27, r25
 79e:	99 27       	eor	r25, r25
 7a0:	b7 51       	subi	r27, 0x17	; 23
 7a2:	a0 f0       	brcs	.+40     	; 0x7cc <__fixunssfsi+0x38>
 7a4:	d1 f0       	breq	.+52     	; 0x7da <__fixunssfsi+0x46>
 7a6:	66 0f       	add	r22, r22
 7a8:	77 1f       	adc	r23, r23
 7aa:	88 1f       	adc	r24, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	1a f0       	brmi	.+6      	; 0x7b6 <__fixunssfsi+0x22>
 7b0:	ba 95       	dec	r27
 7b2:	c9 f7       	brne	.-14     	; 0x7a6 <__fixunssfsi+0x12>
 7b4:	12 c0       	rjmp	.+36     	; 0x7da <__fixunssfsi+0x46>
 7b6:	b1 30       	cpi	r27, 0x01	; 1
 7b8:	81 f0       	breq	.+32     	; 0x7da <__fixunssfsi+0x46>
 7ba:	9f d0       	rcall	.+318    	; 0x8fa <__fp_zero>
 7bc:	b1 e0       	ldi	r27, 0x01	; 1
 7be:	08 95       	ret
 7c0:	9c c0       	rjmp	.+312    	; 0x8fa <__fp_zero>
 7c2:	67 2f       	mov	r22, r23
 7c4:	78 2f       	mov	r23, r24
 7c6:	88 27       	eor	r24, r24
 7c8:	b8 5f       	subi	r27, 0xF8	; 248
 7ca:	39 f0       	breq	.+14     	; 0x7da <__fixunssfsi+0x46>
 7cc:	b9 3f       	cpi	r27, 0xF9	; 249
 7ce:	cc f3       	brlt	.-14     	; 0x7c2 <__fixunssfsi+0x2e>
 7d0:	86 95       	lsr	r24
 7d2:	77 95       	ror	r23
 7d4:	67 95       	ror	r22
 7d6:	b3 95       	inc	r27
 7d8:	d9 f7       	brne	.-10     	; 0x7d0 <__fixunssfsi+0x3c>
 7da:	3e f4       	brtc	.+14     	; 0x7ea <__fixunssfsi+0x56>
 7dc:	90 95       	com	r25
 7de:	80 95       	com	r24
 7e0:	70 95       	com	r23
 7e2:	61 95       	neg	r22
 7e4:	7f 4f       	sbci	r23, 0xFF	; 255
 7e6:	8f 4f       	sbci	r24, 0xFF	; 255
 7e8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ea:	08 95       	ret

000007ec <__floatunsisf>:
 7ec:	e8 94       	clt
 7ee:	09 c0       	rjmp	.+18     	; 0x802 <__floatsisf+0x12>

000007f0 <__floatsisf>:
 7f0:	97 fb       	bst	r25, 7
 7f2:	3e f4       	brtc	.+14     	; 0x802 <__floatsisf+0x12>
 7f4:	90 95       	com	r25
 7f6:	80 95       	com	r24
 7f8:	70 95       	com	r23
 7fa:	61 95       	neg	r22
 7fc:	7f 4f       	sbci	r23, 0xFF	; 255
 7fe:	8f 4f       	sbci	r24, 0xFF	; 255
 800:	9f 4f       	sbci	r25, 0xFF	; 255
 802:	99 23       	and	r25, r25
 804:	a9 f0       	breq	.+42     	; 0x830 <__floatsisf+0x40>
 806:	f9 2f       	mov	r31, r25
 808:	96 e9       	ldi	r25, 0x96	; 150
 80a:	bb 27       	eor	r27, r27
 80c:	93 95       	inc	r25
 80e:	f6 95       	lsr	r31
 810:	87 95       	ror	r24
 812:	77 95       	ror	r23
 814:	67 95       	ror	r22
 816:	b7 95       	ror	r27
 818:	f1 11       	cpse	r31, r1
 81a:	f8 cf       	rjmp	.-16     	; 0x80c <__floatsisf+0x1c>
 81c:	fa f4       	brpl	.+62     	; 0x85c <__floatsisf+0x6c>
 81e:	bb 0f       	add	r27, r27
 820:	11 f4       	brne	.+4      	; 0x826 <__floatsisf+0x36>
 822:	60 ff       	sbrs	r22, 0
 824:	1b c0       	rjmp	.+54     	; 0x85c <__floatsisf+0x6c>
 826:	6f 5f       	subi	r22, 0xFF	; 255
 828:	7f 4f       	sbci	r23, 0xFF	; 255
 82a:	8f 4f       	sbci	r24, 0xFF	; 255
 82c:	9f 4f       	sbci	r25, 0xFF	; 255
 82e:	16 c0       	rjmp	.+44     	; 0x85c <__floatsisf+0x6c>
 830:	88 23       	and	r24, r24
 832:	11 f0       	breq	.+4      	; 0x838 <__floatsisf+0x48>
 834:	96 e9       	ldi	r25, 0x96	; 150
 836:	11 c0       	rjmp	.+34     	; 0x85a <__floatsisf+0x6a>
 838:	77 23       	and	r23, r23
 83a:	21 f0       	breq	.+8      	; 0x844 <__floatsisf+0x54>
 83c:	9e e8       	ldi	r25, 0x8E	; 142
 83e:	87 2f       	mov	r24, r23
 840:	76 2f       	mov	r23, r22
 842:	05 c0       	rjmp	.+10     	; 0x84e <__floatsisf+0x5e>
 844:	66 23       	and	r22, r22
 846:	71 f0       	breq	.+28     	; 0x864 <__floatsisf+0x74>
 848:	96 e8       	ldi	r25, 0x86	; 134
 84a:	86 2f       	mov	r24, r22
 84c:	70 e0       	ldi	r23, 0x00	; 0
 84e:	60 e0       	ldi	r22, 0x00	; 0
 850:	2a f0       	brmi	.+10     	; 0x85c <__floatsisf+0x6c>
 852:	9a 95       	dec	r25
 854:	66 0f       	add	r22, r22
 856:	77 1f       	adc	r23, r23
 858:	88 1f       	adc	r24, r24
 85a:	da f7       	brpl	.-10     	; 0x852 <__floatsisf+0x62>
 85c:	88 0f       	add	r24, r24
 85e:	96 95       	lsr	r25
 860:	87 95       	ror	r24
 862:	97 f9       	bld	r25, 7
 864:	08 95       	ret

00000866 <__fp_inf>:
 866:	97 f9       	bld	r25, 7
 868:	9f 67       	ori	r25, 0x7F	; 127
 86a:	80 e8       	ldi	r24, 0x80	; 128
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	60 e0       	ldi	r22, 0x00	; 0
 870:	08 95       	ret

00000872 <__fp_nan>:
 872:	9f ef       	ldi	r25, 0xFF	; 255
 874:	80 ec       	ldi	r24, 0xC0	; 192
 876:	08 95       	ret

00000878 <__fp_pscA>:
 878:	00 24       	eor	r0, r0
 87a:	0a 94       	dec	r0
 87c:	16 16       	cp	r1, r22
 87e:	17 06       	cpc	r1, r23
 880:	18 06       	cpc	r1, r24
 882:	09 06       	cpc	r0, r25
 884:	08 95       	ret

00000886 <__fp_pscB>:
 886:	00 24       	eor	r0, r0
 888:	0a 94       	dec	r0
 88a:	12 16       	cp	r1, r18
 88c:	13 06       	cpc	r1, r19
 88e:	14 06       	cpc	r1, r20
 890:	05 06       	cpc	r0, r21
 892:	08 95       	ret

00000894 <__fp_round>:
 894:	09 2e       	mov	r0, r25
 896:	03 94       	inc	r0
 898:	00 0c       	add	r0, r0
 89a:	11 f4       	brne	.+4      	; 0x8a0 <__fp_round+0xc>
 89c:	88 23       	and	r24, r24
 89e:	52 f0       	brmi	.+20     	; 0x8b4 <__fp_round+0x20>
 8a0:	bb 0f       	add	r27, r27
 8a2:	40 f4       	brcc	.+16     	; 0x8b4 <__fp_round+0x20>
 8a4:	bf 2b       	or	r27, r31
 8a6:	11 f4       	brne	.+4      	; 0x8ac <__fp_round+0x18>
 8a8:	60 ff       	sbrs	r22, 0
 8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__fp_round+0x20>
 8ac:	6f 5f       	subi	r22, 0xFF	; 255
 8ae:	7f 4f       	sbci	r23, 0xFF	; 255
 8b0:	8f 4f       	sbci	r24, 0xFF	; 255
 8b2:	9f 4f       	sbci	r25, 0xFF	; 255
 8b4:	08 95       	ret

000008b6 <__fp_split3>:
 8b6:	57 fd       	sbrc	r21, 7
 8b8:	90 58       	subi	r25, 0x80	; 128
 8ba:	44 0f       	add	r20, r20
 8bc:	55 1f       	adc	r21, r21
 8be:	59 f0       	breq	.+22     	; 0x8d6 <__fp_splitA+0x10>
 8c0:	5f 3f       	cpi	r21, 0xFF	; 255
 8c2:	71 f0       	breq	.+28     	; 0x8e0 <__fp_splitA+0x1a>
 8c4:	47 95       	ror	r20

000008c6 <__fp_splitA>:
 8c6:	88 0f       	add	r24, r24
 8c8:	97 fb       	bst	r25, 7
 8ca:	99 1f       	adc	r25, r25
 8cc:	61 f0       	breq	.+24     	; 0x8e6 <__fp_splitA+0x20>
 8ce:	9f 3f       	cpi	r25, 0xFF	; 255
 8d0:	79 f0       	breq	.+30     	; 0x8f0 <__fp_splitA+0x2a>
 8d2:	87 95       	ror	r24
 8d4:	08 95       	ret
 8d6:	12 16       	cp	r1, r18
 8d8:	13 06       	cpc	r1, r19
 8da:	14 06       	cpc	r1, r20
 8dc:	55 1f       	adc	r21, r21
 8de:	f2 cf       	rjmp	.-28     	; 0x8c4 <__fp_split3+0xe>
 8e0:	46 95       	lsr	r20
 8e2:	f1 df       	rcall	.-30     	; 0x8c6 <__fp_splitA>
 8e4:	08 c0       	rjmp	.+16     	; 0x8f6 <__fp_splitA+0x30>
 8e6:	16 16       	cp	r1, r22
 8e8:	17 06       	cpc	r1, r23
 8ea:	18 06       	cpc	r1, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	f1 cf       	rjmp	.-30     	; 0x8d2 <__fp_splitA+0xc>
 8f0:	86 95       	lsr	r24
 8f2:	71 05       	cpc	r23, r1
 8f4:	61 05       	cpc	r22, r1
 8f6:	08 94       	sec
 8f8:	08 95       	ret

000008fa <__fp_zero>:
 8fa:	e8 94       	clt

000008fc <__fp_szero>:
 8fc:	bb 27       	eor	r27, r27
 8fe:	66 27       	eor	r22, r22
 900:	77 27       	eor	r23, r23
 902:	cb 01       	movw	r24, r22
 904:	97 f9       	bld	r25, 7
 906:	08 95       	ret

00000908 <__gesf2>:
 908:	66 d0       	rcall	.+204    	; 0x9d6 <__fp_cmp>
 90a:	08 f4       	brcc	.+2      	; 0x90e <__gesf2+0x6>
 90c:	8f ef       	ldi	r24, 0xFF	; 255
 90e:	08 95       	ret

00000910 <__mulsf3>:
 910:	0b d0       	rcall	.+22     	; 0x928 <__mulsf3x>
 912:	c0 cf       	rjmp	.-128    	; 0x894 <__fp_round>
 914:	b1 df       	rcall	.-158    	; 0x878 <__fp_pscA>
 916:	28 f0       	brcs	.+10     	; 0x922 <__mulsf3+0x12>
 918:	b6 df       	rcall	.-148    	; 0x886 <__fp_pscB>
 91a:	18 f0       	brcs	.+6      	; 0x922 <__mulsf3+0x12>
 91c:	95 23       	and	r25, r21
 91e:	09 f0       	breq	.+2      	; 0x922 <__mulsf3+0x12>
 920:	a2 cf       	rjmp	.-188    	; 0x866 <__fp_inf>
 922:	a7 cf       	rjmp	.-178    	; 0x872 <__fp_nan>
 924:	11 24       	eor	r1, r1
 926:	ea cf       	rjmp	.-44     	; 0x8fc <__fp_szero>

00000928 <__mulsf3x>:
 928:	c6 df       	rcall	.-116    	; 0x8b6 <__fp_split3>
 92a:	a0 f3       	brcs	.-24     	; 0x914 <__mulsf3+0x4>

0000092c <__mulsf3_pse>:
 92c:	95 9f       	mul	r25, r21
 92e:	d1 f3       	breq	.-12     	; 0x924 <__mulsf3+0x14>
 930:	95 0f       	add	r25, r21
 932:	50 e0       	ldi	r21, 0x00	; 0
 934:	55 1f       	adc	r21, r21
 936:	62 9f       	mul	r22, r18
 938:	f0 01       	movw	r30, r0
 93a:	72 9f       	mul	r23, r18
 93c:	bb 27       	eor	r27, r27
 93e:	f0 0d       	add	r31, r0
 940:	b1 1d       	adc	r27, r1
 942:	63 9f       	mul	r22, r19
 944:	aa 27       	eor	r26, r26
 946:	f0 0d       	add	r31, r0
 948:	b1 1d       	adc	r27, r1
 94a:	aa 1f       	adc	r26, r26
 94c:	64 9f       	mul	r22, r20
 94e:	66 27       	eor	r22, r22
 950:	b0 0d       	add	r27, r0
 952:	a1 1d       	adc	r26, r1
 954:	66 1f       	adc	r22, r22
 956:	82 9f       	mul	r24, r18
 958:	22 27       	eor	r18, r18
 95a:	b0 0d       	add	r27, r0
 95c:	a1 1d       	adc	r26, r1
 95e:	62 1f       	adc	r22, r18
 960:	73 9f       	mul	r23, r19
 962:	b0 0d       	add	r27, r0
 964:	a1 1d       	adc	r26, r1
 966:	62 1f       	adc	r22, r18
 968:	83 9f       	mul	r24, r19
 96a:	a0 0d       	add	r26, r0
 96c:	61 1d       	adc	r22, r1
 96e:	22 1f       	adc	r18, r18
 970:	74 9f       	mul	r23, r20
 972:	33 27       	eor	r19, r19
 974:	a0 0d       	add	r26, r0
 976:	61 1d       	adc	r22, r1
 978:	23 1f       	adc	r18, r19
 97a:	84 9f       	mul	r24, r20
 97c:	60 0d       	add	r22, r0
 97e:	21 1d       	adc	r18, r1
 980:	82 2f       	mov	r24, r18
 982:	76 2f       	mov	r23, r22
 984:	6a 2f       	mov	r22, r26
 986:	11 24       	eor	r1, r1
 988:	9f 57       	subi	r25, 0x7F	; 127
 98a:	50 40       	sbci	r21, 0x00	; 0
 98c:	8a f0       	brmi	.+34     	; 0x9b0 <__mulsf3_pse+0x84>
 98e:	e1 f0       	breq	.+56     	; 0x9c8 <__mulsf3_pse+0x9c>
 990:	88 23       	and	r24, r24
 992:	4a f0       	brmi	.+18     	; 0x9a6 <__mulsf3_pse+0x7a>
 994:	ee 0f       	add	r30, r30
 996:	ff 1f       	adc	r31, r31
 998:	bb 1f       	adc	r27, r27
 99a:	66 1f       	adc	r22, r22
 99c:	77 1f       	adc	r23, r23
 99e:	88 1f       	adc	r24, r24
 9a0:	91 50       	subi	r25, 0x01	; 1
 9a2:	50 40       	sbci	r21, 0x00	; 0
 9a4:	a9 f7       	brne	.-22     	; 0x990 <__mulsf3_pse+0x64>
 9a6:	9e 3f       	cpi	r25, 0xFE	; 254
 9a8:	51 05       	cpc	r21, r1
 9aa:	70 f0       	brcs	.+28     	; 0x9c8 <__mulsf3_pse+0x9c>
 9ac:	5c cf       	rjmp	.-328    	; 0x866 <__fp_inf>
 9ae:	a6 cf       	rjmp	.-180    	; 0x8fc <__fp_szero>
 9b0:	5f 3f       	cpi	r21, 0xFF	; 255
 9b2:	ec f3       	brlt	.-6      	; 0x9ae <__mulsf3_pse+0x82>
 9b4:	98 3e       	cpi	r25, 0xE8	; 232
 9b6:	dc f3       	brlt	.-10     	; 0x9ae <__mulsf3_pse+0x82>
 9b8:	86 95       	lsr	r24
 9ba:	77 95       	ror	r23
 9bc:	67 95       	ror	r22
 9be:	b7 95       	ror	r27
 9c0:	f7 95       	ror	r31
 9c2:	e7 95       	ror	r30
 9c4:	9f 5f       	subi	r25, 0xFF	; 255
 9c6:	c1 f7       	brne	.-16     	; 0x9b8 <__mulsf3_pse+0x8c>
 9c8:	fe 2b       	or	r31, r30
 9ca:	88 0f       	add	r24, r24
 9cc:	91 1d       	adc	r25, r1
 9ce:	96 95       	lsr	r25
 9d0:	87 95       	ror	r24
 9d2:	97 f9       	bld	r25, 7
 9d4:	08 95       	ret

000009d6 <__fp_cmp>:
 9d6:	99 0f       	add	r25, r25
 9d8:	00 08       	sbc	r0, r0
 9da:	55 0f       	add	r21, r21
 9dc:	aa 0b       	sbc	r26, r26
 9de:	e0 e8       	ldi	r30, 0x80	; 128
 9e0:	fe ef       	ldi	r31, 0xFE	; 254
 9e2:	16 16       	cp	r1, r22
 9e4:	17 06       	cpc	r1, r23
 9e6:	e8 07       	cpc	r30, r24
 9e8:	f9 07       	cpc	r31, r25
 9ea:	c0 f0       	brcs	.+48     	; 0xa1c <__fp_cmp+0x46>
 9ec:	12 16       	cp	r1, r18
 9ee:	13 06       	cpc	r1, r19
 9f0:	e4 07       	cpc	r30, r20
 9f2:	f5 07       	cpc	r31, r21
 9f4:	98 f0       	brcs	.+38     	; 0xa1c <__fp_cmp+0x46>
 9f6:	62 1b       	sub	r22, r18
 9f8:	73 0b       	sbc	r23, r19
 9fa:	84 0b       	sbc	r24, r20
 9fc:	95 0b       	sbc	r25, r21
 9fe:	39 f4       	brne	.+14     	; 0xa0e <__fp_cmp+0x38>
 a00:	0a 26       	eor	r0, r26
 a02:	61 f0       	breq	.+24     	; 0xa1c <__fp_cmp+0x46>
 a04:	23 2b       	or	r18, r19
 a06:	24 2b       	or	r18, r20
 a08:	25 2b       	or	r18, r21
 a0a:	21 f4       	brne	.+8      	; 0xa14 <__fp_cmp+0x3e>
 a0c:	08 95       	ret
 a0e:	0a 26       	eor	r0, r26
 a10:	09 f4       	brne	.+2      	; 0xa14 <__fp_cmp+0x3e>
 a12:	a1 40       	sbci	r26, 0x01	; 1
 a14:	a6 95       	lsr	r26
 a16:	8f ef       	ldi	r24, 0xFF	; 255
 a18:	81 1d       	adc	r24, r1
 a1a:	81 1d       	adc	r24, r1
 a1c:	08 95       	ret

00000a1e <__udivmodsi4>:
 a1e:	a1 e2       	ldi	r26, 0x21	; 33
 a20:	1a 2e       	mov	r1, r26
 a22:	aa 1b       	sub	r26, r26
 a24:	bb 1b       	sub	r27, r27
 a26:	fd 01       	movw	r30, r26
 a28:	0d c0       	rjmp	.+26     	; 0xa44 <__udivmodsi4_ep>

00000a2a <__udivmodsi4_loop>:
 a2a:	aa 1f       	adc	r26, r26
 a2c:	bb 1f       	adc	r27, r27
 a2e:	ee 1f       	adc	r30, r30
 a30:	ff 1f       	adc	r31, r31
 a32:	a2 17       	cp	r26, r18
 a34:	b3 07       	cpc	r27, r19
 a36:	e4 07       	cpc	r30, r20
 a38:	f5 07       	cpc	r31, r21
 a3a:	20 f0       	brcs	.+8      	; 0xa44 <__udivmodsi4_ep>
 a3c:	a2 1b       	sub	r26, r18
 a3e:	b3 0b       	sbc	r27, r19
 a40:	e4 0b       	sbc	r30, r20
 a42:	f5 0b       	sbc	r31, r21

00000a44 <__udivmodsi4_ep>:
 a44:	66 1f       	adc	r22, r22
 a46:	77 1f       	adc	r23, r23
 a48:	88 1f       	adc	r24, r24
 a4a:	99 1f       	adc	r25, r25
 a4c:	1a 94       	dec	r1
 a4e:	69 f7       	brne	.-38     	; 0xa2a <__udivmodsi4_loop>
 a50:	60 95       	com	r22
 a52:	70 95       	com	r23
 a54:	80 95       	com	r24
 a56:	90 95       	com	r25
 a58:	9b 01       	movw	r18, r22
 a5a:	ac 01       	movw	r20, r24
 a5c:	bd 01       	movw	r22, r26
 a5e:	cf 01       	movw	r24, r30
 a60:	08 95       	ret

00000a62 <__itoa_ncheck>:
 a62:	bb 27       	eor	r27, r27
 a64:	4a 30       	cpi	r20, 0x0A	; 10
 a66:	31 f4       	brne	.+12     	; 0xa74 <__itoa_ncheck+0x12>
 a68:	99 23       	and	r25, r25
 a6a:	22 f4       	brpl	.+8      	; 0xa74 <__itoa_ncheck+0x12>
 a6c:	bd e2       	ldi	r27, 0x2D	; 45
 a6e:	90 95       	com	r25
 a70:	81 95       	neg	r24
 a72:	9f 4f       	sbci	r25, 0xFF	; 255
 a74:	01 c0       	rjmp	.+2      	; 0xa78 <__utoa_common>

00000a76 <__utoa_ncheck>:
 a76:	bb 27       	eor	r27, r27

00000a78 <__utoa_common>:
 a78:	fb 01       	movw	r30, r22
 a7a:	55 27       	eor	r21, r21
 a7c:	aa 27       	eor	r26, r26
 a7e:	88 0f       	add	r24, r24
 a80:	99 1f       	adc	r25, r25
 a82:	aa 1f       	adc	r26, r26
 a84:	a4 17       	cp	r26, r20
 a86:	10 f0       	brcs	.+4      	; 0xa8c <__utoa_common+0x14>
 a88:	a4 1b       	sub	r26, r20
 a8a:	83 95       	inc	r24
 a8c:	50 51       	subi	r21, 0x10	; 16
 a8e:	b9 f7       	brne	.-18     	; 0xa7e <__utoa_common+0x6>
 a90:	a0 5d       	subi	r26, 0xD0	; 208
 a92:	aa 33       	cpi	r26, 0x3A	; 58
 a94:	08 f0       	brcs	.+2      	; 0xa98 <__utoa_common+0x20>
 a96:	a9 5d       	subi	r26, 0xD9	; 217
 a98:	a1 93       	st	Z+, r26
 a9a:	00 97       	sbiw	r24, 0x00	; 0
 a9c:	79 f7       	brne	.-34     	; 0xa7c <__utoa_common+0x4>
 a9e:	b1 11       	cpse	r27, r1
 aa0:	b1 93       	st	Z+, r27
 aa2:	11 92       	st	Z+, r1
 aa4:	cb 01       	movw	r24, r22
 aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <strrev>

00000aa8 <strrev>:
 aa8:	dc 01       	movw	r26, r24
 aaa:	fc 01       	movw	r30, r24
 aac:	67 2f       	mov	r22, r23
 aae:	71 91       	ld	r23, Z+
 ab0:	77 23       	and	r23, r23
 ab2:	e1 f7       	brne	.-8      	; 0xaac <strrev+0x4>
 ab4:	32 97       	sbiw	r30, 0x02	; 2
 ab6:	04 c0       	rjmp	.+8      	; 0xac0 <strrev+0x18>
 ab8:	7c 91       	ld	r23, X
 aba:	6d 93       	st	X+, r22
 abc:	70 83       	st	Z, r23
 abe:	62 91       	ld	r22, -Z
 ac0:	ae 17       	cp	r26, r30
 ac2:	bf 07       	cpc	r27, r31
 ac4:	c8 f3       	brcs	.-14     	; 0xab8 <strrev+0x10>
 ac6:	08 95       	ret

00000ac8 <eeprom_read_dword>:
 ac8:	a6 e1       	ldi	r26, 0x16	; 22
 aca:	b0 e0       	ldi	r27, 0x00	; 0
 acc:	44 e0       	ldi	r20, 0x04	; 4
 ace:	50 e0       	ldi	r21, 0x00	; 0
 ad0:	0a c0       	rjmp	.+20     	; 0xae6 <eeprom_read_blraw>

00000ad2 <eeprom_update_dword>:
 ad2:	03 96       	adiw	r24, 0x03	; 3
 ad4:	27 2f       	mov	r18, r23
 ad6:	16 d0       	rcall	.+44     	; 0xb04 <eeprom_update_r18>
 ad8:	14 d0       	rcall	.+40     	; 0xb02 <eeprom_update_byte>
 ada:	25 2f       	mov	r18, r21
 adc:	13 d0       	rcall	.+38     	; 0xb04 <eeprom_update_r18>
 ade:	24 2f       	mov	r18, r20
 ae0:	11 c0       	rjmp	.+34     	; 0xb04 <eeprom_update_r18>

00000ae2 <eeprom_read_block>:
 ae2:	dc 01       	movw	r26, r24
 ae4:	cb 01       	movw	r24, r22

00000ae6 <eeprom_read_blraw>:
 ae6:	fc 01       	movw	r30, r24
 ae8:	f9 99       	sbic	0x1f, 1	; 31
 aea:	fe cf       	rjmp	.-4      	; 0xae8 <eeprom_read_blraw+0x2>
 aec:	06 c0       	rjmp	.+12     	; 0xafa <eeprom_read_blraw+0x14>
 aee:	f2 bd       	out	0x22, r31	; 34
 af0:	e1 bd       	out	0x21, r30	; 33
 af2:	f8 9a       	sbi	0x1f, 0	; 31
 af4:	31 96       	adiw	r30, 0x01	; 1
 af6:	00 b4       	in	r0, 0x20	; 32
 af8:	0d 92       	st	X+, r0
 afa:	41 50       	subi	r20, 0x01	; 1
 afc:	50 40       	sbci	r21, 0x00	; 0
 afe:	b8 f7       	brcc	.-18     	; 0xaee <eeprom_read_blraw+0x8>
 b00:	08 95       	ret

00000b02 <eeprom_update_byte>:
 b02:	26 2f       	mov	r18, r22

00000b04 <eeprom_update_r18>:
 b04:	f9 99       	sbic	0x1f, 1	; 31
 b06:	fe cf       	rjmp	.-4      	; 0xb04 <eeprom_update_r18>
 b08:	92 bd       	out	0x22, r25	; 34
 b0a:	81 bd       	out	0x21, r24	; 33
 b0c:	f8 9a       	sbi	0x1f, 0	; 31
 b0e:	01 97       	sbiw	r24, 0x01	; 1
 b10:	00 b4       	in	r0, 0x20	; 32
 b12:	02 16       	cp	r0, r18
 b14:	39 f0       	breq	.+14     	; 0xb24 <eeprom_update_r18+0x20>
 b16:	1f ba       	out	0x1f, r1	; 31
 b18:	20 bd       	out	0x20, r18	; 32
 b1a:	0f b6       	in	r0, 0x3f	; 63
 b1c:	f8 94       	cli
 b1e:	fa 9a       	sbi	0x1f, 2	; 31
 b20:	f9 9a       	sbi	0x1f, 1	; 31
 b22:	0f be       	out	0x3f, r0	; 63
 b24:	08 95       	ret

00000b26 <_exit>:
 b26:	f8 94       	cli

00000b28 <__stop_program>:
 b28:	ff cf       	rjmp	.-2      	; 0xb28 <__stop_program>
