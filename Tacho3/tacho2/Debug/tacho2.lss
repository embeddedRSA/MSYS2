
tacho2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  00000b1e  00000bb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800218  00800218  00000bca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000c40  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001917  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000101b  00000000  00000000  000026b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f2  00000000  00000000  000036d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  000040c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000080a  00000000  00000000  000042d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000714  00000000  00000000  00004ade  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000051f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	fb c0       	rjmp	.+502    	; 0x208 <__vector_4>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	18 c1       	rjmp	.+560    	; 0x26e <__vector_15>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e1       	ldi	r30, 0x1E	; 30
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 31       	cpi	r26, 0x18	; 24
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e1       	ldi	r26, 0x18	; 24
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 33       	cpi	r26, 0x3A	; 58
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	fc c4       	rjmp	.+2552   	; 0xb1a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
// Select the UART to test (UART0, UART1, UART2 or UART3)
#define myUART UART0

int main(void)
{
	checkpointCnt = 0;
 124:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <checkpointCnt>
	speedSensor = speedSensor_getDriver(65);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	82 e8       	ldi	r24, 0x82	; 130
 12e:	92 e4       	ldi	r25, 0x42	; 66
 130:	68 d1       	rcall	.+720    	; 0x402 <speedSensor_getDriver>
 132:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <__data_end+0x1>
 136:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__data_end>
	
	//uart setup
	InitUART(myUART, 9600, 8, 'N');
 13a:	0e e4       	ldi	r16, 0x4E	; 78
 13c:	28 e0       	ldi	r18, 0x08	; 8
 13e:	40 e8       	ldi	r20, 0x80	; 128
 140:	55 e2       	ldi	r21, 0x25	; 37
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	80 ec       	ldi	r24, 0xC0	; 192
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	c0 d1       	rcall	.+896    	; 0x4cc <InitUART>
	
	while (1)
	{			
		PORTB &= ~(1<<PB5); //debug 
 14c:	2d 98       	cbi	0x05, 5	; 5
		
		SendString(myUART, "KMH: ");
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	72 e0       	ldi	r23, 0x02	; 2
 152:	80 ec       	ldi	r24, 0xC0	; 192
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	13 d2       	rcall	.+1062   	; 0x57e <SendString>
		float f = speedSensor->getSpeedInKmh();
 158:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__data_end>
 15c:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__data_end+0x1>
 160:	06 80       	ldd	r0, Z+6	; 0x06
 162:	f7 81       	ldd	r31, Z+7	; 0x07
 164:	e0 2d       	mov	r30, r0
 166:	19 95       	eicall
 168:	4b 01       	movw	r8, r22
		int r = (int)f;
 16a:	5c 01       	movw	r10, r24
 16c:	0c d3       	rcall	.+1560   	; 0x786 <__fixsfsi>
 16e:	6b 01       	movw	r12, r22
		int d = (f-r)*100;
		SendInteger(myUART,r);
 170:	7c 01       	movw	r14, r24
 172:	80 ec       	ldi	r24, 0xC0	; 192
 174:	90 e0       	ldi	r25, 0x00	; 0
		SendChar(myUART,'.');
 176:	17 d2       	rcall	.+1070   	; 0x5a6 <SendInteger>
 178:	6e e2       	ldi	r22, 0x2E	; 46
 17a:	80 ec       	ldi	r24, 0xC0	; 192
 17c:	90 e0       	ldi	r25, 0x00	; 0
		SendInteger(myUART,d);
 17e:	f9 d1       	rcall	.+1010   	; 0x572 <SendChar>
 180:	b6 01       	movw	r22, r12
 182:	dd 0c       	add	r13, r13
 184:	88 0b       	sbc	r24, r24
 186:	99 0b       	sbc	r25, r25
 188:	31 d3       	rcall	.+1634   	; 0x7ec <__floatsisf>
 18a:	9b 01       	movw	r18, r22
 18c:	ac 01       	movw	r20, r24
 18e:	c5 01       	movw	r24, r10
 190:	b4 01       	movw	r22, r8
 192:	2c d2       	rcall	.+1112   	; 0x5ec <__subsf3>
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	48 ec       	ldi	r20, 0xC8	; 200
 19a:	52 e4       	ldi	r21, 0x42	; 66
 19c:	b7 d3       	rcall	.+1902   	; 0x90c <__mulsf3>
 19e:	f3 d2       	rcall	.+1510   	; 0x786 <__fixsfsi>
 1a0:	80 ec       	ldi	r24, 0xC0	; 192
 1a2:	90 e0       	ldi	r25, 0x00	; 0
		
		SendString(myUART, "     KHM_TOTAL: ");
 1a4:	00 d2       	rcall	.+1024   	; 0x5a6 <SendInteger>
 1a6:	66 e0       	ldi	r22, 0x06	; 6
 1a8:	72 e0       	ldi	r23, 0x02	; 2
 1aa:	80 ec       	ldi	r24, 0xC0	; 192
 1ac:	90 e0       	ldi	r25, 0x00	; 0
		f = speedSensor->getTripDistance();
 1ae:	e7 d1       	rcall	.+974    	; 0x57e <SendString>
 1b0:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__data_end>
 1b4:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__data_end+0x1>
 1b8:	00 84       	ldd	r0, Z+8	; 0x08
 1ba:	f1 85       	ldd	r31, Z+9	; 0x09
 1bc:	e0 2d       	mov	r30, r0
		r = (int)f;
 1be:	19 95       	eicall
 1c0:	4b 01       	movw	r8, r22
 1c2:	5c 01       	movw	r10, r24
		d = (f-r)*100;
		SendInteger(myUART,r);
 1c4:	e0 d2       	rcall	.+1472   	; 0x786 <__fixsfsi>
 1c6:	6b 01       	movw	r12, r22
 1c8:	7c 01       	movw	r14, r24
		SendChar(myUART,'.');
 1ca:	80 ec       	ldi	r24, 0xC0	; 192
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	eb d1       	rcall	.+982    	; 0x5a6 <SendInteger>
 1d0:	6e e2       	ldi	r22, 0x2E	; 46
		SendInteger(myUART,d);
 1d2:	80 ec       	ldi	r24, 0xC0	; 192
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	cd d1       	rcall	.+922    	; 0x572 <SendChar>
 1d8:	b6 01       	movw	r22, r12
 1da:	dd 0c       	add	r13, r13
 1dc:	88 0b       	sbc	r24, r24
 1de:	99 0b       	sbc	r25, r25
 1e0:	05 d3       	rcall	.+1546   	; 0x7ec <__floatsisf>
 1e2:	9b 01       	movw	r18, r22
 1e4:	ac 01       	movw	r20, r24
 1e6:	c5 01       	movw	r24, r10
 1e8:	b4 01       	movw	r22, r8
 1ea:	00 d2       	rcall	.+1024   	; 0x5ec <__subsf3>
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	48 ec       	ldi	r20, 0xC8	; 200
 1f2:	52 e4       	ldi	r21, 0x42	; 66
 1f4:	8b d3       	rcall	.+1814   	; 0x90c <__mulsf3>
 1f6:	c7 d2       	rcall	.+1422   	; 0x786 <__fixsfsi>
 1f8:	80 ec       	ldi	r24, 0xC0	; 192
 1fa:	90 e0       	ldi	r25, 0x00	; 0
		SendChar(myUART,'\r'); //newline
 1fc:	d4 d1       	rcall	.+936    	; 0x5a6 <SendInteger>
 1fe:	6d e0       	ldi	r22, 0x0D	; 13
 200:	80 ec       	ldi	r24, 0xC0	; 192
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	b6 d1       	rcall	.+876    	; 0x572 <SendChar>
 206:	a2 cf       	rjmp	.-188    	; 0x14c <main+0x28>

00000208 <__vector_4>:
	}
}


ISR(INT3_vect) //PE4 
{
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	0b b6       	in	r0, 0x3b	; 59
 214:	0f 92       	push	r0
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
	speedSensor->updateMilestoneCount();
 22e:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__data_end>
 232:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__data_end+0x1>
 236:	02 80       	ldd	r0, Z+2	; 0x02
 238:	f3 81       	ldd	r31, Z+3	; 0x03
 23a:	e0 2d       	mov	r30, r0
 23c:	19 95       	eicall
	revolutionsForCalc++; //Counts up the revolutions for speed calculation.
 23e:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <revolutionsForCalc>
 242:	8f 5f       	subi	r24, 0xFF	; 255
 244:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <revolutionsForCalc>
}
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0b be       	out	0x3b, r0	; 59
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <__vector_15>:


//TIMER 2 interrupts every second to measure how many revolutions the wheel has made.
ISR(TIMER2_OVF_vect)
{
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	0b b6       	in	r0, 0x3b	; 59
 27a:	0f 92       	push	r0
 27c:	2f 93       	push	r18
 27e:	3f 93       	push	r19
 280:	4f 93       	push	r20
 282:	5f 93       	push	r21
 284:	6f 93       	push	r22
 286:	7f 93       	push	r23
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
 28c:	af 93       	push	r26
 28e:	bf 93       	push	r27
 290:	ef 93       	push	r30
 292:	ff 93       	push	r31
	// After 62500 interrupts overflows the timer counts another timer to get other times. 
	// Because of CPU clock and prescaling 8bit timer overflows every 16.063 us. Delay=prescaler*(OCRn+1)/fcpu
	timerOverflows++;
 294:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <timerOverflows>
 298:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <timerOverflows+0x1>
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <timerOverflows+0x1>
 2a2:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <timerOverflows>
	
	if (timerOverflows == 62500)	// 16.063us*62500=1.004s
 2a6:	84 32       	cpi	r24, 0x24	; 36
 2a8:	94 4f       	sbci	r25, 0xF4	; 244
 2aa:	b1 f4       	brne	.+44     	; 0x2d8 <__vector_15+0x6a>
	{
		timerOverflows = 0; //reset timer
 2ac:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <timerOverflows+0x1>
 2b0:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <timerOverflows>
		PORTB |=(1<<PB5); //debug
 2b4:	2d 9a       	sbi	0x05, 5	; 5
		
		speedSensor->updateRevolutionCount(revolutionsForCalc);
 2b6:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__data_end>
 2ba:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__data_end+0x1>
 2be:	01 90       	ld	r0, Z+
 2c0:	f0 81       	ld	r31, Z
 2c2:	e0 2d       	mov	r30, r0
 2c4:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <revolutionsForCalc>
 2c8:	19 95       	eicall
		revolutionsForCalc = 0; //Resetting after getting value for KHM calculation  
 2ca:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <revolutionsForCalc>
		timerCount=0; //Resetting before getting value.
		checkpointCnt++;
 2ce:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <checkpointCnt>
 2d2:	8f 5f       	subi	r24, 0xFF	; 255
 2d4:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <checkpointCnt>
	}
	
	if (checkpointCnt>60) //Save milestone to EEPROM every minute
 2d8:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <checkpointCnt>
 2dc:	8d 33       	cpi	r24, 0x3D	; 61
 2de:	50 f0       	brcs	.+20     	; 0x2f4 <__vector_15+0x86>
	{
		checkpointCnt = 0;
 2e0:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <checkpointCnt>
		speedSensor->saveMilestoneCount();
 2e4:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__data_end>
 2e8:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__data_end+0x1>
 2ec:	04 80       	ldd	r0, Z+4	; 0x04
 2ee:	f5 81       	ldd	r31, Z+5	; 0x05
 2f0:	e0 2d       	mov	r30, r0
 2f2:	19 95       	eicall
	}

 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	bf 91       	pop	r27
 2fa:	af 91       	pop	r26
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	7f 91       	pop	r23
 302:	6f 91       	pop	r22
 304:	5f 91       	pop	r21
 306:	4f 91       	pop	r20
 308:	3f 91       	pop	r19
 30a:	2f 91       	pop	r18
 30c:	0f 90       	pop	r0
 30e:	0b be       	out	0x3b, r0	; 59
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <getTripDistance>:
}

static float getTripDistance(void)  //WORKS TESTED 
{ 
	float KMD = ((revLength*milestoneCount)/1000)+kmCount; //Total KM distance driven
	return KMD;
 31a:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <milestoneCount>
 31e:	70 91 33 02 	lds	r23, 0x0233	; 0x800233 <milestoneCount+0x1>
 322:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <milestoneCount+0x2>
 326:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <milestoneCount+0x3>
 32a:	5e d2       	rcall	.+1212   	; 0x7e8 <__floatunsisf>
 32c:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <revLength>
 330:	30 91 20 02 	lds	r19, 0x0220	; 0x800220 <revLength+0x1>
 334:	40 91 21 02 	lds	r20, 0x0221	; 0x800221 <revLength+0x2>
 338:	50 91 22 02 	lds	r21, 0x0222	; 0x800222 <revLength+0x3>
 33c:	e7 d2       	rcall	.+1486   	; 0x90c <__mulsf3>
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	4a e7       	ldi	r20, 0x7A	; 122
 344:	54 e4       	ldi	r21, 0x44	; 68
 346:	b7 d1       	rcall	.+878    	; 0x6b6 <__divsf3>
 348:	20 91 2e 02 	lds	r18, 0x022E	; 0x80022e <kmCount>
 34c:	30 91 2f 02 	lds	r19, 0x022F	; 0x80022f <kmCount+0x1>
 350:	40 91 30 02 	lds	r20, 0x0230	; 0x800230 <kmCount+0x2>
 354:	50 91 31 02 	lds	r21, 0x0231	; 0x800231 <kmCount+0x3>
 358:	4a c1       	rjmp	.+660    	; 0x5ee <__addsf3>
}
 35a:	08 95       	ret

0000035c <updateMilestoneCount>:

static void updateMilestoneCount()
{
	milestoneCount += 1;
 35c:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <milestoneCount>
 360:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <milestoneCount+0x1>
 364:	a0 91 34 02 	lds	r26, 0x0234	; 0x800234 <milestoneCount+0x2>
 368:	b0 91 35 02 	lds	r27, 0x0235	; 0x800235 <milestoneCount+0x3>
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	a1 1d       	adc	r26, r1
 370:	b1 1d       	adc	r27, r1
 372:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <milestoneCount>
 376:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <milestoneCount+0x1>
 37a:	a0 93 34 02 	sts	0x0234, r26	; 0x800234 <milestoneCount+0x2>
 37e:	b0 93 35 02 	sts	0x0235, r27	; 0x800235 <milestoneCount+0x3>
 382:	08 95       	ret

00000384 <updateRevolutionCount>:
}

static void updateRevolutionCount(uint8_t revs)
{
	static uint8_t cnt = 0;
	revPerSec[cnt] = revs;
 384:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <cnt.1905>
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	f9 01       	movw	r30, r18
 38c:	ea 5c       	subi	r30, 0xCA	; 202
 38e:	fd 4f       	sbci	r31, 0xFD	; 253
 390:	80 83       	st	Z, r24
	cnt = (cnt+1) % 4;
 392:	c9 01       	movw	r24, r18
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	83 70       	andi	r24, 0x03	; 3
 398:	90 78       	andi	r25, 0x80	; 128
 39a:	99 23       	and	r25, r25
 39c:	24 f4       	brge	.+8      	; 0x3a6 <updateRevolutionCount+0x22>
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	8c 6f       	ori	r24, 0xFC	; 252
 3a2:	9f 6f       	ori	r25, 0xFF	; 255
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <cnt.1905>
 3aa:	08 95       	ret

000003ac <getSpeedKMH>:
{
	uint16_t retVal = 0;
	uint8_t i = 0;
	for (i = 0; i<4; i++)
	{
		retVal += revPerSec[i];
 3ac:	e6 e3       	ldi	r30, 0x36	; 54
 3ae:	f2 e0       	ldi	r31, 0x02	; 2
 3b0:	80 81       	ld	r24, Z
 3b2:	61 81       	ldd	r22, Z+1	; 0x01
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	68 0f       	add	r22, r24
 3b8:	71 1d       	adc	r23, r1
 3ba:	82 81       	ldd	r24, Z+2	; 0x02
 3bc:	68 0f       	add	r22, r24
 3be:	71 1d       	adc	r23, r1
{
	//char buffer[10];
	
	float KMH = ((float)sumRevolutions()/4)*revLength*3.6; // Revolutions per second times revolution length = m/s. time 3.6 = km/h
	
	return KMH; 
 3c0:	83 81       	ldd	r24, Z+3	; 0x03
 3c2:	68 0f       	add	r22, r24
 3c4:	71 1d       	adc	r23, r1
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e d2       	rcall	.+1052   	; 0x7e8 <__floatunsisf>
 3cc:	20 e0       	ldi	r18, 0x00	; 0
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	40 e8       	ldi	r20, 0x80	; 128
 3d2:	5e e3       	ldi	r21, 0x3E	; 62
 3d4:	9b d2       	rcall	.+1334   	; 0x90c <__mulsf3>
 3d6:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <revLength>
 3da:	30 91 20 02 	lds	r19, 0x0220	; 0x800220 <revLength+0x1>
 3de:	40 91 21 02 	lds	r20, 0x0221	; 0x800221 <revLength+0x2>
 3e2:	50 91 22 02 	lds	r21, 0x0222	; 0x800222 <revLength+0x3>
 3e6:	92 d2       	rcall	.+1316   	; 0x90c <__mulsf3>
 3e8:	26 e6       	ldi	r18, 0x66	; 102
 3ea:	36 e6       	ldi	r19, 0x66	; 102
 3ec:	46 e6       	ldi	r20, 0x66	; 102
 3ee:	50 e4       	ldi	r21, 0x40	; 64
 3f0:	8d c2       	rjmp	.+1306   	; 0x90c <__mulsf3>
}
 3f2:	08 95       	ret

000003f4 <eepromSave>:
}


static void eepromSave(void)
{
	eeprom_write_float(0,getTripDistance());
 3f4:	92 df       	rcall	.-220    	; 0x31a <getTripDistance>
 3f6:	ab 01       	movw	r20, r22
 3f8:	bc 01       	movw	r22, r24
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	67 c3       	rjmp	.+1742   	; 0xace <eeprom_write_dword>
 400:	08 95       	ret

00000402 <speedSensor_getDriver>:

static float getSpeedKMH(void);
static float getTripDistance(void);

speedSensorInterface_t* speedSensor_getDriver(float wheelDiameter)
{
 402:	cf 92       	push	r12
 404:	df 92       	push	r13
 406:	ef 92       	push	r14
 408:	ff 92       	push	r15
	if (!initialized)
 40a:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <initialized>
 40e:	21 11       	cpse	r18, r1
 410:	56 c0       	rjmp	.+172    	; 0x4be <speedSensor_getDriver+0xbc>
}

static void initSpeedSensor(float wheelDiameter)
{
	float wheelD=(wheelDiameter/200); //Calculations to meters centered ( /100 & /2)
	revLength=(wheelD*3.1415); //One revolution gives meters
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	48 e4       	ldi	r20, 0x48	; 72
 418:	53 e4       	ldi	r21, 0x43	; 67
 41a:	4d d1       	rcall	.+666    	; 0x6b6 <__divsf3>
 41c:	26 e5       	ldi	r18, 0x56	; 86
 41e:	3e e0       	ldi	r19, 0x0E	; 14
 420:	49 e4       	ldi	r20, 0x49	; 73
 422:	50 e4       	ldi	r21, 0x40	; 64
 424:	73 d2       	rcall	.+1254   	; 0x90c <__mulsf3>
 426:	60 93 1f 02 	sts	0x021F, r22	; 0x80021f <revLength>
 42a:	70 93 20 02 	sts	0x0220, r23	; 0x800220 <revLength+0x1>
 42e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <revLength+0x2>
 432:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <revLength+0x3>
	kmCount = eeprom_read_float(0);
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	44 d3       	rcall	.+1672   	; 0xac4 <eeprom_read_dword>
 43c:	6b 01       	movw	r12, r22
 43e:	7c 01       	movw	r14, r24
	if (kmCount > 10000)
 440:	20 e0       	ldi	r18, 0x00	; 0
 442:	30 e4       	ldi	r19, 0x40	; 64
 444:	4c e1       	ldi	r20, 0x1C	; 28
 446:	56 e4       	ldi	r21, 0x46	; 70
 448:	5d d2       	rcall	.+1210   	; 0x904 <__gesf2>
 44a:	18 16       	cp	r1, r24
 44c:	4c f0       	brlt	.+18     	; 0x460 <speedSensor_getDriver+0x5e>

static void initSpeedSensor(float wheelDiameter)
{
	float wheelD=(wheelDiameter/200); //Calculations to meters centered ( /100 & /2)
	revLength=(wheelD*3.1415); //One revolution gives meters
	kmCount = eeprom_read_float(0);
 44e:	c0 92 2e 02 	sts	0x022E, r12	; 0x80022e <kmCount>
 452:	d0 92 2f 02 	sts	0x022F, r13	; 0x80022f <kmCount+0x1>
 456:	e0 92 30 02 	sts	0x0230, r14	; 0x800230 <kmCount+0x2>
 45a:	f0 92 31 02 	sts	0x0231, r15	; 0x800231 <kmCount+0x3>
 45e:	08 c0       	rjmp	.+16     	; 0x470 <speedSensor_getDriver+0x6e>
	if (kmCount > 10000)
	{
		kmCount = 0;
 460:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <kmCount>
 464:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <kmCount+0x1>
 468:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <kmCount+0x2>
 46c:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <kmCount+0x3>
	}
	//Timer2 is used for keeping time of rpm measurement.
	// Timer2: Normal mode, No prescaling
	TCCR2A = 0b00000000;
 470:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	TCCR2B = 0b00000001;
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
	// Timer2 overflow interrupt enable
	TIMSK2 |= 0b00000001;
 47a:	e0 e7       	ldi	r30, 0x70	; 112
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	81 60       	ori	r24, 0x01	; 1
 482:	80 83       	st	Z, r24
	
	// INT3:Rising edge
	EICRA = 0b11000000;
 484:	80 ec       	ldi	r24, 0xC0	; 192
 486:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	// Enable extern interrupts INT3 
	EIMSK |= 0b00001000;
 48a:	eb 9a       	sbi	0x1d, 3	; 29
	
	// Global interrupt enable
	sei();
 48c:	78 94       	sei
speedSensorInterface_t* speedSensor_getDriver(float wheelDiameter)
{
	if (!initialized)
	{
		initSpeedSensor(wheelDiameter);
		myInterface.getSpeedInKmh = getSpeedKMH;
 48e:	e4 e2       	ldi	r30, 0x24	; 36
 490:	f2 e0       	ldi	r31, 0x02	; 2
 492:	26 ed       	ldi	r18, 0xD6	; 214
 494:	31 e0       	ldi	r19, 0x01	; 1
 496:	37 83       	std	Z+7, r19	; 0x07
 498:	26 83       	std	Z+6, r18	; 0x06
		myInterface.getTripDistance = getTripDistance;
 49a:	2d e8       	ldi	r18, 0x8D	; 141
 49c:	31 e0       	ldi	r19, 0x01	; 1
 49e:	31 87       	std	Z+9, r19	; 0x09
 4a0:	20 87       	std	Z+8, r18	; 0x08
		myInterface.saveMilestoneCount = eepromSave;
 4a2:	2a ef       	ldi	r18, 0xFA	; 250
 4a4:	31 e0       	ldi	r19, 0x01	; 1
 4a6:	35 83       	std	Z+5, r19	; 0x05
 4a8:	24 83       	std	Z+4, r18	; 0x04
		myInterface.updateMilestoneCount = updateMilestoneCount;
 4aa:	2e ea       	ldi	r18, 0xAE	; 174
 4ac:	31 e0       	ldi	r19, 0x01	; 1
 4ae:	33 83       	std	Z+3, r19	; 0x03
 4b0:	22 83       	std	Z+2, r18	; 0x02
		myInterface.updateRevolutionCount = updateRevolutionCount;
 4b2:	22 ec       	ldi	r18, 0xC2	; 194
 4b4:	31 e0       	ldi	r19, 0x01	; 1
 4b6:	31 83       	std	Z+1, r19	; 0x01
 4b8:	20 83       	st	Z, r18
		initialized = true;
 4ba:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <initialized>
	}
	return &myInterface;
}
 4be:	84 e2       	ldi	r24, 0x24	; 36
 4c0:	92 e0       	ldi	r25, 0x02	; 2
 4c2:	ff 90       	pop	r15
 4c4:	ef 90       	pop	r14
 4c6:	df 90       	pop	r13
 4c8:	cf 90       	pop	r12
 4ca:	08 95       	ret

000004cc <InitUART>:
 4cc:	0f 93       	push	r16
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	ec 01       	movw	r28, r24
 4d4:	db 01       	movw	r26, r22
 4d6:	ca 01       	movw	r24, r20
 4d8:	8c 52       	subi	r24, 0x2C	; 44
 4da:	91 40       	sbci	r25, 0x01	; 1
 4dc:	a1 09       	sbc	r26, r1
 4de:	b1 09       	sbc	r27, r1
 4e0:	85 3d       	cpi	r24, 0xD5	; 213
 4e2:	90 4c       	sbci	r25, 0xC0	; 192
 4e4:	a1 40       	sbci	r26, 0x01	; 1
 4e6:	b1 05       	cpc	r27, r1
 4e8:	08 f0       	brcs	.+2      	; 0x4ec <InitUART+0x20>
 4ea:	3f c0       	rjmp	.+126    	; 0x56a <InitUART+0x9e>
 4ec:	25 50       	subi	r18, 0x05	; 5
 4ee:	24 30       	cpi	r18, 0x04	; 4
 4f0:	e0 f5       	brcc	.+120    	; 0x56a <InitUART+0x9e>
 4f2:	80 e2       	ldi	r24, 0x20	; 32
 4f4:	88 83       	st	Y, r24
 4f6:	88 e1       	ldi	r24, 0x18	; 24
 4f8:	89 83       	std	Y+1, r24	; 0x01
 4fa:	22 0f       	add	r18, r18
 4fc:	2a 83       	std	Y+2, r18	; 0x02
 4fe:	05 34       	cpi	r16, 0x45	; 69
 500:	21 f4       	brne	.+8      	; 0x50a <InitUART+0x3e>
 502:	8a 81       	ldd	r24, Y+2	; 0x02
 504:	80 62       	ori	r24, 0x20	; 32
 506:	8a 83       	std	Y+2, r24	; 0x02
 508:	05 c0       	rjmp	.+10     	; 0x514 <InitUART+0x48>
 50a:	0f 34       	cpi	r16, 0x4F	; 79
 50c:	19 f4       	brne	.+6      	; 0x514 <InitUART+0x48>
 50e:	8a 81       	ldd	r24, Y+2	; 0x02
 510:	80 63       	ori	r24, 0x30	; 48
 512:	8a 83       	std	Y+2, r24	; 0x02
 514:	db 01       	movw	r26, r22
 516:	ca 01       	movw	r24, r20
 518:	80 58       	subi	r24, 0x80	; 128
 51a:	9b 47       	sbci	r25, 0x7B	; 123
 51c:	a1 4e       	sbci	r26, 0xE1	; 225
 51e:	bf 4f       	sbci	r27, 0xFF	; 255
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	aa 1f       	adc	r26, r26
 526:	bb 1f       	adc	r27, r27
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	aa 1f       	adc	r26, r26
 52e:	bb 1f       	adc	r27, r27
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	aa 1f       	adc	r26, r26
 536:	bb 1f       	adc	r27, r27
 538:	44 0f       	add	r20, r20
 53a:	55 1f       	adc	r21, r21
 53c:	66 1f       	adc	r22, r22
 53e:	77 1f       	adc	r23, r23
 540:	44 0f       	add	r20, r20
 542:	55 1f       	adc	r21, r21
 544:	66 1f       	adc	r22, r22
 546:	77 1f       	adc	r23, r23
 548:	9a 01       	movw	r18, r20
 54a:	ab 01       	movw	r20, r22
 54c:	22 0f       	add	r18, r18
 54e:	33 1f       	adc	r19, r19
 550:	44 1f       	adc	r20, r20
 552:	55 1f       	adc	r21, r21
 554:	22 0f       	add	r18, r18
 556:	33 1f       	adc	r19, r19
 558:	44 1f       	adc	r20, r20
 55a:	55 1f       	adc	r21, r21
 55c:	bc 01       	movw	r22, r24
 55e:	cd 01       	movw	r24, r26
 560:	5c d2       	rcall	.+1208   	; 0xa1a <__udivmodsi4>
 562:	21 50       	subi	r18, 0x01	; 1
 564:	31 09       	sbc	r19, r1
 566:	3d 83       	std	Y+5, r19	; 0x05
 568:	2c 83       	std	Y+4, r18	; 0x04
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	0f 91       	pop	r16
 570:	08 95       	ret

00000572 <SendChar>:
 572:	fc 01       	movw	r30, r24
 574:	90 81       	ld	r25, Z
 576:	95 ff       	sbrs	r25, 5
 578:	fd cf       	rjmp	.-6      	; 0x574 <SendChar+0x2>
 57a:	66 83       	std	Z+6, r22	; 0x06
 57c:	08 95       	ret

0000057e <SendString>:
 57e:	0f 93       	push	r16
 580:	1f 93       	push	r17
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	eb 01       	movw	r28, r22
 588:	68 81       	ld	r22, Y
 58a:	66 23       	and	r22, r22
 58c:	39 f0       	breq	.+14     	; 0x59c <SendString+0x1e>
 58e:	8c 01       	movw	r16, r24
 590:	21 96       	adiw	r28, 0x01	; 1
 592:	c8 01       	movw	r24, r16
 594:	ee df       	rcall	.-36     	; 0x572 <SendChar>
 596:	69 91       	ld	r22, Y+
 598:	61 11       	cpse	r22, r1
 59a:	fb cf       	rjmp	.-10     	; 0x592 <SendString+0x14>
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	1f 91       	pop	r17
 5a2:	0f 91       	pop	r16
 5a4:	08 95       	ret

000005a6 <SendInteger>:
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	cd b7       	in	r28, 0x3d	; 61
 5b0:	de b7       	in	r29, 0x3e	; 62
 5b2:	27 97       	sbiw	r28, 0x07	; 7
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	f8 94       	cli
 5b8:	de bf       	out	0x3e, r29	; 62
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	cd bf       	out	0x3d, r28	; 61
 5be:	8c 01       	movw	r16, r24
 5c0:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 5c2:	4a e0       	ldi	r20, 0x0A	; 10
 5c4:	be 01       	movw	r22, r28
 5c6:	6f 5f       	subi	r22, 0xFF	; 255
 5c8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ca:	49 d2       	rcall	.+1170   	; 0xa5e <__itoa_ncheck>
 5cc:	be 01       	movw	r22, r28
 5ce:	6f 5f       	subi	r22, 0xFF	; 255
 5d0:	7f 4f       	sbci	r23, 0xFF	; 255
 5d2:	c8 01       	movw	r24, r16
 5d4:	d4 df       	rcall	.-88     	; 0x57e <SendString>
 5d6:	27 96       	adiw	r28, 0x07	; 7
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	f8 94       	cli
 5dc:	de bf       	out	0x3e, r29	; 62
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	cd bf       	out	0x3d, r28	; 61
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	1f 91       	pop	r17
 5e8:	0f 91       	pop	r16
 5ea:	08 95       	ret

000005ec <__subsf3>:
 5ec:	50 58       	subi	r21, 0x80	; 128

000005ee <__addsf3>:
 5ee:	bb 27       	eor	r27, r27
 5f0:	aa 27       	eor	r26, r26
 5f2:	0e d0       	rcall	.+28     	; 0x610 <__addsf3x>
 5f4:	4d c1       	rjmp	.+666    	; 0x890 <__fp_round>
 5f6:	3e d1       	rcall	.+636    	; 0x874 <__fp_pscA>
 5f8:	30 f0       	brcs	.+12     	; 0x606 <__addsf3+0x18>
 5fa:	43 d1       	rcall	.+646    	; 0x882 <__fp_pscB>
 5fc:	20 f0       	brcs	.+8      	; 0x606 <__addsf3+0x18>
 5fe:	31 f4       	brne	.+12     	; 0x60c <__addsf3+0x1e>
 600:	9f 3f       	cpi	r25, 0xFF	; 255
 602:	11 f4       	brne	.+4      	; 0x608 <__addsf3+0x1a>
 604:	1e f4       	brtc	.+6      	; 0x60c <__addsf3+0x1e>
 606:	33 c1       	rjmp	.+614    	; 0x86e <__fp_nan>
 608:	0e f4       	brtc	.+2      	; 0x60c <__addsf3+0x1e>
 60a:	e0 95       	com	r30
 60c:	e7 fb       	bst	r30, 7
 60e:	29 c1       	rjmp	.+594    	; 0x862 <__fp_inf>

00000610 <__addsf3x>:
 610:	e9 2f       	mov	r30, r25
 612:	4f d1       	rcall	.+670    	; 0x8b2 <__fp_split3>
 614:	80 f3       	brcs	.-32     	; 0x5f6 <__addsf3+0x8>
 616:	ba 17       	cp	r27, r26
 618:	62 07       	cpc	r22, r18
 61a:	73 07       	cpc	r23, r19
 61c:	84 07       	cpc	r24, r20
 61e:	95 07       	cpc	r25, r21
 620:	18 f0       	brcs	.+6      	; 0x628 <__addsf3x+0x18>
 622:	71 f4       	brne	.+28     	; 0x640 <__addsf3x+0x30>
 624:	9e f5       	brtc	.+102    	; 0x68c <__addsf3x+0x7c>
 626:	67 c1       	rjmp	.+718    	; 0x8f6 <__fp_zero>
 628:	0e f4       	brtc	.+2      	; 0x62c <__addsf3x+0x1c>
 62a:	e0 95       	com	r30
 62c:	0b 2e       	mov	r0, r27
 62e:	ba 2f       	mov	r27, r26
 630:	a0 2d       	mov	r26, r0
 632:	0b 01       	movw	r0, r22
 634:	b9 01       	movw	r22, r18
 636:	90 01       	movw	r18, r0
 638:	0c 01       	movw	r0, r24
 63a:	ca 01       	movw	r24, r20
 63c:	a0 01       	movw	r20, r0
 63e:	11 24       	eor	r1, r1
 640:	ff 27       	eor	r31, r31
 642:	59 1b       	sub	r21, r25
 644:	99 f0       	breq	.+38     	; 0x66c <__addsf3x+0x5c>
 646:	59 3f       	cpi	r21, 0xF9	; 249
 648:	50 f4       	brcc	.+20     	; 0x65e <__addsf3x+0x4e>
 64a:	50 3e       	cpi	r21, 0xE0	; 224
 64c:	68 f1       	brcs	.+90     	; 0x6a8 <__addsf3x+0x98>
 64e:	1a 16       	cp	r1, r26
 650:	f0 40       	sbci	r31, 0x00	; 0
 652:	a2 2f       	mov	r26, r18
 654:	23 2f       	mov	r18, r19
 656:	34 2f       	mov	r19, r20
 658:	44 27       	eor	r20, r20
 65a:	58 5f       	subi	r21, 0xF8	; 248
 65c:	f3 cf       	rjmp	.-26     	; 0x644 <__addsf3x+0x34>
 65e:	46 95       	lsr	r20
 660:	37 95       	ror	r19
 662:	27 95       	ror	r18
 664:	a7 95       	ror	r26
 666:	f0 40       	sbci	r31, 0x00	; 0
 668:	53 95       	inc	r21
 66a:	c9 f7       	brne	.-14     	; 0x65e <__addsf3x+0x4e>
 66c:	7e f4       	brtc	.+30     	; 0x68c <__addsf3x+0x7c>
 66e:	1f 16       	cp	r1, r31
 670:	ba 0b       	sbc	r27, r26
 672:	62 0b       	sbc	r22, r18
 674:	73 0b       	sbc	r23, r19
 676:	84 0b       	sbc	r24, r20
 678:	ba f0       	brmi	.+46     	; 0x6a8 <__addsf3x+0x98>
 67a:	91 50       	subi	r25, 0x01	; 1
 67c:	a1 f0       	breq	.+40     	; 0x6a6 <__addsf3x+0x96>
 67e:	ff 0f       	add	r31, r31
 680:	bb 1f       	adc	r27, r27
 682:	66 1f       	adc	r22, r22
 684:	77 1f       	adc	r23, r23
 686:	88 1f       	adc	r24, r24
 688:	c2 f7       	brpl	.-16     	; 0x67a <__addsf3x+0x6a>
 68a:	0e c0       	rjmp	.+28     	; 0x6a8 <__addsf3x+0x98>
 68c:	ba 0f       	add	r27, r26
 68e:	62 1f       	adc	r22, r18
 690:	73 1f       	adc	r23, r19
 692:	84 1f       	adc	r24, r20
 694:	48 f4       	brcc	.+18     	; 0x6a8 <__addsf3x+0x98>
 696:	87 95       	ror	r24
 698:	77 95       	ror	r23
 69a:	67 95       	ror	r22
 69c:	b7 95       	ror	r27
 69e:	f7 95       	ror	r31
 6a0:	9e 3f       	cpi	r25, 0xFE	; 254
 6a2:	08 f0       	brcs	.+2      	; 0x6a6 <__addsf3x+0x96>
 6a4:	b3 cf       	rjmp	.-154    	; 0x60c <__addsf3+0x1e>
 6a6:	93 95       	inc	r25
 6a8:	88 0f       	add	r24, r24
 6aa:	08 f0       	brcs	.+2      	; 0x6ae <__addsf3x+0x9e>
 6ac:	99 27       	eor	r25, r25
 6ae:	ee 0f       	add	r30, r30
 6b0:	97 95       	ror	r25
 6b2:	87 95       	ror	r24
 6b4:	08 95       	ret

000006b6 <__divsf3>:
 6b6:	0c d0       	rcall	.+24     	; 0x6d0 <__divsf3x>
 6b8:	eb c0       	rjmp	.+470    	; 0x890 <__fp_round>
 6ba:	e3 d0       	rcall	.+454    	; 0x882 <__fp_pscB>
 6bc:	40 f0       	brcs	.+16     	; 0x6ce <__divsf3+0x18>
 6be:	da d0       	rcall	.+436    	; 0x874 <__fp_pscA>
 6c0:	30 f0       	brcs	.+12     	; 0x6ce <__divsf3+0x18>
 6c2:	21 f4       	brne	.+8      	; 0x6cc <__divsf3+0x16>
 6c4:	5f 3f       	cpi	r21, 0xFF	; 255
 6c6:	19 f0       	breq	.+6      	; 0x6ce <__divsf3+0x18>
 6c8:	cc c0       	rjmp	.+408    	; 0x862 <__fp_inf>
 6ca:	51 11       	cpse	r21, r1
 6cc:	15 c1       	rjmp	.+554    	; 0x8f8 <__fp_szero>
 6ce:	cf c0       	rjmp	.+414    	; 0x86e <__fp_nan>

000006d0 <__divsf3x>:
 6d0:	f0 d0       	rcall	.+480    	; 0x8b2 <__fp_split3>
 6d2:	98 f3       	brcs	.-26     	; 0x6ba <__divsf3+0x4>

000006d4 <__divsf3_pse>:
 6d4:	99 23       	and	r25, r25
 6d6:	c9 f3       	breq	.-14     	; 0x6ca <__divsf3+0x14>
 6d8:	55 23       	and	r21, r21
 6da:	b1 f3       	breq	.-20     	; 0x6c8 <__divsf3+0x12>
 6dc:	95 1b       	sub	r25, r21
 6de:	55 0b       	sbc	r21, r21
 6e0:	bb 27       	eor	r27, r27
 6e2:	aa 27       	eor	r26, r26
 6e4:	62 17       	cp	r22, r18
 6e6:	73 07       	cpc	r23, r19
 6e8:	84 07       	cpc	r24, r20
 6ea:	38 f0       	brcs	.+14     	; 0x6fa <__divsf3_pse+0x26>
 6ec:	9f 5f       	subi	r25, 0xFF	; 255
 6ee:	5f 4f       	sbci	r21, 0xFF	; 255
 6f0:	22 0f       	add	r18, r18
 6f2:	33 1f       	adc	r19, r19
 6f4:	44 1f       	adc	r20, r20
 6f6:	aa 1f       	adc	r26, r26
 6f8:	a9 f3       	breq	.-22     	; 0x6e4 <__divsf3_pse+0x10>
 6fa:	33 d0       	rcall	.+102    	; 0x762 <__divsf3_pse+0x8e>
 6fc:	0e 2e       	mov	r0, r30
 6fe:	3a f0       	brmi	.+14     	; 0x70e <__divsf3_pse+0x3a>
 700:	e0 e8       	ldi	r30, 0x80	; 128
 702:	30 d0       	rcall	.+96     	; 0x764 <__divsf3_pse+0x90>
 704:	91 50       	subi	r25, 0x01	; 1
 706:	50 40       	sbci	r21, 0x00	; 0
 708:	e6 95       	lsr	r30
 70a:	00 1c       	adc	r0, r0
 70c:	ca f7       	brpl	.-14     	; 0x700 <__divsf3_pse+0x2c>
 70e:	29 d0       	rcall	.+82     	; 0x762 <__divsf3_pse+0x8e>
 710:	fe 2f       	mov	r31, r30
 712:	27 d0       	rcall	.+78     	; 0x762 <__divsf3_pse+0x8e>
 714:	66 0f       	add	r22, r22
 716:	77 1f       	adc	r23, r23
 718:	88 1f       	adc	r24, r24
 71a:	bb 1f       	adc	r27, r27
 71c:	26 17       	cp	r18, r22
 71e:	37 07       	cpc	r19, r23
 720:	48 07       	cpc	r20, r24
 722:	ab 07       	cpc	r26, r27
 724:	b0 e8       	ldi	r27, 0x80	; 128
 726:	09 f0       	breq	.+2      	; 0x72a <__divsf3_pse+0x56>
 728:	bb 0b       	sbc	r27, r27
 72a:	80 2d       	mov	r24, r0
 72c:	bf 01       	movw	r22, r30
 72e:	ff 27       	eor	r31, r31
 730:	93 58       	subi	r25, 0x83	; 131
 732:	5f 4f       	sbci	r21, 0xFF	; 255
 734:	2a f0       	brmi	.+10     	; 0x740 <__divsf3_pse+0x6c>
 736:	9e 3f       	cpi	r25, 0xFE	; 254
 738:	51 05       	cpc	r21, r1
 73a:	68 f0       	brcs	.+26     	; 0x756 <__divsf3_pse+0x82>
 73c:	92 c0       	rjmp	.+292    	; 0x862 <__fp_inf>
 73e:	dc c0       	rjmp	.+440    	; 0x8f8 <__fp_szero>
 740:	5f 3f       	cpi	r21, 0xFF	; 255
 742:	ec f3       	brlt	.-6      	; 0x73e <__divsf3_pse+0x6a>
 744:	98 3e       	cpi	r25, 0xE8	; 232
 746:	dc f3       	brlt	.-10     	; 0x73e <__divsf3_pse+0x6a>
 748:	86 95       	lsr	r24
 74a:	77 95       	ror	r23
 74c:	67 95       	ror	r22
 74e:	b7 95       	ror	r27
 750:	f7 95       	ror	r31
 752:	9f 5f       	subi	r25, 0xFF	; 255
 754:	c9 f7       	brne	.-14     	; 0x748 <__divsf3_pse+0x74>
 756:	88 0f       	add	r24, r24
 758:	91 1d       	adc	r25, r1
 75a:	96 95       	lsr	r25
 75c:	87 95       	ror	r24
 75e:	97 f9       	bld	r25, 7
 760:	08 95       	ret
 762:	e1 e0       	ldi	r30, 0x01	; 1
 764:	66 0f       	add	r22, r22
 766:	77 1f       	adc	r23, r23
 768:	88 1f       	adc	r24, r24
 76a:	bb 1f       	adc	r27, r27
 76c:	62 17       	cp	r22, r18
 76e:	73 07       	cpc	r23, r19
 770:	84 07       	cpc	r24, r20
 772:	ba 07       	cpc	r27, r26
 774:	20 f0       	brcs	.+8      	; 0x77e <__divsf3_pse+0xaa>
 776:	62 1b       	sub	r22, r18
 778:	73 0b       	sbc	r23, r19
 77a:	84 0b       	sbc	r24, r20
 77c:	ba 0b       	sbc	r27, r26
 77e:	ee 1f       	adc	r30, r30
 780:	88 f7       	brcc	.-30     	; 0x764 <__divsf3_pse+0x90>
 782:	e0 95       	com	r30
 784:	08 95       	ret

00000786 <__fixsfsi>:
 786:	04 d0       	rcall	.+8      	; 0x790 <__fixunssfsi>
 788:	68 94       	set
 78a:	b1 11       	cpse	r27, r1
 78c:	b5 c0       	rjmp	.+362    	; 0x8f8 <__fp_szero>
 78e:	08 95       	ret

00000790 <__fixunssfsi>:
 790:	98 d0       	rcall	.+304    	; 0x8c2 <__fp_splitA>
 792:	88 f0       	brcs	.+34     	; 0x7b6 <__fixunssfsi+0x26>
 794:	9f 57       	subi	r25, 0x7F	; 127
 796:	90 f0       	brcs	.+36     	; 0x7bc <__fixunssfsi+0x2c>
 798:	b9 2f       	mov	r27, r25
 79a:	99 27       	eor	r25, r25
 79c:	b7 51       	subi	r27, 0x17	; 23
 79e:	a0 f0       	brcs	.+40     	; 0x7c8 <__fixunssfsi+0x38>
 7a0:	d1 f0       	breq	.+52     	; 0x7d6 <__fixunssfsi+0x46>
 7a2:	66 0f       	add	r22, r22
 7a4:	77 1f       	adc	r23, r23
 7a6:	88 1f       	adc	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	1a f0       	brmi	.+6      	; 0x7b2 <__fixunssfsi+0x22>
 7ac:	ba 95       	dec	r27
 7ae:	c9 f7       	brne	.-14     	; 0x7a2 <__fixunssfsi+0x12>
 7b0:	12 c0       	rjmp	.+36     	; 0x7d6 <__fixunssfsi+0x46>
 7b2:	b1 30       	cpi	r27, 0x01	; 1
 7b4:	81 f0       	breq	.+32     	; 0x7d6 <__fixunssfsi+0x46>
 7b6:	9f d0       	rcall	.+318    	; 0x8f6 <__fp_zero>
 7b8:	b1 e0       	ldi	r27, 0x01	; 1
 7ba:	08 95       	ret
 7bc:	9c c0       	rjmp	.+312    	; 0x8f6 <__fp_zero>
 7be:	67 2f       	mov	r22, r23
 7c0:	78 2f       	mov	r23, r24
 7c2:	88 27       	eor	r24, r24
 7c4:	b8 5f       	subi	r27, 0xF8	; 248
 7c6:	39 f0       	breq	.+14     	; 0x7d6 <__fixunssfsi+0x46>
 7c8:	b9 3f       	cpi	r27, 0xF9	; 249
 7ca:	cc f3       	brlt	.-14     	; 0x7be <__fixunssfsi+0x2e>
 7cc:	86 95       	lsr	r24
 7ce:	77 95       	ror	r23
 7d0:	67 95       	ror	r22
 7d2:	b3 95       	inc	r27
 7d4:	d9 f7       	brne	.-10     	; 0x7cc <__fixunssfsi+0x3c>
 7d6:	3e f4       	brtc	.+14     	; 0x7e6 <__fixunssfsi+0x56>
 7d8:	90 95       	com	r25
 7da:	80 95       	com	r24
 7dc:	70 95       	com	r23
 7de:	61 95       	neg	r22
 7e0:	7f 4f       	sbci	r23, 0xFF	; 255
 7e2:	8f 4f       	sbci	r24, 0xFF	; 255
 7e4:	9f 4f       	sbci	r25, 0xFF	; 255
 7e6:	08 95       	ret

000007e8 <__floatunsisf>:
 7e8:	e8 94       	clt
 7ea:	09 c0       	rjmp	.+18     	; 0x7fe <__floatsisf+0x12>

000007ec <__floatsisf>:
 7ec:	97 fb       	bst	r25, 7
 7ee:	3e f4       	brtc	.+14     	; 0x7fe <__floatsisf+0x12>
 7f0:	90 95       	com	r25
 7f2:	80 95       	com	r24
 7f4:	70 95       	com	r23
 7f6:	61 95       	neg	r22
 7f8:	7f 4f       	sbci	r23, 0xFF	; 255
 7fa:	8f 4f       	sbci	r24, 0xFF	; 255
 7fc:	9f 4f       	sbci	r25, 0xFF	; 255
 7fe:	99 23       	and	r25, r25
 800:	a9 f0       	breq	.+42     	; 0x82c <__floatsisf+0x40>
 802:	f9 2f       	mov	r31, r25
 804:	96 e9       	ldi	r25, 0x96	; 150
 806:	bb 27       	eor	r27, r27
 808:	93 95       	inc	r25
 80a:	f6 95       	lsr	r31
 80c:	87 95       	ror	r24
 80e:	77 95       	ror	r23
 810:	67 95       	ror	r22
 812:	b7 95       	ror	r27
 814:	f1 11       	cpse	r31, r1
 816:	f8 cf       	rjmp	.-16     	; 0x808 <__floatsisf+0x1c>
 818:	fa f4       	brpl	.+62     	; 0x858 <__floatsisf+0x6c>
 81a:	bb 0f       	add	r27, r27
 81c:	11 f4       	brne	.+4      	; 0x822 <__floatsisf+0x36>
 81e:	60 ff       	sbrs	r22, 0
 820:	1b c0       	rjmp	.+54     	; 0x858 <__floatsisf+0x6c>
 822:	6f 5f       	subi	r22, 0xFF	; 255
 824:	7f 4f       	sbci	r23, 0xFF	; 255
 826:	8f 4f       	sbci	r24, 0xFF	; 255
 828:	9f 4f       	sbci	r25, 0xFF	; 255
 82a:	16 c0       	rjmp	.+44     	; 0x858 <__floatsisf+0x6c>
 82c:	88 23       	and	r24, r24
 82e:	11 f0       	breq	.+4      	; 0x834 <__floatsisf+0x48>
 830:	96 e9       	ldi	r25, 0x96	; 150
 832:	11 c0       	rjmp	.+34     	; 0x856 <__floatsisf+0x6a>
 834:	77 23       	and	r23, r23
 836:	21 f0       	breq	.+8      	; 0x840 <__floatsisf+0x54>
 838:	9e e8       	ldi	r25, 0x8E	; 142
 83a:	87 2f       	mov	r24, r23
 83c:	76 2f       	mov	r23, r22
 83e:	05 c0       	rjmp	.+10     	; 0x84a <__floatsisf+0x5e>
 840:	66 23       	and	r22, r22
 842:	71 f0       	breq	.+28     	; 0x860 <__floatsisf+0x74>
 844:	96 e8       	ldi	r25, 0x86	; 134
 846:	86 2f       	mov	r24, r22
 848:	70 e0       	ldi	r23, 0x00	; 0
 84a:	60 e0       	ldi	r22, 0x00	; 0
 84c:	2a f0       	brmi	.+10     	; 0x858 <__floatsisf+0x6c>
 84e:	9a 95       	dec	r25
 850:	66 0f       	add	r22, r22
 852:	77 1f       	adc	r23, r23
 854:	88 1f       	adc	r24, r24
 856:	da f7       	brpl	.-10     	; 0x84e <__floatsisf+0x62>
 858:	88 0f       	add	r24, r24
 85a:	96 95       	lsr	r25
 85c:	87 95       	ror	r24
 85e:	97 f9       	bld	r25, 7
 860:	08 95       	ret

00000862 <__fp_inf>:
 862:	97 f9       	bld	r25, 7
 864:	9f 67       	ori	r25, 0x7F	; 127
 866:	80 e8       	ldi	r24, 0x80	; 128
 868:	70 e0       	ldi	r23, 0x00	; 0
 86a:	60 e0       	ldi	r22, 0x00	; 0
 86c:	08 95       	ret

0000086e <__fp_nan>:
 86e:	9f ef       	ldi	r25, 0xFF	; 255
 870:	80 ec       	ldi	r24, 0xC0	; 192
 872:	08 95       	ret

00000874 <__fp_pscA>:
 874:	00 24       	eor	r0, r0
 876:	0a 94       	dec	r0
 878:	16 16       	cp	r1, r22
 87a:	17 06       	cpc	r1, r23
 87c:	18 06       	cpc	r1, r24
 87e:	09 06       	cpc	r0, r25
 880:	08 95       	ret

00000882 <__fp_pscB>:
 882:	00 24       	eor	r0, r0
 884:	0a 94       	dec	r0
 886:	12 16       	cp	r1, r18
 888:	13 06       	cpc	r1, r19
 88a:	14 06       	cpc	r1, r20
 88c:	05 06       	cpc	r0, r21
 88e:	08 95       	ret

00000890 <__fp_round>:
 890:	09 2e       	mov	r0, r25
 892:	03 94       	inc	r0
 894:	00 0c       	add	r0, r0
 896:	11 f4       	brne	.+4      	; 0x89c <__fp_round+0xc>
 898:	88 23       	and	r24, r24
 89a:	52 f0       	brmi	.+20     	; 0x8b0 <__fp_round+0x20>
 89c:	bb 0f       	add	r27, r27
 89e:	40 f4       	brcc	.+16     	; 0x8b0 <__fp_round+0x20>
 8a0:	bf 2b       	or	r27, r31
 8a2:	11 f4       	brne	.+4      	; 0x8a8 <__fp_round+0x18>
 8a4:	60 ff       	sbrs	r22, 0
 8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <__fp_round+0x20>
 8a8:	6f 5f       	subi	r22, 0xFF	; 255
 8aa:	7f 4f       	sbci	r23, 0xFF	; 255
 8ac:	8f 4f       	sbci	r24, 0xFF	; 255
 8ae:	9f 4f       	sbci	r25, 0xFF	; 255
 8b0:	08 95       	ret

000008b2 <__fp_split3>:
 8b2:	57 fd       	sbrc	r21, 7
 8b4:	90 58       	subi	r25, 0x80	; 128
 8b6:	44 0f       	add	r20, r20
 8b8:	55 1f       	adc	r21, r21
 8ba:	59 f0       	breq	.+22     	; 0x8d2 <__fp_splitA+0x10>
 8bc:	5f 3f       	cpi	r21, 0xFF	; 255
 8be:	71 f0       	breq	.+28     	; 0x8dc <__fp_splitA+0x1a>
 8c0:	47 95       	ror	r20

000008c2 <__fp_splitA>:
 8c2:	88 0f       	add	r24, r24
 8c4:	97 fb       	bst	r25, 7
 8c6:	99 1f       	adc	r25, r25
 8c8:	61 f0       	breq	.+24     	; 0x8e2 <__fp_splitA+0x20>
 8ca:	9f 3f       	cpi	r25, 0xFF	; 255
 8cc:	79 f0       	breq	.+30     	; 0x8ec <__fp_splitA+0x2a>
 8ce:	87 95       	ror	r24
 8d0:	08 95       	ret
 8d2:	12 16       	cp	r1, r18
 8d4:	13 06       	cpc	r1, r19
 8d6:	14 06       	cpc	r1, r20
 8d8:	55 1f       	adc	r21, r21
 8da:	f2 cf       	rjmp	.-28     	; 0x8c0 <__fp_split3+0xe>
 8dc:	46 95       	lsr	r20
 8de:	f1 df       	rcall	.-30     	; 0x8c2 <__fp_splitA>
 8e0:	08 c0       	rjmp	.+16     	; 0x8f2 <__fp_splitA+0x30>
 8e2:	16 16       	cp	r1, r22
 8e4:	17 06       	cpc	r1, r23
 8e6:	18 06       	cpc	r1, r24
 8e8:	99 1f       	adc	r25, r25
 8ea:	f1 cf       	rjmp	.-30     	; 0x8ce <__fp_splitA+0xc>
 8ec:	86 95       	lsr	r24
 8ee:	71 05       	cpc	r23, r1
 8f0:	61 05       	cpc	r22, r1
 8f2:	08 94       	sec
 8f4:	08 95       	ret

000008f6 <__fp_zero>:
 8f6:	e8 94       	clt

000008f8 <__fp_szero>:
 8f8:	bb 27       	eor	r27, r27
 8fa:	66 27       	eor	r22, r22
 8fc:	77 27       	eor	r23, r23
 8fe:	cb 01       	movw	r24, r22
 900:	97 f9       	bld	r25, 7
 902:	08 95       	ret

00000904 <__gesf2>:
 904:	66 d0       	rcall	.+204    	; 0x9d2 <__fp_cmp>
 906:	08 f4       	brcc	.+2      	; 0x90a <__gesf2+0x6>
 908:	8f ef       	ldi	r24, 0xFF	; 255
 90a:	08 95       	ret

0000090c <__mulsf3>:
 90c:	0b d0       	rcall	.+22     	; 0x924 <__mulsf3x>
 90e:	c0 cf       	rjmp	.-128    	; 0x890 <__fp_round>
 910:	b1 df       	rcall	.-158    	; 0x874 <__fp_pscA>
 912:	28 f0       	brcs	.+10     	; 0x91e <__mulsf3+0x12>
 914:	b6 df       	rcall	.-148    	; 0x882 <__fp_pscB>
 916:	18 f0       	brcs	.+6      	; 0x91e <__mulsf3+0x12>
 918:	95 23       	and	r25, r21
 91a:	09 f0       	breq	.+2      	; 0x91e <__mulsf3+0x12>
 91c:	a2 cf       	rjmp	.-188    	; 0x862 <__fp_inf>
 91e:	a7 cf       	rjmp	.-178    	; 0x86e <__fp_nan>
 920:	11 24       	eor	r1, r1
 922:	ea cf       	rjmp	.-44     	; 0x8f8 <__fp_szero>

00000924 <__mulsf3x>:
 924:	c6 df       	rcall	.-116    	; 0x8b2 <__fp_split3>
 926:	a0 f3       	brcs	.-24     	; 0x910 <__mulsf3+0x4>

00000928 <__mulsf3_pse>:
 928:	95 9f       	mul	r25, r21
 92a:	d1 f3       	breq	.-12     	; 0x920 <__mulsf3+0x14>
 92c:	95 0f       	add	r25, r21
 92e:	50 e0       	ldi	r21, 0x00	; 0
 930:	55 1f       	adc	r21, r21
 932:	62 9f       	mul	r22, r18
 934:	f0 01       	movw	r30, r0
 936:	72 9f       	mul	r23, r18
 938:	bb 27       	eor	r27, r27
 93a:	f0 0d       	add	r31, r0
 93c:	b1 1d       	adc	r27, r1
 93e:	63 9f       	mul	r22, r19
 940:	aa 27       	eor	r26, r26
 942:	f0 0d       	add	r31, r0
 944:	b1 1d       	adc	r27, r1
 946:	aa 1f       	adc	r26, r26
 948:	64 9f       	mul	r22, r20
 94a:	66 27       	eor	r22, r22
 94c:	b0 0d       	add	r27, r0
 94e:	a1 1d       	adc	r26, r1
 950:	66 1f       	adc	r22, r22
 952:	82 9f       	mul	r24, r18
 954:	22 27       	eor	r18, r18
 956:	b0 0d       	add	r27, r0
 958:	a1 1d       	adc	r26, r1
 95a:	62 1f       	adc	r22, r18
 95c:	73 9f       	mul	r23, r19
 95e:	b0 0d       	add	r27, r0
 960:	a1 1d       	adc	r26, r1
 962:	62 1f       	adc	r22, r18
 964:	83 9f       	mul	r24, r19
 966:	a0 0d       	add	r26, r0
 968:	61 1d       	adc	r22, r1
 96a:	22 1f       	adc	r18, r18
 96c:	74 9f       	mul	r23, r20
 96e:	33 27       	eor	r19, r19
 970:	a0 0d       	add	r26, r0
 972:	61 1d       	adc	r22, r1
 974:	23 1f       	adc	r18, r19
 976:	84 9f       	mul	r24, r20
 978:	60 0d       	add	r22, r0
 97a:	21 1d       	adc	r18, r1
 97c:	82 2f       	mov	r24, r18
 97e:	76 2f       	mov	r23, r22
 980:	6a 2f       	mov	r22, r26
 982:	11 24       	eor	r1, r1
 984:	9f 57       	subi	r25, 0x7F	; 127
 986:	50 40       	sbci	r21, 0x00	; 0
 988:	8a f0       	brmi	.+34     	; 0x9ac <__mulsf3_pse+0x84>
 98a:	e1 f0       	breq	.+56     	; 0x9c4 <__mulsf3_pse+0x9c>
 98c:	88 23       	and	r24, r24
 98e:	4a f0       	brmi	.+18     	; 0x9a2 <__mulsf3_pse+0x7a>
 990:	ee 0f       	add	r30, r30
 992:	ff 1f       	adc	r31, r31
 994:	bb 1f       	adc	r27, r27
 996:	66 1f       	adc	r22, r22
 998:	77 1f       	adc	r23, r23
 99a:	88 1f       	adc	r24, r24
 99c:	91 50       	subi	r25, 0x01	; 1
 99e:	50 40       	sbci	r21, 0x00	; 0
 9a0:	a9 f7       	brne	.-22     	; 0x98c <__mulsf3_pse+0x64>
 9a2:	9e 3f       	cpi	r25, 0xFE	; 254
 9a4:	51 05       	cpc	r21, r1
 9a6:	70 f0       	brcs	.+28     	; 0x9c4 <__mulsf3_pse+0x9c>
 9a8:	5c cf       	rjmp	.-328    	; 0x862 <__fp_inf>
 9aa:	a6 cf       	rjmp	.-180    	; 0x8f8 <__fp_szero>
 9ac:	5f 3f       	cpi	r21, 0xFF	; 255
 9ae:	ec f3       	brlt	.-6      	; 0x9aa <__mulsf3_pse+0x82>
 9b0:	98 3e       	cpi	r25, 0xE8	; 232
 9b2:	dc f3       	brlt	.-10     	; 0x9aa <__mulsf3_pse+0x82>
 9b4:	86 95       	lsr	r24
 9b6:	77 95       	ror	r23
 9b8:	67 95       	ror	r22
 9ba:	b7 95       	ror	r27
 9bc:	f7 95       	ror	r31
 9be:	e7 95       	ror	r30
 9c0:	9f 5f       	subi	r25, 0xFF	; 255
 9c2:	c1 f7       	brne	.-16     	; 0x9b4 <__mulsf3_pse+0x8c>
 9c4:	fe 2b       	or	r31, r30
 9c6:	88 0f       	add	r24, r24
 9c8:	91 1d       	adc	r25, r1
 9ca:	96 95       	lsr	r25
 9cc:	87 95       	ror	r24
 9ce:	97 f9       	bld	r25, 7
 9d0:	08 95       	ret

000009d2 <__fp_cmp>:
 9d2:	99 0f       	add	r25, r25
 9d4:	00 08       	sbc	r0, r0
 9d6:	55 0f       	add	r21, r21
 9d8:	aa 0b       	sbc	r26, r26
 9da:	e0 e8       	ldi	r30, 0x80	; 128
 9dc:	fe ef       	ldi	r31, 0xFE	; 254
 9de:	16 16       	cp	r1, r22
 9e0:	17 06       	cpc	r1, r23
 9e2:	e8 07       	cpc	r30, r24
 9e4:	f9 07       	cpc	r31, r25
 9e6:	c0 f0       	brcs	.+48     	; 0xa18 <__fp_cmp+0x46>
 9e8:	12 16       	cp	r1, r18
 9ea:	13 06       	cpc	r1, r19
 9ec:	e4 07       	cpc	r30, r20
 9ee:	f5 07       	cpc	r31, r21
 9f0:	98 f0       	brcs	.+38     	; 0xa18 <__fp_cmp+0x46>
 9f2:	62 1b       	sub	r22, r18
 9f4:	73 0b       	sbc	r23, r19
 9f6:	84 0b       	sbc	r24, r20
 9f8:	95 0b       	sbc	r25, r21
 9fa:	39 f4       	brne	.+14     	; 0xa0a <__fp_cmp+0x38>
 9fc:	0a 26       	eor	r0, r26
 9fe:	61 f0       	breq	.+24     	; 0xa18 <__fp_cmp+0x46>
 a00:	23 2b       	or	r18, r19
 a02:	24 2b       	or	r18, r20
 a04:	25 2b       	or	r18, r21
 a06:	21 f4       	brne	.+8      	; 0xa10 <__fp_cmp+0x3e>
 a08:	08 95       	ret
 a0a:	0a 26       	eor	r0, r26
 a0c:	09 f4       	brne	.+2      	; 0xa10 <__fp_cmp+0x3e>
 a0e:	a1 40       	sbci	r26, 0x01	; 1
 a10:	a6 95       	lsr	r26
 a12:	8f ef       	ldi	r24, 0xFF	; 255
 a14:	81 1d       	adc	r24, r1
 a16:	81 1d       	adc	r24, r1
 a18:	08 95       	ret

00000a1a <__udivmodsi4>:
 a1a:	a1 e2       	ldi	r26, 0x21	; 33
 a1c:	1a 2e       	mov	r1, r26
 a1e:	aa 1b       	sub	r26, r26
 a20:	bb 1b       	sub	r27, r27
 a22:	fd 01       	movw	r30, r26
 a24:	0d c0       	rjmp	.+26     	; 0xa40 <__udivmodsi4_ep>

00000a26 <__udivmodsi4_loop>:
 a26:	aa 1f       	adc	r26, r26
 a28:	bb 1f       	adc	r27, r27
 a2a:	ee 1f       	adc	r30, r30
 a2c:	ff 1f       	adc	r31, r31
 a2e:	a2 17       	cp	r26, r18
 a30:	b3 07       	cpc	r27, r19
 a32:	e4 07       	cpc	r30, r20
 a34:	f5 07       	cpc	r31, r21
 a36:	20 f0       	brcs	.+8      	; 0xa40 <__udivmodsi4_ep>
 a38:	a2 1b       	sub	r26, r18
 a3a:	b3 0b       	sbc	r27, r19
 a3c:	e4 0b       	sbc	r30, r20
 a3e:	f5 0b       	sbc	r31, r21

00000a40 <__udivmodsi4_ep>:
 a40:	66 1f       	adc	r22, r22
 a42:	77 1f       	adc	r23, r23
 a44:	88 1f       	adc	r24, r24
 a46:	99 1f       	adc	r25, r25
 a48:	1a 94       	dec	r1
 a4a:	69 f7       	brne	.-38     	; 0xa26 <__udivmodsi4_loop>
 a4c:	60 95       	com	r22
 a4e:	70 95       	com	r23
 a50:	80 95       	com	r24
 a52:	90 95       	com	r25
 a54:	9b 01       	movw	r18, r22
 a56:	ac 01       	movw	r20, r24
 a58:	bd 01       	movw	r22, r26
 a5a:	cf 01       	movw	r24, r30
 a5c:	08 95       	ret

00000a5e <__itoa_ncheck>:
 a5e:	bb 27       	eor	r27, r27
 a60:	4a 30       	cpi	r20, 0x0A	; 10
 a62:	31 f4       	brne	.+12     	; 0xa70 <__itoa_ncheck+0x12>
 a64:	99 23       	and	r25, r25
 a66:	22 f4       	brpl	.+8      	; 0xa70 <__itoa_ncheck+0x12>
 a68:	bd e2       	ldi	r27, 0x2D	; 45
 a6a:	90 95       	com	r25
 a6c:	81 95       	neg	r24
 a6e:	9f 4f       	sbci	r25, 0xFF	; 255
 a70:	01 c0       	rjmp	.+2      	; 0xa74 <__utoa_common>

00000a72 <__utoa_ncheck>:
 a72:	bb 27       	eor	r27, r27

00000a74 <__utoa_common>:
 a74:	fb 01       	movw	r30, r22
 a76:	55 27       	eor	r21, r21
 a78:	aa 27       	eor	r26, r26
 a7a:	88 0f       	add	r24, r24
 a7c:	99 1f       	adc	r25, r25
 a7e:	aa 1f       	adc	r26, r26
 a80:	a4 17       	cp	r26, r20
 a82:	10 f0       	brcs	.+4      	; 0xa88 <__utoa_common+0x14>
 a84:	a4 1b       	sub	r26, r20
 a86:	83 95       	inc	r24
 a88:	50 51       	subi	r21, 0x10	; 16
 a8a:	b9 f7       	brne	.-18     	; 0xa7a <__utoa_common+0x6>
 a8c:	a0 5d       	subi	r26, 0xD0	; 208
 a8e:	aa 33       	cpi	r26, 0x3A	; 58
 a90:	08 f0       	brcs	.+2      	; 0xa94 <__utoa_common+0x20>
 a92:	a9 5d       	subi	r26, 0xD9	; 217
 a94:	a1 93       	st	Z+, r26
 a96:	00 97       	sbiw	r24, 0x00	; 0
 a98:	79 f7       	brne	.-34     	; 0xa78 <__utoa_common+0x4>
 a9a:	b1 11       	cpse	r27, r1
 a9c:	b1 93       	st	Z+, r27
 a9e:	11 92       	st	Z+, r1
 aa0:	cb 01       	movw	r24, r22
 aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <strrev>

00000aa4 <strrev>:
 aa4:	dc 01       	movw	r26, r24
 aa6:	fc 01       	movw	r30, r24
 aa8:	67 2f       	mov	r22, r23
 aaa:	71 91       	ld	r23, Z+
 aac:	77 23       	and	r23, r23
 aae:	e1 f7       	brne	.-8      	; 0xaa8 <strrev+0x4>
 ab0:	32 97       	sbiw	r30, 0x02	; 2
 ab2:	04 c0       	rjmp	.+8      	; 0xabc <strrev+0x18>
 ab4:	7c 91       	ld	r23, X
 ab6:	6d 93       	st	X+, r22
 ab8:	70 83       	st	Z, r23
 aba:	62 91       	ld	r22, -Z
 abc:	ae 17       	cp	r26, r30
 abe:	bf 07       	cpc	r27, r31
 ac0:	c8 f3       	brcs	.-14     	; 0xab4 <strrev+0x10>
 ac2:	08 95       	ret

00000ac4 <eeprom_read_dword>:
 ac4:	a6 e1       	ldi	r26, 0x16	; 22
 ac6:	b0 e0       	ldi	r27, 0x00	; 0
 ac8:	44 e0       	ldi	r20, 0x04	; 4
 aca:	50 e0       	ldi	r21, 0x00	; 0
 acc:	0a c0       	rjmp	.+20     	; 0xae2 <eeprom_read_blraw>

00000ace <eeprom_write_dword>:
 ace:	24 2f       	mov	r18, r20
 ad0:	17 d0       	rcall	.+46     	; 0xb00 <eeprom_write_r18>
 ad2:	25 2f       	mov	r18, r21
 ad4:	15 d0       	rcall	.+42     	; 0xb00 <eeprom_write_r18>
 ad6:	00 c0       	rjmp	.+0      	; 0xad8 <eeprom_write_word>

00000ad8 <eeprom_write_word>:
 ad8:	12 d0       	rcall	.+36     	; 0xafe <eeprom_write_byte>
 ada:	27 2f       	mov	r18, r23
 adc:	11 c0       	rjmp	.+34     	; 0xb00 <eeprom_write_r18>

00000ade <eeprom_read_block>:
 ade:	dc 01       	movw	r26, r24
 ae0:	cb 01       	movw	r24, r22

00000ae2 <eeprom_read_blraw>:
 ae2:	fc 01       	movw	r30, r24
 ae4:	f9 99       	sbic	0x1f, 1	; 31
 ae6:	fe cf       	rjmp	.-4      	; 0xae4 <eeprom_read_blraw+0x2>
 ae8:	06 c0       	rjmp	.+12     	; 0xaf6 <eeprom_read_blraw+0x14>
 aea:	f2 bd       	out	0x22, r31	; 34
 aec:	e1 bd       	out	0x21, r30	; 33
 aee:	f8 9a       	sbi	0x1f, 0	; 31
 af0:	31 96       	adiw	r30, 0x01	; 1
 af2:	00 b4       	in	r0, 0x20	; 32
 af4:	0d 92       	st	X+, r0
 af6:	41 50       	subi	r20, 0x01	; 1
 af8:	50 40       	sbci	r21, 0x00	; 0
 afa:	b8 f7       	brcc	.-18     	; 0xaea <eeprom_read_blraw+0x8>
 afc:	08 95       	ret

00000afe <eeprom_write_byte>:
 afe:	26 2f       	mov	r18, r22

00000b00 <eeprom_write_r18>:
 b00:	f9 99       	sbic	0x1f, 1	; 31
 b02:	fe cf       	rjmp	.-4      	; 0xb00 <eeprom_write_r18>
 b04:	1f ba       	out	0x1f, r1	; 31
 b06:	92 bd       	out	0x22, r25	; 34
 b08:	81 bd       	out	0x21, r24	; 33
 b0a:	20 bd       	out	0x20, r18	; 32
 b0c:	0f b6       	in	r0, 0x3f	; 63
 b0e:	f8 94       	cli
 b10:	fa 9a       	sbi	0x1f, 2	; 31
 b12:	f9 9a       	sbi	0x1f, 1	; 31
 b14:	0f be       	out	0x3f, r0	; 63
 b16:	01 96       	adiw	r24, 0x01	; 1
 b18:	08 95       	ret

00000b1a <_exit>:
 b1a:	f8 94       	cli

00000b1c <__stop_program>:
 b1c:	ff cf       	rjmp	.-2      	; 0xb1c <__stop_program>
