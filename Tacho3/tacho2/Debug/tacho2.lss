
tacho2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  00000a84  00000b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800218  00800218  00000b30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018f5  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001017  00000000  00000000  000025f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ce  00000000  00000000  0000360c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00003fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000810  00000000  00000000  000041d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000678  00000000  00000000  000049e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	ea c0       	rjmp	.+468    	; 0x1ea <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	09 c1       	rjmp	.+530    	; 0x250 <__vector_15>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e8       	ldi	r30, 0x84	; 132
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 31       	cpi	r26, 0x18	; 24
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e1       	ldi	r26, 0x18	; 24
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a9 33       	cpi	r26, 0x39	; 57
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	af c4       	rjmp	.+2398   	; 0xa80 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
// Select the UART to test (UART0, UART1, UART2 or UART3)
#define myUART UART0

int main(void)
{
	checkpointCnt = 0;
 124:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <checkpointCnt>
	speedSensor = speedSensor_getDriver(65);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	82 e8       	ldi	r24, 0x82	; 130
 12e:	92 e4       	ldi	r25, 0x42	; 66
 130:	55 d1       	rcall	.+682    	; 0x3dc <speedSensor_getDriver>
 132:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <__data_end+0x1>
 136:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__data_end>
	
	//uart setup
	InitUART(myUART, 9600, 8, 'N');
 13a:	0e e4       	ldi	r16, 0x4E	; 78
 13c:	28 e0       	ldi	r18, 0x08	; 8
 13e:	40 e8       	ldi	r20, 0x80	; 128
 140:	55 e2       	ldi	r21, 0x25	; 37
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	80 ec       	ldi	r24, 0xC0	; 192
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	9b d1       	rcall	.+822    	; 0x482 <InitUART>
		SendChar(myUART,'.');
		SendInteger(myUART,d);
		
		
		SendString(myUART, "     KHM_TOTAL: ");
		SendInteger(myUART, kmTotal);
 14c:	ce e1       	ldi	r28, 0x1E	; 30
 14e:	d2 e0       	ldi	r29, 0x02	; 2
	//uart setup
	InitUART(myUART, 9600, 8, 'N');
	
	while (1)
	{
		kmTotal = speedSensor->getTripDistance();
 150:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__data_end>
 154:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__data_end+0x1>
 158:	00 84       	ldd	r0, Z+8	; 0x08
 15a:	f1 85       	ldd	r31, Z+9	; 0x09
 15c:	e0 2d       	mov	r30, r0
 15e:	19 95       	eicall
 160:	f2 d2       	rcall	.+1508   	; 0x746 <__fixunssfsi>
 162:	60 93 1e 02 	sts	0x021E, r22	; 0x80021e <kmTotal>
 166:	70 93 1f 02 	sts	0x021F, r23	; 0x80021f <kmTotal+0x1>
 16a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <kmTotal+0x2>
 16e:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <kmTotal+0x3>
		
			
		PORTB &= ~(1<<PB5); //debug 
 172:	2d 98       	cbi	0x05, 5	; 5
		
		SendString(myUART, "KMH: ");
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	72 e0       	ldi	r23, 0x02	; 2
 178:	80 ec       	ldi	r24, 0xC0	; 192
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	db d1       	rcall	.+950    	; 0x534 <SendString>
		float f = speedSensor->getSpeedInKmh();
 17e:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__data_end>
 182:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__data_end+0x1>
 186:	06 80       	ldd	r0, Z+6	; 0x06
 188:	f7 81       	ldd	r31, Z+7	; 0x07
 18a:	e0 2d       	mov	r30, r0
 18c:	19 95       	eicall
 18e:	4b 01       	movw	r8, r22
		int r = (int)f;
 190:	5c 01       	movw	r10, r24
 192:	d4 d2       	rcall	.+1448   	; 0x73c <__fixsfsi>
 194:	6b 01       	movw	r12, r22
		int d = (f-r)*100;
		SendInteger(myUART,r);
 196:	7c 01       	movw	r14, r24
 198:	80 ec       	ldi	r24, 0xC0	; 192
 19a:	90 e0       	ldi	r25, 0x00	; 0
		SendChar(myUART,'.');
 19c:	df d1       	rcall	.+958    	; 0x55c <SendInteger>
 19e:	6e e2       	ldi	r22, 0x2E	; 46
 1a0:	80 ec       	ldi	r24, 0xC0	; 192
 1a2:	90 e0       	ldi	r25, 0x00	; 0
		SendInteger(myUART,d);
 1a4:	c1 d1       	rcall	.+898    	; 0x528 <SendChar>
 1a6:	b6 01       	movw	r22, r12
 1a8:	dd 0c       	add	r13, r13
 1aa:	88 0b       	sbc	r24, r24
 1ac:	99 0b       	sbc	r25, r25
 1ae:	f9 d2       	rcall	.+1522   	; 0x7a2 <__floatsisf>
 1b0:	9b 01       	movw	r18, r22
 1b2:	ac 01       	movw	r20, r24
 1b4:	c5 01       	movw	r24, r10
 1b6:	b4 01       	movw	r22, r8
 1b8:	f4 d1       	rcall	.+1000   	; 0x5a2 <__subsf3>
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	48 ec       	ldi	r20, 0xC8	; 200
 1c0:	52 e4       	ldi	r21, 0x42	; 66
 1c2:	7b d3       	rcall	.+1782   	; 0x8ba <__mulsf3>
 1c4:	bb d2       	rcall	.+1398   	; 0x73c <__fixsfsi>
 1c6:	80 ec       	ldi	r24, 0xC0	; 192
 1c8:	90 e0       	ldi	r25, 0x00	; 0
		
		
		SendString(myUART, "     KHM_TOTAL: ");
 1ca:	c8 d1       	rcall	.+912    	; 0x55c <SendInteger>
 1cc:	66 e0       	ldi	r22, 0x06	; 6
 1ce:	72 e0       	ldi	r23, 0x02	; 2
 1d0:	80 ec       	ldi	r24, 0xC0	; 192
 1d2:	90 e0       	ldi	r25, 0x00	; 0
		SendInteger(myUART, kmTotal);
 1d4:	af d1       	rcall	.+862    	; 0x534 <SendString>
 1d6:	68 81       	ld	r22, Y
 1d8:	79 81       	ldd	r23, Y+1	; 0x01
 1da:	80 ec       	ldi	r24, 0xC0	; 192
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	be d1       	rcall	.+892    	; 0x55c <SendInteger>
		SendChar(myUART,'\r'); //newline
 1e0:	6d e0       	ldi	r22, 0x0D	; 13
 1e2:	80 ec       	ldi	r24, 0xC0	; 192
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	a0 d1       	rcall	.+832    	; 0x528 <SendChar>
 1e8:	b3 cf       	rjmp	.-154    	; 0x150 <main+0x2c>

000001ea <__vector_5>:
 1ea:	1f 92       	push	r1
	}
}


ISR(INT4_vect)
{
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	0b b6       	in	r0, 0x3b	; 59
 1f6:	0f 92       	push	r0
 1f8:	2f 93       	push	r18
 1fa:	3f 93       	push	r19
 1fc:	4f 93       	push	r20
 1fe:	5f 93       	push	r21
 200:	6f 93       	push	r22
 202:	7f 93       	push	r23
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
 208:	af 93       	push	r26
 20a:	bf 93       	push	r27
 20c:	ef 93       	push	r30
 20e:	ff 93       	push	r31
	speedSensor->updateMilestoneCount();
 210:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__data_end>
 214:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__data_end+0x1>
 218:	02 80       	ldd	r0, Z+2	; 0x02
 21a:	f3 81       	ldd	r31, Z+3	; 0x03
 21c:	e0 2d       	mov	r30, r0
 21e:	19 95       	eicall
	revolutionsForCalc++; //Counts up the revolutions for speed calculation.
 220:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <revolutionsForCalc>
 224:	8f 5f       	subi	r24, 0xFF	; 255
 226:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <revolutionsForCalc>
}
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	bf 91       	pop	r27
 230:	af 91       	pop	r26
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	7f 91       	pop	r23
 238:	6f 91       	pop	r22
 23a:	5f 91       	pop	r21
 23c:	4f 91       	pop	r20
 23e:	3f 91       	pop	r19
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	0b be       	out	0x3b, r0	; 59
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <__vector_15>:


//TIMER 2 interrupts every second to measure how many revolutions the wheel has made.
ISR(TIMER2_OVF_vect)
{
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	0b b6       	in	r0, 0x3b	; 59
 25c:	0f 92       	push	r0
 25e:	2f 93       	push	r18
 260:	3f 93       	push	r19
 262:	4f 93       	push	r20
 264:	5f 93       	push	r21
 266:	6f 93       	push	r22
 268:	7f 93       	push	r23
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	af 93       	push	r26
 270:	bf 93       	push	r27
 272:	ef 93       	push	r30
 274:	ff 93       	push	r31
	// After 62500 interrupts overflows the timer counts another timer to get other times. 
	// Because of CPU clock and prescaling 8bit timer overflows every 16.063 us. Delay=prescaler*(OCRn+1)/fcpu
	timerOverflows++;
 276:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <timerOverflows>
 27a:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <timerOverflows+0x1>
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <timerOverflows+0x1>
 284:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <timerOverflows>
	
	if (timerOverflows == 62500)	// 16.063us*62500=1.004s
 288:	84 32       	cpi	r24, 0x24	; 36
 28a:	94 4f       	sbci	r25, 0xF4	; 244
 28c:	b1 f4       	brne	.+44     	; 0x2ba <__vector_15+0x6a>
	{
		timerOverflows = 0; //reset timer
 28e:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <timerOverflows+0x1>
 292:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <timerOverflows>
		PORTB |=(1<<PB5); //debug
 296:	2d 9a       	sbi	0x05, 5	; 5
		
		speedSensor->updateRevolutionCount(revolutionsForCalc);
 298:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__data_end>
 29c:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__data_end+0x1>
 2a0:	01 90       	ld	r0, Z+
 2a2:	f0 81       	ld	r31, Z
 2a4:	e0 2d       	mov	r30, r0
 2a6:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <revolutionsForCalc>
 2aa:	19 95       	eicall
		revolutionsForCalc = 0; //Resetting after getting value for KHM calculation  
 2ac:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <revolutionsForCalc>
		timerCount=0; //Resetting before getting value.
		checkpointCnt++;
 2b0:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <checkpointCnt>
 2b4:	8f 5f       	subi	r24, 0xFF	; 255
 2b6:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <checkpointCnt>
	}
	
	if (checkpointCnt>60) //Save milestone to EEPROM every minute
 2ba:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <checkpointCnt>
 2be:	8d 33       	cpi	r24, 0x3D	; 61
 2c0:	50 f0       	brcs	.+20     	; 0x2d6 <__vector_15+0x86>
	{
		checkpointCnt = 0;
 2c2:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <checkpointCnt>
		speedSensor->saveMilestoneCount();
 2c6:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__data_end>
 2ca:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__data_end+0x1>
 2ce:	04 80       	ldd	r0, Z+4	; 0x04
 2d0:	f5 81       	ldd	r31, Z+5	; 0x05
 2d2:	e0 2d       	mov	r30, r0
 2d4:	19 95       	eicall
	}

 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	bf 91       	pop	r27
 2dc:	af 91       	pop	r26
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	7f 91       	pop	r23
 2e4:	6f 91       	pop	r22
 2e6:	5f 91       	pop	r21
 2e8:	4f 91       	pop	r20
 2ea:	3f 91       	pop	r19
 2ec:	2f 91       	pop	r18
 2ee:	0f 90       	pop	r0
 2f0:	0b be       	out	0x3b, r0	; 59
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <getTripDistance>:

static float getTripDistance(void)  //WORKS TESTED 
{ 
	
	float KMD = ((revLength*(float)milestoneCount)/1000); //Total KM distance driven
	return KMD;
 2fc:	60 91 31 02 	lds	r22, 0x0231	; 0x800231 <milestoneCount>
 300:	70 91 32 02 	lds	r23, 0x0232	; 0x800232 <milestoneCount+0x1>
 304:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <milestoneCount+0x2>
 308:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <milestoneCount+0x3>
 30c:	48 d2       	rcall	.+1168   	; 0x79e <__floatunsisf>
 30e:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <revLength>
 312:	30 91 24 02 	lds	r19, 0x0224	; 0x800224 <revLength+0x1>
 316:	40 91 25 02 	lds	r20, 0x0225	; 0x800225 <revLength+0x2>
 31a:	50 91 26 02 	lds	r21, 0x0226	; 0x800226 <revLength+0x3>
 31e:	cd d2       	rcall	.+1434   	; 0x8ba <__mulsf3>
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	4a e7       	ldi	r20, 0x7A	; 122
 326:	54 e4       	ldi	r21, 0x44	; 68
 328:	a1 c1       	rjmp	.+834    	; 0x66c <__divsf3>
}
 32a:	08 95       	ret

0000032c <updateMilestoneCount>:

static void updateMilestoneCount()
{
	milestoneCount++;
 32c:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <milestoneCount>
 330:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <milestoneCount+0x1>
 334:	a0 91 33 02 	lds	r26, 0x0233	; 0x800233 <milestoneCount+0x2>
 338:	b0 91 34 02 	lds	r27, 0x0234	; 0x800234 <milestoneCount+0x3>
 33c:	01 96       	adiw	r24, 0x01	; 1
 33e:	a1 1d       	adc	r26, r1
 340:	b1 1d       	adc	r27, r1
 342:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <milestoneCount>
 346:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <milestoneCount+0x1>
 34a:	a0 93 33 02 	sts	0x0233, r26	; 0x800233 <milestoneCount+0x2>
 34e:	b0 93 34 02 	sts	0x0234, r27	; 0x800234 <milestoneCount+0x3>
 352:	08 95       	ret

00000354 <updateRevolutionCount>:
}

static void updateRevolutionCount(uint8_t revs)
{
	static uint8_t cnt = 0;
	revPerSec[cnt] = revs;
 354:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <cnt.1904>
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	f9 01       	movw	r30, r18
 35c:	eb 5c       	subi	r30, 0xCB	; 203
 35e:	fd 4f       	sbci	r31, 0xFD	; 253
 360:	80 83       	st	Z, r24
	cnt = (cnt+1) % 4;
 362:	c9 01       	movw	r24, r18
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	83 70       	andi	r24, 0x03	; 3
 368:	90 78       	andi	r25, 0x80	; 128
 36a:	99 23       	and	r25, r25
 36c:	24 f4       	brge	.+8      	; 0x376 <updateRevolutionCount+0x22>
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	8c 6f       	ori	r24, 0xFC	; 252
 372:	9f 6f       	ori	r25, 0xFF	; 255
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <cnt.1904>
 37a:	08 95       	ret

0000037c <getSpeedKMH>:
{
	uint16_t retVal = 0;
	uint8_t i = 0;
	for (i = 0; i<4; i++)
	{
		retVal += revPerSec[i];
 37c:	e5 e3       	ldi	r30, 0x35	; 53
 37e:	f2 e0       	ldi	r31, 0x02	; 2
 380:	80 81       	ld	r24, Z
 382:	61 81       	ldd	r22, Z+1	; 0x01
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	68 0f       	add	r22, r24
 388:	71 1d       	adc	r23, r1
 38a:	82 81       	ldd	r24, Z+2	; 0x02
 38c:	68 0f       	add	r22, r24
 38e:	71 1d       	adc	r23, r1
{
	//char buffer[10];
	
	float KMH = ((float)sumRevolutions()/4)*revLength*3.6; // Revolutions per second times revolution length = m/s. time 3.6 = km/h
	
	return KMH; 
 390:	83 81       	ldd	r24, Z+3	; 0x03
 392:	68 0f       	add	r22, r24
 394:	71 1d       	adc	r23, r1
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	01 d2       	rcall	.+1026   	; 0x79e <__floatunsisf>
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	40 e8       	ldi	r20, 0x80	; 128
 3a2:	5e e3       	ldi	r21, 0x3E	; 62
 3a4:	8a d2       	rcall	.+1300   	; 0x8ba <__mulsf3>
 3a6:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <revLength>
 3aa:	30 91 24 02 	lds	r19, 0x0224	; 0x800224 <revLength+0x1>
 3ae:	40 91 25 02 	lds	r20, 0x0225	; 0x800225 <revLength+0x2>
 3b2:	50 91 26 02 	lds	r21, 0x0226	; 0x800226 <revLength+0x3>
 3b6:	81 d2       	rcall	.+1282   	; 0x8ba <__mulsf3>
 3b8:	26 e6       	ldi	r18, 0x66	; 102
 3ba:	36 e6       	ldi	r19, 0x66	; 102
 3bc:	46 e6       	ldi	r20, 0x66	; 102
 3be:	50 e4       	ldi	r21, 0x40	; 64
 3c0:	7c c2       	rjmp	.+1272   	; 0x8ba <__mulsf3>
}
 3c2:	08 95       	ret

000003c4 <eepromSave>:
}


static void eepromSave(void)
{
	eeprom_write_dword(0,milestoneCount);
 3c4:	40 91 31 02 	lds	r20, 0x0231	; 0x800231 <milestoneCount>
 3c8:	50 91 32 02 	lds	r21, 0x0232	; 0x800232 <milestoneCount+0x1>
 3cc:	60 91 33 02 	lds	r22, 0x0233	; 0x800233 <milestoneCount+0x2>
 3d0:	70 91 34 02 	lds	r23, 0x0234	; 0x800234 <milestoneCount+0x3>
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	2d c3       	rjmp	.+1626   	; 0xa34 <eeprom_write_dword>
 3da:	08 95       	ret

000003dc <speedSensor_getDriver>:
}

static void initSpeedSensor(float wheelDiameter)
{
	float wheelD=(wheelDiameter/200); //Calculations to meters centered ( /100 & /2)
	revLength=(wheelD*3.1415); //One revolution gives meters
 3dc:	20 e0       	ldi	r18, 0x00	; 0
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	48 e4       	ldi	r20, 0x48	; 72
 3e2:	53 e4       	ldi	r21, 0x43	; 67
 3e4:	43 d1       	rcall	.+646    	; 0x66c <__divsf3>
 3e6:	26 e5       	ldi	r18, 0x56	; 86
 3e8:	3e e0       	ldi	r19, 0x0E	; 14
 3ea:	49 e4       	ldi	r20, 0x49	; 73
 3ec:	50 e4       	ldi	r21, 0x40	; 64
 3ee:	65 d2       	rcall	.+1226   	; 0x8ba <__mulsf3>
 3f0:	60 93 23 02 	sts	0x0223, r22	; 0x800223 <revLength>
 3f4:	70 93 24 02 	sts	0x0224, r23	; 0x800224 <revLength+0x1>
 3f8:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <revLength+0x2>
 3fc:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <revLength+0x3>
	milestoneCount = eeprom_read_dword(0);
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	12 d3       	rcall	.+1572   	; 0xa2a <eeprom_read_dword>
	if (milestoneCount == 0xFFFFFFFF)
 406:	6f 3f       	cpi	r22, 0xFF	; 255
 408:	2f ef       	ldi	r18, 0xFF	; 255
 40a:	72 07       	cpc	r23, r18
 40c:	82 07       	cpc	r24, r18
 40e:	92 07       	cpc	r25, r18
 410:	49 f0       	breq	.+18     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>

static void initSpeedSensor(float wheelDiameter)
{
	float wheelD=(wheelDiameter/200); //Calculations to meters centered ( /100 & /2)
	revLength=(wheelD*3.1415); //One revolution gives meters
	milestoneCount = eeprom_read_dword(0);
 412:	60 93 31 02 	sts	0x0231, r22	; 0x800231 <milestoneCount>
 416:	70 93 32 02 	sts	0x0232, r23	; 0x800232 <milestoneCount+0x1>
 41a:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <milestoneCount+0x2>
 41e:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <milestoneCount+0x3>
 422:	08 c0       	rjmp	.+16     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	if (milestoneCount == 0xFFFFFFFF)
	{
		milestoneCount = 0;
 424:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <milestoneCount>
 428:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <milestoneCount+0x1>
 42c:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <milestoneCount+0x2>
 430:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <milestoneCount+0x3>
	}
	//Timer2 is used for keeping time of rpm measurement.
	// Timer2: Normal mode, No prescaling
	TCCR2A = 0b00000000;
 434:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	TCCR2B = 0b00000001;
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
	// Timer2 overflow interrupt enable
	TIMSK2 |= 0b00000001;
 43e:	e0 e7       	ldi	r30, 0x70	; 112
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 81       	ld	r24, Z
 444:	81 60       	ori	r24, 0x01	; 1
 446:	80 83       	st	Z, r24
	
	// INT4:Rising edge
	EICRB = 0b00000011;
 448:	83 e0       	ldi	r24, 0x03	; 3
 44a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
	// Enable extern interrupts INT4 
	EIMSK |= 0b00010000;
 44e:	ec 9a       	sbi	0x1d, 4	; 29
	
	// Global interrupt enable
	sei();
 450:	78 94       	sei
speedSensorInterface_t* speedSensor_getDriver(float wheelDiameter)
{
	if (!initialized)
	{
		initSpeedSensor(wheelDiameter);
		myInterface.getSpeedInKmh = getSpeedKMH;
 452:	e7 e2       	ldi	r30, 0x27	; 39
 454:	f2 e0       	ldi	r31, 0x02	; 2
 456:	8e eb       	ldi	r24, 0xBE	; 190
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	97 83       	std	Z+7, r25	; 0x07
 45c:	86 83       	std	Z+6, r24	; 0x06
		myInterface.getTripDistance = getTripDistance;
 45e:	8e e7       	ldi	r24, 0x7E	; 126
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	91 87       	std	Z+9, r25	; 0x09
 464:	80 87       	std	Z+8, r24	; 0x08
		myInterface.saveMilestoneCount = eepromSave;
 466:	82 ee       	ldi	r24, 0xE2	; 226
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	95 83       	std	Z+5, r25	; 0x05
 46c:	84 83       	std	Z+4, r24	; 0x04
		myInterface.updateMilestoneCount = updateMilestoneCount;
 46e:	86 e9       	ldi	r24, 0x96	; 150
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	93 83       	std	Z+3, r25	; 0x03
 474:	82 83       	std	Z+2, r24	; 0x02
		myInterface.updateRevolutionCount = updateRevolutionCount;
 476:	8a ea       	ldi	r24, 0xAA	; 170
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	91 83       	std	Z+1, r25	; 0x01
 47c:	80 83       	st	Z, r24
	}
	return &myInterface;
}
 47e:	cf 01       	movw	r24, r30
 480:	08 95       	ret

00000482 <InitUART>:
 482:	0f 93       	push	r16
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	ec 01       	movw	r28, r24
 48a:	db 01       	movw	r26, r22
 48c:	ca 01       	movw	r24, r20
 48e:	8c 52       	subi	r24, 0x2C	; 44
 490:	91 40       	sbci	r25, 0x01	; 1
 492:	a1 09       	sbc	r26, r1
 494:	b1 09       	sbc	r27, r1
 496:	85 3d       	cpi	r24, 0xD5	; 213
 498:	90 4c       	sbci	r25, 0xC0	; 192
 49a:	a1 40       	sbci	r26, 0x01	; 1
 49c:	b1 05       	cpc	r27, r1
 49e:	08 f0       	brcs	.+2      	; 0x4a2 <InitUART+0x20>
 4a0:	3f c0       	rjmp	.+126    	; 0x520 <InitUART+0x9e>
 4a2:	25 50       	subi	r18, 0x05	; 5
 4a4:	24 30       	cpi	r18, 0x04	; 4
 4a6:	e0 f5       	brcc	.+120    	; 0x520 <InitUART+0x9e>
 4a8:	80 e2       	ldi	r24, 0x20	; 32
 4aa:	88 83       	st	Y, r24
 4ac:	88 e1       	ldi	r24, 0x18	; 24
 4ae:	89 83       	std	Y+1, r24	; 0x01
 4b0:	22 0f       	add	r18, r18
 4b2:	2a 83       	std	Y+2, r18	; 0x02
 4b4:	05 34       	cpi	r16, 0x45	; 69
 4b6:	21 f4       	brne	.+8      	; 0x4c0 <InitUART+0x3e>
 4b8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ba:	80 62       	ori	r24, 0x20	; 32
 4bc:	8a 83       	std	Y+2, r24	; 0x02
 4be:	05 c0       	rjmp	.+10     	; 0x4ca <InitUART+0x48>
 4c0:	0f 34       	cpi	r16, 0x4F	; 79
 4c2:	19 f4       	brne	.+6      	; 0x4ca <InitUART+0x48>
 4c4:	8a 81       	ldd	r24, Y+2	; 0x02
 4c6:	80 63       	ori	r24, 0x30	; 48
 4c8:	8a 83       	std	Y+2, r24	; 0x02
 4ca:	db 01       	movw	r26, r22
 4cc:	ca 01       	movw	r24, r20
 4ce:	80 58       	subi	r24, 0x80	; 128
 4d0:	9b 47       	sbci	r25, 0x7B	; 123
 4d2:	a1 4e       	sbci	r26, 0xE1	; 225
 4d4:	bf 4f       	sbci	r27, 0xFF	; 255
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	aa 1f       	adc	r26, r26
 4dc:	bb 1f       	adc	r27, r27
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	aa 1f       	adc	r26, r26
 4e4:	bb 1f       	adc	r27, r27
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	aa 1f       	adc	r26, r26
 4ec:	bb 1f       	adc	r27, r27
 4ee:	44 0f       	add	r20, r20
 4f0:	55 1f       	adc	r21, r21
 4f2:	66 1f       	adc	r22, r22
 4f4:	77 1f       	adc	r23, r23
 4f6:	44 0f       	add	r20, r20
 4f8:	55 1f       	adc	r21, r21
 4fa:	66 1f       	adc	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	9a 01       	movw	r18, r20
 500:	ab 01       	movw	r20, r22
 502:	22 0f       	add	r18, r18
 504:	33 1f       	adc	r19, r19
 506:	44 1f       	adc	r20, r20
 508:	55 1f       	adc	r21, r21
 50a:	22 0f       	add	r18, r18
 50c:	33 1f       	adc	r19, r19
 50e:	44 1f       	adc	r20, r20
 510:	55 1f       	adc	r21, r21
 512:	bc 01       	movw	r22, r24
 514:	cd 01       	movw	r24, r26
 516:	34 d2       	rcall	.+1128   	; 0x980 <__udivmodsi4>
 518:	21 50       	subi	r18, 0x01	; 1
 51a:	31 09       	sbc	r19, r1
 51c:	3d 83       	std	Y+5, r19	; 0x05
 51e:	2c 83       	std	Y+4, r18	; 0x04
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	0f 91       	pop	r16
 526:	08 95       	ret

00000528 <SendChar>:
 528:	fc 01       	movw	r30, r24
 52a:	90 81       	ld	r25, Z
 52c:	95 ff       	sbrs	r25, 5
 52e:	fd cf       	rjmp	.-6      	; 0x52a <SendChar+0x2>
 530:	66 83       	std	Z+6, r22	; 0x06
 532:	08 95       	ret

00000534 <SendString>:
 534:	0f 93       	push	r16
 536:	1f 93       	push	r17
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	eb 01       	movw	r28, r22
 53e:	68 81       	ld	r22, Y
 540:	66 23       	and	r22, r22
 542:	39 f0       	breq	.+14     	; 0x552 <SendString+0x1e>
 544:	8c 01       	movw	r16, r24
 546:	21 96       	adiw	r28, 0x01	; 1
 548:	c8 01       	movw	r24, r16
 54a:	ee df       	rcall	.-36     	; 0x528 <SendChar>
 54c:	69 91       	ld	r22, Y+
 54e:	61 11       	cpse	r22, r1
 550:	fb cf       	rjmp	.-10     	; 0x548 <SendString+0x14>
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	1f 91       	pop	r17
 558:	0f 91       	pop	r16
 55a:	08 95       	ret

0000055c <SendInteger>:
 55c:	0f 93       	push	r16
 55e:	1f 93       	push	r17
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
 568:	27 97       	sbiw	r28, 0x07	; 7
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	f8 94       	cli
 56e:	de bf       	out	0x3e, r29	; 62
 570:	0f be       	out	0x3f, r0	; 63
 572:	cd bf       	out	0x3d, r28	; 61
 574:	8c 01       	movw	r16, r24
 576:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 578:	4a e0       	ldi	r20, 0x0A	; 10
 57a:	be 01       	movw	r22, r28
 57c:	6f 5f       	subi	r22, 0xFF	; 255
 57e:	7f 4f       	sbci	r23, 0xFF	; 255
 580:	21 d2       	rcall	.+1090   	; 0x9c4 <__itoa_ncheck>
 582:	be 01       	movw	r22, r28
 584:	6f 5f       	subi	r22, 0xFF	; 255
 586:	7f 4f       	sbci	r23, 0xFF	; 255
 588:	c8 01       	movw	r24, r16
 58a:	d4 df       	rcall	.-88     	; 0x534 <SendString>
 58c:	27 96       	adiw	r28, 0x07	; 7
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	f8 94       	cli
 592:	de bf       	out	0x3e, r29	; 62
 594:	0f be       	out	0x3f, r0	; 63
 596:	cd bf       	out	0x3d, r28	; 61
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	1f 91       	pop	r17
 59e:	0f 91       	pop	r16
 5a0:	08 95       	ret

000005a2 <__subsf3>:
 5a2:	50 58       	subi	r21, 0x80	; 128

000005a4 <__addsf3>:
 5a4:	bb 27       	eor	r27, r27
 5a6:	aa 27       	eor	r26, r26
 5a8:	0e d0       	rcall	.+28     	; 0x5c6 <__addsf3x>
 5aa:	4d c1       	rjmp	.+666    	; 0x846 <__fp_round>
 5ac:	3e d1       	rcall	.+636    	; 0x82a <__fp_pscA>
 5ae:	30 f0       	brcs	.+12     	; 0x5bc <__addsf3+0x18>
 5b0:	43 d1       	rcall	.+646    	; 0x838 <__fp_pscB>
 5b2:	20 f0       	brcs	.+8      	; 0x5bc <__addsf3+0x18>
 5b4:	31 f4       	brne	.+12     	; 0x5c2 <__addsf3+0x1e>
 5b6:	9f 3f       	cpi	r25, 0xFF	; 255
 5b8:	11 f4       	brne	.+4      	; 0x5be <__addsf3+0x1a>
 5ba:	1e f4       	brtc	.+6      	; 0x5c2 <__addsf3+0x1e>
 5bc:	33 c1       	rjmp	.+614    	; 0x824 <__fp_nan>
 5be:	0e f4       	brtc	.+2      	; 0x5c2 <__addsf3+0x1e>
 5c0:	e0 95       	com	r30
 5c2:	e7 fb       	bst	r30, 7
 5c4:	29 c1       	rjmp	.+594    	; 0x818 <__fp_inf>

000005c6 <__addsf3x>:
 5c6:	e9 2f       	mov	r30, r25
 5c8:	4f d1       	rcall	.+670    	; 0x868 <__fp_split3>
 5ca:	80 f3       	brcs	.-32     	; 0x5ac <__addsf3+0x8>
 5cc:	ba 17       	cp	r27, r26
 5ce:	62 07       	cpc	r22, r18
 5d0:	73 07       	cpc	r23, r19
 5d2:	84 07       	cpc	r24, r20
 5d4:	95 07       	cpc	r25, r21
 5d6:	18 f0       	brcs	.+6      	; 0x5de <__addsf3x+0x18>
 5d8:	71 f4       	brne	.+28     	; 0x5f6 <__addsf3x+0x30>
 5da:	9e f5       	brtc	.+102    	; 0x642 <__addsf3x+0x7c>
 5dc:	67 c1       	rjmp	.+718    	; 0x8ac <__fp_zero>
 5de:	0e f4       	brtc	.+2      	; 0x5e2 <__addsf3x+0x1c>
 5e0:	e0 95       	com	r30
 5e2:	0b 2e       	mov	r0, r27
 5e4:	ba 2f       	mov	r27, r26
 5e6:	a0 2d       	mov	r26, r0
 5e8:	0b 01       	movw	r0, r22
 5ea:	b9 01       	movw	r22, r18
 5ec:	90 01       	movw	r18, r0
 5ee:	0c 01       	movw	r0, r24
 5f0:	ca 01       	movw	r24, r20
 5f2:	a0 01       	movw	r20, r0
 5f4:	11 24       	eor	r1, r1
 5f6:	ff 27       	eor	r31, r31
 5f8:	59 1b       	sub	r21, r25
 5fa:	99 f0       	breq	.+38     	; 0x622 <__addsf3x+0x5c>
 5fc:	59 3f       	cpi	r21, 0xF9	; 249
 5fe:	50 f4       	brcc	.+20     	; 0x614 <__addsf3x+0x4e>
 600:	50 3e       	cpi	r21, 0xE0	; 224
 602:	68 f1       	brcs	.+90     	; 0x65e <__addsf3x+0x98>
 604:	1a 16       	cp	r1, r26
 606:	f0 40       	sbci	r31, 0x00	; 0
 608:	a2 2f       	mov	r26, r18
 60a:	23 2f       	mov	r18, r19
 60c:	34 2f       	mov	r19, r20
 60e:	44 27       	eor	r20, r20
 610:	58 5f       	subi	r21, 0xF8	; 248
 612:	f3 cf       	rjmp	.-26     	; 0x5fa <__addsf3x+0x34>
 614:	46 95       	lsr	r20
 616:	37 95       	ror	r19
 618:	27 95       	ror	r18
 61a:	a7 95       	ror	r26
 61c:	f0 40       	sbci	r31, 0x00	; 0
 61e:	53 95       	inc	r21
 620:	c9 f7       	brne	.-14     	; 0x614 <__addsf3x+0x4e>
 622:	7e f4       	brtc	.+30     	; 0x642 <__addsf3x+0x7c>
 624:	1f 16       	cp	r1, r31
 626:	ba 0b       	sbc	r27, r26
 628:	62 0b       	sbc	r22, r18
 62a:	73 0b       	sbc	r23, r19
 62c:	84 0b       	sbc	r24, r20
 62e:	ba f0       	brmi	.+46     	; 0x65e <__addsf3x+0x98>
 630:	91 50       	subi	r25, 0x01	; 1
 632:	a1 f0       	breq	.+40     	; 0x65c <__addsf3x+0x96>
 634:	ff 0f       	add	r31, r31
 636:	bb 1f       	adc	r27, r27
 638:	66 1f       	adc	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	88 1f       	adc	r24, r24
 63e:	c2 f7       	brpl	.-16     	; 0x630 <__addsf3x+0x6a>
 640:	0e c0       	rjmp	.+28     	; 0x65e <__addsf3x+0x98>
 642:	ba 0f       	add	r27, r26
 644:	62 1f       	adc	r22, r18
 646:	73 1f       	adc	r23, r19
 648:	84 1f       	adc	r24, r20
 64a:	48 f4       	brcc	.+18     	; 0x65e <__addsf3x+0x98>
 64c:	87 95       	ror	r24
 64e:	77 95       	ror	r23
 650:	67 95       	ror	r22
 652:	b7 95       	ror	r27
 654:	f7 95       	ror	r31
 656:	9e 3f       	cpi	r25, 0xFE	; 254
 658:	08 f0       	brcs	.+2      	; 0x65c <__addsf3x+0x96>
 65a:	b3 cf       	rjmp	.-154    	; 0x5c2 <__addsf3+0x1e>
 65c:	93 95       	inc	r25
 65e:	88 0f       	add	r24, r24
 660:	08 f0       	brcs	.+2      	; 0x664 <__addsf3x+0x9e>
 662:	99 27       	eor	r25, r25
 664:	ee 0f       	add	r30, r30
 666:	97 95       	ror	r25
 668:	87 95       	ror	r24
 66a:	08 95       	ret

0000066c <__divsf3>:
 66c:	0c d0       	rcall	.+24     	; 0x686 <__divsf3x>
 66e:	eb c0       	rjmp	.+470    	; 0x846 <__fp_round>
 670:	e3 d0       	rcall	.+454    	; 0x838 <__fp_pscB>
 672:	40 f0       	brcs	.+16     	; 0x684 <__divsf3+0x18>
 674:	da d0       	rcall	.+436    	; 0x82a <__fp_pscA>
 676:	30 f0       	brcs	.+12     	; 0x684 <__divsf3+0x18>
 678:	21 f4       	brne	.+8      	; 0x682 <__divsf3+0x16>
 67a:	5f 3f       	cpi	r21, 0xFF	; 255
 67c:	19 f0       	breq	.+6      	; 0x684 <__divsf3+0x18>
 67e:	cc c0       	rjmp	.+408    	; 0x818 <__fp_inf>
 680:	51 11       	cpse	r21, r1
 682:	15 c1       	rjmp	.+554    	; 0x8ae <__fp_szero>
 684:	cf c0       	rjmp	.+414    	; 0x824 <__fp_nan>

00000686 <__divsf3x>:
 686:	f0 d0       	rcall	.+480    	; 0x868 <__fp_split3>
 688:	98 f3       	brcs	.-26     	; 0x670 <__divsf3+0x4>

0000068a <__divsf3_pse>:
 68a:	99 23       	and	r25, r25
 68c:	c9 f3       	breq	.-14     	; 0x680 <__divsf3+0x14>
 68e:	55 23       	and	r21, r21
 690:	b1 f3       	breq	.-20     	; 0x67e <__divsf3+0x12>
 692:	95 1b       	sub	r25, r21
 694:	55 0b       	sbc	r21, r21
 696:	bb 27       	eor	r27, r27
 698:	aa 27       	eor	r26, r26
 69a:	62 17       	cp	r22, r18
 69c:	73 07       	cpc	r23, r19
 69e:	84 07       	cpc	r24, r20
 6a0:	38 f0       	brcs	.+14     	; 0x6b0 <__divsf3_pse+0x26>
 6a2:	9f 5f       	subi	r25, 0xFF	; 255
 6a4:	5f 4f       	sbci	r21, 0xFF	; 255
 6a6:	22 0f       	add	r18, r18
 6a8:	33 1f       	adc	r19, r19
 6aa:	44 1f       	adc	r20, r20
 6ac:	aa 1f       	adc	r26, r26
 6ae:	a9 f3       	breq	.-22     	; 0x69a <__divsf3_pse+0x10>
 6b0:	33 d0       	rcall	.+102    	; 0x718 <__divsf3_pse+0x8e>
 6b2:	0e 2e       	mov	r0, r30
 6b4:	3a f0       	brmi	.+14     	; 0x6c4 <__divsf3_pse+0x3a>
 6b6:	e0 e8       	ldi	r30, 0x80	; 128
 6b8:	30 d0       	rcall	.+96     	; 0x71a <__divsf3_pse+0x90>
 6ba:	91 50       	subi	r25, 0x01	; 1
 6bc:	50 40       	sbci	r21, 0x00	; 0
 6be:	e6 95       	lsr	r30
 6c0:	00 1c       	adc	r0, r0
 6c2:	ca f7       	brpl	.-14     	; 0x6b6 <__divsf3_pse+0x2c>
 6c4:	29 d0       	rcall	.+82     	; 0x718 <__divsf3_pse+0x8e>
 6c6:	fe 2f       	mov	r31, r30
 6c8:	27 d0       	rcall	.+78     	; 0x718 <__divsf3_pse+0x8e>
 6ca:	66 0f       	add	r22, r22
 6cc:	77 1f       	adc	r23, r23
 6ce:	88 1f       	adc	r24, r24
 6d0:	bb 1f       	adc	r27, r27
 6d2:	26 17       	cp	r18, r22
 6d4:	37 07       	cpc	r19, r23
 6d6:	48 07       	cpc	r20, r24
 6d8:	ab 07       	cpc	r26, r27
 6da:	b0 e8       	ldi	r27, 0x80	; 128
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <__divsf3_pse+0x56>
 6de:	bb 0b       	sbc	r27, r27
 6e0:	80 2d       	mov	r24, r0
 6e2:	bf 01       	movw	r22, r30
 6e4:	ff 27       	eor	r31, r31
 6e6:	93 58       	subi	r25, 0x83	; 131
 6e8:	5f 4f       	sbci	r21, 0xFF	; 255
 6ea:	2a f0       	brmi	.+10     	; 0x6f6 <__divsf3_pse+0x6c>
 6ec:	9e 3f       	cpi	r25, 0xFE	; 254
 6ee:	51 05       	cpc	r21, r1
 6f0:	68 f0       	brcs	.+26     	; 0x70c <__divsf3_pse+0x82>
 6f2:	92 c0       	rjmp	.+292    	; 0x818 <__fp_inf>
 6f4:	dc c0       	rjmp	.+440    	; 0x8ae <__fp_szero>
 6f6:	5f 3f       	cpi	r21, 0xFF	; 255
 6f8:	ec f3       	brlt	.-6      	; 0x6f4 <__divsf3_pse+0x6a>
 6fa:	98 3e       	cpi	r25, 0xE8	; 232
 6fc:	dc f3       	brlt	.-10     	; 0x6f4 <__divsf3_pse+0x6a>
 6fe:	86 95       	lsr	r24
 700:	77 95       	ror	r23
 702:	67 95       	ror	r22
 704:	b7 95       	ror	r27
 706:	f7 95       	ror	r31
 708:	9f 5f       	subi	r25, 0xFF	; 255
 70a:	c9 f7       	brne	.-14     	; 0x6fe <__divsf3_pse+0x74>
 70c:	88 0f       	add	r24, r24
 70e:	91 1d       	adc	r25, r1
 710:	96 95       	lsr	r25
 712:	87 95       	ror	r24
 714:	97 f9       	bld	r25, 7
 716:	08 95       	ret
 718:	e1 e0       	ldi	r30, 0x01	; 1
 71a:	66 0f       	add	r22, r22
 71c:	77 1f       	adc	r23, r23
 71e:	88 1f       	adc	r24, r24
 720:	bb 1f       	adc	r27, r27
 722:	62 17       	cp	r22, r18
 724:	73 07       	cpc	r23, r19
 726:	84 07       	cpc	r24, r20
 728:	ba 07       	cpc	r27, r26
 72a:	20 f0       	brcs	.+8      	; 0x734 <__divsf3_pse+0xaa>
 72c:	62 1b       	sub	r22, r18
 72e:	73 0b       	sbc	r23, r19
 730:	84 0b       	sbc	r24, r20
 732:	ba 0b       	sbc	r27, r26
 734:	ee 1f       	adc	r30, r30
 736:	88 f7       	brcc	.-30     	; 0x71a <__divsf3_pse+0x90>
 738:	e0 95       	com	r30
 73a:	08 95       	ret

0000073c <__fixsfsi>:
 73c:	04 d0       	rcall	.+8      	; 0x746 <__fixunssfsi>
 73e:	68 94       	set
 740:	b1 11       	cpse	r27, r1
 742:	b5 c0       	rjmp	.+362    	; 0x8ae <__fp_szero>
 744:	08 95       	ret

00000746 <__fixunssfsi>:
 746:	98 d0       	rcall	.+304    	; 0x878 <__fp_splitA>
 748:	88 f0       	brcs	.+34     	; 0x76c <__fixunssfsi+0x26>
 74a:	9f 57       	subi	r25, 0x7F	; 127
 74c:	90 f0       	brcs	.+36     	; 0x772 <__fixunssfsi+0x2c>
 74e:	b9 2f       	mov	r27, r25
 750:	99 27       	eor	r25, r25
 752:	b7 51       	subi	r27, 0x17	; 23
 754:	a0 f0       	brcs	.+40     	; 0x77e <__fixunssfsi+0x38>
 756:	d1 f0       	breq	.+52     	; 0x78c <__fixunssfsi+0x46>
 758:	66 0f       	add	r22, r22
 75a:	77 1f       	adc	r23, r23
 75c:	88 1f       	adc	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	1a f0       	brmi	.+6      	; 0x768 <__fixunssfsi+0x22>
 762:	ba 95       	dec	r27
 764:	c9 f7       	brne	.-14     	; 0x758 <__fixunssfsi+0x12>
 766:	12 c0       	rjmp	.+36     	; 0x78c <__fixunssfsi+0x46>
 768:	b1 30       	cpi	r27, 0x01	; 1
 76a:	81 f0       	breq	.+32     	; 0x78c <__fixunssfsi+0x46>
 76c:	9f d0       	rcall	.+318    	; 0x8ac <__fp_zero>
 76e:	b1 e0       	ldi	r27, 0x01	; 1
 770:	08 95       	ret
 772:	9c c0       	rjmp	.+312    	; 0x8ac <__fp_zero>
 774:	67 2f       	mov	r22, r23
 776:	78 2f       	mov	r23, r24
 778:	88 27       	eor	r24, r24
 77a:	b8 5f       	subi	r27, 0xF8	; 248
 77c:	39 f0       	breq	.+14     	; 0x78c <__fixunssfsi+0x46>
 77e:	b9 3f       	cpi	r27, 0xF9	; 249
 780:	cc f3       	brlt	.-14     	; 0x774 <__fixunssfsi+0x2e>
 782:	86 95       	lsr	r24
 784:	77 95       	ror	r23
 786:	67 95       	ror	r22
 788:	b3 95       	inc	r27
 78a:	d9 f7       	brne	.-10     	; 0x782 <__fixunssfsi+0x3c>
 78c:	3e f4       	brtc	.+14     	; 0x79c <__fixunssfsi+0x56>
 78e:	90 95       	com	r25
 790:	80 95       	com	r24
 792:	70 95       	com	r23
 794:	61 95       	neg	r22
 796:	7f 4f       	sbci	r23, 0xFF	; 255
 798:	8f 4f       	sbci	r24, 0xFF	; 255
 79a:	9f 4f       	sbci	r25, 0xFF	; 255
 79c:	08 95       	ret

0000079e <__floatunsisf>:
 79e:	e8 94       	clt
 7a0:	09 c0       	rjmp	.+18     	; 0x7b4 <__floatsisf+0x12>

000007a2 <__floatsisf>:
 7a2:	97 fb       	bst	r25, 7
 7a4:	3e f4       	brtc	.+14     	; 0x7b4 <__floatsisf+0x12>
 7a6:	90 95       	com	r25
 7a8:	80 95       	com	r24
 7aa:	70 95       	com	r23
 7ac:	61 95       	neg	r22
 7ae:	7f 4f       	sbci	r23, 0xFF	; 255
 7b0:	8f 4f       	sbci	r24, 0xFF	; 255
 7b2:	9f 4f       	sbci	r25, 0xFF	; 255
 7b4:	99 23       	and	r25, r25
 7b6:	a9 f0       	breq	.+42     	; 0x7e2 <__floatsisf+0x40>
 7b8:	f9 2f       	mov	r31, r25
 7ba:	96 e9       	ldi	r25, 0x96	; 150
 7bc:	bb 27       	eor	r27, r27
 7be:	93 95       	inc	r25
 7c0:	f6 95       	lsr	r31
 7c2:	87 95       	ror	r24
 7c4:	77 95       	ror	r23
 7c6:	67 95       	ror	r22
 7c8:	b7 95       	ror	r27
 7ca:	f1 11       	cpse	r31, r1
 7cc:	f8 cf       	rjmp	.-16     	; 0x7be <__floatsisf+0x1c>
 7ce:	fa f4       	brpl	.+62     	; 0x80e <__floatsisf+0x6c>
 7d0:	bb 0f       	add	r27, r27
 7d2:	11 f4       	brne	.+4      	; 0x7d8 <__floatsisf+0x36>
 7d4:	60 ff       	sbrs	r22, 0
 7d6:	1b c0       	rjmp	.+54     	; 0x80e <__floatsisf+0x6c>
 7d8:	6f 5f       	subi	r22, 0xFF	; 255
 7da:	7f 4f       	sbci	r23, 0xFF	; 255
 7dc:	8f 4f       	sbci	r24, 0xFF	; 255
 7de:	9f 4f       	sbci	r25, 0xFF	; 255
 7e0:	16 c0       	rjmp	.+44     	; 0x80e <__floatsisf+0x6c>
 7e2:	88 23       	and	r24, r24
 7e4:	11 f0       	breq	.+4      	; 0x7ea <__floatsisf+0x48>
 7e6:	96 e9       	ldi	r25, 0x96	; 150
 7e8:	11 c0       	rjmp	.+34     	; 0x80c <__floatsisf+0x6a>
 7ea:	77 23       	and	r23, r23
 7ec:	21 f0       	breq	.+8      	; 0x7f6 <__floatsisf+0x54>
 7ee:	9e e8       	ldi	r25, 0x8E	; 142
 7f0:	87 2f       	mov	r24, r23
 7f2:	76 2f       	mov	r23, r22
 7f4:	05 c0       	rjmp	.+10     	; 0x800 <__floatsisf+0x5e>
 7f6:	66 23       	and	r22, r22
 7f8:	71 f0       	breq	.+28     	; 0x816 <__floatsisf+0x74>
 7fa:	96 e8       	ldi	r25, 0x86	; 134
 7fc:	86 2f       	mov	r24, r22
 7fe:	70 e0       	ldi	r23, 0x00	; 0
 800:	60 e0       	ldi	r22, 0x00	; 0
 802:	2a f0       	brmi	.+10     	; 0x80e <__floatsisf+0x6c>
 804:	9a 95       	dec	r25
 806:	66 0f       	add	r22, r22
 808:	77 1f       	adc	r23, r23
 80a:	88 1f       	adc	r24, r24
 80c:	da f7       	brpl	.-10     	; 0x804 <__floatsisf+0x62>
 80e:	88 0f       	add	r24, r24
 810:	96 95       	lsr	r25
 812:	87 95       	ror	r24
 814:	97 f9       	bld	r25, 7
 816:	08 95       	ret

00000818 <__fp_inf>:
 818:	97 f9       	bld	r25, 7
 81a:	9f 67       	ori	r25, 0x7F	; 127
 81c:	80 e8       	ldi	r24, 0x80	; 128
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	60 e0       	ldi	r22, 0x00	; 0
 822:	08 95       	ret

00000824 <__fp_nan>:
 824:	9f ef       	ldi	r25, 0xFF	; 255
 826:	80 ec       	ldi	r24, 0xC0	; 192
 828:	08 95       	ret

0000082a <__fp_pscA>:
 82a:	00 24       	eor	r0, r0
 82c:	0a 94       	dec	r0
 82e:	16 16       	cp	r1, r22
 830:	17 06       	cpc	r1, r23
 832:	18 06       	cpc	r1, r24
 834:	09 06       	cpc	r0, r25
 836:	08 95       	ret

00000838 <__fp_pscB>:
 838:	00 24       	eor	r0, r0
 83a:	0a 94       	dec	r0
 83c:	12 16       	cp	r1, r18
 83e:	13 06       	cpc	r1, r19
 840:	14 06       	cpc	r1, r20
 842:	05 06       	cpc	r0, r21
 844:	08 95       	ret

00000846 <__fp_round>:
 846:	09 2e       	mov	r0, r25
 848:	03 94       	inc	r0
 84a:	00 0c       	add	r0, r0
 84c:	11 f4       	brne	.+4      	; 0x852 <__fp_round+0xc>
 84e:	88 23       	and	r24, r24
 850:	52 f0       	brmi	.+20     	; 0x866 <__fp_round+0x20>
 852:	bb 0f       	add	r27, r27
 854:	40 f4       	brcc	.+16     	; 0x866 <__fp_round+0x20>
 856:	bf 2b       	or	r27, r31
 858:	11 f4       	brne	.+4      	; 0x85e <__fp_round+0x18>
 85a:	60 ff       	sbrs	r22, 0
 85c:	04 c0       	rjmp	.+8      	; 0x866 <__fp_round+0x20>
 85e:	6f 5f       	subi	r22, 0xFF	; 255
 860:	7f 4f       	sbci	r23, 0xFF	; 255
 862:	8f 4f       	sbci	r24, 0xFF	; 255
 864:	9f 4f       	sbci	r25, 0xFF	; 255
 866:	08 95       	ret

00000868 <__fp_split3>:
 868:	57 fd       	sbrc	r21, 7
 86a:	90 58       	subi	r25, 0x80	; 128
 86c:	44 0f       	add	r20, r20
 86e:	55 1f       	adc	r21, r21
 870:	59 f0       	breq	.+22     	; 0x888 <__fp_splitA+0x10>
 872:	5f 3f       	cpi	r21, 0xFF	; 255
 874:	71 f0       	breq	.+28     	; 0x892 <__fp_splitA+0x1a>
 876:	47 95       	ror	r20

00000878 <__fp_splitA>:
 878:	88 0f       	add	r24, r24
 87a:	97 fb       	bst	r25, 7
 87c:	99 1f       	adc	r25, r25
 87e:	61 f0       	breq	.+24     	; 0x898 <__fp_splitA+0x20>
 880:	9f 3f       	cpi	r25, 0xFF	; 255
 882:	79 f0       	breq	.+30     	; 0x8a2 <__fp_splitA+0x2a>
 884:	87 95       	ror	r24
 886:	08 95       	ret
 888:	12 16       	cp	r1, r18
 88a:	13 06       	cpc	r1, r19
 88c:	14 06       	cpc	r1, r20
 88e:	55 1f       	adc	r21, r21
 890:	f2 cf       	rjmp	.-28     	; 0x876 <__fp_split3+0xe>
 892:	46 95       	lsr	r20
 894:	f1 df       	rcall	.-30     	; 0x878 <__fp_splitA>
 896:	08 c0       	rjmp	.+16     	; 0x8a8 <__fp_splitA+0x30>
 898:	16 16       	cp	r1, r22
 89a:	17 06       	cpc	r1, r23
 89c:	18 06       	cpc	r1, r24
 89e:	99 1f       	adc	r25, r25
 8a0:	f1 cf       	rjmp	.-30     	; 0x884 <__fp_splitA+0xc>
 8a2:	86 95       	lsr	r24
 8a4:	71 05       	cpc	r23, r1
 8a6:	61 05       	cpc	r22, r1
 8a8:	08 94       	sec
 8aa:	08 95       	ret

000008ac <__fp_zero>:
 8ac:	e8 94       	clt

000008ae <__fp_szero>:
 8ae:	bb 27       	eor	r27, r27
 8b0:	66 27       	eor	r22, r22
 8b2:	77 27       	eor	r23, r23
 8b4:	cb 01       	movw	r24, r22
 8b6:	97 f9       	bld	r25, 7
 8b8:	08 95       	ret

000008ba <__mulsf3>:
 8ba:	0b d0       	rcall	.+22     	; 0x8d2 <__mulsf3x>
 8bc:	c4 cf       	rjmp	.-120    	; 0x846 <__fp_round>
 8be:	b5 df       	rcall	.-150    	; 0x82a <__fp_pscA>
 8c0:	28 f0       	brcs	.+10     	; 0x8cc <__mulsf3+0x12>
 8c2:	ba df       	rcall	.-140    	; 0x838 <__fp_pscB>
 8c4:	18 f0       	brcs	.+6      	; 0x8cc <__mulsf3+0x12>
 8c6:	95 23       	and	r25, r21
 8c8:	09 f0       	breq	.+2      	; 0x8cc <__mulsf3+0x12>
 8ca:	a6 cf       	rjmp	.-180    	; 0x818 <__fp_inf>
 8cc:	ab cf       	rjmp	.-170    	; 0x824 <__fp_nan>
 8ce:	11 24       	eor	r1, r1
 8d0:	ee cf       	rjmp	.-36     	; 0x8ae <__fp_szero>

000008d2 <__mulsf3x>:
 8d2:	ca df       	rcall	.-108    	; 0x868 <__fp_split3>
 8d4:	a0 f3       	brcs	.-24     	; 0x8be <__mulsf3+0x4>

000008d6 <__mulsf3_pse>:
 8d6:	95 9f       	mul	r25, r21
 8d8:	d1 f3       	breq	.-12     	; 0x8ce <__mulsf3+0x14>
 8da:	95 0f       	add	r25, r21
 8dc:	50 e0       	ldi	r21, 0x00	; 0
 8de:	55 1f       	adc	r21, r21
 8e0:	62 9f       	mul	r22, r18
 8e2:	f0 01       	movw	r30, r0
 8e4:	72 9f       	mul	r23, r18
 8e6:	bb 27       	eor	r27, r27
 8e8:	f0 0d       	add	r31, r0
 8ea:	b1 1d       	adc	r27, r1
 8ec:	63 9f       	mul	r22, r19
 8ee:	aa 27       	eor	r26, r26
 8f0:	f0 0d       	add	r31, r0
 8f2:	b1 1d       	adc	r27, r1
 8f4:	aa 1f       	adc	r26, r26
 8f6:	64 9f       	mul	r22, r20
 8f8:	66 27       	eor	r22, r22
 8fa:	b0 0d       	add	r27, r0
 8fc:	a1 1d       	adc	r26, r1
 8fe:	66 1f       	adc	r22, r22
 900:	82 9f       	mul	r24, r18
 902:	22 27       	eor	r18, r18
 904:	b0 0d       	add	r27, r0
 906:	a1 1d       	adc	r26, r1
 908:	62 1f       	adc	r22, r18
 90a:	73 9f       	mul	r23, r19
 90c:	b0 0d       	add	r27, r0
 90e:	a1 1d       	adc	r26, r1
 910:	62 1f       	adc	r22, r18
 912:	83 9f       	mul	r24, r19
 914:	a0 0d       	add	r26, r0
 916:	61 1d       	adc	r22, r1
 918:	22 1f       	adc	r18, r18
 91a:	74 9f       	mul	r23, r20
 91c:	33 27       	eor	r19, r19
 91e:	a0 0d       	add	r26, r0
 920:	61 1d       	adc	r22, r1
 922:	23 1f       	adc	r18, r19
 924:	84 9f       	mul	r24, r20
 926:	60 0d       	add	r22, r0
 928:	21 1d       	adc	r18, r1
 92a:	82 2f       	mov	r24, r18
 92c:	76 2f       	mov	r23, r22
 92e:	6a 2f       	mov	r22, r26
 930:	11 24       	eor	r1, r1
 932:	9f 57       	subi	r25, 0x7F	; 127
 934:	50 40       	sbci	r21, 0x00	; 0
 936:	8a f0       	brmi	.+34     	; 0x95a <__mulsf3_pse+0x84>
 938:	e1 f0       	breq	.+56     	; 0x972 <__mulsf3_pse+0x9c>
 93a:	88 23       	and	r24, r24
 93c:	4a f0       	brmi	.+18     	; 0x950 <__mulsf3_pse+0x7a>
 93e:	ee 0f       	add	r30, r30
 940:	ff 1f       	adc	r31, r31
 942:	bb 1f       	adc	r27, r27
 944:	66 1f       	adc	r22, r22
 946:	77 1f       	adc	r23, r23
 948:	88 1f       	adc	r24, r24
 94a:	91 50       	subi	r25, 0x01	; 1
 94c:	50 40       	sbci	r21, 0x00	; 0
 94e:	a9 f7       	brne	.-22     	; 0x93a <__mulsf3_pse+0x64>
 950:	9e 3f       	cpi	r25, 0xFE	; 254
 952:	51 05       	cpc	r21, r1
 954:	70 f0       	brcs	.+28     	; 0x972 <__mulsf3_pse+0x9c>
 956:	60 cf       	rjmp	.-320    	; 0x818 <__fp_inf>
 958:	aa cf       	rjmp	.-172    	; 0x8ae <__fp_szero>
 95a:	5f 3f       	cpi	r21, 0xFF	; 255
 95c:	ec f3       	brlt	.-6      	; 0x958 <__mulsf3_pse+0x82>
 95e:	98 3e       	cpi	r25, 0xE8	; 232
 960:	dc f3       	brlt	.-10     	; 0x958 <__mulsf3_pse+0x82>
 962:	86 95       	lsr	r24
 964:	77 95       	ror	r23
 966:	67 95       	ror	r22
 968:	b7 95       	ror	r27
 96a:	f7 95       	ror	r31
 96c:	e7 95       	ror	r30
 96e:	9f 5f       	subi	r25, 0xFF	; 255
 970:	c1 f7       	brne	.-16     	; 0x962 <__mulsf3_pse+0x8c>
 972:	fe 2b       	or	r31, r30
 974:	88 0f       	add	r24, r24
 976:	91 1d       	adc	r25, r1
 978:	96 95       	lsr	r25
 97a:	87 95       	ror	r24
 97c:	97 f9       	bld	r25, 7
 97e:	08 95       	ret

00000980 <__udivmodsi4>:
 980:	a1 e2       	ldi	r26, 0x21	; 33
 982:	1a 2e       	mov	r1, r26
 984:	aa 1b       	sub	r26, r26
 986:	bb 1b       	sub	r27, r27
 988:	fd 01       	movw	r30, r26
 98a:	0d c0       	rjmp	.+26     	; 0x9a6 <__udivmodsi4_ep>

0000098c <__udivmodsi4_loop>:
 98c:	aa 1f       	adc	r26, r26
 98e:	bb 1f       	adc	r27, r27
 990:	ee 1f       	adc	r30, r30
 992:	ff 1f       	adc	r31, r31
 994:	a2 17       	cp	r26, r18
 996:	b3 07       	cpc	r27, r19
 998:	e4 07       	cpc	r30, r20
 99a:	f5 07       	cpc	r31, r21
 99c:	20 f0       	brcs	.+8      	; 0x9a6 <__udivmodsi4_ep>
 99e:	a2 1b       	sub	r26, r18
 9a0:	b3 0b       	sbc	r27, r19
 9a2:	e4 0b       	sbc	r30, r20
 9a4:	f5 0b       	sbc	r31, r21

000009a6 <__udivmodsi4_ep>:
 9a6:	66 1f       	adc	r22, r22
 9a8:	77 1f       	adc	r23, r23
 9aa:	88 1f       	adc	r24, r24
 9ac:	99 1f       	adc	r25, r25
 9ae:	1a 94       	dec	r1
 9b0:	69 f7       	brne	.-38     	; 0x98c <__udivmodsi4_loop>
 9b2:	60 95       	com	r22
 9b4:	70 95       	com	r23
 9b6:	80 95       	com	r24
 9b8:	90 95       	com	r25
 9ba:	9b 01       	movw	r18, r22
 9bc:	ac 01       	movw	r20, r24
 9be:	bd 01       	movw	r22, r26
 9c0:	cf 01       	movw	r24, r30
 9c2:	08 95       	ret

000009c4 <__itoa_ncheck>:
 9c4:	bb 27       	eor	r27, r27
 9c6:	4a 30       	cpi	r20, 0x0A	; 10
 9c8:	31 f4       	brne	.+12     	; 0x9d6 <__itoa_ncheck+0x12>
 9ca:	99 23       	and	r25, r25
 9cc:	22 f4       	brpl	.+8      	; 0x9d6 <__itoa_ncheck+0x12>
 9ce:	bd e2       	ldi	r27, 0x2D	; 45
 9d0:	90 95       	com	r25
 9d2:	81 95       	neg	r24
 9d4:	9f 4f       	sbci	r25, 0xFF	; 255
 9d6:	01 c0       	rjmp	.+2      	; 0x9da <__utoa_common>

000009d8 <__utoa_ncheck>:
 9d8:	bb 27       	eor	r27, r27

000009da <__utoa_common>:
 9da:	fb 01       	movw	r30, r22
 9dc:	55 27       	eor	r21, r21
 9de:	aa 27       	eor	r26, r26
 9e0:	88 0f       	add	r24, r24
 9e2:	99 1f       	adc	r25, r25
 9e4:	aa 1f       	adc	r26, r26
 9e6:	a4 17       	cp	r26, r20
 9e8:	10 f0       	brcs	.+4      	; 0x9ee <__utoa_common+0x14>
 9ea:	a4 1b       	sub	r26, r20
 9ec:	83 95       	inc	r24
 9ee:	50 51       	subi	r21, 0x10	; 16
 9f0:	b9 f7       	brne	.-18     	; 0x9e0 <__utoa_common+0x6>
 9f2:	a0 5d       	subi	r26, 0xD0	; 208
 9f4:	aa 33       	cpi	r26, 0x3A	; 58
 9f6:	08 f0       	brcs	.+2      	; 0x9fa <__utoa_common+0x20>
 9f8:	a9 5d       	subi	r26, 0xD9	; 217
 9fa:	a1 93       	st	Z+, r26
 9fc:	00 97       	sbiw	r24, 0x00	; 0
 9fe:	79 f7       	brne	.-34     	; 0x9de <__utoa_common+0x4>
 a00:	b1 11       	cpse	r27, r1
 a02:	b1 93       	st	Z+, r27
 a04:	11 92       	st	Z+, r1
 a06:	cb 01       	movw	r24, r22
 a08:	00 c0       	rjmp	.+0      	; 0xa0a <strrev>

00000a0a <strrev>:
 a0a:	dc 01       	movw	r26, r24
 a0c:	fc 01       	movw	r30, r24
 a0e:	67 2f       	mov	r22, r23
 a10:	71 91       	ld	r23, Z+
 a12:	77 23       	and	r23, r23
 a14:	e1 f7       	brne	.-8      	; 0xa0e <strrev+0x4>
 a16:	32 97       	sbiw	r30, 0x02	; 2
 a18:	04 c0       	rjmp	.+8      	; 0xa22 <strrev+0x18>
 a1a:	7c 91       	ld	r23, X
 a1c:	6d 93       	st	X+, r22
 a1e:	70 83       	st	Z, r23
 a20:	62 91       	ld	r22, -Z
 a22:	ae 17       	cp	r26, r30
 a24:	bf 07       	cpc	r27, r31
 a26:	c8 f3       	brcs	.-14     	; 0xa1a <strrev+0x10>
 a28:	08 95       	ret

00000a2a <eeprom_read_dword>:
 a2a:	a6 e1       	ldi	r26, 0x16	; 22
 a2c:	b0 e0       	ldi	r27, 0x00	; 0
 a2e:	44 e0       	ldi	r20, 0x04	; 4
 a30:	50 e0       	ldi	r21, 0x00	; 0
 a32:	0a c0       	rjmp	.+20     	; 0xa48 <eeprom_read_blraw>

00000a34 <eeprom_write_dword>:
 a34:	24 2f       	mov	r18, r20
 a36:	17 d0       	rcall	.+46     	; 0xa66 <eeprom_write_r18>
 a38:	25 2f       	mov	r18, r21
 a3a:	15 d0       	rcall	.+42     	; 0xa66 <eeprom_write_r18>
 a3c:	00 c0       	rjmp	.+0      	; 0xa3e <eeprom_write_word>

00000a3e <eeprom_write_word>:
 a3e:	12 d0       	rcall	.+36     	; 0xa64 <eeprom_write_byte>
 a40:	27 2f       	mov	r18, r23
 a42:	11 c0       	rjmp	.+34     	; 0xa66 <eeprom_write_r18>

00000a44 <eeprom_read_block>:
 a44:	dc 01       	movw	r26, r24
 a46:	cb 01       	movw	r24, r22

00000a48 <eeprom_read_blraw>:
 a48:	fc 01       	movw	r30, r24
 a4a:	f9 99       	sbic	0x1f, 1	; 31
 a4c:	fe cf       	rjmp	.-4      	; 0xa4a <eeprom_read_blraw+0x2>
 a4e:	06 c0       	rjmp	.+12     	; 0xa5c <eeprom_read_blraw+0x14>
 a50:	f2 bd       	out	0x22, r31	; 34
 a52:	e1 bd       	out	0x21, r30	; 33
 a54:	f8 9a       	sbi	0x1f, 0	; 31
 a56:	31 96       	adiw	r30, 0x01	; 1
 a58:	00 b4       	in	r0, 0x20	; 32
 a5a:	0d 92       	st	X+, r0
 a5c:	41 50       	subi	r20, 0x01	; 1
 a5e:	50 40       	sbci	r21, 0x00	; 0
 a60:	b8 f7       	brcc	.-18     	; 0xa50 <eeprom_read_blraw+0x8>
 a62:	08 95       	ret

00000a64 <eeprom_write_byte>:
 a64:	26 2f       	mov	r18, r22

00000a66 <eeprom_write_r18>:
 a66:	f9 99       	sbic	0x1f, 1	; 31
 a68:	fe cf       	rjmp	.-4      	; 0xa66 <eeprom_write_r18>
 a6a:	1f ba       	out	0x1f, r1	; 31
 a6c:	92 bd       	out	0x22, r25	; 34
 a6e:	81 bd       	out	0x21, r24	; 33
 a70:	20 bd       	out	0x20, r18	; 32
 a72:	0f b6       	in	r0, 0x3f	; 63
 a74:	f8 94       	cli
 a76:	fa 9a       	sbi	0x1f, 2	; 31
 a78:	f9 9a       	sbi	0x1f, 1	; 31
 a7a:	0f be       	out	0x3f, r0	; 63
 a7c:	01 96       	adiw	r24, 0x01	; 1
 a7e:	08 95       	ret

00000a80 <_exit>:
 a80:	f8 94       	cli

00000a82 <__stop_program>:
 a82:	ff cf       	rjmp	.-2      	; 0xa82 <__stop_program>
