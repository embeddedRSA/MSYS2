
tacho2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800200  00000b4a  00000bfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b4a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080022c  0080022c  00000c2a  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  00000c2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000c2e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c60  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000140  00000000  00000000  00000ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001965  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001096  00000000  00000000  00002745  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a45  00000000  00000000  000037db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000210  00000000  00000000  00004220  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000081b  00000000  00000000  00004430  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000714  00000000  00000000  00004c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000090  00000000  00000000  0000535f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	09 c1       	rjmp	.+530    	; 0x224 <__vector_4>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c1       	rjmp	.+588    	; 0x28a <__vector_15>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e4       	ldi	r30, 0x4A	; 74
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 32       	cpi	r26, 0x2C	; 44
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e2       	ldi	r26, 0x2C	; 44
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 34       	cpi	r26, 0x4E	; 78
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	12 c5       	rjmp	.+2596   	; 0xb46 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:

int main(void)
{
	
	//uart setup
	InitUART(myUART, 9600, 8, 'N');
 124:	0e e4       	ldi	r16, 0x4E	; 78
 126:	28 e0       	ldi	r18, 0x08	; 8
 128:	40 e8       	ldi	r20, 0x80	; 128
 12a:	55 e2       	ldi	r21, 0x25	; 37
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	80 ec       	ldi	r24, 0xC0	; 192
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	dd d1       	rcall	.+954    	; 0x4f0 <InitUART>
	checkpointCnt = 0;
 136:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <checkpointCnt>
	speedSensor = speedSensor_getDriver(65);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	82 e8       	ldi	r24, 0x82	; 130
 140:	92 e4       	ldi	r25, 0x42	; 66
 142:	72 d1       	rcall	.+740    	; 0x428 <speedSensor_getDriver>
 144:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <__data_end+0x1>
 148:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <__data_end>
	sei();
 14c:	78 94       	sei
	while (1)
	{			
		PORTB &= ~(1<<PB5); //debug 
 14e:	2d 98       	cbi	0x05, 5	; 5
		
		SendString(myUART, "KMH: ");
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	72 e0       	ldi	r23, 0x02	; 2
 154:	80 ec       	ldi	r24, 0xC0	; 192
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	24 d2       	rcall	.+1096   	; 0x5a2 <SendString>
		float f = speedSensor->getSpeedInKmh();
 15a:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <__data_end>
 15e:	f0 91 2d 02 	lds	r31, 0x022D	; 0x80022d <__data_end+0x1>
 162:	06 80       	ldd	r0, Z+6	; 0x06
 164:	f7 81       	ldd	r31, Z+7	; 0x07
 166:	e0 2d       	mov	r30, r0
 168:	19 95       	eicall
 16a:	4b 01       	movw	r8, r22
		//float f = 100.10;
		int r = (int)f;
 16c:	5c 01       	movw	r10, r24
 16e:	1d d3       	rcall	.+1594   	; 0x7aa <__fixsfsi>
 170:	6b 01       	movw	r12, r22
		int d = (f-r)*100;
		SendInteger(myUART,r);
 172:	7c 01       	movw	r14, r24
 174:	80 ec       	ldi	r24, 0xC0	; 192
 176:	90 e0       	ldi	r25, 0x00	; 0
		SendChar(myUART,'.');
 178:	28 d2       	rcall	.+1104   	; 0x5ca <SendInteger>
 17a:	6e e2       	ldi	r22, 0x2E	; 46
 17c:	80 ec       	ldi	r24, 0xC0	; 192
 17e:	90 e0       	ldi	r25, 0x00	; 0
		SendInteger(myUART,d);
 180:	0a d2       	rcall	.+1044   	; 0x596 <SendChar>
 182:	b6 01       	movw	r22, r12
 184:	dd 0c       	add	r13, r13
 186:	88 0b       	sbc	r24, r24
 188:	99 0b       	sbc	r25, r25
 18a:	42 d3       	rcall	.+1668   	; 0x810 <__floatsisf>
 18c:	9b 01       	movw	r18, r22
 18e:	ac 01       	movw	r20, r24
 190:	c5 01       	movw	r24, r10
 192:	b4 01       	movw	r22, r8
 194:	3d d2       	rcall	.+1146   	; 0x610 <__subsf3>
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	48 ec       	ldi	r20, 0xC8	; 200
 19c:	52 e4       	ldi	r21, 0x42	; 66
 19e:	c8 d3       	rcall	.+1936   	; 0x930 <__mulsf3>
 1a0:	04 d3       	rcall	.+1544   	; 0x7aa <__fixsfsi>
 1a2:	80 ec       	ldi	r24, 0xC0	; 192
 1a4:	90 e0       	ldi	r25, 0x00	; 0
		
		SendString(myUART, "     KHM_TOTAL: ");
 1a6:	11 d2       	rcall	.+1058   	; 0x5ca <SendInteger>
 1a8:	66 e0       	ldi	r22, 0x06	; 6
 1aa:	72 e0       	ldi	r23, 0x02	; 2
 1ac:	80 ec       	ldi	r24, 0xC0	; 192
 1ae:	90 e0       	ldi	r25, 0x00	; 0
		f = speedSensor->getTripDistance();
 1b0:	f8 d1       	rcall	.+1008   	; 0x5a2 <SendString>
 1b2:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <__data_end>
 1b6:	f0 91 2d 02 	lds	r31, 0x022D	; 0x80022d <__data_end+0x1>
 1ba:	00 84       	ldd	r0, Z+8	; 0x08
 1bc:	f1 85       	ldd	r31, Z+9	; 0x09
 1be:	e0 2d       	mov	r30, r0
		//f = 12.98;
		r = (int)f;
 1c0:	19 95       	eicall
 1c2:	4b 01       	movw	r8, r22
 1c4:	5c 01       	movw	r10, r24
		d = (f-r)*100;
		SendInteger(myUART,r);
 1c6:	f1 d2       	rcall	.+1506   	; 0x7aa <__fixsfsi>
 1c8:	6b 01       	movw	r12, r22
 1ca:	7c 01       	movw	r14, r24
		SendChar(myUART,'.');
 1cc:	80 ec       	ldi	r24, 0xC0	; 192
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	fc d1       	rcall	.+1016   	; 0x5ca <SendInteger>
 1d2:	6e e2       	ldi	r22, 0x2E	; 46
		SendInteger(myUART,d);
 1d4:	80 ec       	ldi	r24, 0xC0	; 192
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	de d1       	rcall	.+956    	; 0x596 <SendChar>
 1da:	b6 01       	movw	r22, r12
 1dc:	dd 0c       	add	r13, r13
 1de:	88 0b       	sbc	r24, r24
 1e0:	99 0b       	sbc	r25, r25
 1e2:	16 d3       	rcall	.+1580   	; 0x810 <__floatsisf>
 1e4:	9b 01       	movw	r18, r22
 1e6:	ac 01       	movw	r20, r24
 1e8:	c5 01       	movw	r24, r10
 1ea:	b4 01       	movw	r22, r8
 1ec:	11 d2       	rcall	.+1058   	; 0x610 <__subsf3>
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	48 ec       	ldi	r20, 0xC8	; 200
 1f4:	52 e4       	ldi	r21, 0x42	; 66
 1f6:	9c d3       	rcall	.+1848   	; 0x930 <__mulsf3>
 1f8:	d8 d2       	rcall	.+1456   	; 0x7aa <__fixsfsi>
 1fa:	80 ec       	ldi	r24, 0xC0	; 192
		SendChar(myUART,'\r'); //newline
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	e5 d1       	rcall	.+970    	; 0x5ca <SendInteger>
 200:	6d e0       	ldi	r22, 0x0D	; 13
 202:	80 ec       	ldi	r24, 0xC0	; 192
 204:	90 e0       	ldi	r25, 0x00	; 0
		SendChar(myUART,'\n'); //newline
 206:	c7 d1       	rcall	.+910    	; 0x596 <SendChar>
 208:	6a e0       	ldi	r22, 0x0A	; 10
 20a:	80 ec       	ldi	r24, 0xC0	; 192
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	c3 d1       	rcall	.+902    	; 0x596 <SendChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 210:	2f ef       	ldi	r18, 0xFF	; 255
 212:	83 ed       	ldi	r24, 0xD3	; 211
 214:	90 e3       	ldi	r25, 0x30	; 48
 216:	21 50       	subi	r18, 0x01	; 1
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <main+0xf2>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0xfc>
 220:	00 00       	nop
 222:	95 cf       	rjmp	.-214    	; 0x14e <main+0x2a>

00000224 <__vector_4>:
	}
}


ISR(INT3_vect) //PE4 
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	0b b6       	in	r0, 0x3b	; 59
 230:	0f 92       	push	r0
 232:	2f 93       	push	r18
 234:	3f 93       	push	r19
 236:	4f 93       	push	r20
 238:	5f 93       	push	r21
 23a:	6f 93       	push	r22
 23c:	7f 93       	push	r23
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	af 93       	push	r26
 244:	bf 93       	push	r27
 246:	ef 93       	push	r30
 248:	ff 93       	push	r31
	speedSensor->updateMilestoneCount();
 24a:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <__data_end>
 24e:	f0 91 2d 02 	lds	r31, 0x022D	; 0x80022d <__data_end+0x1>
 252:	02 80       	ldd	r0, Z+2	; 0x02
 254:	f3 81       	ldd	r31, Z+3	; 0x03
 256:	e0 2d       	mov	r30, r0
 258:	19 95       	eicall
	revolutionsForCalc++; //Counts up the revolutions for speed calculation.
 25a:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <revolutionsForCalc>
 25e:	8f 5f       	subi	r24, 0xFF	; 255
 260:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <revolutionsForCalc>
}
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	bf 91       	pop	r27
 26a:	af 91       	pop	r26
 26c:	9f 91       	pop	r25
 26e:	8f 91       	pop	r24
 270:	7f 91       	pop	r23
 272:	6f 91       	pop	r22
 274:	5f 91       	pop	r21
 276:	4f 91       	pop	r20
 278:	3f 91       	pop	r19
 27a:	2f 91       	pop	r18
 27c:	0f 90       	pop	r0
 27e:	0b be       	out	0x3b, r0	; 59
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <__vector_15>:


//TIMER 2 interrupts every second to measure how many revolutions the wheel has made.
ISR(TIMER2_OVF_vect)
{
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	0b b6       	in	r0, 0x3b	; 59
 296:	0f 92       	push	r0
 298:	2f 93       	push	r18
 29a:	3f 93       	push	r19
 29c:	4f 93       	push	r20
 29e:	5f 93       	push	r21
 2a0:	6f 93       	push	r22
 2a2:	7f 93       	push	r23
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	af 93       	push	r26
 2aa:	bf 93       	push	r27
 2ac:	ef 93       	push	r30
 2ae:	ff 93       	push	r31
	// After 62500 interrupts overflows the timer counts another timer to get other times. 
	// Because of CPU clock and prescaling 8bit timer overflows every 16.063 us. Delay=prescaler*(OCRn+1)/fcpu
	timerOverflows++;
 2b0:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <timerOverflows>
 2b4:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <timerOverflows+0x1>
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <timerOverflows+0x1>
 2be:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <timerOverflows>
	
	if (timerOverflows == 62500)	// 16.063us*62500=1.004s
 2c2:	84 32       	cpi	r24, 0x24	; 36
 2c4:	94 4f       	sbci	r25, 0xF4	; 244
 2c6:	b1 f4       	brne	.+44     	; 0x2f4 <__vector_15+0x6a>
	{
		timerOverflows = 0; //reset timer
 2c8:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <timerOverflows+0x1>
 2cc:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <timerOverflows>
		PORTB |=(1<<PB5); //debug
 2d0:	2d 9a       	sbi	0x05, 5	; 5
		
		speedSensor->updateRevolutionCount(revolutionsForCalc);
 2d2:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <__data_end>
 2d6:	f0 91 2d 02 	lds	r31, 0x022D	; 0x80022d <__data_end+0x1>
 2da:	01 90       	ld	r0, Z+
 2dc:	f0 81       	ld	r31, Z
 2de:	e0 2d       	mov	r30, r0
 2e0:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <revolutionsForCalc>
 2e4:	19 95       	eicall
		revolutionsForCalc = 0; //Resetting after getting value for KHM calculation  
 2e6:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <revolutionsForCalc>
		timerCount=0; //Resetting before getting value.
		checkpointCnt++;
 2ea:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <checkpointCnt>
 2ee:	8f 5f       	subi	r24, 0xFF	; 255
 2f0:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <checkpointCnt>
	}
	
	if (checkpointCnt>60) //Save milestone to EEPROM every minute
 2f4:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <checkpointCnt>
 2f8:	8d 33       	cpi	r24, 0x3D	; 61
 2fa:	78 f0       	brcs	.+30     	; 0x31a <__vector_15+0x90>
	{
		checkpointCnt = 0;
 2fc:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <checkpointCnt>
		speedSensor->saveMilestoneCount();
 300:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <__data_end>
 304:	f0 91 2d 02 	lds	r31, 0x022D	; 0x80022d <__data_end+0x1>
 308:	04 80       	ldd	r0, Z+4	; 0x04
 30a:	f5 81       	ldd	r31, Z+5	; 0x05
 30c:	e0 2d       	mov	r30, r0
 30e:	19 95       	eicall
		SendString(myUART, "IM SAVING TO EEPROM ");
 310:	67 e1       	ldi	r22, 0x17	; 23
 312:	72 e0       	ldi	r23, 0x02	; 2
 314:	80 ec       	ldi	r24, 0xC0	; 192
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	44 d1       	rcall	.+648    	; 0x5a2 <SendString>
	}

 31a:	ff 91       	pop	r31
 31c:	ef 91       	pop	r30
 31e:	bf 91       	pop	r27
 320:	af 91       	pop	r26
 322:	9f 91       	pop	r25
 324:	8f 91       	pop	r24
 326:	7f 91       	pop	r23
 328:	6f 91       	pop	r22
 32a:	5f 91       	pop	r21
 32c:	4f 91       	pop	r20
 32e:	3f 91       	pop	r19
 330:	2f 91       	pop	r18
 332:	0f 90       	pop	r0
 334:	0b be       	out	0x3b, r0	; 59
 336:	0f 90       	pop	r0
 338:	0f be       	out	0x3f, r0	; 63
 33a:	0f 90       	pop	r0
 33c:	1f 90       	pop	r1
 33e:	18 95       	reti

00000340 <getTripDistance>:
}

static float getTripDistance(void)  //WORKS TESTED 
{ 
	float KMD = ((revLength*milestoneCount)/1000)+kmCount; //Total KM distance driven
	return KMD;
 340:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <milestoneCount>
 344:	70 91 47 02 	lds	r23, 0x0247	; 0x800247 <milestoneCount+0x1>
 348:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <milestoneCount+0x2>
 34c:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <milestoneCount+0x3>
 350:	5d d2       	rcall	.+1210   	; 0x80c <__floatunsisf>
 352:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <revLength>
 356:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <revLength+0x1>
 35a:	40 91 35 02 	lds	r20, 0x0235	; 0x800235 <revLength+0x2>
 35e:	50 91 36 02 	lds	r21, 0x0236	; 0x800236 <revLength+0x3>
 362:	e6 d2       	rcall	.+1484   	; 0x930 <__mulsf3>
 364:	20 e0       	ldi	r18, 0x00	; 0
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	4a e7       	ldi	r20, 0x7A	; 122
 36a:	54 e4       	ldi	r21, 0x44	; 68
 36c:	b6 d1       	rcall	.+876    	; 0x6da <__divsf3>
 36e:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <kmCount>
 372:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <kmCount+0x1>
 376:	40 91 44 02 	lds	r20, 0x0244	; 0x800244 <kmCount+0x2>
 37a:	50 91 45 02 	lds	r21, 0x0245	; 0x800245 <kmCount+0x3>
 37e:	49 c1       	rjmp	.+658    	; 0x612 <__addsf3>
}
 380:	08 95       	ret

00000382 <updateMilestoneCount>:

static void updateMilestoneCount()
{
	milestoneCount += 1;
 382:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <milestoneCount>
 386:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <milestoneCount+0x1>
 38a:	a0 91 48 02 	lds	r26, 0x0248	; 0x800248 <milestoneCount+0x2>
 38e:	b0 91 49 02 	lds	r27, 0x0249	; 0x800249 <milestoneCount+0x3>
 392:	01 96       	adiw	r24, 0x01	; 1
 394:	a1 1d       	adc	r26, r1
 396:	b1 1d       	adc	r27, r1
 398:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <milestoneCount>
 39c:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <milestoneCount+0x1>
 3a0:	a0 93 48 02 	sts	0x0248, r26	; 0x800248 <milestoneCount+0x2>
 3a4:	b0 93 49 02 	sts	0x0249, r27	; 0x800249 <milestoneCount+0x3>
 3a8:	08 95       	ret

000003aa <updateRevolutionCount>:
}

static void updateRevolutionCount(uint8_t revs)
{
	static uint8_t cnt = 0;
	revPerSec[cnt] = revs;
 3aa:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <cnt.1906>
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	f9 01       	movw	r30, r18
 3b2:	e6 5b       	subi	r30, 0xB6	; 182
 3b4:	fd 4f       	sbci	r31, 0xFD	; 253
 3b6:	80 83       	st	Z, r24
	cnt = (cnt+1) % 4;
 3b8:	c9 01       	movw	r24, r18
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	83 70       	andi	r24, 0x03	; 3
 3be:	90 78       	andi	r25, 0x80	; 128
 3c0:	99 23       	and	r25, r25
 3c2:	24 f4       	brge	.+8      	; 0x3cc <updateRevolutionCount+0x22>
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	8c 6f       	ori	r24, 0xFC	; 252
 3c8:	9f 6f       	ori	r25, 0xFF	; 255
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <cnt.1906>
 3d0:	08 95       	ret

000003d2 <getSpeedKMH>:
{
	uint16_t retVal = 0;
	uint8_t i = 0;
	for (i = 0; i<4; i++)
	{
		retVal += revPerSec[i];
 3d2:	ea e4       	ldi	r30, 0x4A	; 74
 3d4:	f2 e0       	ldi	r31, 0x02	; 2
 3d6:	80 81       	ld	r24, Z
 3d8:	61 81       	ldd	r22, Z+1	; 0x01
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	68 0f       	add	r22, r24
 3de:	71 1d       	adc	r23, r1
 3e0:	82 81       	ldd	r24, Z+2	; 0x02
 3e2:	68 0f       	add	r22, r24
 3e4:	71 1d       	adc	r23, r1
{
	//char buffer[10];
	
	float KMH = ((float)sumRevolutions()/4)*revLength*3.6; // Revolutions per second times revolution length = m/s. time 3.6 = km/h
	
	return KMH; 
 3e6:	83 81       	ldd	r24, Z+3	; 0x03
 3e8:	68 0f       	add	r22, r24
 3ea:	71 1d       	adc	r23, r1
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0d d2       	rcall	.+1050   	; 0x80c <__floatunsisf>
 3f2:	20 e0       	ldi	r18, 0x00	; 0
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	40 e8       	ldi	r20, 0x80	; 128
 3f8:	5e e3       	ldi	r21, 0x3E	; 62
 3fa:	9a d2       	rcall	.+1332   	; 0x930 <__mulsf3>
 3fc:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <revLength>
 400:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <revLength+0x1>
 404:	40 91 35 02 	lds	r20, 0x0235	; 0x800235 <revLength+0x2>
 408:	50 91 36 02 	lds	r21, 0x0236	; 0x800236 <revLength+0x3>
 40c:	91 d2       	rcall	.+1314   	; 0x930 <__mulsf3>
 40e:	26 e6       	ldi	r18, 0x66	; 102
 410:	36 e6       	ldi	r19, 0x66	; 102
 412:	46 e6       	ldi	r20, 0x66	; 102
 414:	50 e4       	ldi	r21, 0x40	; 64
 416:	8c c2       	rjmp	.+1304   	; 0x930 <__mulsf3>
}
 418:	08 95       	ret

0000041a <eepromSave>:
}


static void eepromSave(void)
{
	eeprom_update_float(&eepromCount,getTripDistance());
 41a:	92 df       	rcall	.-220    	; 0x340 <getTripDistance>
 41c:	ab 01       	movw	r20, r22
 41e:	bc 01       	movw	r22, r24
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	66 c3       	rjmp	.+1740   	; 0xaf2 <eeprom_update_dword>
 426:	08 95       	ret

00000428 <speedSensor_getDriver>:

static float getSpeedKMH(void);
static float getTripDistance(void);

speedSensorInterface_t* speedSensor_getDriver(float wheelDiameter)
{
 428:	cf 92       	push	r12
 42a:	df 92       	push	r13
 42c:	ef 92       	push	r14
 42e:	ff 92       	push	r15
	if (!initialized)
 430:	20 91 37 02 	lds	r18, 0x0237	; 0x800237 <initialized>
 434:	21 11       	cpse	r18, r1
 436:	55 c0       	rjmp	.+170    	; 0x4e2 <speedSensor_getDriver+0xba>
}

static void initSpeedSensor(float wheelDiameter)
{
	float wheelD=(wheelDiameter/200); //Calculations to meters centered ( /100 & /2)
	revLength=(wheelD*3.1415); //One revolution gives meters
 438:	20 e0       	ldi	r18, 0x00	; 0
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	48 e4       	ldi	r20, 0x48	; 72
 43e:	53 e4       	ldi	r21, 0x43	; 67
 440:	4c d1       	rcall	.+664    	; 0x6da <__divsf3>
 442:	26 e5       	ldi	r18, 0x56	; 86
 444:	3e e0       	ldi	r19, 0x0E	; 14
 446:	49 e4       	ldi	r20, 0x49	; 73
 448:	50 e4       	ldi	r21, 0x40	; 64
 44a:	72 d2       	rcall	.+1252   	; 0x930 <__mulsf3>
 44c:	60 93 33 02 	sts	0x0233, r22	; 0x800233 <revLength>
 450:	70 93 34 02 	sts	0x0234, r23	; 0x800234 <revLength+0x1>
 454:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <revLength+0x2>
 458:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <revLength+0x3>
	kmCount = eeprom_read_float(&eepromCount);
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	43 d3       	rcall	.+1670   	; 0xae8 <eeprom_read_dword>
 462:	6b 01       	movw	r12, r22
 464:	7c 01       	movw	r14, r24
	if (kmCount > 10000)
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	30 e4       	ldi	r19, 0x40	; 64
 46a:	4c e1       	ldi	r20, 0x1C	; 28
 46c:	56 e4       	ldi	r21, 0x46	; 70
 46e:	5c d2       	rcall	.+1208   	; 0x928 <__gesf2>
 470:	18 16       	cp	r1, r24
 472:	4c f0       	brlt	.+18     	; 0x486 <speedSensor_getDriver+0x5e>

static void initSpeedSensor(float wheelDiameter)
{
	float wheelD=(wheelDiameter/200); //Calculations to meters centered ( /100 & /2)
	revLength=(wheelD*3.1415); //One revolution gives meters
	kmCount = eeprom_read_float(&eepromCount);
 474:	c0 92 42 02 	sts	0x0242, r12	; 0x800242 <kmCount>
 478:	d0 92 43 02 	sts	0x0243, r13	; 0x800243 <kmCount+0x1>
 47c:	e0 92 44 02 	sts	0x0244, r14	; 0x800244 <kmCount+0x2>
 480:	f0 92 45 02 	sts	0x0245, r15	; 0x800245 <kmCount+0x3>
 484:	08 c0       	rjmp	.+16     	; 0x496 <speedSensor_getDriver+0x6e>
	if (kmCount > 10000)
	{
		kmCount = 0;
 486:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <kmCount>
 48a:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <kmCount+0x1>
 48e:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <kmCount+0x2>
 492:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <kmCount+0x3>
	}
	//Timer2 is used for keeping time of rpm measurement.
	// Timer2: Normal mode, No prescaling
	TCCR2A = 0b00000000;
 496:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	TCCR2B = 0b00000001;
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
	// Timer2 overflow interrupt enable
	TIMSK2 |= 0b00000001;
 4a0:	e0 e7       	ldi	r30, 0x70	; 112
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	80 81       	ld	r24, Z
 4a6:	81 60       	ori	r24, 0x01	; 1
 4a8:	80 83       	st	Z, r24
	
	// INT3:Rising edge
	EICRA = 0b11000000;
 4aa:	80 ec       	ldi	r24, 0xC0	; 192
 4ac:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	// Enable extern interrupts INT3 
	EIMSK |= 0b00001000;
 4b0:	eb 9a       	sbi	0x1d, 3	; 29
speedSensorInterface_t* speedSensor_getDriver(float wheelDiameter)
{
	if (!initialized)
	{
		initSpeedSensor(wheelDiameter);
		myInterface.getSpeedInKmh = getSpeedKMH;
 4b2:	e8 e3       	ldi	r30, 0x38	; 56
 4b4:	f2 e0       	ldi	r31, 0x02	; 2
 4b6:	29 ee       	ldi	r18, 0xE9	; 233
 4b8:	31 e0       	ldi	r19, 0x01	; 1
 4ba:	37 83       	std	Z+7, r19	; 0x07
 4bc:	26 83       	std	Z+6, r18	; 0x06
		myInterface.getTripDistance = getTripDistance;
 4be:	20 ea       	ldi	r18, 0xA0	; 160
 4c0:	31 e0       	ldi	r19, 0x01	; 1
 4c2:	31 87       	std	Z+9, r19	; 0x09
 4c4:	20 87       	std	Z+8, r18	; 0x08
		myInterface.saveMilestoneCount = eepromSave;
 4c6:	2d e0       	ldi	r18, 0x0D	; 13
 4c8:	32 e0       	ldi	r19, 0x02	; 2
 4ca:	35 83       	std	Z+5, r19	; 0x05
 4cc:	24 83       	std	Z+4, r18	; 0x04
		myInterface.updateMilestoneCount = updateMilestoneCount;
 4ce:	21 ec       	ldi	r18, 0xC1	; 193
 4d0:	31 e0       	ldi	r19, 0x01	; 1
 4d2:	33 83       	std	Z+3, r19	; 0x03
 4d4:	22 83       	std	Z+2, r18	; 0x02
		myInterface.updateRevolutionCount = updateRevolutionCount;
 4d6:	25 ed       	ldi	r18, 0xD5	; 213
 4d8:	31 e0       	ldi	r19, 0x01	; 1
 4da:	31 83       	std	Z+1, r19	; 0x01
 4dc:	20 83       	st	Z, r18
		initialized = true;
 4de:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <initialized>
	}
	return &myInterface;
}
 4e2:	88 e3       	ldi	r24, 0x38	; 56
 4e4:	92 e0       	ldi	r25, 0x02	; 2
 4e6:	ff 90       	pop	r15
 4e8:	ef 90       	pop	r14
 4ea:	df 90       	pop	r13
 4ec:	cf 90       	pop	r12
 4ee:	08 95       	ret

000004f0 <InitUART>:
  // Wait for new character received
  while ( (UCSRnA & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDRn;
}
 4f0:	0f 93       	push	r16
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	ec 01       	movw	r28, r24
 4f8:	db 01       	movw	r26, r22
 4fa:	ca 01       	movw	r24, r20
 4fc:	8c 52       	subi	r24, 0x2C	; 44
 4fe:	91 40       	sbci	r25, 0x01	; 1
 500:	a1 09       	sbc	r26, r1
 502:	b1 09       	sbc	r27, r1
 504:	85 3d       	cpi	r24, 0xD5	; 213
 506:	90 4c       	sbci	r25, 0xC0	; 192
 508:	a1 40       	sbci	r26, 0x01	; 1
 50a:	b1 05       	cpc	r27, r1
 50c:	08 f0       	brcs	.+2      	; 0x510 <InitUART+0x20>
 50e:	3f c0       	rjmp	.+126    	; 0x58e <InitUART+0x9e>
 510:	25 50       	subi	r18, 0x05	; 5
 512:	24 30       	cpi	r18, 0x04	; 4
 514:	e0 f5       	brcc	.+120    	; 0x58e <InitUART+0x9e>
 516:	80 e2       	ldi	r24, 0x20	; 32
 518:	88 83       	st	Y, r24
 51a:	88 e1       	ldi	r24, 0x18	; 24
 51c:	89 83       	std	Y+1, r24	; 0x01
 51e:	22 0f       	add	r18, r18
 520:	2a 83       	std	Y+2, r18	; 0x02
 522:	05 34       	cpi	r16, 0x45	; 69
 524:	21 f4       	brne	.+8      	; 0x52e <InitUART+0x3e>
 526:	8a 81       	ldd	r24, Y+2	; 0x02
 528:	80 62       	ori	r24, 0x20	; 32
 52a:	8a 83       	std	Y+2, r24	; 0x02
 52c:	05 c0       	rjmp	.+10     	; 0x538 <InitUART+0x48>
 52e:	0f 34       	cpi	r16, 0x4F	; 79
 530:	19 f4       	brne	.+6      	; 0x538 <InitUART+0x48>
 532:	8a 81       	ldd	r24, Y+2	; 0x02
 534:	80 63       	ori	r24, 0x30	; 48
 536:	8a 83       	std	Y+2, r24	; 0x02
 538:	db 01       	movw	r26, r22
 53a:	ca 01       	movw	r24, r20
 53c:	80 58       	subi	r24, 0x80	; 128
 53e:	9b 47       	sbci	r25, 0x7B	; 123
 540:	a1 4e       	sbci	r26, 0xE1	; 225
 542:	bf 4f       	sbci	r27, 0xFF	; 255
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	aa 1f       	adc	r26, r26
 54a:	bb 1f       	adc	r27, r27
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	aa 1f       	adc	r26, r26
 552:	bb 1f       	adc	r27, r27
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	aa 1f       	adc	r26, r26
 55a:	bb 1f       	adc	r27, r27
 55c:	44 0f       	add	r20, r20
 55e:	55 1f       	adc	r21, r21
 560:	66 1f       	adc	r22, r22
 562:	77 1f       	adc	r23, r23
 564:	44 0f       	add	r20, r20
 566:	55 1f       	adc	r21, r21
 568:	66 1f       	adc	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	9a 01       	movw	r18, r20
 56e:	ab 01       	movw	r20, r22
 570:	22 0f       	add	r18, r18
 572:	33 1f       	adc	r19, r19
 574:	44 1f       	adc	r20, r20
 576:	55 1f       	adc	r21, r21
 578:	22 0f       	add	r18, r18
 57a:	33 1f       	adc	r19, r19
 57c:	44 1f       	adc	r20, r20
 57e:	55 1f       	adc	r21, r21
 580:	bc 01       	movw	r22, r24
 582:	cd 01       	movw	r24, r26
 584:	5c d2       	rcall	.+1208   	; 0xa3e <__udivmodsi4>
 586:	21 50       	subi	r18, 0x01	; 1
 588:	31 09       	sbc	r19, r1
 58a:	3d 83       	std	Y+5, r19	; 0x05
 58c:	2c 83       	std	Y+4, r18	; 0x04
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	0f 91       	pop	r16
 594:	08 95       	ret

00000596 <SendChar>:
Then send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(unsigned int UART_adr, char Tegn)
{
 596:	fc 01       	movw	r30, r24
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRnA & (1<<5)) == 0 )
 598:	90 81       	ld	r25, Z
 59a:	95 ff       	sbrs	r25, 5
 59c:	fd cf       	rjmp	.-6      	; 0x598 <SendChar+0x2>
  {}
  // Then send the character
  UDRn = Tegn;
 59e:	66 83       	std	Z+6, r22	; 0x06
 5a0:	08 95       	ret

000005a2 <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
 5a2:	0f 93       	push	r16
 5a4:	1f 93       	push	r17
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	eb 01       	movw	r28, r22
  // Repeat until zero-termination
  while (*Streng != 0)
 5ac:	68 81       	ld	r22, Y
 5ae:	66 23       	and	r22, r22
 5b0:	39 f0       	breq	.+14     	; 0x5c0 <SendString+0x1e>
 5b2:	8c 01       	movw	r16, r24
 5b4:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
 5b6:	c8 01       	movw	r24, r16
 5b8:	ee df       	rcall	.-36     	; 0x596 <SendChar>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 5ba:	69 91       	ld	r22, Y+
 5bc:	61 11       	cpse	r22, r1
 5be:	fb cf       	rjmp	.-10     	; 0x5b6 <SendString+0x14>
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	1f 91       	pop	r17
 5c6:	0f 91       	pop	r16
 5c8:	08 95       	ret

000005ca <SendInteger>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(unsigned int UART_adr, int Tal)
{
 5ca:	0f 93       	push	r16
 5cc:	1f 93       	push	r17
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	cd b7       	in	r28, 0x3d	; 61
 5d4:	de b7       	in	r29, 0x3e	; 62
 5d6:	27 97       	sbiw	r28, 0x07	; 7
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	f8 94       	cli
 5dc:	de bf       	out	0x3e, r29	; 62
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	cd bf       	out	0x3d, r28	; 61
 5e2:	8c 01       	movw	r16, r24
 5e4:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 5e6:	4a e0       	ldi	r20, 0x0A	; 10
 5e8:	be 01       	movw	r22, r28
 5ea:	6f 5f       	subi	r22, 0xFF	; 255
 5ec:	7f 4f       	sbci	r23, 0xFF	; 255
 5ee:	49 d2       	rcall	.+1170   	; 0xa82 <__itoa_ncheck>
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Tal, array, 10);
  // - then send the string
  SendString(UART_adr, array);
 5f0:	be 01       	movw	r22, r28
 5f2:	6f 5f       	subi	r22, 0xFF	; 255
 5f4:	7f 4f       	sbci	r23, 0xFF	; 255
 5f6:	c8 01       	movw	r24, r16
 5f8:	d4 df       	rcall	.-88     	; 0x5a2 <SendString>
}
 5fa:	27 96       	adiw	r28, 0x07	; 7
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	f8 94       	cli
 600:	de bf       	out	0x3e, r29	; 62
 602:	0f be       	out	0x3f, r0	; 63
 604:	cd bf       	out	0x3d, r28	; 61
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	1f 91       	pop	r17
 60c:	0f 91       	pop	r16
 60e:	08 95       	ret

00000610 <__subsf3>:
 610:	50 58       	subi	r21, 0x80	; 128

00000612 <__addsf3>:
 612:	bb 27       	eor	r27, r27
 614:	aa 27       	eor	r26, r26
 616:	0e d0       	rcall	.+28     	; 0x634 <__addsf3x>
 618:	4d c1       	rjmp	.+666    	; 0x8b4 <__fp_round>
 61a:	3e d1       	rcall	.+636    	; 0x898 <__fp_pscA>
 61c:	30 f0       	brcs	.+12     	; 0x62a <__addsf3+0x18>
 61e:	43 d1       	rcall	.+646    	; 0x8a6 <__fp_pscB>
 620:	20 f0       	brcs	.+8      	; 0x62a <__addsf3+0x18>
 622:	31 f4       	brne	.+12     	; 0x630 <__addsf3+0x1e>
 624:	9f 3f       	cpi	r25, 0xFF	; 255
 626:	11 f4       	brne	.+4      	; 0x62c <__addsf3+0x1a>
 628:	1e f4       	brtc	.+6      	; 0x630 <__addsf3+0x1e>
 62a:	33 c1       	rjmp	.+614    	; 0x892 <__fp_nan>
 62c:	0e f4       	brtc	.+2      	; 0x630 <__addsf3+0x1e>
 62e:	e0 95       	com	r30
 630:	e7 fb       	bst	r30, 7
 632:	29 c1       	rjmp	.+594    	; 0x886 <__fp_inf>

00000634 <__addsf3x>:
 634:	e9 2f       	mov	r30, r25
 636:	4f d1       	rcall	.+670    	; 0x8d6 <__fp_split3>
 638:	80 f3       	brcs	.-32     	; 0x61a <__addsf3+0x8>
 63a:	ba 17       	cp	r27, r26
 63c:	62 07       	cpc	r22, r18
 63e:	73 07       	cpc	r23, r19
 640:	84 07       	cpc	r24, r20
 642:	95 07       	cpc	r25, r21
 644:	18 f0       	brcs	.+6      	; 0x64c <__addsf3x+0x18>
 646:	71 f4       	brne	.+28     	; 0x664 <__addsf3x+0x30>
 648:	9e f5       	brtc	.+102    	; 0x6b0 <__addsf3x+0x7c>
 64a:	67 c1       	rjmp	.+718    	; 0x91a <__fp_zero>
 64c:	0e f4       	brtc	.+2      	; 0x650 <__addsf3x+0x1c>
 64e:	e0 95       	com	r30
 650:	0b 2e       	mov	r0, r27
 652:	ba 2f       	mov	r27, r26
 654:	a0 2d       	mov	r26, r0
 656:	0b 01       	movw	r0, r22
 658:	b9 01       	movw	r22, r18
 65a:	90 01       	movw	r18, r0
 65c:	0c 01       	movw	r0, r24
 65e:	ca 01       	movw	r24, r20
 660:	a0 01       	movw	r20, r0
 662:	11 24       	eor	r1, r1
 664:	ff 27       	eor	r31, r31
 666:	59 1b       	sub	r21, r25
 668:	99 f0       	breq	.+38     	; 0x690 <__addsf3x+0x5c>
 66a:	59 3f       	cpi	r21, 0xF9	; 249
 66c:	50 f4       	brcc	.+20     	; 0x682 <__addsf3x+0x4e>
 66e:	50 3e       	cpi	r21, 0xE0	; 224
 670:	68 f1       	brcs	.+90     	; 0x6cc <__addsf3x+0x98>
 672:	1a 16       	cp	r1, r26
 674:	f0 40       	sbci	r31, 0x00	; 0
 676:	a2 2f       	mov	r26, r18
 678:	23 2f       	mov	r18, r19
 67a:	34 2f       	mov	r19, r20
 67c:	44 27       	eor	r20, r20
 67e:	58 5f       	subi	r21, 0xF8	; 248
 680:	f3 cf       	rjmp	.-26     	; 0x668 <__addsf3x+0x34>
 682:	46 95       	lsr	r20
 684:	37 95       	ror	r19
 686:	27 95       	ror	r18
 688:	a7 95       	ror	r26
 68a:	f0 40       	sbci	r31, 0x00	; 0
 68c:	53 95       	inc	r21
 68e:	c9 f7       	brne	.-14     	; 0x682 <__addsf3x+0x4e>
 690:	7e f4       	brtc	.+30     	; 0x6b0 <__addsf3x+0x7c>
 692:	1f 16       	cp	r1, r31
 694:	ba 0b       	sbc	r27, r26
 696:	62 0b       	sbc	r22, r18
 698:	73 0b       	sbc	r23, r19
 69a:	84 0b       	sbc	r24, r20
 69c:	ba f0       	brmi	.+46     	; 0x6cc <__addsf3x+0x98>
 69e:	91 50       	subi	r25, 0x01	; 1
 6a0:	a1 f0       	breq	.+40     	; 0x6ca <__addsf3x+0x96>
 6a2:	ff 0f       	add	r31, r31
 6a4:	bb 1f       	adc	r27, r27
 6a6:	66 1f       	adc	r22, r22
 6a8:	77 1f       	adc	r23, r23
 6aa:	88 1f       	adc	r24, r24
 6ac:	c2 f7       	brpl	.-16     	; 0x69e <__addsf3x+0x6a>
 6ae:	0e c0       	rjmp	.+28     	; 0x6cc <__addsf3x+0x98>
 6b0:	ba 0f       	add	r27, r26
 6b2:	62 1f       	adc	r22, r18
 6b4:	73 1f       	adc	r23, r19
 6b6:	84 1f       	adc	r24, r20
 6b8:	48 f4       	brcc	.+18     	; 0x6cc <__addsf3x+0x98>
 6ba:	87 95       	ror	r24
 6bc:	77 95       	ror	r23
 6be:	67 95       	ror	r22
 6c0:	b7 95       	ror	r27
 6c2:	f7 95       	ror	r31
 6c4:	9e 3f       	cpi	r25, 0xFE	; 254
 6c6:	08 f0       	brcs	.+2      	; 0x6ca <__addsf3x+0x96>
 6c8:	b3 cf       	rjmp	.-154    	; 0x630 <__addsf3+0x1e>
 6ca:	93 95       	inc	r25
 6cc:	88 0f       	add	r24, r24
 6ce:	08 f0       	brcs	.+2      	; 0x6d2 <__addsf3x+0x9e>
 6d0:	99 27       	eor	r25, r25
 6d2:	ee 0f       	add	r30, r30
 6d4:	97 95       	ror	r25
 6d6:	87 95       	ror	r24
 6d8:	08 95       	ret

000006da <__divsf3>:
 6da:	0c d0       	rcall	.+24     	; 0x6f4 <__divsf3x>
 6dc:	eb c0       	rjmp	.+470    	; 0x8b4 <__fp_round>
 6de:	e3 d0       	rcall	.+454    	; 0x8a6 <__fp_pscB>
 6e0:	40 f0       	brcs	.+16     	; 0x6f2 <__divsf3+0x18>
 6e2:	da d0       	rcall	.+436    	; 0x898 <__fp_pscA>
 6e4:	30 f0       	brcs	.+12     	; 0x6f2 <__divsf3+0x18>
 6e6:	21 f4       	brne	.+8      	; 0x6f0 <__divsf3+0x16>
 6e8:	5f 3f       	cpi	r21, 0xFF	; 255
 6ea:	19 f0       	breq	.+6      	; 0x6f2 <__divsf3+0x18>
 6ec:	cc c0       	rjmp	.+408    	; 0x886 <__fp_inf>
 6ee:	51 11       	cpse	r21, r1
 6f0:	15 c1       	rjmp	.+554    	; 0x91c <__fp_szero>
 6f2:	cf c0       	rjmp	.+414    	; 0x892 <__fp_nan>

000006f4 <__divsf3x>:
 6f4:	f0 d0       	rcall	.+480    	; 0x8d6 <__fp_split3>
 6f6:	98 f3       	brcs	.-26     	; 0x6de <__divsf3+0x4>

000006f8 <__divsf3_pse>:
 6f8:	99 23       	and	r25, r25
 6fa:	c9 f3       	breq	.-14     	; 0x6ee <__divsf3+0x14>
 6fc:	55 23       	and	r21, r21
 6fe:	b1 f3       	breq	.-20     	; 0x6ec <__divsf3+0x12>
 700:	95 1b       	sub	r25, r21
 702:	55 0b       	sbc	r21, r21
 704:	bb 27       	eor	r27, r27
 706:	aa 27       	eor	r26, r26
 708:	62 17       	cp	r22, r18
 70a:	73 07       	cpc	r23, r19
 70c:	84 07       	cpc	r24, r20
 70e:	38 f0       	brcs	.+14     	; 0x71e <__divsf3_pse+0x26>
 710:	9f 5f       	subi	r25, 0xFF	; 255
 712:	5f 4f       	sbci	r21, 0xFF	; 255
 714:	22 0f       	add	r18, r18
 716:	33 1f       	adc	r19, r19
 718:	44 1f       	adc	r20, r20
 71a:	aa 1f       	adc	r26, r26
 71c:	a9 f3       	breq	.-22     	; 0x708 <__divsf3_pse+0x10>
 71e:	33 d0       	rcall	.+102    	; 0x786 <__divsf3_pse+0x8e>
 720:	0e 2e       	mov	r0, r30
 722:	3a f0       	brmi	.+14     	; 0x732 <__divsf3_pse+0x3a>
 724:	e0 e8       	ldi	r30, 0x80	; 128
 726:	30 d0       	rcall	.+96     	; 0x788 <__divsf3_pse+0x90>
 728:	91 50       	subi	r25, 0x01	; 1
 72a:	50 40       	sbci	r21, 0x00	; 0
 72c:	e6 95       	lsr	r30
 72e:	00 1c       	adc	r0, r0
 730:	ca f7       	brpl	.-14     	; 0x724 <__divsf3_pse+0x2c>
 732:	29 d0       	rcall	.+82     	; 0x786 <__divsf3_pse+0x8e>
 734:	fe 2f       	mov	r31, r30
 736:	27 d0       	rcall	.+78     	; 0x786 <__divsf3_pse+0x8e>
 738:	66 0f       	add	r22, r22
 73a:	77 1f       	adc	r23, r23
 73c:	88 1f       	adc	r24, r24
 73e:	bb 1f       	adc	r27, r27
 740:	26 17       	cp	r18, r22
 742:	37 07       	cpc	r19, r23
 744:	48 07       	cpc	r20, r24
 746:	ab 07       	cpc	r26, r27
 748:	b0 e8       	ldi	r27, 0x80	; 128
 74a:	09 f0       	breq	.+2      	; 0x74e <__divsf3_pse+0x56>
 74c:	bb 0b       	sbc	r27, r27
 74e:	80 2d       	mov	r24, r0
 750:	bf 01       	movw	r22, r30
 752:	ff 27       	eor	r31, r31
 754:	93 58       	subi	r25, 0x83	; 131
 756:	5f 4f       	sbci	r21, 0xFF	; 255
 758:	2a f0       	brmi	.+10     	; 0x764 <__divsf3_pse+0x6c>
 75a:	9e 3f       	cpi	r25, 0xFE	; 254
 75c:	51 05       	cpc	r21, r1
 75e:	68 f0       	brcs	.+26     	; 0x77a <__divsf3_pse+0x82>
 760:	92 c0       	rjmp	.+292    	; 0x886 <__fp_inf>
 762:	dc c0       	rjmp	.+440    	; 0x91c <__fp_szero>
 764:	5f 3f       	cpi	r21, 0xFF	; 255
 766:	ec f3       	brlt	.-6      	; 0x762 <__divsf3_pse+0x6a>
 768:	98 3e       	cpi	r25, 0xE8	; 232
 76a:	dc f3       	brlt	.-10     	; 0x762 <__divsf3_pse+0x6a>
 76c:	86 95       	lsr	r24
 76e:	77 95       	ror	r23
 770:	67 95       	ror	r22
 772:	b7 95       	ror	r27
 774:	f7 95       	ror	r31
 776:	9f 5f       	subi	r25, 0xFF	; 255
 778:	c9 f7       	brne	.-14     	; 0x76c <__divsf3_pse+0x74>
 77a:	88 0f       	add	r24, r24
 77c:	91 1d       	adc	r25, r1
 77e:	96 95       	lsr	r25
 780:	87 95       	ror	r24
 782:	97 f9       	bld	r25, 7
 784:	08 95       	ret
 786:	e1 e0       	ldi	r30, 0x01	; 1
 788:	66 0f       	add	r22, r22
 78a:	77 1f       	adc	r23, r23
 78c:	88 1f       	adc	r24, r24
 78e:	bb 1f       	adc	r27, r27
 790:	62 17       	cp	r22, r18
 792:	73 07       	cpc	r23, r19
 794:	84 07       	cpc	r24, r20
 796:	ba 07       	cpc	r27, r26
 798:	20 f0       	brcs	.+8      	; 0x7a2 <__divsf3_pse+0xaa>
 79a:	62 1b       	sub	r22, r18
 79c:	73 0b       	sbc	r23, r19
 79e:	84 0b       	sbc	r24, r20
 7a0:	ba 0b       	sbc	r27, r26
 7a2:	ee 1f       	adc	r30, r30
 7a4:	88 f7       	brcc	.-30     	; 0x788 <__divsf3_pse+0x90>
 7a6:	e0 95       	com	r30
 7a8:	08 95       	ret

000007aa <__fixsfsi>:
 7aa:	04 d0       	rcall	.+8      	; 0x7b4 <__fixunssfsi>
 7ac:	68 94       	set
 7ae:	b1 11       	cpse	r27, r1
 7b0:	b5 c0       	rjmp	.+362    	; 0x91c <__fp_szero>
 7b2:	08 95       	ret

000007b4 <__fixunssfsi>:
 7b4:	98 d0       	rcall	.+304    	; 0x8e6 <__fp_splitA>
 7b6:	88 f0       	brcs	.+34     	; 0x7da <__fixunssfsi+0x26>
 7b8:	9f 57       	subi	r25, 0x7F	; 127
 7ba:	90 f0       	brcs	.+36     	; 0x7e0 <__fixunssfsi+0x2c>
 7bc:	b9 2f       	mov	r27, r25
 7be:	99 27       	eor	r25, r25
 7c0:	b7 51       	subi	r27, 0x17	; 23
 7c2:	a0 f0       	brcs	.+40     	; 0x7ec <__fixunssfsi+0x38>
 7c4:	d1 f0       	breq	.+52     	; 0x7fa <__fixunssfsi+0x46>
 7c6:	66 0f       	add	r22, r22
 7c8:	77 1f       	adc	r23, r23
 7ca:	88 1f       	adc	r24, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	1a f0       	brmi	.+6      	; 0x7d6 <__fixunssfsi+0x22>
 7d0:	ba 95       	dec	r27
 7d2:	c9 f7       	brne	.-14     	; 0x7c6 <__fixunssfsi+0x12>
 7d4:	12 c0       	rjmp	.+36     	; 0x7fa <__fixunssfsi+0x46>
 7d6:	b1 30       	cpi	r27, 0x01	; 1
 7d8:	81 f0       	breq	.+32     	; 0x7fa <__fixunssfsi+0x46>
 7da:	9f d0       	rcall	.+318    	; 0x91a <__fp_zero>
 7dc:	b1 e0       	ldi	r27, 0x01	; 1
 7de:	08 95       	ret
 7e0:	9c c0       	rjmp	.+312    	; 0x91a <__fp_zero>
 7e2:	67 2f       	mov	r22, r23
 7e4:	78 2f       	mov	r23, r24
 7e6:	88 27       	eor	r24, r24
 7e8:	b8 5f       	subi	r27, 0xF8	; 248
 7ea:	39 f0       	breq	.+14     	; 0x7fa <__fixunssfsi+0x46>
 7ec:	b9 3f       	cpi	r27, 0xF9	; 249
 7ee:	cc f3       	brlt	.-14     	; 0x7e2 <__fixunssfsi+0x2e>
 7f0:	86 95       	lsr	r24
 7f2:	77 95       	ror	r23
 7f4:	67 95       	ror	r22
 7f6:	b3 95       	inc	r27
 7f8:	d9 f7       	brne	.-10     	; 0x7f0 <__fixunssfsi+0x3c>
 7fa:	3e f4       	brtc	.+14     	; 0x80a <__fixunssfsi+0x56>
 7fc:	90 95       	com	r25
 7fe:	80 95       	com	r24
 800:	70 95       	com	r23
 802:	61 95       	neg	r22
 804:	7f 4f       	sbci	r23, 0xFF	; 255
 806:	8f 4f       	sbci	r24, 0xFF	; 255
 808:	9f 4f       	sbci	r25, 0xFF	; 255
 80a:	08 95       	ret

0000080c <__floatunsisf>:
 80c:	e8 94       	clt
 80e:	09 c0       	rjmp	.+18     	; 0x822 <__floatsisf+0x12>

00000810 <__floatsisf>:
 810:	97 fb       	bst	r25, 7
 812:	3e f4       	brtc	.+14     	; 0x822 <__floatsisf+0x12>
 814:	90 95       	com	r25
 816:	80 95       	com	r24
 818:	70 95       	com	r23
 81a:	61 95       	neg	r22
 81c:	7f 4f       	sbci	r23, 0xFF	; 255
 81e:	8f 4f       	sbci	r24, 0xFF	; 255
 820:	9f 4f       	sbci	r25, 0xFF	; 255
 822:	99 23       	and	r25, r25
 824:	a9 f0       	breq	.+42     	; 0x850 <__floatsisf+0x40>
 826:	f9 2f       	mov	r31, r25
 828:	96 e9       	ldi	r25, 0x96	; 150
 82a:	bb 27       	eor	r27, r27
 82c:	93 95       	inc	r25
 82e:	f6 95       	lsr	r31
 830:	87 95       	ror	r24
 832:	77 95       	ror	r23
 834:	67 95       	ror	r22
 836:	b7 95       	ror	r27
 838:	f1 11       	cpse	r31, r1
 83a:	f8 cf       	rjmp	.-16     	; 0x82c <__floatsisf+0x1c>
 83c:	fa f4       	brpl	.+62     	; 0x87c <__floatsisf+0x6c>
 83e:	bb 0f       	add	r27, r27
 840:	11 f4       	brne	.+4      	; 0x846 <__floatsisf+0x36>
 842:	60 ff       	sbrs	r22, 0
 844:	1b c0       	rjmp	.+54     	; 0x87c <__floatsisf+0x6c>
 846:	6f 5f       	subi	r22, 0xFF	; 255
 848:	7f 4f       	sbci	r23, 0xFF	; 255
 84a:	8f 4f       	sbci	r24, 0xFF	; 255
 84c:	9f 4f       	sbci	r25, 0xFF	; 255
 84e:	16 c0       	rjmp	.+44     	; 0x87c <__floatsisf+0x6c>
 850:	88 23       	and	r24, r24
 852:	11 f0       	breq	.+4      	; 0x858 <__floatsisf+0x48>
 854:	96 e9       	ldi	r25, 0x96	; 150
 856:	11 c0       	rjmp	.+34     	; 0x87a <__floatsisf+0x6a>
 858:	77 23       	and	r23, r23
 85a:	21 f0       	breq	.+8      	; 0x864 <__floatsisf+0x54>
 85c:	9e e8       	ldi	r25, 0x8E	; 142
 85e:	87 2f       	mov	r24, r23
 860:	76 2f       	mov	r23, r22
 862:	05 c0       	rjmp	.+10     	; 0x86e <__floatsisf+0x5e>
 864:	66 23       	and	r22, r22
 866:	71 f0       	breq	.+28     	; 0x884 <__floatsisf+0x74>
 868:	96 e8       	ldi	r25, 0x86	; 134
 86a:	86 2f       	mov	r24, r22
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	60 e0       	ldi	r22, 0x00	; 0
 870:	2a f0       	brmi	.+10     	; 0x87c <__floatsisf+0x6c>
 872:	9a 95       	dec	r25
 874:	66 0f       	add	r22, r22
 876:	77 1f       	adc	r23, r23
 878:	88 1f       	adc	r24, r24
 87a:	da f7       	brpl	.-10     	; 0x872 <__floatsisf+0x62>
 87c:	88 0f       	add	r24, r24
 87e:	96 95       	lsr	r25
 880:	87 95       	ror	r24
 882:	97 f9       	bld	r25, 7
 884:	08 95       	ret

00000886 <__fp_inf>:
 886:	97 f9       	bld	r25, 7
 888:	9f 67       	ori	r25, 0x7F	; 127
 88a:	80 e8       	ldi	r24, 0x80	; 128
 88c:	70 e0       	ldi	r23, 0x00	; 0
 88e:	60 e0       	ldi	r22, 0x00	; 0
 890:	08 95       	ret

00000892 <__fp_nan>:
 892:	9f ef       	ldi	r25, 0xFF	; 255
 894:	80 ec       	ldi	r24, 0xC0	; 192
 896:	08 95       	ret

00000898 <__fp_pscA>:
 898:	00 24       	eor	r0, r0
 89a:	0a 94       	dec	r0
 89c:	16 16       	cp	r1, r22
 89e:	17 06       	cpc	r1, r23
 8a0:	18 06       	cpc	r1, r24
 8a2:	09 06       	cpc	r0, r25
 8a4:	08 95       	ret

000008a6 <__fp_pscB>:
 8a6:	00 24       	eor	r0, r0
 8a8:	0a 94       	dec	r0
 8aa:	12 16       	cp	r1, r18
 8ac:	13 06       	cpc	r1, r19
 8ae:	14 06       	cpc	r1, r20
 8b0:	05 06       	cpc	r0, r21
 8b2:	08 95       	ret

000008b4 <__fp_round>:
 8b4:	09 2e       	mov	r0, r25
 8b6:	03 94       	inc	r0
 8b8:	00 0c       	add	r0, r0
 8ba:	11 f4       	brne	.+4      	; 0x8c0 <__fp_round+0xc>
 8bc:	88 23       	and	r24, r24
 8be:	52 f0       	brmi	.+20     	; 0x8d4 <__fp_round+0x20>
 8c0:	bb 0f       	add	r27, r27
 8c2:	40 f4       	brcc	.+16     	; 0x8d4 <__fp_round+0x20>
 8c4:	bf 2b       	or	r27, r31
 8c6:	11 f4       	brne	.+4      	; 0x8cc <__fp_round+0x18>
 8c8:	60 ff       	sbrs	r22, 0
 8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <__fp_round+0x20>
 8cc:	6f 5f       	subi	r22, 0xFF	; 255
 8ce:	7f 4f       	sbci	r23, 0xFF	; 255
 8d0:	8f 4f       	sbci	r24, 0xFF	; 255
 8d2:	9f 4f       	sbci	r25, 0xFF	; 255
 8d4:	08 95       	ret

000008d6 <__fp_split3>:
 8d6:	57 fd       	sbrc	r21, 7
 8d8:	90 58       	subi	r25, 0x80	; 128
 8da:	44 0f       	add	r20, r20
 8dc:	55 1f       	adc	r21, r21
 8de:	59 f0       	breq	.+22     	; 0x8f6 <__fp_splitA+0x10>
 8e0:	5f 3f       	cpi	r21, 0xFF	; 255
 8e2:	71 f0       	breq	.+28     	; 0x900 <__fp_splitA+0x1a>
 8e4:	47 95       	ror	r20

000008e6 <__fp_splitA>:
 8e6:	88 0f       	add	r24, r24
 8e8:	97 fb       	bst	r25, 7
 8ea:	99 1f       	adc	r25, r25
 8ec:	61 f0       	breq	.+24     	; 0x906 <__fp_splitA+0x20>
 8ee:	9f 3f       	cpi	r25, 0xFF	; 255
 8f0:	79 f0       	breq	.+30     	; 0x910 <__fp_splitA+0x2a>
 8f2:	87 95       	ror	r24
 8f4:	08 95       	ret
 8f6:	12 16       	cp	r1, r18
 8f8:	13 06       	cpc	r1, r19
 8fa:	14 06       	cpc	r1, r20
 8fc:	55 1f       	adc	r21, r21
 8fe:	f2 cf       	rjmp	.-28     	; 0x8e4 <__fp_split3+0xe>
 900:	46 95       	lsr	r20
 902:	f1 df       	rcall	.-30     	; 0x8e6 <__fp_splitA>
 904:	08 c0       	rjmp	.+16     	; 0x916 <__fp_splitA+0x30>
 906:	16 16       	cp	r1, r22
 908:	17 06       	cpc	r1, r23
 90a:	18 06       	cpc	r1, r24
 90c:	99 1f       	adc	r25, r25
 90e:	f1 cf       	rjmp	.-30     	; 0x8f2 <__fp_splitA+0xc>
 910:	86 95       	lsr	r24
 912:	71 05       	cpc	r23, r1
 914:	61 05       	cpc	r22, r1
 916:	08 94       	sec
 918:	08 95       	ret

0000091a <__fp_zero>:
 91a:	e8 94       	clt

0000091c <__fp_szero>:
 91c:	bb 27       	eor	r27, r27
 91e:	66 27       	eor	r22, r22
 920:	77 27       	eor	r23, r23
 922:	cb 01       	movw	r24, r22
 924:	97 f9       	bld	r25, 7
 926:	08 95       	ret

00000928 <__gesf2>:
 928:	66 d0       	rcall	.+204    	; 0x9f6 <__fp_cmp>
 92a:	08 f4       	brcc	.+2      	; 0x92e <__gesf2+0x6>
 92c:	8f ef       	ldi	r24, 0xFF	; 255
 92e:	08 95       	ret

00000930 <__mulsf3>:
 930:	0b d0       	rcall	.+22     	; 0x948 <__mulsf3x>
 932:	c0 cf       	rjmp	.-128    	; 0x8b4 <__fp_round>
 934:	b1 df       	rcall	.-158    	; 0x898 <__fp_pscA>
 936:	28 f0       	brcs	.+10     	; 0x942 <__mulsf3+0x12>
 938:	b6 df       	rcall	.-148    	; 0x8a6 <__fp_pscB>
 93a:	18 f0       	brcs	.+6      	; 0x942 <__mulsf3+0x12>
 93c:	95 23       	and	r25, r21
 93e:	09 f0       	breq	.+2      	; 0x942 <__mulsf3+0x12>
 940:	a2 cf       	rjmp	.-188    	; 0x886 <__fp_inf>
 942:	a7 cf       	rjmp	.-178    	; 0x892 <__fp_nan>
 944:	11 24       	eor	r1, r1
 946:	ea cf       	rjmp	.-44     	; 0x91c <__fp_szero>

00000948 <__mulsf3x>:
 948:	c6 df       	rcall	.-116    	; 0x8d6 <__fp_split3>
 94a:	a0 f3       	brcs	.-24     	; 0x934 <__mulsf3+0x4>

0000094c <__mulsf3_pse>:
 94c:	95 9f       	mul	r25, r21
 94e:	d1 f3       	breq	.-12     	; 0x944 <__mulsf3+0x14>
 950:	95 0f       	add	r25, r21
 952:	50 e0       	ldi	r21, 0x00	; 0
 954:	55 1f       	adc	r21, r21
 956:	62 9f       	mul	r22, r18
 958:	f0 01       	movw	r30, r0
 95a:	72 9f       	mul	r23, r18
 95c:	bb 27       	eor	r27, r27
 95e:	f0 0d       	add	r31, r0
 960:	b1 1d       	adc	r27, r1
 962:	63 9f       	mul	r22, r19
 964:	aa 27       	eor	r26, r26
 966:	f0 0d       	add	r31, r0
 968:	b1 1d       	adc	r27, r1
 96a:	aa 1f       	adc	r26, r26
 96c:	64 9f       	mul	r22, r20
 96e:	66 27       	eor	r22, r22
 970:	b0 0d       	add	r27, r0
 972:	a1 1d       	adc	r26, r1
 974:	66 1f       	adc	r22, r22
 976:	82 9f       	mul	r24, r18
 978:	22 27       	eor	r18, r18
 97a:	b0 0d       	add	r27, r0
 97c:	a1 1d       	adc	r26, r1
 97e:	62 1f       	adc	r22, r18
 980:	73 9f       	mul	r23, r19
 982:	b0 0d       	add	r27, r0
 984:	a1 1d       	adc	r26, r1
 986:	62 1f       	adc	r22, r18
 988:	83 9f       	mul	r24, r19
 98a:	a0 0d       	add	r26, r0
 98c:	61 1d       	adc	r22, r1
 98e:	22 1f       	adc	r18, r18
 990:	74 9f       	mul	r23, r20
 992:	33 27       	eor	r19, r19
 994:	a0 0d       	add	r26, r0
 996:	61 1d       	adc	r22, r1
 998:	23 1f       	adc	r18, r19
 99a:	84 9f       	mul	r24, r20
 99c:	60 0d       	add	r22, r0
 99e:	21 1d       	adc	r18, r1
 9a0:	82 2f       	mov	r24, r18
 9a2:	76 2f       	mov	r23, r22
 9a4:	6a 2f       	mov	r22, r26
 9a6:	11 24       	eor	r1, r1
 9a8:	9f 57       	subi	r25, 0x7F	; 127
 9aa:	50 40       	sbci	r21, 0x00	; 0
 9ac:	8a f0       	brmi	.+34     	; 0x9d0 <__mulsf3_pse+0x84>
 9ae:	e1 f0       	breq	.+56     	; 0x9e8 <__mulsf3_pse+0x9c>
 9b0:	88 23       	and	r24, r24
 9b2:	4a f0       	brmi	.+18     	; 0x9c6 <__mulsf3_pse+0x7a>
 9b4:	ee 0f       	add	r30, r30
 9b6:	ff 1f       	adc	r31, r31
 9b8:	bb 1f       	adc	r27, r27
 9ba:	66 1f       	adc	r22, r22
 9bc:	77 1f       	adc	r23, r23
 9be:	88 1f       	adc	r24, r24
 9c0:	91 50       	subi	r25, 0x01	; 1
 9c2:	50 40       	sbci	r21, 0x00	; 0
 9c4:	a9 f7       	brne	.-22     	; 0x9b0 <__mulsf3_pse+0x64>
 9c6:	9e 3f       	cpi	r25, 0xFE	; 254
 9c8:	51 05       	cpc	r21, r1
 9ca:	70 f0       	brcs	.+28     	; 0x9e8 <__mulsf3_pse+0x9c>
 9cc:	5c cf       	rjmp	.-328    	; 0x886 <__fp_inf>
 9ce:	a6 cf       	rjmp	.-180    	; 0x91c <__fp_szero>
 9d0:	5f 3f       	cpi	r21, 0xFF	; 255
 9d2:	ec f3       	brlt	.-6      	; 0x9ce <__mulsf3_pse+0x82>
 9d4:	98 3e       	cpi	r25, 0xE8	; 232
 9d6:	dc f3       	brlt	.-10     	; 0x9ce <__mulsf3_pse+0x82>
 9d8:	86 95       	lsr	r24
 9da:	77 95       	ror	r23
 9dc:	67 95       	ror	r22
 9de:	b7 95       	ror	r27
 9e0:	f7 95       	ror	r31
 9e2:	e7 95       	ror	r30
 9e4:	9f 5f       	subi	r25, 0xFF	; 255
 9e6:	c1 f7       	brne	.-16     	; 0x9d8 <__mulsf3_pse+0x8c>
 9e8:	fe 2b       	or	r31, r30
 9ea:	88 0f       	add	r24, r24
 9ec:	91 1d       	adc	r25, r1
 9ee:	96 95       	lsr	r25
 9f0:	87 95       	ror	r24
 9f2:	97 f9       	bld	r25, 7
 9f4:	08 95       	ret

000009f6 <__fp_cmp>:
 9f6:	99 0f       	add	r25, r25
 9f8:	00 08       	sbc	r0, r0
 9fa:	55 0f       	add	r21, r21
 9fc:	aa 0b       	sbc	r26, r26
 9fe:	e0 e8       	ldi	r30, 0x80	; 128
 a00:	fe ef       	ldi	r31, 0xFE	; 254
 a02:	16 16       	cp	r1, r22
 a04:	17 06       	cpc	r1, r23
 a06:	e8 07       	cpc	r30, r24
 a08:	f9 07       	cpc	r31, r25
 a0a:	c0 f0       	brcs	.+48     	; 0xa3c <__fp_cmp+0x46>
 a0c:	12 16       	cp	r1, r18
 a0e:	13 06       	cpc	r1, r19
 a10:	e4 07       	cpc	r30, r20
 a12:	f5 07       	cpc	r31, r21
 a14:	98 f0       	brcs	.+38     	; 0xa3c <__fp_cmp+0x46>
 a16:	62 1b       	sub	r22, r18
 a18:	73 0b       	sbc	r23, r19
 a1a:	84 0b       	sbc	r24, r20
 a1c:	95 0b       	sbc	r25, r21
 a1e:	39 f4       	brne	.+14     	; 0xa2e <__fp_cmp+0x38>
 a20:	0a 26       	eor	r0, r26
 a22:	61 f0       	breq	.+24     	; 0xa3c <__fp_cmp+0x46>
 a24:	23 2b       	or	r18, r19
 a26:	24 2b       	or	r18, r20
 a28:	25 2b       	or	r18, r21
 a2a:	21 f4       	brne	.+8      	; 0xa34 <__fp_cmp+0x3e>
 a2c:	08 95       	ret
 a2e:	0a 26       	eor	r0, r26
 a30:	09 f4       	brne	.+2      	; 0xa34 <__fp_cmp+0x3e>
 a32:	a1 40       	sbci	r26, 0x01	; 1
 a34:	a6 95       	lsr	r26
 a36:	8f ef       	ldi	r24, 0xFF	; 255
 a38:	81 1d       	adc	r24, r1
 a3a:	81 1d       	adc	r24, r1
 a3c:	08 95       	ret

00000a3e <__udivmodsi4>:
 a3e:	a1 e2       	ldi	r26, 0x21	; 33
 a40:	1a 2e       	mov	r1, r26
 a42:	aa 1b       	sub	r26, r26
 a44:	bb 1b       	sub	r27, r27
 a46:	fd 01       	movw	r30, r26
 a48:	0d c0       	rjmp	.+26     	; 0xa64 <__udivmodsi4_ep>

00000a4a <__udivmodsi4_loop>:
 a4a:	aa 1f       	adc	r26, r26
 a4c:	bb 1f       	adc	r27, r27
 a4e:	ee 1f       	adc	r30, r30
 a50:	ff 1f       	adc	r31, r31
 a52:	a2 17       	cp	r26, r18
 a54:	b3 07       	cpc	r27, r19
 a56:	e4 07       	cpc	r30, r20
 a58:	f5 07       	cpc	r31, r21
 a5a:	20 f0       	brcs	.+8      	; 0xa64 <__udivmodsi4_ep>
 a5c:	a2 1b       	sub	r26, r18
 a5e:	b3 0b       	sbc	r27, r19
 a60:	e4 0b       	sbc	r30, r20
 a62:	f5 0b       	sbc	r31, r21

00000a64 <__udivmodsi4_ep>:
 a64:	66 1f       	adc	r22, r22
 a66:	77 1f       	adc	r23, r23
 a68:	88 1f       	adc	r24, r24
 a6a:	99 1f       	adc	r25, r25
 a6c:	1a 94       	dec	r1
 a6e:	69 f7       	brne	.-38     	; 0xa4a <__udivmodsi4_loop>
 a70:	60 95       	com	r22
 a72:	70 95       	com	r23
 a74:	80 95       	com	r24
 a76:	90 95       	com	r25
 a78:	9b 01       	movw	r18, r22
 a7a:	ac 01       	movw	r20, r24
 a7c:	bd 01       	movw	r22, r26
 a7e:	cf 01       	movw	r24, r30
 a80:	08 95       	ret

00000a82 <__itoa_ncheck>:
 a82:	bb 27       	eor	r27, r27
 a84:	4a 30       	cpi	r20, 0x0A	; 10
 a86:	31 f4       	brne	.+12     	; 0xa94 <__itoa_ncheck+0x12>
 a88:	99 23       	and	r25, r25
 a8a:	22 f4       	brpl	.+8      	; 0xa94 <__itoa_ncheck+0x12>
 a8c:	bd e2       	ldi	r27, 0x2D	; 45
 a8e:	90 95       	com	r25
 a90:	81 95       	neg	r24
 a92:	9f 4f       	sbci	r25, 0xFF	; 255
 a94:	01 c0       	rjmp	.+2      	; 0xa98 <__utoa_common>

00000a96 <__utoa_ncheck>:
 a96:	bb 27       	eor	r27, r27

00000a98 <__utoa_common>:
 a98:	fb 01       	movw	r30, r22
 a9a:	55 27       	eor	r21, r21
 a9c:	aa 27       	eor	r26, r26
 a9e:	88 0f       	add	r24, r24
 aa0:	99 1f       	adc	r25, r25
 aa2:	aa 1f       	adc	r26, r26
 aa4:	a4 17       	cp	r26, r20
 aa6:	10 f0       	brcs	.+4      	; 0xaac <__utoa_common+0x14>
 aa8:	a4 1b       	sub	r26, r20
 aaa:	83 95       	inc	r24
 aac:	50 51       	subi	r21, 0x10	; 16
 aae:	b9 f7       	brne	.-18     	; 0xa9e <__utoa_common+0x6>
 ab0:	a0 5d       	subi	r26, 0xD0	; 208
 ab2:	aa 33       	cpi	r26, 0x3A	; 58
 ab4:	08 f0       	brcs	.+2      	; 0xab8 <__utoa_common+0x20>
 ab6:	a9 5d       	subi	r26, 0xD9	; 217
 ab8:	a1 93       	st	Z+, r26
 aba:	00 97       	sbiw	r24, 0x00	; 0
 abc:	79 f7       	brne	.-34     	; 0xa9c <__utoa_common+0x4>
 abe:	b1 11       	cpse	r27, r1
 ac0:	b1 93       	st	Z+, r27
 ac2:	11 92       	st	Z+, r1
 ac4:	cb 01       	movw	r24, r22
 ac6:	00 c0       	rjmp	.+0      	; 0xac8 <strrev>

00000ac8 <strrev>:
 ac8:	dc 01       	movw	r26, r24
 aca:	fc 01       	movw	r30, r24
 acc:	67 2f       	mov	r22, r23
 ace:	71 91       	ld	r23, Z+
 ad0:	77 23       	and	r23, r23
 ad2:	e1 f7       	brne	.-8      	; 0xacc <strrev+0x4>
 ad4:	32 97       	sbiw	r30, 0x02	; 2
 ad6:	04 c0       	rjmp	.+8      	; 0xae0 <strrev+0x18>
 ad8:	7c 91       	ld	r23, X
 ada:	6d 93       	st	X+, r22
 adc:	70 83       	st	Z, r23
 ade:	62 91       	ld	r22, -Z
 ae0:	ae 17       	cp	r26, r30
 ae2:	bf 07       	cpc	r27, r31
 ae4:	c8 f3       	brcs	.-14     	; 0xad8 <strrev+0x10>
 ae6:	08 95       	ret

00000ae8 <eeprom_read_dword>:
 ae8:	a6 e1       	ldi	r26, 0x16	; 22
 aea:	b0 e0       	ldi	r27, 0x00	; 0
 aec:	44 e0       	ldi	r20, 0x04	; 4
 aee:	50 e0       	ldi	r21, 0x00	; 0
 af0:	0a c0       	rjmp	.+20     	; 0xb06 <eeprom_read_blraw>

00000af2 <eeprom_update_dword>:
 af2:	03 96       	adiw	r24, 0x03	; 3
 af4:	27 2f       	mov	r18, r23
 af6:	16 d0       	rcall	.+44     	; 0xb24 <eeprom_update_r18>
 af8:	14 d0       	rcall	.+40     	; 0xb22 <eeprom_update_byte>
 afa:	25 2f       	mov	r18, r21
 afc:	13 d0       	rcall	.+38     	; 0xb24 <eeprom_update_r18>
 afe:	24 2f       	mov	r18, r20
 b00:	11 c0       	rjmp	.+34     	; 0xb24 <eeprom_update_r18>

00000b02 <eeprom_read_block>:
 b02:	dc 01       	movw	r26, r24
 b04:	cb 01       	movw	r24, r22

00000b06 <eeprom_read_blraw>:
 b06:	fc 01       	movw	r30, r24
 b08:	f9 99       	sbic	0x1f, 1	; 31
 b0a:	fe cf       	rjmp	.-4      	; 0xb08 <eeprom_read_blraw+0x2>
 b0c:	06 c0       	rjmp	.+12     	; 0xb1a <eeprom_read_blraw+0x14>
 b0e:	f2 bd       	out	0x22, r31	; 34
 b10:	e1 bd       	out	0x21, r30	; 33
 b12:	f8 9a       	sbi	0x1f, 0	; 31
 b14:	31 96       	adiw	r30, 0x01	; 1
 b16:	00 b4       	in	r0, 0x20	; 32
 b18:	0d 92       	st	X+, r0
 b1a:	41 50       	subi	r20, 0x01	; 1
 b1c:	50 40       	sbci	r21, 0x00	; 0
 b1e:	b8 f7       	brcc	.-18     	; 0xb0e <eeprom_read_blraw+0x8>
 b20:	08 95       	ret

00000b22 <eeprom_update_byte>:
 b22:	26 2f       	mov	r18, r22

00000b24 <eeprom_update_r18>:
 b24:	f9 99       	sbic	0x1f, 1	; 31
 b26:	fe cf       	rjmp	.-4      	; 0xb24 <eeprom_update_r18>
 b28:	92 bd       	out	0x22, r25	; 34
 b2a:	81 bd       	out	0x21, r24	; 33
 b2c:	f8 9a       	sbi	0x1f, 0	; 31
 b2e:	01 97       	sbiw	r24, 0x01	; 1
 b30:	00 b4       	in	r0, 0x20	; 32
 b32:	02 16       	cp	r0, r18
 b34:	39 f0       	breq	.+14     	; 0xb44 <eeprom_update_r18+0x20>
 b36:	1f ba       	out	0x1f, r1	; 31
 b38:	20 bd       	out	0x20, r18	; 32
 b3a:	0f b6       	in	r0, 0x3f	; 63
 b3c:	f8 94       	cli
 b3e:	fa 9a       	sbi	0x1f, 2	; 31
 b40:	f9 9a       	sbi	0x1f, 1	; 31
 b42:	0f be       	out	0x3f, r0	; 63
 b44:	08 95       	ret

00000b46 <_exit>:
 b46:	f8 94       	cli

00000b48 <__stop_program>:
 b48:	ff cf       	rjmp	.-2      	; 0xb48 <__stop_program>
