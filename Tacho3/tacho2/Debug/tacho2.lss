
tacho2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  0000094e  000009e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000094e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800218  00800218  000009fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001468  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f34  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000067a  00000000  00000000  00002eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00003534  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000709  00000000  00000000  00003710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000663  00000000  00000000  00003e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000447c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	d2 c0       	rjmp	.+420    	; 0x1ba <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	e8 c0       	rjmp	.+464    	; 0x20e <__vector_15>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e4       	ldi	r30, 0x4E	; 78
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 31       	cpi	r26, 0x18	; 24
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e1       	ldi	r26, 0x18	; 24
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 32       	cpi	r26, 0x2C	; 44
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	14 c4       	rjmp	.+2088   	; 0x94a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
// Select the UART to test (UART0, UART1, UART2 or UART3)
#define myUART UART0

int main(void)
{
	initSpeedSensor(65); //65 cm wheel diameter
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	82 e8       	ldi	r24, 0x82	; 130
 12a:	92 e4       	ldi	r25, 0x42	; 66
 12c:	b2 d0       	rcall	.+356    	; 0x292 <initSpeedSensor>
	
	//uart setup
	InitUART(myUART, 9600, 8, 'N');
 12e:	0e e4       	ldi	r16, 0x4E	; 78
 130:	28 e0       	ldi	r18, 0x08	; 8
 132:	40 e8       	ldi	r20, 0x80	; 128
 134:	55 e2       	ldi	r21, 0x25	; 37
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	80 ec       	ldi	r24, 0xC0	; 192
 13c:	90 e0       	ldi	r25, 0x00	; 0
	
	while (1)
	{
		kmTotal = getTripDistance();
 13e:	31 d1       	rcall	.+610    	; 0x3a2 <InitUART>
 140:	04 d1       	rcall	.+520    	; 0x34a <getTripDistance>
 142:	8c d2       	rcall	.+1304   	; 0x65c <__fixsfsi>
 144:	70 93 27 02 	sts	0x0227, r23	; 0x800227 <kmTotal+0x1>
 148:	60 93 26 02 	sts	0x0226, r22	; 0x800226 <kmTotal>
 14c:	2d 98       	cbi	0x05, 5	; 5
		
			
		PORTB &= ~(1<<PB5); //debug 
 14e:	60 e0       	ldi	r22, 0x00	; 0
		
		SendString(myUART, "KMH: ");
 150:	72 e0       	ldi	r23, 0x02	; 2
 152:	80 ec       	ldi	r24, 0xC0	; 192
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	7e d1       	rcall	.+764    	; 0x454 <SendString>
		float f = getSpeedKMH();
 158:	be d0       	rcall	.+380    	; 0x2d6 <getSpeedKMH>
 15a:	4b 01       	movw	r8, r22
 15c:	5c 01       	movw	r10, r24
		int r = (int)f;
 15e:	7e d2       	rcall	.+1276   	; 0x65c <__fixsfsi>
 160:	6b 01       	movw	r12, r22
 162:	7c 01       	movw	r14, r24
		int d = (f-r)*100;
		SendInteger(myUART,r);
 164:	80 ec       	ldi	r24, 0xC0	; 192
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	89 d1       	rcall	.+786    	; 0x47c <SendInteger>
 16a:	6e e2       	ldi	r22, 0x2E	; 46
		SendChar(myUART,'.');
 16c:	80 ec       	ldi	r24, 0xC0	; 192
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	6b d1       	rcall	.+726    	; 0x448 <SendChar>
 172:	b6 01       	movw	r22, r12
		SendInteger(myUART,d);
 174:	dd 0c       	add	r13, r13
 176:	88 0b       	sbc	r24, r24
 178:	99 0b       	sbc	r25, r25
 17a:	a3 d2       	rcall	.+1350   	; 0x6c2 <__floatsisf>
 17c:	9b 01       	movw	r18, r22
 17e:	ac 01       	movw	r20, r24
 180:	c5 01       	movw	r24, r10
 182:	b4 01       	movw	r22, r8
 184:	9e d1       	rcall	.+828    	; 0x4c2 <__subsf3>
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	48 ec       	ldi	r20, 0xC8	; 200
 18c:	52 e4       	ldi	r21, 0x42	; 66
 18e:	25 d3       	rcall	.+1610   	; 0x7da <__mulsf3>
 190:	65 d2       	rcall	.+1226   	; 0x65c <__fixsfsi>
 192:	80 ec       	ldi	r24, 0xC0	; 192
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	72 d1       	rcall	.+740    	; 0x47c <SendInteger>
 198:	66 e0       	ldi	r22, 0x06	; 6
		
		
		SendString(myUART, "     KHM_TOTAL: ");
 19a:	72 e0       	ldi	r23, 0x02	; 2
 19c:	80 ec       	ldi	r24, 0xC0	; 192
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	59 d1       	rcall	.+690    	; 0x454 <SendString>
 1a2:	60 91 26 02 	lds	r22, 0x0226	; 0x800226 <kmTotal>
		SendInteger(myUART, kmTotal);
 1a6:	70 91 27 02 	lds	r23, 0x0227	; 0x800227 <kmTotal+0x1>
 1aa:	80 ec       	ldi	r24, 0xC0	; 192
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	66 d1       	rcall	.+716    	; 0x47c <SendInteger>
 1b0:	6d e0       	ldi	r22, 0x0D	; 13
 1b2:	80 ec       	ldi	r24, 0xC0	; 192
		SendChar(myUART,'\r'); //newline
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	48 d1       	rcall	.+656    	; 0x448 <SendChar>
 1b8:	c3 cf       	rjmp	.-122    	; 0x140 <main+0x1c>

000001ba <__vector_5>:
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
	}
}


ISR(INT4_vect)
{
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
	revolutionsTrip++; //Counts up the revolutions for calculating trip length
 1cc:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <revolutionsTrip>
 1d0:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <revolutionsTrip+0x1>
 1d4:	a0 91 24 02 	lds	r26, 0x0224	; 0x800224 <revolutionsTrip+0x2>
 1d8:	b0 91 25 02 	lds	r27, 0x0225	; 0x800225 <revolutionsTrip+0x3>
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	a1 1d       	adc	r26, r1
 1e0:	b1 1d       	adc	r27, r1
 1e2:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <revolutionsTrip>
 1e6:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <revolutionsTrip+0x1>
 1ea:	a0 93 24 02 	sts	0x0224, r26	; 0x800224 <revolutionsTrip+0x2>
 1ee:	b0 93 25 02 	sts	0x0225, r27	; 0x800225 <revolutionsTrip+0x3>
	revolutionsForCalc++; //Counts up the revolutions for speed calculation.
 1f2:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <revolutionsForCalc>
 1f6:	8f 5f       	subi	r24, 0xFF	; 255
 1f8:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <revolutionsForCalc>
}
 1fc:	bf 91       	pop	r27
 1fe:	af 91       	pop	r26
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <__vector_15>:


//TIMER 2 interrupts every second to measure how many revolutions the wheel has made.
ISR(TIMER2_OVF_vect)
{
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	0b b6       	in	r0, 0x3b	; 59
 21a:	0f 92       	push	r0
 21c:	2f 93       	push	r18
 21e:	3f 93       	push	r19
 220:	4f 93       	push	r20
 222:	5f 93       	push	r21
 224:	6f 93       	push	r22
 226:	7f 93       	push	r23
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	af 93       	push	r26
 22e:	bf 93       	push	r27
 230:	ef 93       	push	r30
 232:	ff 93       	push	r31
	// After 62500 interrupts overflows the timer counts another timer to get other times. 
	// Because of CPU clock and prescaling 8bit timer overflows every 16.063 us. Delay=prescaler*(OCRn+1)/fcpu
	timerOverflows++;
 234:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <timerOverflows>
 238:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <timerOverflows+0x1>
 23c:	01 96       	adiw	r24, 0x01	; 1
	
	if (timerOverflows == 62500)	// 16.063us*62500=1.004s
 23e:	84 32       	cpi	r24, 0x24	; 36
 240:	24 ef       	ldi	r18, 0xF4	; 244
 242:	92 07       	cpc	r25, r18
 244:	29 f0       	breq	.+10     	; 0x250 <__vector_15+0x42>
//TIMER 2 interrupts every second to measure how many revolutions the wheel has made.
ISR(TIMER2_OVF_vect)
{
	// After 62500 interrupts overflows the timer counts another timer to get other times. 
	// Because of CPU clock and prescaling 8bit timer overflows every 16.063 us. Delay=prescaler*(OCRn+1)/fcpu
	timerOverflows++;
 246:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <timerOverflows+0x1>
 24a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <timerOverflows>
 24e:	0e c0       	rjmp	.+28     	; 0x26c <__vector_15+0x5e>
	
	if (timerOverflows == 62500)	// 16.063us*62500=1.004s
	{
		timerOverflows = 0; //reset timer
 250:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <timerOverflows+0x1>
 254:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <timerOverflows>
		PORTB |=(1<<PB5); //debug
 258:	2d 9a       	sbi	0x05, 5	; 5
		
		updateRevForCalc(revolutionsForCalc);
 25a:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <revolutionsForCalc>
 25e:	8d d0       	rcall	.+282    	; 0x37a <updateRevForCalc>
		revolutionsForCalc=0; //Resetting after getting value for KHM calculation  
 260:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <revolutionsForCalc>
		timerCount=0; //Resetting before getting value.
 264:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <timerCount+0x1>
 268:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <timerCount>
	}

 26c:	ff 91       	pop	r31
 26e:	ef 91       	pop	r30
 270:	bf 91       	pop	r27
 272:	af 91       	pop	r26
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	7f 91       	pop	r23
 27a:	6f 91       	pop	r22
 27c:	5f 91       	pop	r21
 27e:	4f 91       	pop	r20
 280:	3f 91       	pop	r19
 282:	2f 91       	pop	r18
 284:	0f 90       	pop	r0
 286:	0b be       	out	0x3b, r0	; 59
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <initSpeedSensor>:
static float sumint8(uint8_t* revs);

void initSpeedSensor(float wheelDiameter)
{
	float wheelD=(wheelDiameter/200); //Calculations to meters centered ( /100 & /2)
	revLength=(wheelD*3.1415); //One revolution gives meters
 292:	20 e0       	ldi	r18, 0x00	; 0
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	48 e4       	ldi	r20, 0x48	; 72
 298:	53 e4       	ldi	r21, 0x43	; 67
 29a:	78 d1       	rcall	.+752    	; 0x58c <__divsf3>
 29c:	26 e5       	ldi	r18, 0x56	; 86
 29e:	3e e0       	ldi	r19, 0x0E	; 14
 2a0:	49 e4       	ldi	r20, 0x49	; 73
 2a2:	50 e4       	ldi	r21, 0x40	; 64
 2a4:	9a d2       	rcall	.+1332   	; 0x7da <__mulsf3>
 2a6:	60 93 19 02 	sts	0x0219, r22	; 0x800219 <revLength>
 2aa:	70 93 1a 02 	sts	0x021A, r23	; 0x80021a <revLength+0x1>
 2ae:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <revLength+0x2>
 2b2:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <revLength+0x3>
	
	//Timer2 is used for keeping time of rpm measurement.
	// Timer2: Normal mode, No prescaling
	TCCR2A = 0b00000000;
 2b6:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	TCCR2B = 0b00000001;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
	// Timer2 overflow interrupt enable
	TIMSK2 |= 0b00000001;
 2c0:	e0 e7       	ldi	r30, 0x70	; 112
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	81 60       	ori	r24, 0x01	; 1
 2c8:	80 83       	st	Z, r24
	
	// INT4:Rising edge
	EICRB = 0b00000011;
 2ca:	83 e0       	ldi	r24, 0x03	; 3
 2cc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
	// Enable extern interrupts INT4 
	EIMSK |= 0b00010000;
 2d0:	ec 9a       	sbi	0x1d, 4	; 29
	
	// Global interrupt enable
	sei();
 2d2:	78 94       	sei
 2d4:	08 95       	ret

000002d6 <getSpeedKMH>:
}


float getSpeedKMH(void) //WORKS TESTED 
{
 2d6:	cf 92       	push	r12
 2d8:	df 92       	push	r13
 2da:	ef 92       	push	r14
 2dc:	ff 92       	push	r15
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	ce e1       	ldi	r28, 0x1E	; 30
 2e8:	d2 e0       	ldi	r29, 0x02	; 2
 2ea:	02 e2       	ldi	r16, 0x22	; 34
 2ec:	12 e0       	ldi	r17, 0x02	; 2
	cnt = (cnt+1) % 4;
}

static float sumint8(uint8_t* revs)
{
	float retVal = 0;
 2ee:	c1 2c       	mov	r12, r1
 2f0:	d1 2c       	mov	r13, r1
 2f2:	76 01       	movw	r14, r12
	uint8_t i = 0;
	for (i = 0; i<4; i++)
	{
		retVal += (float)revs[i];
 2f4:	69 91       	ld	r22, Y+
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	e0 d1       	rcall	.+960    	; 0x6be <__floatunsisf>
 2fe:	9b 01       	movw	r18, r22
 300:	ac 01       	movw	r20, r24
 302:	c7 01       	movw	r24, r14
 304:	b6 01       	movw	r22, r12
 306:	de d0       	rcall	.+444    	; 0x4c4 <__addsf3>
 308:	6b 01       	movw	r12, r22
 30a:	7c 01       	movw	r14, r24

static float sumint8(uint8_t* revs)
{
	float retVal = 0;
	uint8_t i = 0;
	for (i = 0; i<4; i++)
 30c:	c0 17       	cp	r28, r16
 30e:	d1 07       	cpc	r29, r17
 310:	89 f7       	brne	.-30     	; 0x2f4 <getSpeedKMH+0x1e>
{
	//char buffer[10];
	
	float KMH = (sumint8(revPerSec)/4)*revLength*3.6; // Revolutions per second times revolution length = m/s. time 3.6 = km/h
	
	return KMH; 
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	40 e8       	ldi	r20, 0x80	; 128
 318:	5e e3       	ldi	r21, 0x3E	; 62
 31a:	5f d2       	rcall	.+1214   	; 0x7da <__mulsf3>
 31c:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <revLength>
 320:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <revLength+0x1>
 324:	40 91 1b 02 	lds	r20, 0x021B	; 0x80021b <revLength+0x2>
 328:	50 91 1c 02 	lds	r21, 0x021C	; 0x80021c <revLength+0x3>
 32c:	56 d2       	rcall	.+1196   	; 0x7da <__mulsf3>
 32e:	26 e6       	ldi	r18, 0x66	; 102
 330:	36 e6       	ldi	r19, 0x66	; 102
 332:	46 e6       	ldi	r20, 0x66	; 102
 334:	50 e4       	ldi	r21, 0x40	; 64
 336:	51 d2       	rcall	.+1186   	; 0x7da <__mulsf3>
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	ff 90       	pop	r15
 342:	ef 90       	pop	r14
 344:	df 90       	pop	r13
 346:	cf 90       	pop	r12
 348:	08 95       	ret

0000034a <getTripDistance>:

float getTripDistance(void)  //WORKS TESTED 
{ 
	
	float KMD = ((revLength*(float)revolutionsTrip)/1000); //Total KM distance driven
	return KMD;
 34a:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <revolutionsTrip>
 34e:	70 91 23 02 	lds	r23, 0x0223	; 0x800223 <revolutionsTrip+0x1>
 352:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <revolutionsTrip+0x2>
 356:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <revolutionsTrip+0x3>
 35a:	b1 d1       	rcall	.+866    	; 0x6be <__floatunsisf>
 35c:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <revLength>
 360:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <revLength+0x1>
 364:	40 91 1b 02 	lds	r20, 0x021B	; 0x80021b <revLength+0x2>
 368:	50 91 1c 02 	lds	r21, 0x021C	; 0x80021c <revLength+0x3>
 36c:	36 d2       	rcall	.+1132   	; 0x7da <__mulsf3>
 36e:	20 e0       	ldi	r18, 0x00	; 0
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	4a e7       	ldi	r20, 0x7A	; 122
 374:	54 e4       	ldi	r21, 0x44	; 68
 376:	0a c1       	rjmp	.+532    	; 0x58c <__divsf3>
}
 378:	08 95       	ret

0000037a <updateRevForCalc>:

void updateRevForCalc(uint8_t revs)
{
	static uint8_t cnt = 0;
	revPerSec[cnt] = revs;
 37a:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <__data_end>
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	f9 01       	movw	r30, r18
 382:	e2 5e       	subi	r30, 0xE2	; 226
 384:	fd 4f       	sbci	r31, 0xFD	; 253
 386:	80 83       	st	Z, r24
	cnt = (cnt+1) % 4;
 388:	c9 01       	movw	r24, r18
 38a:	01 96       	adiw	r24, 0x01	; 1
 38c:	83 70       	andi	r24, 0x03	; 3
 38e:	90 78       	andi	r25, 0x80	; 128
 390:	99 23       	and	r25, r25
 392:	24 f4       	brge	.+8      	; 0x39c <updateRevForCalc+0x22>
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	8c 6f       	ori	r24, 0xFC	; 252
 398:	9f 6f       	ori	r25, 0xFF	; 255
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__data_end>
 3a0:	08 95       	ret

000003a2 <InitUART>:
  // Wait for new character received
  while ( (UCSRnA & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDRn;
}
 3a2:	0f 93       	push	r16
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	ec 01       	movw	r28, r24
 3aa:	db 01       	movw	r26, r22
 3ac:	ca 01       	movw	r24, r20
 3ae:	8c 52       	subi	r24, 0x2C	; 44
 3b0:	91 40       	sbci	r25, 0x01	; 1
 3b2:	a1 09       	sbc	r26, r1
 3b4:	b1 09       	sbc	r27, r1
 3b6:	85 3d       	cpi	r24, 0xD5	; 213
 3b8:	90 4c       	sbci	r25, 0xC0	; 192
 3ba:	a1 40       	sbci	r26, 0x01	; 1
 3bc:	b1 05       	cpc	r27, r1
 3be:	08 f0       	brcs	.+2      	; 0x3c2 <InitUART+0x20>
 3c0:	3f c0       	rjmp	.+126    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 3c2:	25 50       	subi	r18, 0x05	; 5
 3c4:	24 30       	cpi	r18, 0x04	; 4
 3c6:	e0 f5       	brcc	.+120    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 3c8:	80 e2       	ldi	r24, 0x20	; 32
 3ca:	88 83       	st	Y, r24
 3cc:	88 e1       	ldi	r24, 0x18	; 24
 3ce:	89 83       	std	Y+1, r24	; 0x01
 3d0:	22 0f       	add	r18, r18
 3d2:	2a 83       	std	Y+2, r18	; 0x02
 3d4:	05 34       	cpi	r16, 0x45	; 69
 3d6:	21 f4       	brne	.+8      	; 0x3e0 <InitUART+0x3e>
 3d8:	8a 81       	ldd	r24, Y+2	; 0x02
 3da:	80 62       	ori	r24, 0x20	; 32
 3dc:	8a 83       	std	Y+2, r24	; 0x02
 3de:	05 c0       	rjmp	.+10     	; 0x3ea <InitUART+0x48>
 3e0:	0f 34       	cpi	r16, 0x4F	; 79
 3e2:	19 f4       	brne	.+6      	; 0x3ea <InitUART+0x48>
 3e4:	8a 81       	ldd	r24, Y+2	; 0x02
 3e6:	80 63       	ori	r24, 0x30	; 48
 3e8:	8a 83       	std	Y+2, r24	; 0x02
 3ea:	db 01       	movw	r26, r22
 3ec:	ca 01       	movw	r24, r20
 3ee:	80 58       	subi	r24, 0x80	; 128
 3f0:	9b 47       	sbci	r25, 0x7B	; 123
 3f2:	a1 4e       	sbci	r26, 0xE1	; 225
 3f4:	bf 4f       	sbci	r27, 0xFF	; 255
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	aa 1f       	adc	r26, r26
 3fc:	bb 1f       	adc	r27, r27
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	aa 1f       	adc	r26, r26
 404:	bb 1f       	adc	r27, r27
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	aa 1f       	adc	r26, r26
 40c:	bb 1f       	adc	r27, r27
 40e:	44 0f       	add	r20, r20
 410:	55 1f       	adc	r21, r21
 412:	66 1f       	adc	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	44 0f       	add	r20, r20
 418:	55 1f       	adc	r21, r21
 41a:	66 1f       	adc	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	9a 01       	movw	r18, r20
 420:	ab 01       	movw	r20, r22
 422:	22 0f       	add	r18, r18
 424:	33 1f       	adc	r19, r19
 426:	44 1f       	adc	r20, r20
 428:	55 1f       	adc	r21, r21
 42a:	22 0f       	add	r18, r18
 42c:	33 1f       	adc	r19, r19
 42e:	44 1f       	adc	r20, r20
 430:	55 1f       	adc	r21, r21
 432:	bc 01       	movw	r22, r24
 434:	cd 01       	movw	r24, r26
 436:	34 d2       	rcall	.+1128   	; 0x8a0 <__udivmodsi4>
 438:	21 50       	subi	r18, 0x01	; 1
 43a:	31 09       	sbc	r19, r1
 43c:	3d 83       	std	Y+5, r19	; 0x05
 43e:	2c 83       	std	Y+4, r18	; 0x04
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	0f 91       	pop	r16
 446:	08 95       	ret

00000448 <SendChar>:
Then send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(unsigned int UART_adr, char Tegn)
{
 448:	fc 01       	movw	r30, r24
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRnA & (1<<5)) == 0 )
 44a:	90 81       	ld	r25, Z
 44c:	95 ff       	sbrs	r25, 5
 44e:	fd cf       	rjmp	.-6      	; 0x44a <SendChar+0x2>
  {}
  // Then send the character
  UDRn = Tegn;
 450:	66 83       	std	Z+6, r22	; 0x06
 452:	08 95       	ret

00000454 <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
 454:	0f 93       	push	r16
 456:	1f 93       	push	r17
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	eb 01       	movw	r28, r22
  // Repeat until zero-termination
  while (*Streng != 0)
 45e:	68 81       	ld	r22, Y
 460:	66 23       	and	r22, r22
 462:	39 f0       	breq	.+14     	; 0x472 <SendString+0x1e>
 464:	8c 01       	movw	r16, r24
 466:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
 468:	c8 01       	movw	r24, r16
 46a:	ee df       	rcall	.-36     	; 0x448 <SendChar>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 46c:	69 91       	ld	r22, Y+
 46e:	61 11       	cpse	r22, r1
 470:	fb cf       	rjmp	.-10     	; 0x468 <SendString+0x14>
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	1f 91       	pop	r17
 478:	0f 91       	pop	r16
 47a:	08 95       	ret

0000047c <SendInteger>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(unsigned int UART_adr, int Tal)
{
 47c:	0f 93       	push	r16
 47e:	1f 93       	push	r17
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
 488:	27 97       	sbiw	r28, 0x07	; 7
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	f8 94       	cli
 48e:	de bf       	out	0x3e, r29	; 62
 490:	0f be       	out	0x3f, r0	; 63
 492:	cd bf       	out	0x3d, r28	; 61
 494:	8c 01       	movw	r16, r24
 496:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 498:	4a e0       	ldi	r20, 0x0A	; 10
 49a:	be 01       	movw	r22, r28
 49c:	6f 5f       	subi	r22, 0xFF	; 255
 49e:	7f 4f       	sbci	r23, 0xFF	; 255
 4a0:	21 d2       	rcall	.+1090   	; 0x8e4 <__itoa_ncheck>
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Tal, array, 10);
  // - then send the string
  SendString(UART_adr, array);
 4a2:	be 01       	movw	r22, r28
 4a4:	6f 5f       	subi	r22, 0xFF	; 255
 4a6:	7f 4f       	sbci	r23, 0xFF	; 255
 4a8:	c8 01       	movw	r24, r16
 4aa:	d4 df       	rcall	.-88     	; 0x454 <SendString>
}
 4ac:	27 96       	adiw	r28, 0x07	; 7
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	f8 94       	cli
 4b2:	de bf       	out	0x3e, r29	; 62
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	cd bf       	out	0x3d, r28	; 61
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	0f 91       	pop	r16
 4c0:	08 95       	ret

000004c2 <__subsf3>:
 4c2:	50 58       	subi	r21, 0x80	; 128

000004c4 <__addsf3>:
 4c4:	bb 27       	eor	r27, r27
 4c6:	aa 27       	eor	r26, r26
 4c8:	0e d0       	rcall	.+28     	; 0x4e6 <__addsf3x>
 4ca:	4d c1       	rjmp	.+666    	; 0x766 <__fp_round>
 4cc:	3e d1       	rcall	.+636    	; 0x74a <__fp_pscA>
 4ce:	30 f0       	brcs	.+12     	; 0x4dc <__addsf3+0x18>
 4d0:	43 d1       	rcall	.+646    	; 0x758 <__fp_pscB>
 4d2:	20 f0       	brcs	.+8      	; 0x4dc <__addsf3+0x18>
 4d4:	31 f4       	brne	.+12     	; 0x4e2 <__addsf3+0x1e>
 4d6:	9f 3f       	cpi	r25, 0xFF	; 255
 4d8:	11 f4       	brne	.+4      	; 0x4de <__addsf3+0x1a>
 4da:	1e f4       	brtc	.+6      	; 0x4e2 <__addsf3+0x1e>
 4dc:	33 c1       	rjmp	.+614    	; 0x744 <__fp_nan>
 4de:	0e f4       	brtc	.+2      	; 0x4e2 <__addsf3+0x1e>
 4e0:	e0 95       	com	r30
 4e2:	e7 fb       	bst	r30, 7
 4e4:	29 c1       	rjmp	.+594    	; 0x738 <__fp_inf>

000004e6 <__addsf3x>:
 4e6:	e9 2f       	mov	r30, r25
 4e8:	4f d1       	rcall	.+670    	; 0x788 <__fp_split3>
 4ea:	80 f3       	brcs	.-32     	; 0x4cc <__addsf3+0x8>
 4ec:	ba 17       	cp	r27, r26
 4ee:	62 07       	cpc	r22, r18
 4f0:	73 07       	cpc	r23, r19
 4f2:	84 07       	cpc	r24, r20
 4f4:	95 07       	cpc	r25, r21
 4f6:	18 f0       	brcs	.+6      	; 0x4fe <__addsf3x+0x18>
 4f8:	71 f4       	brne	.+28     	; 0x516 <__addsf3x+0x30>
 4fa:	9e f5       	brtc	.+102    	; 0x562 <__addsf3x+0x7c>
 4fc:	67 c1       	rjmp	.+718    	; 0x7cc <__fp_zero>
 4fe:	0e f4       	brtc	.+2      	; 0x502 <__addsf3x+0x1c>
 500:	e0 95       	com	r30
 502:	0b 2e       	mov	r0, r27
 504:	ba 2f       	mov	r27, r26
 506:	a0 2d       	mov	r26, r0
 508:	0b 01       	movw	r0, r22
 50a:	b9 01       	movw	r22, r18
 50c:	90 01       	movw	r18, r0
 50e:	0c 01       	movw	r0, r24
 510:	ca 01       	movw	r24, r20
 512:	a0 01       	movw	r20, r0
 514:	11 24       	eor	r1, r1
 516:	ff 27       	eor	r31, r31
 518:	59 1b       	sub	r21, r25
 51a:	99 f0       	breq	.+38     	; 0x542 <__addsf3x+0x5c>
 51c:	59 3f       	cpi	r21, 0xF9	; 249
 51e:	50 f4       	brcc	.+20     	; 0x534 <__addsf3x+0x4e>
 520:	50 3e       	cpi	r21, 0xE0	; 224
 522:	68 f1       	brcs	.+90     	; 0x57e <__addsf3x+0x98>
 524:	1a 16       	cp	r1, r26
 526:	f0 40       	sbci	r31, 0x00	; 0
 528:	a2 2f       	mov	r26, r18
 52a:	23 2f       	mov	r18, r19
 52c:	34 2f       	mov	r19, r20
 52e:	44 27       	eor	r20, r20
 530:	58 5f       	subi	r21, 0xF8	; 248
 532:	f3 cf       	rjmp	.-26     	; 0x51a <__addsf3x+0x34>
 534:	46 95       	lsr	r20
 536:	37 95       	ror	r19
 538:	27 95       	ror	r18
 53a:	a7 95       	ror	r26
 53c:	f0 40       	sbci	r31, 0x00	; 0
 53e:	53 95       	inc	r21
 540:	c9 f7       	brne	.-14     	; 0x534 <__addsf3x+0x4e>
 542:	7e f4       	brtc	.+30     	; 0x562 <__addsf3x+0x7c>
 544:	1f 16       	cp	r1, r31
 546:	ba 0b       	sbc	r27, r26
 548:	62 0b       	sbc	r22, r18
 54a:	73 0b       	sbc	r23, r19
 54c:	84 0b       	sbc	r24, r20
 54e:	ba f0       	brmi	.+46     	; 0x57e <__addsf3x+0x98>
 550:	91 50       	subi	r25, 0x01	; 1
 552:	a1 f0       	breq	.+40     	; 0x57c <__addsf3x+0x96>
 554:	ff 0f       	add	r31, r31
 556:	bb 1f       	adc	r27, r27
 558:	66 1f       	adc	r22, r22
 55a:	77 1f       	adc	r23, r23
 55c:	88 1f       	adc	r24, r24
 55e:	c2 f7       	brpl	.-16     	; 0x550 <__addsf3x+0x6a>
 560:	0e c0       	rjmp	.+28     	; 0x57e <__addsf3x+0x98>
 562:	ba 0f       	add	r27, r26
 564:	62 1f       	adc	r22, r18
 566:	73 1f       	adc	r23, r19
 568:	84 1f       	adc	r24, r20
 56a:	48 f4       	brcc	.+18     	; 0x57e <__addsf3x+0x98>
 56c:	87 95       	ror	r24
 56e:	77 95       	ror	r23
 570:	67 95       	ror	r22
 572:	b7 95       	ror	r27
 574:	f7 95       	ror	r31
 576:	9e 3f       	cpi	r25, 0xFE	; 254
 578:	08 f0       	brcs	.+2      	; 0x57c <__addsf3x+0x96>
 57a:	b3 cf       	rjmp	.-154    	; 0x4e2 <__addsf3+0x1e>
 57c:	93 95       	inc	r25
 57e:	88 0f       	add	r24, r24
 580:	08 f0       	brcs	.+2      	; 0x584 <__addsf3x+0x9e>
 582:	99 27       	eor	r25, r25
 584:	ee 0f       	add	r30, r30
 586:	97 95       	ror	r25
 588:	87 95       	ror	r24
 58a:	08 95       	ret

0000058c <__divsf3>:
 58c:	0c d0       	rcall	.+24     	; 0x5a6 <__divsf3x>
 58e:	eb c0       	rjmp	.+470    	; 0x766 <__fp_round>
 590:	e3 d0       	rcall	.+454    	; 0x758 <__fp_pscB>
 592:	40 f0       	brcs	.+16     	; 0x5a4 <__divsf3+0x18>
 594:	da d0       	rcall	.+436    	; 0x74a <__fp_pscA>
 596:	30 f0       	brcs	.+12     	; 0x5a4 <__divsf3+0x18>
 598:	21 f4       	brne	.+8      	; 0x5a2 <__divsf3+0x16>
 59a:	5f 3f       	cpi	r21, 0xFF	; 255
 59c:	19 f0       	breq	.+6      	; 0x5a4 <__divsf3+0x18>
 59e:	cc c0       	rjmp	.+408    	; 0x738 <__fp_inf>
 5a0:	51 11       	cpse	r21, r1
 5a2:	15 c1       	rjmp	.+554    	; 0x7ce <__fp_szero>
 5a4:	cf c0       	rjmp	.+414    	; 0x744 <__fp_nan>

000005a6 <__divsf3x>:
 5a6:	f0 d0       	rcall	.+480    	; 0x788 <__fp_split3>
 5a8:	98 f3       	brcs	.-26     	; 0x590 <__divsf3+0x4>

000005aa <__divsf3_pse>:
 5aa:	99 23       	and	r25, r25
 5ac:	c9 f3       	breq	.-14     	; 0x5a0 <__divsf3+0x14>
 5ae:	55 23       	and	r21, r21
 5b0:	b1 f3       	breq	.-20     	; 0x59e <__divsf3+0x12>
 5b2:	95 1b       	sub	r25, r21
 5b4:	55 0b       	sbc	r21, r21
 5b6:	bb 27       	eor	r27, r27
 5b8:	aa 27       	eor	r26, r26
 5ba:	62 17       	cp	r22, r18
 5bc:	73 07       	cpc	r23, r19
 5be:	84 07       	cpc	r24, r20
 5c0:	38 f0       	brcs	.+14     	; 0x5d0 <__divsf3_pse+0x26>
 5c2:	9f 5f       	subi	r25, 0xFF	; 255
 5c4:	5f 4f       	sbci	r21, 0xFF	; 255
 5c6:	22 0f       	add	r18, r18
 5c8:	33 1f       	adc	r19, r19
 5ca:	44 1f       	adc	r20, r20
 5cc:	aa 1f       	adc	r26, r26
 5ce:	a9 f3       	breq	.-22     	; 0x5ba <__divsf3_pse+0x10>
 5d0:	33 d0       	rcall	.+102    	; 0x638 <__divsf3_pse+0x8e>
 5d2:	0e 2e       	mov	r0, r30
 5d4:	3a f0       	brmi	.+14     	; 0x5e4 <__divsf3_pse+0x3a>
 5d6:	e0 e8       	ldi	r30, 0x80	; 128
 5d8:	30 d0       	rcall	.+96     	; 0x63a <__divsf3_pse+0x90>
 5da:	91 50       	subi	r25, 0x01	; 1
 5dc:	50 40       	sbci	r21, 0x00	; 0
 5de:	e6 95       	lsr	r30
 5e0:	00 1c       	adc	r0, r0
 5e2:	ca f7       	brpl	.-14     	; 0x5d6 <__divsf3_pse+0x2c>
 5e4:	29 d0       	rcall	.+82     	; 0x638 <__divsf3_pse+0x8e>
 5e6:	fe 2f       	mov	r31, r30
 5e8:	27 d0       	rcall	.+78     	; 0x638 <__divsf3_pse+0x8e>
 5ea:	66 0f       	add	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	88 1f       	adc	r24, r24
 5f0:	bb 1f       	adc	r27, r27
 5f2:	26 17       	cp	r18, r22
 5f4:	37 07       	cpc	r19, r23
 5f6:	48 07       	cpc	r20, r24
 5f8:	ab 07       	cpc	r26, r27
 5fa:	b0 e8       	ldi	r27, 0x80	; 128
 5fc:	09 f0       	breq	.+2      	; 0x600 <__divsf3_pse+0x56>
 5fe:	bb 0b       	sbc	r27, r27
 600:	80 2d       	mov	r24, r0
 602:	bf 01       	movw	r22, r30
 604:	ff 27       	eor	r31, r31
 606:	93 58       	subi	r25, 0x83	; 131
 608:	5f 4f       	sbci	r21, 0xFF	; 255
 60a:	2a f0       	brmi	.+10     	; 0x616 <__divsf3_pse+0x6c>
 60c:	9e 3f       	cpi	r25, 0xFE	; 254
 60e:	51 05       	cpc	r21, r1
 610:	68 f0       	brcs	.+26     	; 0x62c <__divsf3_pse+0x82>
 612:	92 c0       	rjmp	.+292    	; 0x738 <__fp_inf>
 614:	dc c0       	rjmp	.+440    	; 0x7ce <__fp_szero>
 616:	5f 3f       	cpi	r21, 0xFF	; 255
 618:	ec f3       	brlt	.-6      	; 0x614 <__divsf3_pse+0x6a>
 61a:	98 3e       	cpi	r25, 0xE8	; 232
 61c:	dc f3       	brlt	.-10     	; 0x614 <__divsf3_pse+0x6a>
 61e:	86 95       	lsr	r24
 620:	77 95       	ror	r23
 622:	67 95       	ror	r22
 624:	b7 95       	ror	r27
 626:	f7 95       	ror	r31
 628:	9f 5f       	subi	r25, 0xFF	; 255
 62a:	c9 f7       	brne	.-14     	; 0x61e <__divsf3_pse+0x74>
 62c:	88 0f       	add	r24, r24
 62e:	91 1d       	adc	r25, r1
 630:	96 95       	lsr	r25
 632:	87 95       	ror	r24
 634:	97 f9       	bld	r25, 7
 636:	08 95       	ret
 638:	e1 e0       	ldi	r30, 0x01	; 1
 63a:	66 0f       	add	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	88 1f       	adc	r24, r24
 640:	bb 1f       	adc	r27, r27
 642:	62 17       	cp	r22, r18
 644:	73 07       	cpc	r23, r19
 646:	84 07       	cpc	r24, r20
 648:	ba 07       	cpc	r27, r26
 64a:	20 f0       	brcs	.+8      	; 0x654 <__divsf3_pse+0xaa>
 64c:	62 1b       	sub	r22, r18
 64e:	73 0b       	sbc	r23, r19
 650:	84 0b       	sbc	r24, r20
 652:	ba 0b       	sbc	r27, r26
 654:	ee 1f       	adc	r30, r30
 656:	88 f7       	brcc	.-30     	; 0x63a <__divsf3_pse+0x90>
 658:	e0 95       	com	r30
 65a:	08 95       	ret

0000065c <__fixsfsi>:
 65c:	04 d0       	rcall	.+8      	; 0x666 <__fixunssfsi>
 65e:	68 94       	set
 660:	b1 11       	cpse	r27, r1
 662:	b5 c0       	rjmp	.+362    	; 0x7ce <__fp_szero>
 664:	08 95       	ret

00000666 <__fixunssfsi>:
 666:	98 d0       	rcall	.+304    	; 0x798 <__fp_splitA>
 668:	88 f0       	brcs	.+34     	; 0x68c <__fixunssfsi+0x26>
 66a:	9f 57       	subi	r25, 0x7F	; 127
 66c:	90 f0       	brcs	.+36     	; 0x692 <__fixunssfsi+0x2c>
 66e:	b9 2f       	mov	r27, r25
 670:	99 27       	eor	r25, r25
 672:	b7 51       	subi	r27, 0x17	; 23
 674:	a0 f0       	brcs	.+40     	; 0x69e <__fixunssfsi+0x38>
 676:	d1 f0       	breq	.+52     	; 0x6ac <__fixunssfsi+0x46>
 678:	66 0f       	add	r22, r22
 67a:	77 1f       	adc	r23, r23
 67c:	88 1f       	adc	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	1a f0       	brmi	.+6      	; 0x688 <__fixunssfsi+0x22>
 682:	ba 95       	dec	r27
 684:	c9 f7       	brne	.-14     	; 0x678 <__fixunssfsi+0x12>
 686:	12 c0       	rjmp	.+36     	; 0x6ac <__fixunssfsi+0x46>
 688:	b1 30       	cpi	r27, 0x01	; 1
 68a:	81 f0       	breq	.+32     	; 0x6ac <__fixunssfsi+0x46>
 68c:	9f d0       	rcall	.+318    	; 0x7cc <__fp_zero>
 68e:	b1 e0       	ldi	r27, 0x01	; 1
 690:	08 95       	ret
 692:	9c c0       	rjmp	.+312    	; 0x7cc <__fp_zero>
 694:	67 2f       	mov	r22, r23
 696:	78 2f       	mov	r23, r24
 698:	88 27       	eor	r24, r24
 69a:	b8 5f       	subi	r27, 0xF8	; 248
 69c:	39 f0       	breq	.+14     	; 0x6ac <__fixunssfsi+0x46>
 69e:	b9 3f       	cpi	r27, 0xF9	; 249
 6a0:	cc f3       	brlt	.-14     	; 0x694 <__fixunssfsi+0x2e>
 6a2:	86 95       	lsr	r24
 6a4:	77 95       	ror	r23
 6a6:	67 95       	ror	r22
 6a8:	b3 95       	inc	r27
 6aa:	d9 f7       	brne	.-10     	; 0x6a2 <__fixunssfsi+0x3c>
 6ac:	3e f4       	brtc	.+14     	; 0x6bc <__fixunssfsi+0x56>
 6ae:	90 95       	com	r25
 6b0:	80 95       	com	r24
 6b2:	70 95       	com	r23
 6b4:	61 95       	neg	r22
 6b6:	7f 4f       	sbci	r23, 0xFF	; 255
 6b8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ba:	9f 4f       	sbci	r25, 0xFF	; 255
 6bc:	08 95       	ret

000006be <__floatunsisf>:
 6be:	e8 94       	clt
 6c0:	09 c0       	rjmp	.+18     	; 0x6d4 <__floatsisf+0x12>

000006c2 <__floatsisf>:
 6c2:	97 fb       	bst	r25, 7
 6c4:	3e f4       	brtc	.+14     	; 0x6d4 <__floatsisf+0x12>
 6c6:	90 95       	com	r25
 6c8:	80 95       	com	r24
 6ca:	70 95       	com	r23
 6cc:	61 95       	neg	r22
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
 6d0:	8f 4f       	sbci	r24, 0xFF	; 255
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	99 23       	and	r25, r25
 6d6:	a9 f0       	breq	.+42     	; 0x702 <__floatsisf+0x40>
 6d8:	f9 2f       	mov	r31, r25
 6da:	96 e9       	ldi	r25, 0x96	; 150
 6dc:	bb 27       	eor	r27, r27
 6de:	93 95       	inc	r25
 6e0:	f6 95       	lsr	r31
 6e2:	87 95       	ror	r24
 6e4:	77 95       	ror	r23
 6e6:	67 95       	ror	r22
 6e8:	b7 95       	ror	r27
 6ea:	f1 11       	cpse	r31, r1
 6ec:	f8 cf       	rjmp	.-16     	; 0x6de <__floatsisf+0x1c>
 6ee:	fa f4       	brpl	.+62     	; 0x72e <__floatsisf+0x6c>
 6f0:	bb 0f       	add	r27, r27
 6f2:	11 f4       	brne	.+4      	; 0x6f8 <__floatsisf+0x36>
 6f4:	60 ff       	sbrs	r22, 0
 6f6:	1b c0       	rjmp	.+54     	; 0x72e <__floatsisf+0x6c>
 6f8:	6f 5f       	subi	r22, 0xFF	; 255
 6fa:	7f 4f       	sbci	r23, 0xFF	; 255
 6fc:	8f 4f       	sbci	r24, 0xFF	; 255
 6fe:	9f 4f       	sbci	r25, 0xFF	; 255
 700:	16 c0       	rjmp	.+44     	; 0x72e <__floatsisf+0x6c>
 702:	88 23       	and	r24, r24
 704:	11 f0       	breq	.+4      	; 0x70a <__floatsisf+0x48>
 706:	96 e9       	ldi	r25, 0x96	; 150
 708:	11 c0       	rjmp	.+34     	; 0x72c <__floatsisf+0x6a>
 70a:	77 23       	and	r23, r23
 70c:	21 f0       	breq	.+8      	; 0x716 <__floatsisf+0x54>
 70e:	9e e8       	ldi	r25, 0x8E	; 142
 710:	87 2f       	mov	r24, r23
 712:	76 2f       	mov	r23, r22
 714:	05 c0       	rjmp	.+10     	; 0x720 <__floatsisf+0x5e>
 716:	66 23       	and	r22, r22
 718:	71 f0       	breq	.+28     	; 0x736 <__floatsisf+0x74>
 71a:	96 e8       	ldi	r25, 0x86	; 134
 71c:	86 2f       	mov	r24, r22
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	60 e0       	ldi	r22, 0x00	; 0
 722:	2a f0       	brmi	.+10     	; 0x72e <__floatsisf+0x6c>
 724:	9a 95       	dec	r25
 726:	66 0f       	add	r22, r22
 728:	77 1f       	adc	r23, r23
 72a:	88 1f       	adc	r24, r24
 72c:	da f7       	brpl	.-10     	; 0x724 <__floatsisf+0x62>
 72e:	88 0f       	add	r24, r24
 730:	96 95       	lsr	r25
 732:	87 95       	ror	r24
 734:	97 f9       	bld	r25, 7
 736:	08 95       	ret

00000738 <__fp_inf>:
 738:	97 f9       	bld	r25, 7
 73a:	9f 67       	ori	r25, 0x7F	; 127
 73c:	80 e8       	ldi	r24, 0x80	; 128
 73e:	70 e0       	ldi	r23, 0x00	; 0
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	08 95       	ret

00000744 <__fp_nan>:
 744:	9f ef       	ldi	r25, 0xFF	; 255
 746:	80 ec       	ldi	r24, 0xC0	; 192
 748:	08 95       	ret

0000074a <__fp_pscA>:
 74a:	00 24       	eor	r0, r0
 74c:	0a 94       	dec	r0
 74e:	16 16       	cp	r1, r22
 750:	17 06       	cpc	r1, r23
 752:	18 06       	cpc	r1, r24
 754:	09 06       	cpc	r0, r25
 756:	08 95       	ret

00000758 <__fp_pscB>:
 758:	00 24       	eor	r0, r0
 75a:	0a 94       	dec	r0
 75c:	12 16       	cp	r1, r18
 75e:	13 06       	cpc	r1, r19
 760:	14 06       	cpc	r1, r20
 762:	05 06       	cpc	r0, r21
 764:	08 95       	ret

00000766 <__fp_round>:
 766:	09 2e       	mov	r0, r25
 768:	03 94       	inc	r0
 76a:	00 0c       	add	r0, r0
 76c:	11 f4       	brne	.+4      	; 0x772 <__fp_round+0xc>
 76e:	88 23       	and	r24, r24
 770:	52 f0       	brmi	.+20     	; 0x786 <__fp_round+0x20>
 772:	bb 0f       	add	r27, r27
 774:	40 f4       	brcc	.+16     	; 0x786 <__fp_round+0x20>
 776:	bf 2b       	or	r27, r31
 778:	11 f4       	brne	.+4      	; 0x77e <__fp_round+0x18>
 77a:	60 ff       	sbrs	r22, 0
 77c:	04 c0       	rjmp	.+8      	; 0x786 <__fp_round+0x20>
 77e:	6f 5f       	subi	r22, 0xFF	; 255
 780:	7f 4f       	sbci	r23, 0xFF	; 255
 782:	8f 4f       	sbci	r24, 0xFF	; 255
 784:	9f 4f       	sbci	r25, 0xFF	; 255
 786:	08 95       	ret

00000788 <__fp_split3>:
 788:	57 fd       	sbrc	r21, 7
 78a:	90 58       	subi	r25, 0x80	; 128
 78c:	44 0f       	add	r20, r20
 78e:	55 1f       	adc	r21, r21
 790:	59 f0       	breq	.+22     	; 0x7a8 <__fp_splitA+0x10>
 792:	5f 3f       	cpi	r21, 0xFF	; 255
 794:	71 f0       	breq	.+28     	; 0x7b2 <__fp_splitA+0x1a>
 796:	47 95       	ror	r20

00000798 <__fp_splitA>:
 798:	88 0f       	add	r24, r24
 79a:	97 fb       	bst	r25, 7
 79c:	99 1f       	adc	r25, r25
 79e:	61 f0       	breq	.+24     	; 0x7b8 <__fp_splitA+0x20>
 7a0:	9f 3f       	cpi	r25, 0xFF	; 255
 7a2:	79 f0       	breq	.+30     	; 0x7c2 <__fp_splitA+0x2a>
 7a4:	87 95       	ror	r24
 7a6:	08 95       	ret
 7a8:	12 16       	cp	r1, r18
 7aa:	13 06       	cpc	r1, r19
 7ac:	14 06       	cpc	r1, r20
 7ae:	55 1f       	adc	r21, r21
 7b0:	f2 cf       	rjmp	.-28     	; 0x796 <__fp_split3+0xe>
 7b2:	46 95       	lsr	r20
 7b4:	f1 df       	rcall	.-30     	; 0x798 <__fp_splitA>
 7b6:	08 c0       	rjmp	.+16     	; 0x7c8 <__fp_splitA+0x30>
 7b8:	16 16       	cp	r1, r22
 7ba:	17 06       	cpc	r1, r23
 7bc:	18 06       	cpc	r1, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	f1 cf       	rjmp	.-30     	; 0x7a4 <__fp_splitA+0xc>
 7c2:	86 95       	lsr	r24
 7c4:	71 05       	cpc	r23, r1
 7c6:	61 05       	cpc	r22, r1
 7c8:	08 94       	sec
 7ca:	08 95       	ret

000007cc <__fp_zero>:
 7cc:	e8 94       	clt

000007ce <__fp_szero>:
 7ce:	bb 27       	eor	r27, r27
 7d0:	66 27       	eor	r22, r22
 7d2:	77 27       	eor	r23, r23
 7d4:	cb 01       	movw	r24, r22
 7d6:	97 f9       	bld	r25, 7
 7d8:	08 95       	ret

000007da <__mulsf3>:
 7da:	0b d0       	rcall	.+22     	; 0x7f2 <__mulsf3x>
 7dc:	c4 cf       	rjmp	.-120    	; 0x766 <__fp_round>
 7de:	b5 df       	rcall	.-150    	; 0x74a <__fp_pscA>
 7e0:	28 f0       	brcs	.+10     	; 0x7ec <__mulsf3+0x12>
 7e2:	ba df       	rcall	.-140    	; 0x758 <__fp_pscB>
 7e4:	18 f0       	brcs	.+6      	; 0x7ec <__mulsf3+0x12>
 7e6:	95 23       	and	r25, r21
 7e8:	09 f0       	breq	.+2      	; 0x7ec <__mulsf3+0x12>
 7ea:	a6 cf       	rjmp	.-180    	; 0x738 <__fp_inf>
 7ec:	ab cf       	rjmp	.-170    	; 0x744 <__fp_nan>
 7ee:	11 24       	eor	r1, r1
 7f0:	ee cf       	rjmp	.-36     	; 0x7ce <__fp_szero>

000007f2 <__mulsf3x>:
 7f2:	ca df       	rcall	.-108    	; 0x788 <__fp_split3>
 7f4:	a0 f3       	brcs	.-24     	; 0x7de <__mulsf3+0x4>

000007f6 <__mulsf3_pse>:
 7f6:	95 9f       	mul	r25, r21
 7f8:	d1 f3       	breq	.-12     	; 0x7ee <__mulsf3+0x14>
 7fa:	95 0f       	add	r25, r21
 7fc:	50 e0       	ldi	r21, 0x00	; 0
 7fe:	55 1f       	adc	r21, r21
 800:	62 9f       	mul	r22, r18
 802:	f0 01       	movw	r30, r0
 804:	72 9f       	mul	r23, r18
 806:	bb 27       	eor	r27, r27
 808:	f0 0d       	add	r31, r0
 80a:	b1 1d       	adc	r27, r1
 80c:	63 9f       	mul	r22, r19
 80e:	aa 27       	eor	r26, r26
 810:	f0 0d       	add	r31, r0
 812:	b1 1d       	adc	r27, r1
 814:	aa 1f       	adc	r26, r26
 816:	64 9f       	mul	r22, r20
 818:	66 27       	eor	r22, r22
 81a:	b0 0d       	add	r27, r0
 81c:	a1 1d       	adc	r26, r1
 81e:	66 1f       	adc	r22, r22
 820:	82 9f       	mul	r24, r18
 822:	22 27       	eor	r18, r18
 824:	b0 0d       	add	r27, r0
 826:	a1 1d       	adc	r26, r1
 828:	62 1f       	adc	r22, r18
 82a:	73 9f       	mul	r23, r19
 82c:	b0 0d       	add	r27, r0
 82e:	a1 1d       	adc	r26, r1
 830:	62 1f       	adc	r22, r18
 832:	83 9f       	mul	r24, r19
 834:	a0 0d       	add	r26, r0
 836:	61 1d       	adc	r22, r1
 838:	22 1f       	adc	r18, r18
 83a:	74 9f       	mul	r23, r20
 83c:	33 27       	eor	r19, r19
 83e:	a0 0d       	add	r26, r0
 840:	61 1d       	adc	r22, r1
 842:	23 1f       	adc	r18, r19
 844:	84 9f       	mul	r24, r20
 846:	60 0d       	add	r22, r0
 848:	21 1d       	adc	r18, r1
 84a:	82 2f       	mov	r24, r18
 84c:	76 2f       	mov	r23, r22
 84e:	6a 2f       	mov	r22, r26
 850:	11 24       	eor	r1, r1
 852:	9f 57       	subi	r25, 0x7F	; 127
 854:	50 40       	sbci	r21, 0x00	; 0
 856:	8a f0       	brmi	.+34     	; 0x87a <__mulsf3_pse+0x84>
 858:	e1 f0       	breq	.+56     	; 0x892 <__mulsf3_pse+0x9c>
 85a:	88 23       	and	r24, r24
 85c:	4a f0       	brmi	.+18     	; 0x870 <__mulsf3_pse+0x7a>
 85e:	ee 0f       	add	r30, r30
 860:	ff 1f       	adc	r31, r31
 862:	bb 1f       	adc	r27, r27
 864:	66 1f       	adc	r22, r22
 866:	77 1f       	adc	r23, r23
 868:	88 1f       	adc	r24, r24
 86a:	91 50       	subi	r25, 0x01	; 1
 86c:	50 40       	sbci	r21, 0x00	; 0
 86e:	a9 f7       	brne	.-22     	; 0x85a <__mulsf3_pse+0x64>
 870:	9e 3f       	cpi	r25, 0xFE	; 254
 872:	51 05       	cpc	r21, r1
 874:	70 f0       	brcs	.+28     	; 0x892 <__mulsf3_pse+0x9c>
 876:	60 cf       	rjmp	.-320    	; 0x738 <__fp_inf>
 878:	aa cf       	rjmp	.-172    	; 0x7ce <__fp_szero>
 87a:	5f 3f       	cpi	r21, 0xFF	; 255
 87c:	ec f3       	brlt	.-6      	; 0x878 <__mulsf3_pse+0x82>
 87e:	98 3e       	cpi	r25, 0xE8	; 232
 880:	dc f3       	brlt	.-10     	; 0x878 <__mulsf3_pse+0x82>
 882:	86 95       	lsr	r24
 884:	77 95       	ror	r23
 886:	67 95       	ror	r22
 888:	b7 95       	ror	r27
 88a:	f7 95       	ror	r31
 88c:	e7 95       	ror	r30
 88e:	9f 5f       	subi	r25, 0xFF	; 255
 890:	c1 f7       	brne	.-16     	; 0x882 <__mulsf3_pse+0x8c>
 892:	fe 2b       	or	r31, r30
 894:	88 0f       	add	r24, r24
 896:	91 1d       	adc	r25, r1
 898:	96 95       	lsr	r25
 89a:	87 95       	ror	r24
 89c:	97 f9       	bld	r25, 7
 89e:	08 95       	ret

000008a0 <__udivmodsi4>:
 8a0:	a1 e2       	ldi	r26, 0x21	; 33
 8a2:	1a 2e       	mov	r1, r26
 8a4:	aa 1b       	sub	r26, r26
 8a6:	bb 1b       	sub	r27, r27
 8a8:	fd 01       	movw	r30, r26
 8aa:	0d c0       	rjmp	.+26     	; 0x8c6 <__udivmodsi4_ep>

000008ac <__udivmodsi4_loop>:
 8ac:	aa 1f       	adc	r26, r26
 8ae:	bb 1f       	adc	r27, r27
 8b0:	ee 1f       	adc	r30, r30
 8b2:	ff 1f       	adc	r31, r31
 8b4:	a2 17       	cp	r26, r18
 8b6:	b3 07       	cpc	r27, r19
 8b8:	e4 07       	cpc	r30, r20
 8ba:	f5 07       	cpc	r31, r21
 8bc:	20 f0       	brcs	.+8      	; 0x8c6 <__udivmodsi4_ep>
 8be:	a2 1b       	sub	r26, r18
 8c0:	b3 0b       	sbc	r27, r19
 8c2:	e4 0b       	sbc	r30, r20
 8c4:	f5 0b       	sbc	r31, r21

000008c6 <__udivmodsi4_ep>:
 8c6:	66 1f       	adc	r22, r22
 8c8:	77 1f       	adc	r23, r23
 8ca:	88 1f       	adc	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	1a 94       	dec	r1
 8d0:	69 f7       	brne	.-38     	; 0x8ac <__udivmodsi4_loop>
 8d2:	60 95       	com	r22
 8d4:	70 95       	com	r23
 8d6:	80 95       	com	r24
 8d8:	90 95       	com	r25
 8da:	9b 01       	movw	r18, r22
 8dc:	ac 01       	movw	r20, r24
 8de:	bd 01       	movw	r22, r26
 8e0:	cf 01       	movw	r24, r30
 8e2:	08 95       	ret

000008e4 <__itoa_ncheck>:
 8e4:	bb 27       	eor	r27, r27
 8e6:	4a 30       	cpi	r20, 0x0A	; 10
 8e8:	31 f4       	brne	.+12     	; 0x8f6 <__itoa_ncheck+0x12>
 8ea:	99 23       	and	r25, r25
 8ec:	22 f4       	brpl	.+8      	; 0x8f6 <__itoa_ncheck+0x12>
 8ee:	bd e2       	ldi	r27, 0x2D	; 45
 8f0:	90 95       	com	r25
 8f2:	81 95       	neg	r24
 8f4:	9f 4f       	sbci	r25, 0xFF	; 255
 8f6:	01 c0       	rjmp	.+2      	; 0x8fa <__utoa_common>

000008f8 <__utoa_ncheck>:
 8f8:	bb 27       	eor	r27, r27

000008fa <__utoa_common>:
 8fa:	fb 01       	movw	r30, r22
 8fc:	55 27       	eor	r21, r21
 8fe:	aa 27       	eor	r26, r26
 900:	88 0f       	add	r24, r24
 902:	99 1f       	adc	r25, r25
 904:	aa 1f       	adc	r26, r26
 906:	a4 17       	cp	r26, r20
 908:	10 f0       	brcs	.+4      	; 0x90e <__utoa_common+0x14>
 90a:	a4 1b       	sub	r26, r20
 90c:	83 95       	inc	r24
 90e:	50 51       	subi	r21, 0x10	; 16
 910:	b9 f7       	brne	.-18     	; 0x900 <__utoa_common+0x6>
 912:	a0 5d       	subi	r26, 0xD0	; 208
 914:	aa 33       	cpi	r26, 0x3A	; 58
 916:	08 f0       	brcs	.+2      	; 0x91a <__utoa_common+0x20>
 918:	a9 5d       	subi	r26, 0xD9	; 217
 91a:	a1 93       	st	Z+, r26
 91c:	00 97       	sbiw	r24, 0x00	; 0
 91e:	79 f7       	brne	.-34     	; 0x8fe <__utoa_common+0x4>
 920:	b1 11       	cpse	r27, r1
 922:	b1 93       	st	Z+, r27
 924:	11 92       	st	Z+, r1
 926:	cb 01       	movw	r24, r22
 928:	00 c0       	rjmp	.+0      	; 0x92a <strrev>

0000092a <strrev>:
 92a:	dc 01       	movw	r26, r24
 92c:	fc 01       	movw	r30, r24
 92e:	67 2f       	mov	r22, r23
 930:	71 91       	ld	r23, Z+
 932:	77 23       	and	r23, r23
 934:	e1 f7       	brne	.-8      	; 0x92e <strrev+0x4>
 936:	32 97       	sbiw	r30, 0x02	; 2
 938:	04 c0       	rjmp	.+8      	; 0x942 <strrev+0x18>
 93a:	7c 91       	ld	r23, X
 93c:	6d 93       	st	X+, r22
 93e:	70 83       	st	Z, r23
 940:	62 91       	ld	r22, -Z
 942:	ae 17       	cp	r26, r30
 944:	bf 07       	cpc	r27, r31
 946:	c8 f3       	brcs	.-14     	; 0x93a <strrev+0x10>
 948:	08 95       	ret

0000094a <_exit>:
 94a:	f8 94       	cli

0000094c <__stop_program>:
 94c:	ff cf       	rjmp	.-2      	; 0x94c <__stop_program>
